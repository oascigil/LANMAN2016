!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACL_TYPE_PRIVATE	ndn-cxx/src/security/security-common.hpp	/^  ACL_TYPE_PRIVATE$/;"	e	enum:ndn::AclType
ACL_TYPE_PUBLIC	ndn-cxx/src/security/security-common.hpp	/^  ACL_TYPE_PUBLIC,$/;"	e	enum:ndn::AclType
ACTIVE_FACE_FETCH_INTERVAL	NFD/rib/rib-manager.cpp	/^const time::seconds RibManager::ACTIVE_FACE_FETCH_INTERVAL = time::seconds(300);$/;"	m	class:nfd::rib::RibManager	file:
ACTIVE_FACE_FETCH_INTERVAL	NFD/rib/rib-manager.hpp	/^  static const time::seconds ACTIVE_FACE_FETCH_INTERVAL;$/;"	m	class:nfd::rib::RibManager
ADDR_LEN	ndn-cxx/src/util/ethernet.hpp	/^const size_t ADDR_LEN     = 6;      \/\/\/< Octets in one Ethernet address$/;"	m	namespace:ndn::util::ethernet
ADD_NEXTHOP	NFD/rib/fib-update.hpp	/^    ADD_NEXTHOP    = 0,$/;"	e	enum:nfd::rib::FibUpdate::Action
ADD_NEXTHOP_VERB	NFD/tests/rib/rib-manager.t.cpp	/^  const Name::Component ADD_NEXTHOP_VERB;$/;"	m	class:nfd::rib::tests::RibManagerFixture	file:
ADJUST_PREDICT_DOWN_SHIFT	NFD/daemon/fw/ncc-strategy.hpp	/^    static const int ADJUST_PREDICT_DOWN_SHIFT = 7;$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
ADJUST_PREDICT_UP_SHIFT	NFD/daemon/fw/ncc-strategy.hpp	/^    static const int ADJUST_PREDICT_UP_SHIFT = 3;$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
AES_KEY_SIZES	ndn-cxx/src/security/key-params.cpp	/^static const uint32_t AES_KEY_SIZES[] = {64, 128, 256};$/;"	m	namespace:ndn	file:
AGGREGATE_STATS_POLICY_H_	utils/trie/aggregate-stats-policy.hpp	21;"	d
APPLICATION	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^        APPLICATION = 3,$/;"	e	enum:websocketpp::processor::hybi13::state
AcceptContinuation	ndn-cxx/src/mgmt/dispatcher.hpp	/^typedef std::function<void(const std::string& requester)> AcceptContinuation;$/;"	t	namespace:ndn::mgmt
AccessStrategy	NFD/daemon/fw/access-strategy.cpp	/^AccessStrategy::AccessStrategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::AccessStrategy
AccessStrategy	NFD/daemon/fw/access-strategy.hpp	/^class AccessStrategy : public Strategy$/;"	c	namespace:nfd::fw
AccumulatorType	ndn-cxx/tools/ndnsec/util.hpp	/^  AccumulatorType(T* store)$/;"	f	class:AccumulatorType
AccumulatorType	ndn-cxx/tools/ndnsec/util.hpp	/^class AccumulatorType : public boost::program_options::value_semantic$/;"	c
AckSeq	utils/ndn-rtt-estimator.cpp	/^RttEstimator::AckSeq(SequenceNumber32 ackSeq)$/;"	f	class:ns3::ndn::RttEstimator
AckSeq	utils/ndn-rtt-mean-deviation.cpp	/^RttMeanDeviation::AckSeq(SequenceNumber32 ackSeq)$/;"	f	class:ns3::ndn::RttMeanDeviation
AclType	ndn-cxx/src/security/security-common.hpp	/^enum AclType {$/;"	g	namespace:ndn
Action	NFD/rib/fib-update.hpp	/^  enum Action {$/;"	g	class:nfd::rib::FibUpdate
Action	NFD/rib/rib-update.hpp	/^  enum Action {$/;"	g	class:nfd::rib::RibUpdate
Add	helper/ndn-face-container.cpp	/^FaceContainer::Add(shared_ptr<Face> face)$/;"	f	class:ns3::ndn::FaceContainer
Add	model/cs/content-store-impl.hpp	/^ContentStoreImpl<Policy>::Add(shared_ptr<const Data> data)$/;"	f	class:ns3::ndn::cs::ContentStoreImpl
Add	model/cs/content-store-nocache.cpp	/^Nocache::Add(shared_ptr<const Data> data)$/;"	f	class:ns3::ndn::cs::Nocache
Add	model/cs/content-store-with-freshness.hpp	/^ContentStoreWithFreshness<Policy>::Add(shared_ptr<const Data> data)$/;"	f	class:ns3::ndn::cs::ContentStoreWithFreshness
Add	utils/batches.hpp	/^  Add(const Time& when, uint32_t amount)$/;"	f	class:ns3::Batches
AddAll	helper/ndn-face-container.cpp	/^FaceContainer::AddAll(Ptr<FaceContainer> other)$/;"	f	class:ns3::ndn::FaceContainer
AddAll	helper/ndn-face-container.cpp	/^FaceContainer::AddAll(const FaceContainer& other)$/;"	f	class:ns3::ndn::FaceContainer
AddBatch	apps/ndn-consumer-batches.cpp	/^ConsumerBatches::AddBatch(uint32_t amount)$/;"	f	class:ns3::ndn::ConsumerBatches
AddIncidency	model/ndn-global-router.cpp	/^GlobalRouter::AddIncidency(shared_ptr<Face> face, Ptr<GlobalRouter> gr)$/;"	f	class:ns3::ndn::GlobalRouter
AddLocalPrefix	model/ndn-global-router.cpp	/^GlobalRouter::AddLocalPrefix(shared_ptr<Name> prefix)$/;"	f	class:ns3::ndn::GlobalRouter
AddNetDeviceFaceCreateCallback	helper/ndn-stack-helper.cpp	/^StackHelper::AddNetDeviceFaceCreateCallback(TypeId netDeviceType,$/;"	f	class:ns3::ndn::StackHelper
AddNextHop	helper/ndn-fib-helper.cpp	/^FibHelper::AddNextHop(const ControlParameters& parameters, Ptr<Node> node)$/;"	f	class:ns3::ndn::FibHelper
AddOrigin	helper/ndn-global-routing-helper.cpp	/^GlobalRoutingHelper::AddOrigin(const std::string& prefix, Ptr<Node> node)$/;"	f	class:ns3::ndn::GlobalRoutingHelper
AddOrigin	helper/ndn-global-routing-helper.cpp	/^GlobalRoutingHelper::AddOrigin(const std::string& prefix, const std::string& nodeName)$/;"	f	class:ns3::ndn::GlobalRoutingHelper
AddOrigins	helper/ndn-global-routing-helper.cpp	/^GlobalRoutingHelper::AddOrigins(const std::string& prefix, const NodeContainer& nodes)$/;"	f	class:ns3::ndn::GlobalRoutingHelper
AddOriginsForAll	helper/ndn-global-routing-helper.cpp	/^GlobalRoutingHelper::AddOriginsForAll()$/;"	f	class:ns3::ndn::GlobalRoutingHelper
AddRoute	helper/ndn-fib-helper.cpp	/^FibHelper::AddRoute(Ptr<Node> node, const Name& prefix, Ptr<Node> otherNode, int32_t metric)$/;"	f	class:ns3::ndn::FibHelper
AddRoute	helper/ndn-fib-helper.cpp	/^FibHelper::AddRoute(Ptr<Node> node, const Name& prefix, shared_ptr<Face> face, int32_t metric)$/;"	f	class:ns3::ndn::FibHelper
AddRoute	helper/ndn-fib-helper.cpp	/^FibHelper::AddRoute(Ptr<Node> node, const Name& prefix, uint32_t faceId, int32_t metric)$/;"	f	class:ns3::ndn::FibHelper
AddRoute	helper/ndn-fib-helper.cpp	/^FibHelper::AddRoute(const std::string& nodeName, const Name& prefix, uint32_t faceId,$/;"	f	class:ns3::ndn::FibHelper
AddRoute	helper/ndn-fib-helper.cpp	/^FibHelper::AddRoute(const std::string& nodeName, const Name& prefix,$/;"	f	class:ns3::ndn::FibHelper
AddRouteFixture	tests/unit-tests/helper/ndn-fib-helper.t.cpp	/^  AddRouteFixture()$/;"	f	class:ns3::ndn::AddRouteFixture
AddRouteFixture	tests/unit-tests/helper/ndn-fib-helper.t.cpp	/^class AddRouteFixture : public ScenarioHelperWithCleanupFixture$/;"	c	namespace:ns3::ndn	file:
AdditionalDescription	ndn-cxx/src/encoding/tlv.hpp	/^  AdditionalDescription = 258,$/;"	e	enum:ndn::tlv::__anon9
AdditionalDescription	ndn-cxx/src/security/additional-description.cpp	/^AdditionalDescription::AdditionalDescription(const Block& block)$/;"	f	class:ndn::security::AdditionalDescription
AdditionalDescription	ndn-cxx/src/security/additional-description.hpp	/^class AdditionalDescription$/;"	c	namespace:ndn::security
Address	ndn-cxx/src/util/ethernet.cpp	/^Address::Address()$/;"	f	class:ndn::util::ethernet::Address
Address	ndn-cxx/src/util/ethernet.cpp	/^Address::Address(const uint8_t octets[])$/;"	f	class:ndn::util::ethernet::Address
Address	ndn-cxx/src/util/ethernet.cpp	/^Address::Address(uint8_t a1, uint8_t a2, uint8_t a3, uint8_t a4, uint8_t a5, uint8_t a6)$/;"	f	class:ndn::util::ethernet::Address
Address	ndn-cxx/src/util/ethernet.hpp	/^class Address : public std::array<uint8_t, ADDR_LEN>$/;"	c	namespace:ndn::util::ethernet
AddressSelector	ndn-cxx/src/util/dns.hpp	/^typedef function<bool (const boost::asio::ip::address& address)> AddressSelector;$/;"	t	namespace:ndn::dns
AesKeyParams	ndn-cxx/src/security/key-params.hpp	/^typedef SimpleSymmetricKeyParams<AesKeyParamsInfo> AesKeyParams;$/;"	t	namespace:ndn
AesKeyParamsInfo	ndn-cxx/src/security/key-params.hpp	/^class AesKeyParamsInfo$/;"	c	namespace:ndn
AllStrategiesFixture	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  AllStrategiesFixture()$/;"	f	class:nfd::tests::AllStrategiesFixture
AllStrategiesFixture	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^class AllStrategiesFixture : public StrategyChoiceManagerFixture$/;"	c	namespace:nfd::tests	file:
AnchorList	ndn-cxx/src/security/validator-config.hpp	/^  typedef std::map<Name, shared_ptr<IdentityCertificate> > AnchorList;$/;"	t	class:ndn::ValidatorConfig
AnnotatedTopologyReader	utils/topology/annotated-topology-reader.cpp	/^AnnotatedTopologyReader::AnnotatedTopologyReader(const std::string& path, double scale \/*=1.0*\/)$/;"	f	class:ns3::AnnotatedTopologyReader
AnnotatedTopologyReader	utils/topology/annotated-topology-reader.hpp	/^class AnnotatedTopologyReader : public TopologyReader {$/;"	c	namespace:ns3
Any	ndn-cxx/src/encoding/tlv.hpp	/^  Any           = 19,$/;"	e	enum:ndn::tlv::__anon8
AnyAddress	ndn-cxx/src/util/dns.hpp	/^struct AnyAddress$/;"	s	namespace:ndn::dns
AnyEntry	NFD/daemon/table/measurements.hpp	/^class AnyEntry$/;"	c	namespace:nfd::measurements
AnyEntry	NFD/daemon/table/name-tree.hpp	/^struct AnyEntry {$/;"	s	namespace:nfd::name_tree
AnyEntrySubTree	NFD/daemon/table/name-tree.hpp	/^struct AnyEntrySubTree {$/;"	s	namespace:nfd::name_tree
App	apps/ndn-app.cpp	/^App::App()$/;"	f	class:ns3::ndn::App
App	apps/ndn-app.hpp	/^class App : public Application {$/;"	c	namespace:ns3::ndn
AppDelayTracer	utils/tracers/ndn-app-delay-tracer.cpp	/^AppDelayTracer::AppDelayTracer(shared_ptr<std::ostream> os, Ptr<Node> node)$/;"	f	class:ns3::ndn::AppDelayTracer
AppDelayTracer	utils/tracers/ndn-app-delay-tracer.cpp	/^AppDelayTracer::AppDelayTracer(shared_ptr<std::ostream> os, const std::string& node)$/;"	f	class:ns3::ndn::AppDelayTracer
AppDelayTracer	utils/tracers/ndn-app-delay-tracer.hpp	/^class AppDelayTracer : public SimpleRefCount<AppDelayTracer> {$/;"	c	namespace:ns3::ndn
AppDelayTracerFixture	tests/unit-tests/utils/tracers/ndn-app-delay-tracer.t.cpp	/^  AppDelayTracerFixture()$/;"	f	class:ns3::ndn::AppDelayTracerFixture
AppDelayTracerFixture	tests/unit-tests/utils/tracers/ndn-app-delay-tracer.t.cpp	/^class AppDelayTracerFixture : public ScenarioHelperWithCleanupFixture$/;"	c	namespace:ns3::ndn	file:
AppFace	NFD/daemon/mgmt/app-face.hpp	/^class AppFace$/;"	c	namespace:nfd
AppFace	model/ndn-app-face.cpp	/^AppFace::AppFace(Ptr<App> app)$/;"	f	class:ns3::ndn::AppFace
AppFace	model/ndn-app-face.hpp	/^class AppFace : public nfd::LocalFace {$/;"	c	namespace:ns3::ndn
AppHelper	helper/ndn-app-helper.cpp	/^AppHelper::AppHelper(const std::string& app)$/;"	f	class:ns3::ndn::AppHelper
AppHelper	helper/ndn-app-helper.hpp	/^class AppHelper {$/;"	c	namespace:ns3::ndn
AppInfo	helper/ndn-scenario-helper.hpp	/^  struct AppInfo$/;"	s	class:ns3::ndn::ScenarioHelper
AppPrivateBlock1	ndn-cxx/src/encoding/tlv.hpp	/^  AppPrivateBlock1 = 128,$/;"	e	enum:ndn::tlv::__anon8
AppPrivateBlock2	ndn-cxx/src/encoding/tlv.hpp	/^  AppPrivateBlock2 = 32767$/;"	e	enum:ndn::tlv::__anon8
ApplyOspfMetric	utils/topology/annotated-topology-reader.cpp	/^AnnotatedTopologyReader::ApplyOspfMetric()$/;"	f	class:ns3::AnnotatedTopologyReader
ApplySettings	utils/topology/annotated-topology-reader.cpp	/^AnnotatedTopologyReader::ApplySettings()$/;"	f	class:ns3::AnnotatedTopologyReader
ArgumentError	ndn-cxx/src/management/nfd-control-command.hpp	/^    ArgumentError(const std::string& what)$/;"	f	class:ndn::nfd::ControlCommand::ArgumentError
ArgumentError	ndn-cxx/src/management/nfd-control-command.hpp	/^  class ArgumentError : public std::invalid_argument$/;"	c	class:ndn::nfd::ControlCommand
AssignClients	utils/topology/rocketfuel-map-reader.cpp	/^RocketfuelMapReader::AssignClients(uint32_t clientDegree, uint32_t gwDegree)$/;"	f	class:ns3::RocketfuelMapReader
AssignIpv4Addresses	utils/topology/annotated-topology-reader.cpp	/^AnnotatedTopologyReader::AssignIpv4Addresses(Ipv4Address base)$/;"	f	class:ns3::AnnotatedTopologyReader
Authorization	ndn-cxx/src/mgmt/dispatcher.hpp	/^                           RejectContinuation reject)> Authorization;$/;"	t	namespace:ndn::mgmt
AuthorizationAcceptedCallback	ndn-cxx/src/mgmt/dispatcher.hpp	/^                             const ControlParameters*)> AuthorizationAcceptedCallback;$/;"	t	class:ndn::mgmt::Dispatcher
AuthorizationRejectedCallback	ndn-cxx/src/mgmt/dispatcher.hpp	/^                             const Interest& interest)> AuthorizationRejectedCallback;$/;"	t	class:ndn::mgmt::Dispatcher
AuthorizedCommandFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  AuthorizedCommandFixture()$/;"	f	class:nfd::tests::AuthorizedCommandFixture
AuthorizedCommandFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^template <typename T> class AuthorizedCommandFixture : public CommandFixture<T>$/;"	c	namespace:nfd::tests	file:
AuthorizedCommandFixture	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  AuthorizedCommandFixture()$/;"	f	class:nfd::tests::AuthorizedCommandFixture
AuthorizedCommandFixture	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^class AuthorizedCommandFixture : public CommandFixture<T>$/;"	c	namespace:nfd::tests	file:
AuthorizedCommandFixture	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  AuthorizedCommandFixture()$/;"	f	class:nfd::tests::AuthorizedCommandFixture
AuthorizedCommandFixture	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^template <typename T> class AuthorizedCommandFixture : public CommandFixture<T>$/;"	c	namespace:nfd::tests	file:
AuthorizedRibManager	NFD/tests/rib/rib-manager.t.cpp	/^  AuthorizedRibManager()$/;"	f	class:nfd::rib::tests::AuthorizedRibManager
AuthorizedRibManager	NFD/tests/rib/rib-manager.t.cpp	/^class AuthorizedRibManager : public RibManagerFixture$/;"	c	namespace:nfd::rib::tests	file:
AutoregServer	NFD/tools/nfd-autoreg.cpp	/^  AutoregServer()$/;"	f	class:ndn::nfd_autoreg::AutoregServer
AutoregServer	NFD/tools/nfd-autoreg.cpp	/^class AutoregServer : boost::noncopyable$/;"	c	namespace:ndn::nfd_autoreg	file:
BACKBONE	utils/topology/rocketfuel-map-reader.hpp	/^  enum node_type_t { UNKNOWN = 0, CLIENT = 1, GATEWAY = 2, BACKBONE = 3 };$/;"	e	enum:ns3::RocketfuelMapReader::node_type_t
BAD_REQUEST	NFD/websocketpp/websocketpp/processors/base.hpp	/^    BAD_REQUEST = 0, \/\/ Error was the result of improperly formatted user input$/;"	e	enum:websocketpp::processor::error_cat::value
BASE_64	ndn-cxx/src/util/io.hpp	/^  BASE_64,$/;"	e	enum:ndn::io::IoEncoding
BASIC_HEADER_LENGTH	NFD/websocketpp/websocketpp/frame.hpp	/^static unsigned int const BASIC_HEADER_LENGTH = 2;$/;"	m	namespace:websocketpp::frame
BERDecodeTime	ndn-cxx/src/encoding/cryptopp/asn_ext.cpp	/^BERDecodeTime(CryptoPP::BufferedTransformation& bt,$/;"	f	namespace:ndn
BHB0_FIN	NFD/websocketpp/websocketpp/frame.hpp	/^static uint8_t const BHB0_FIN = 0x80;$/;"	m	namespace:websocketpp::frame
BHB0_OPCODE	NFD/websocketpp/websocketpp/frame.hpp	/^static uint8_t const BHB0_OPCODE = 0x0F;$/;"	m	namespace:websocketpp::frame
BHB0_RSV1	NFD/websocketpp/websocketpp/frame.hpp	/^static uint8_t const BHB0_RSV1 = 0x40;$/;"	m	namespace:websocketpp::frame
BHB0_RSV2	NFD/websocketpp/websocketpp/frame.hpp	/^static uint8_t const BHB0_RSV2 = 0x20;$/;"	m	namespace:websocketpp::frame
BHB0_RSV3	NFD/websocketpp/websocketpp/frame.hpp	/^static uint8_t const BHB0_RSV3 = 0x10;$/;"	m	namespace:websocketpp::frame
BHB1_MASK	NFD/websocketpp/websocketpp/frame.hpp	/^static uint8_t const BHB1_MASK = 0x80;$/;"	m	namespace:websocketpp::frame
BHB1_PAYLOAD	NFD/websocketpp/websocketpp/frame.hpp	/^static uint8_t const BHB1_PAYLOAD = 0x7F;$/;"	m	namespace:websocketpp::frame
BINARY	NFD/websocketpp/websocketpp/frame.hpp	/^        BINARY = 0x2,$/;"	e	enum:websocketpp::frame::opcode::value
BODY	NFD/websocketpp/websocketpp/http/response.hpp	/^        BODY = 2,$/;"	e	enum:websocketpp::http::parser::response::state
BOOST_AUTO_TEST_CASE	NFD/tests/core/algorithm.t.cpp	/^BOOST_AUTO_TEST_CASE(FindLastIf)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(OnConfigCoveredByPartialSubscribers)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(OnConfigFilename)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(OnConfigFilenameDryRun)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(OnConfigFilenameMalformed)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(OnConfigFilenameNoFile)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(OnConfigReplaceSubscriber)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(OnConfigSection)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(OnConfigStream)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(OnConfigStreamDryRun)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(OnConfigStreamEmptyStream)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(OnConfigString)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(OnConfigStringDryRun)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(OnConfigStringEmpty)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(OnConfigStringMalformed)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/global-io.t.cpp	/^BOOST_AUTO_TEST_CASE(ThreadLocalGlobalIoService)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/ndebug.t.cpp	/^BOOST_AUTO_TEST_CASE(AssertFalse)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/ndebug.t.cpp	/^BOOST_AUTO_TEST_CASE(SideEffect)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/network-interface.t.cpp	/^BOOST_AUTO_TEST_CASE(ListRealNetworkInterfaces)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/network.t.cpp	/^BOOST_AUTO_TEST_CASE(Comparisons)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/network.t.cpp	/^BOOST_AUTO_TEST_CASE(Empty)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/network.t.cpp	/^BOOST_AUTO_TEST_CASE(MaxRangeV4)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/network.t.cpp	/^BOOST_AUTO_TEST_CASE(MaxRangeV6)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/network.t.cpp	/^BOOST_AUTO_TEST_CASE(RangeV4)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/network.t.cpp	/^BOOST_AUTO_TEST_CASE(RangeV6)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/notification-stream.t.cpp	/^BOOST_AUTO_TEST_CASE(Post)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/privilege-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(DropRaise)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/random.t.cpp	/^BOOST_AUTO_TEST_CASE(ThreadLocalRandon)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/scheduler.t.cpp	/^BOOST_AUTO_TEST_CASE(CancelEmptyEvent)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/scheduler.t.cpp	/^BOOST_AUTO_TEST_CASE(ThreadLocalScheduler)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/version.t.cpp	/^BOOST_AUTO_TEST_CASE(Version)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/core/version.t.cpp	/^BOOST_AUTO_TEST_CASE(VersionString)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/ethernet.t.cpp	/^BOOST_AUTO_TEST_CASE(GetChannels)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/ethernet.t.cpp	/^BOOST_AUTO_TEST_CASE(MulticastFacesMap)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/ethernet.t.cpp	/^BOOST_AUTO_TEST_CASE(ProcessIncomingPacket)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/ethernet.t.cpp	/^BOOST_AUTO_TEST_CASE(SendPacket)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/ethernet.t.cpp	/^BOOST_AUTO_TEST_CASE(UnsupportedFaceCreate)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/face-counters.t.cpp	/^BOOST_AUTO_TEST_CASE(ByteCnt)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/face-counters.t.cpp	/^BOOST_AUTO_TEST_CASE(Counters)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/face-counters.t.cpp	/^BOOST_AUTO_TEST_CASE(PacketCnt)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/face.t.cpp	/^BOOST_AUTO_TEST_CASE(Description)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/face.t.cpp	/^BOOST_AUTO_TEST_CASE(FailTwice)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/face.t.cpp	/^BOOST_AUTO_TEST_CASE(LocalControlHeaderEnabled)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/ndnlp.t.cpp	/^BOOST_AUTO_TEST_CASE(SequenceBlock)$/;"	f	namespace:nfd::ndnlp::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/ndnlp.t.cpp	/^BOOST_AUTO_TEST_CASE(SequenceBlockWrap)$/;"	f	namespace:nfd::ndnlp::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/ndnlp.t.cpp	/^BOOST_AUTO_TEST_CASE(SequenceGenerator)$/;"	f	namespace:nfd::ndnlp::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/ndnlp.t.cpp	/^BOOST_AUTO_TEST_CASE(Slice1)$/;"	f	namespace:nfd::ndnlp::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/ndnlp.t.cpp	/^BOOST_AUTO_TEST_CASE(Slice4)$/;"	f	namespace:nfd::ndnlp::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/null-face.t.cpp	/^BOOST_AUTO_TEST_CASE(Send)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/packet-datasets.cpp	/^BOOST_AUTO_TEST_CASE(Corrupted)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/tcp.t.cpp	/^BOOST_AUTO_TEST_CASE(ChannelMap)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/tcp.t.cpp	/^BOOST_AUTO_TEST_CASE(GetChannels)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/udp.t.cpp	/^BOOST_AUTO_TEST_CASE(GetChannels)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/udp.t.cpp	/^BOOST_AUTO_TEST_CASE(UnsupportedFaceCreate)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/unix-stream.t.cpp	/^BOOST_AUTO_TEST_CASE(ChannelMap)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/unix-stream.t.cpp	/^BOOST_AUTO_TEST_CASE(GetChannels)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/unix-stream.t.cpp	/^BOOST_AUTO_TEST_CASE(UnsupportedFaceCreate)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/websocket.t.cpp	/^BOOST_AUTO_TEST_CASE(GetChannels)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/face/websocket.t.cpp	/^BOOST_AUTO_TEST_CASE(UnsupportedFaceCreate)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/best-route-strategy2.t.cpp	/^BOOST_AUTO_TEST_CASE(Forward)$/;"	f	namespace:nfd::fw::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/broadcast-strategy.t.cpp	/^BOOST_AUTO_TEST_CASE(Registry)$/;"	f	namespace:nfd::fw::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/broadcast-strategy.t.cpp	/^BOOST_AUTO_TEST_CASE(StrategyName)$/;"	f	namespace:nfd::fw::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/client-control-strategy.t.cpp	/^BOOST_AUTO_TEST_CASE(Forward3)$/;"	f	namespace:nfd::fw::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/face-table.t.cpp	/^BOOST_AUTO_TEST_CASE(AddRemove)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/face-table.t.cpp	/^BOOST_AUTO_TEST_CASE(AddReserved)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/face-table.t.cpp	/^BOOST_AUTO_TEST_CASE(Enumerate)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/forwarder.t.cpp	/^BOOST_AUTO_TEST_CASE(CsMatched)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/forwarder.t.cpp	/^BOOST_AUTO_TEST_CASE(IncomingData)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/forwarder.t.cpp	/^BOOST_AUTO_TEST_CASE(ScopeLocalhopOutgoing)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/forwarder.t.cpp	/^BOOST_AUTO_TEST_CASE(ScopeLocalhostIncoming)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/forwarder.t.cpp	/^BOOST_AUTO_TEST_CASE(ScopeLocalhostOutgoing)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/forwarder.t.cpp	/^BOOST_AUTO_TEST_CASE(SimpleExchange)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/forwarder.t.cpp	/^BOOST_AUTO_TEST_CASE(StrategyDispatch)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/multicast-strategy.t.cpp	/^BOOST_AUTO_TEST_CASE(Forward2)$/;"	f	namespace:nfd::fw::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/multicast-strategy.t.cpp	/^BOOST_AUTO_TEST_CASE(RejectLoopback)$/;"	f	namespace:nfd::fw::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/multicast-strategy.t.cpp	/^BOOST_AUTO_TEST_CASE(RejectScope)$/;"	f	namespace:nfd::fw::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/ncc-strategy.t.cpp	/^BOOST_AUTO_TEST_CASE(Bug1853)$/;"	f	namespace:nfd::fw::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/ncc-strategy.t.cpp	/^BOOST_AUTO_TEST_CASE(Bug1961)$/;"	f	namespace:nfd::fw::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/ncc-strategy.t.cpp	/^BOOST_AUTO_TEST_CASE(Bug1971)$/;"	f	namespace:nfd::fw::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/ncc-strategy.t.cpp	/^BOOST_AUTO_TEST_CASE(Bug1998)$/;"	f	namespace:nfd::fw::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/ncc-strategy.t.cpp	/^BOOST_AUTO_TEST_CASE(FavorRespondingUpstream)$/;"	f	namespace:nfd::fw::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/retx-suppression.t.cpp	/^BOOST_AUTO_TEST_CASE(Exponential)$/;"	f	namespace:nfd::fw::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/retx-suppression.t.cpp	/^BOOST_AUTO_TEST_CASE(Fixed)$/;"	f	namespace:nfd::fw::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/rtt-estimator.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/fw/strategy.t.cpp	/^BOOST_AUTO_TEST_CASE(FaceTableAccess)$/;"	f	namespace:nfd::fw::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/channel-status-publisher.t.cpp	/^BOOST_AUTO_TEST_CASE(DuplicateFactories)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/channel-status-publisher.t.cpp	/^BOOST_AUTO_TEST_CASE(Publish)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^BOOST_AUTO_TEST_CASE(InvalidCertfile)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^BOOST_AUTO_TEST_CASE(InvalidCertfileDryRun)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^BOOST_AUTO_TEST_CASE(MalformedCert)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^BOOST_AUTO_TEST_CASE(MalformedCertDryRun)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^BOOST_AUTO_TEST_CASE(NoAuthorizeSections)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^BOOST_AUTO_TEST_CASE(NoAuthorizeSectionsDryRun)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^BOOST_AUTO_TEST_CASE(NoCertfile)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^BOOST_AUTO_TEST_CASE(NoCertfileDryRun)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^BOOST_AUTO_TEST_CASE(NoPrivilegesSections)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(MalformedCommmand)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(ShortName)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionEther)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionEtherBadMcast)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionEtherBadMcastGroup)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionEtherDryRun)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionEtherMulticastReinit)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionEtherUnknownOption)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionTcp)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionTcpBadListen)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionTcpChannelsDisabled)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionTcpDryRun)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionTcpUnknownOption)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionUdp)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionUdpBadIdleTimeout)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionUdpBadMcast)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionUdpBadMcastGroup)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionUdpBadMcastGroupV6)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionUdpChannelsDisabled)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionUdpConflictingMcast)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionUdpDryRun)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionUdpMulticastReinit)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionUdpUnknownOption)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionUnix)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionUnixDryRun)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(TestProcessSectionUnixUnknownOption)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(UnsignedCommand)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-query-status-publisher.t.cpp	/^BOOST_AUTO_TEST_CASE(AllConditionFilter)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-query-status-publisher.t.cpp	/^BOOST_AUTO_TEST_CASE(LinkTypeFilter)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-query-status-publisher.t.cpp	/^BOOST_AUTO_TEST_CASE(LocalUriFilter)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-query-status-publisher.t.cpp	/^BOOST_AUTO_TEST_CASE(NoConditionFilter)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-query-status-publisher.t.cpp	/^BOOST_AUTO_TEST_CASE(PersistencyFilter)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-query-status-publisher.t.cpp	/^BOOST_AUTO_TEST_CASE(RemoteUriFilter)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-query-status-publisher.t.cpp	/^BOOST_AUTO_TEST_CASE(UriSchemeFilter)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/face-status-publisher.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodingDecoding)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-enumeration-publisher.t.cpp	/^BOOST_AUTO_TEST_CASE(TestFibEnumerationPublisher)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(AddNextHopVerbAddToExisting)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(AddNextHopVerbImplicitCost)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(AddNextHopVerbImplicitFaceId)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(AddNextHopVerbInitialAdd)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(AddNextHopVerbMissingPrefix)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(AddNextHopVerbUpdateFaceCost)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(BadOptionParse)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(MalformedCommmand)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(RemoveFaceNotFound)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(RemoveImplicitFaceId)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(RemoveMissingPrefix)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(RemoveNextHop)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(RemovePrefixNotFound)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(ShortName)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(UnknownFaceId)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(UnsignedCommand)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(UnsupportedVerb)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/general-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(DefaultConfig)$/;"	f	namespace:nfd::general::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/general-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(InvalidGroupConfig)$/;"	f	namespace:nfd::general::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/general-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(InvalidUserConfig)$/;"	f	namespace:nfd::general::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/general-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(NoGroupConfig)$/;"	f	namespace:nfd::general::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/general-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(NoUserConfig)$/;"	f	namespace:nfd::general::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/general-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(UserAndGroupConfig)$/;"	f	namespace:nfd::general::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^BOOST_AUTO_TEST_CASE(InterestGone)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^BOOST_AUTO_TEST_CASE(PutData)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^BOOST_AUTO_TEST_CASE(SendInterestHitBegin)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^BOOST_AUTO_TEST_CASE(SendInterestHitEnd)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^BOOST_AUTO_TEST_CASE(SendInterestHitExact)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^BOOST_AUTO_TEST_CASE(SendInterestHitPrevious)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/manager-base.t.cpp	/^BOOST_AUTO_TEST_CASE(SendResponse2Arg)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/manager-base.t.cpp	/^BOOST_AUTO_TEST_CASE(SendResponse3Arg)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/manager-base.t.cpp	/^BOOST_AUTO_TEST_CASE(SendResponse4Arg)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/manager-base.t.cpp	/^BOOST_AUTO_TEST_CASE(SetResponse)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/status-server.t.cpp	/^BOOST_AUTO_TEST_CASE(Status)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(BadOptionParse)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(Publish)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(SetStrategies)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(SetStrategiesMissingName)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(SetStrategiesMissingStrategy)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(SetStrategyLatestVersion)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(SetStrategySpecifiedVersion)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(SetUnsupportedStrategy)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(Unset)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(UnsetMissingName)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(UnsetRoot)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^BOOST_AUTO_TEST_CASE(UnsupportedVerb)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^BOOST_AUTO_TEST_CASE(Publish)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(ConfigStrategy)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(ConfigVersionedStrategy)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(ConfigureTablesWithDefaults)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(DuplicateStrategy)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(EmptyTablesSection)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(InvalidStrategy)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(InvalidValueCsMaxPackets)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(MissingStrategyPrefix)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(MissingTablesSection)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(MissingValueCsMaxPackets)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^BOOST_AUTO_TEST_CASE(ValidCsMaxPackets)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/cs.t.cpp	/^BOOST_AUTO_TEST_CASE(CachingPolicyNoCache)$/;"	f	namespace:nfd::cs::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/cs.t.cpp	/^BOOST_AUTO_TEST_CASE(DigestExclude)$/;"	f	namespace:nfd::cs::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/cs.t.cpp	/^BOOST_AUTO_TEST_CASE(DigestOrder)$/;"	f	namespace:nfd::cs::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/cs.t.cpp	/^BOOST_AUTO_TEST_CASE(EmptyDataName)$/;"	f	namespace:nfd::cs::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/cs.t.cpp	/^BOOST_AUTO_TEST_CASE(EmptyInterestName)$/;"	f	namespace:nfd::cs::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/cs.t.cpp	/^BOOST_AUTO_TEST_CASE(Enumeration)$/;"	f	namespace:nfd::cs::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/cs.t.cpp	/^BOOST_AUTO_TEST_CASE(ExactName)$/;"	f	namespace:nfd::cs::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/cs.t.cpp	/^BOOST_AUTO_TEST_CASE(FullName)$/;"	f	namespace:nfd::cs::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/cs.t.cpp	/^BOOST_AUTO_TEST_CASE(Leftmost)$/;"	f	namespace:nfd::cs::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/cs.t.cpp	/^BOOST_AUTO_TEST_CASE(MaxSuffixComponents)$/;"	f	namespace:nfd::cs::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/cs.t.cpp	/^BOOST_AUTO_TEST_CASE(MinSuffixComponents)$/;"	f	namespace:nfd::cs::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/cs.t.cpp	/^BOOST_AUTO_TEST_CASE(Rightmost)$/;"	f	namespace:nfd::cs::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^BOOST_AUTO_TEST_CASE(MinLifetime)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/fib.t.cpp	/^BOOST_AUTO_TEST_CASE(Entry)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/fib.t.cpp	/^BOOST_AUTO_TEST_CASE(Erase)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/fib.t.cpp	/^BOOST_AUTO_TEST_CASE(EraseNameTreeEntry)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/fib.t.cpp	/^BOOST_AUTO_TEST_CASE(FindExactMatch)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/fib.t.cpp	/^BOOST_AUTO_TEST_CASE(Insert_LongestPrefixMatch)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/fib.t.cpp	/^BOOST_AUTO_TEST_CASE(Iterator)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/fib.t.cpp	/^BOOST_AUTO_TEST_CASE(RemoveNextHopFromAllEntries)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/fib.t.cpp	/^BOOST_AUTO_TEST_CASE(RemoveNextHopFromManyEntries)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^BOOST_AUTO_TEST_CASE(FindExactMatch)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^BOOST_AUTO_TEST_CASE(FindLongestPrefixMatch)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^BOOST_AUTO_TEST_CASE(Get)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^BOOST_AUTO_TEST_CASE(GetParent)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/measurements.t.cpp	/^BOOST_AUTO_TEST_CASE(FindLongestPrefixMatch)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/measurements.t.cpp	/^BOOST_AUTO_TEST_CASE(FindLongestPrefixMatchWithPitEntry)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/measurements.t.cpp	/^BOOST_AUTO_TEST_CASE(Get_Parent)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/name-tree.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/name-tree.t.cpp	/^BOOST_AUTO_TEST_CASE(Empty)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/name-tree.t.cpp	/^BOOST_AUTO_TEST_CASE(Entry)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/name-tree.t.cpp	/^BOOST_AUTO_TEST_CASE(Example)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/name-tree.t.cpp	/^BOOST_AUTO_TEST_CASE(ExceptA)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/name-tree.t.cpp	/^BOOST_AUTO_TEST_CASE(Hash)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/name-tree.t.cpp	/^BOOST_AUTO_TEST_CASE(HashTableResizeShrink)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/name-tree.t.cpp	/^BOOST_AUTO_TEST_CASE(NoNameANoSubTreeAB)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/name-tree.t.cpp	/^BOOST_AUTO_TEST_CASE(NoNameANoSubTreeAC)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/name-tree.t.cpp	/^BOOST_AUTO_TEST_CASE(NoSubTreeA)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/name-tree.t.cpp	/^BOOST_AUTO_TEST_CASE(NotIn)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/name-tree.t.cpp	/^BOOST_AUTO_TEST_CASE(OnlyA)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/name-tree.t.cpp	/^BOOST_AUTO_TEST_CASE(SurvivedIteratorAfterErase)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/name-tree.t.cpp	/^BOOST_AUTO_TEST_CASE(SurvivedIteratorAfterLookup)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/pit.t.cpp	/^BOOST_AUTO_TEST_CASE(EntryCanForwardTo)$/;"	f	namespace:nfd::pit::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/pit.t.cpp	/^BOOST_AUTO_TEST_CASE(EntryInOutRecords)$/;"	f	namespace:nfd::pit::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/pit.t.cpp	/^BOOST_AUTO_TEST_CASE(EntryLifetime)$/;"	f	namespace:nfd::pit::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/pit.t.cpp	/^BOOST_AUTO_TEST_CASE(EntryNonce)$/;"	f	namespace:nfd::pit::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/pit.t.cpp	/^BOOST_AUTO_TEST_CASE(Erase)$/;"	f	namespace:nfd::pit::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/pit.t.cpp	/^BOOST_AUTO_TEST_CASE(EraseNameTreeEntry)$/;"	f	namespace:nfd::pit::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/pit.t.cpp	/^BOOST_AUTO_TEST_CASE(FindAllDataMatches)$/;"	f	namespace:nfd::pit::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/pit.t.cpp	/^BOOST_AUTO_TEST_CASE(Insert)$/;"	f	namespace:nfd::pit::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/pit.t.cpp	/^BOOST_AUTO_TEST_CASE(Iterator)$/;"	f	namespace:nfd::pit::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/strategy-choice.t.cpp	/^BOOST_AUTO_TEST_CASE(ClearStrategyInfo)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/strategy-choice.t.cpp	/^BOOST_AUTO_TEST_CASE(Effective)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/strategy-choice.t.cpp	/^BOOST_AUTO_TEST_CASE(Enumerate)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/strategy-choice.t.cpp	/^BOOST_AUTO_TEST_CASE(EraseNameTreeEntry)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/strategy-choice.t.cpp	/^BOOST_AUTO_TEST_CASE(Get)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/strategy-choice.t.cpp	/^BOOST_AUTO_TEST_CASE(Versioning)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/strategy-info-host.t.cpp	/^BOOST_AUTO_TEST_CASE(Create)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/strategy-info-host.t.cpp	/^BOOST_AUTO_TEST_CASE(SetGetClear)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/daemon/table/strategy-info-host.t.cpp	/^BOOST_AUTO_TEST_CASE(Types)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/other/cs-benchmark.cpp	/^BOOST_AUTO_TEST_CASE(FindMissInsert)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/other/cs-benchmark.cpp	/^BOOST_AUTO_TEST_CASE(InsertFindHit)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/other/cs-benchmark.cpp	/^BOOST_AUTO_TEST_CASE(Leftmost)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/other/cs-benchmark.cpp	/^BOOST_AUTO_TEST_CASE(Rightmost)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^BOOST_AUTO_TEST_CASE(BothFlags_CaptureChange_NoCaptureOnRoute)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^BOOST_AUTO_TEST_CASE(BothFlags_NoCaptureChange_CaptureOnRoute)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^BOOST_AUTO_TEST_CASE(Capture_CaptureChange_NoCaptureOnRoute)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^BOOST_AUTO_TEST_CASE(Capture_NoCaptureChange_CaptureOnRoute)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^BOOST_AUTO_TEST_CASE(ChildInherit_NoCaptureChange_CaptureOnRoute)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^BOOST_AUTO_TEST_CASE(ChildInherit_NoCaptureChange_NoCaptureOnRoute)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^BOOST_AUTO_TEST_CASE(EraseFaceById)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^BOOST_AUTO_TEST_CASE(MakeRibEmpty)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^BOOST_AUTO_TEST_CASE(MultipleFaces)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^BOOST_AUTO_TEST_CASE(NoFlags_NoCaptureChange_CaptureOnRoute)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^BOOST_AUTO_TEST_CASE(NoFlags_NoCaptureChange_NoCaptureOnRoute)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^BOOST_AUTO_TEST_CASE(RemoveNamespaceWithAncestorFace) \/\/ Bug #2757$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^BOOST_AUTO_TEST_CASE(WithInheritedFace)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^BOOST_AUTO_TEST_CASE(WithInheritedFace_Root)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-new-face.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-new-face.t.cpp	/^BOOST_AUTO_TEST_CASE(CaptureTurnedOnWithChildInherit)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-new-face.t.cpp	/^BOOST_AUTO_TEST_CASE(CaptureTurnedOnWithoutChildInherit)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-new-face.t.cpp	/^BOOST_AUTO_TEST_CASE(NoCaptureChangeWithChildInherit)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-new-face.t.cpp	/^BOOST_AUTO_TEST_CASE(NoCaptureChangeWithoutChildInherit)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-new-face.t.cpp	/^BOOST_AUTO_TEST_CASE(UpdateOnLowerCostNoChildInherit)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-new-face.t.cpp	/^BOOST_AUTO_TEST_CASE(UpdateOnLowerCostOnly)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-new-namespace.t.cpp	/^BOOST_AUTO_TEST_CASE(BothFlags)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-new-namespace.t.cpp	/^BOOST_AUTO_TEST_CASE(Capture)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-new-namespace.t.cpp	/^BOOST_AUTO_TEST_CASE(ChildInherit)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-new-namespace.t.cpp	/^BOOST_AUTO_TEST_CASE(NoFlags)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-update-face.t.cpp	/^BOOST_AUTO_TEST_CASE(ChangeCost)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-update-face.t.cpp	/^BOOST_AUTO_TEST_CASE(NoChangeInCost)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-update-face.t.cpp	/^BOOST_AUTO_TEST_CASE(TurnOffCapture)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-update-face.t.cpp	/^BOOST_AUTO_TEST_CASE(TurnOffChildInherit)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-update-face.t.cpp	/^BOOST_AUTO_TEST_CASE(TurnOffChildInheritLowerCost)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-update-face.t.cpp	/^BOOST_AUTO_TEST_CASE(TurnOnCapture)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-update-face.t.cpp	/^BOOST_AUTO_TEST_CASE(TurnOnChildInherit)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/fib-updates-update-face.t.cpp	/^BOOST_AUTO_TEST_CASE(UpdateOnLowerCostOnly)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/rib-status-publisher.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/rib-update.cpp	/^BOOST_AUTO_TEST_CASE(BatchBasic)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/rib.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/rib.t.cpp	/^BOOST_AUTO_TEST_CASE(Children)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/rib.t.cpp	/^BOOST_AUTO_TEST_CASE(EraseFace)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/rib.t.cpp	/^BOOST_AUTO_TEST_CASE(EraseRibEntry)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/rib.t.cpp	/^BOOST_AUTO_TEST_CASE(Parent)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/tests/rib/rib.t.cpp	/^BOOST_AUTO_TEST_CASE(RibEntry)$/;"	f	namespace:nfd::rib::tests
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/connection/connection.cpp	/^BOOST_AUTO_TEST_CASE( basic_client_websocket ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/connection/connection.cpp	/^BOOST_AUTO_TEST_CASE( basic_http_request ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/connection/connection.cpp	/^BOOST_AUTO_TEST_CASE( basic_websocket_request ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/connection/connection.cpp	/^BOOST_AUTO_TEST_CASE( client_handshake_timeout_race1 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/connection/connection.cpp	/^BOOST_AUTO_TEST_CASE( client_handshake_timeout_race2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/connection/connection.cpp	/^BOOST_AUTO_TEST_CASE( connection_extensions ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/connection/connection.cpp	/^BOOST_AUTO_TEST_CASE( http_request ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/connection/connection.cpp	/^BOOST_AUTO_TEST_CASE( request_no_server_header ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/connection/connection.cpp	/^BOOST_AUTO_TEST_CASE( request_no_server_header_override ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/connection/connection.cpp	/^BOOST_AUTO_TEST_CASE( server_handshake_timeout_race1 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/connection/connection.cpp	/^BOOST_AUTO_TEST_CASE( server_handshake_timeout_race2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/connection/connection.cpp	/^BOOST_AUTO_TEST_CASE( set_max_message_size ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/connection/connection.cpp	/^BOOST_AUTO_TEST_CASE( websocket_fail_invalid_version ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/connection/connection.cpp	/^BOOST_AUTO_TEST_CASE( websocket_fail_parse_error ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/connection/connection.cpp	/^BOOST_AUTO_TEST_CASE( websocket_fail_unsupported_version ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/connection/connection.cpp	/^BOOST_AUTO_TEST_CASE( websocket_fail_upgrade_required ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/endpoint/endpoint.cpp	/^BOOST_AUTO_TEST_CASE( construct_server_asio_plain ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/endpoint/endpoint.cpp	/^BOOST_AUTO_TEST_CASE( construct_server_asio_tls ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/endpoint/endpoint.cpp	/^BOOST_AUTO_TEST_CASE( construct_server_iostream ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/endpoint/endpoint.cpp	/^BOOST_AUTO_TEST_CASE( endpoint_extensions ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/endpoint/endpoint.cpp	/^BOOST_AUTO_TEST_CASE( initialize_server_asio ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/endpoint/endpoint.cpp	/^BOOST_AUTO_TEST_CASE( initialize_server_asio_external ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/endpoint/endpoint.cpp	/^BOOST_AUTO_TEST_CASE( listen_after_listen_failure ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/extension.cpp	/^BOOST_AUTO_TEST_CASE( blank ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( disabled_is_disabled ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( disabled_is_off ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( enabled_is_enabled ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( enabled_starts_disabled ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( invalid_set_c2s_max_window_bits ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( invalid_set_s2c_max_window_bits ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_c2s_max_window_bits_accept ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_c2s_max_window_bits_decline ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_c2s_max_window_bits_invalid ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_c2s_max_window_bits_largest ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_c2s_max_window_bits_smallest ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_c2s_max_window_bits_valid ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_c2s_no_context_takeover ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_c2s_no_context_takeover_invalid ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_c2s_no_context_takeover_server_initiated ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_four_client_initiated ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_s2c_max_window_bits_accept ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_s2c_max_window_bits_decline ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_s2c_max_window_bits_invalid ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_s2c_max_window_bits_largest ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_s2c_max_window_bits_smallest ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_s2c_max_window_bits_valid ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_s2c_no_context_takeover ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_s2c_no_context_takeover_invalid ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_s2c_no_context_takeover_server_initiated ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_three_client_initiated1 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_three_client_initiated2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_three_client_initiated3 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_three_client_initiated4 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_two_client_initiated1 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_two_client_initiated2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_two_client_initiated3 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_two_client_initiated4 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_two_client_initiated5 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiate_two_client_initiated6 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiation_empty_attr ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^BOOST_AUTO_TEST_CASE( negotiation_invalid_attr ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( bad_header_name ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( bad_method ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( bad_request_no_host ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( basic_request ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( basic_request_with_body ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( basic_request_with_body_split ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( basic_split1 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( basic_split2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( blank_consume ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( blank_request ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( case_insensitive_headers ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( case_insensitive_headers_overwrite ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( extract_all_lws ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( extract_attributes_blank ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( extract_attributes_simple ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( extract_parameters ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( extract_quoted_string ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( extract_token ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( firefox_full_request ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( header_aggregation ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( header_whitespace1 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( header_whitespace2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( is_token_char ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( max_body_len ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( max_header_len ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( max_header_len_split ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( new_http_version1 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( new_http_version2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( old_http_version ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( parse_istream ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( plain_http_response ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( response_with_non_standard_lws ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( strip_lws ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( trailing_body_characters ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( trailing_body_characters_beyond_max_lenth ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( wikipedia_example_response ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( wikipedia_example_response_trailing ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( wikipedia_example_response_trailing_large ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( write_request_basic ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( write_request_with_body ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/http/parser.cpp	/^BOOST_AUTO_TEST_CASE( write_request_with_header ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/logger/basic.cpp	/^BOOST_AUTO_TEST_CASE( access_clear ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/logger/basic.cpp	/^BOOST_AUTO_TEST_CASE( basic_concurrency ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/logger/basic.cpp	/^BOOST_AUTO_TEST_CASE( is_token_char ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/message_buffer/alloc.cpp	/^BOOST_AUTO_TEST_CASE( basic_get_manager ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/message_buffer/alloc.cpp	/^BOOST_AUTO_TEST_CASE( basic_get_message ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/message_buffer/message.cpp	/^BOOST_AUTO_TEST_CASE( basic_size_check ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/message_buffer/message.cpp	/^BOOST_AUTO_TEST_CASE( recycle ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/message_buffer/pool.cpp	/^BOOST_AUTO_TEST_CASE( bad_host ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/message_buffer/pool.cpp	/^BOOST_AUTO_TEST_CASE( exact_match ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/message_buffer/pool.cpp	/^BOOST_AUTO_TEST_CASE( missing_handshake_key1 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/message_buffer/pool.cpp	/^BOOST_AUTO_TEST_CASE( missing_handshake_key2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/message_buffer/pool.cpp	/^BOOST_AUTO_TEST_CASE( non_get_method ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/message_buffer/pool.cpp	/^BOOST_AUTO_TEST_CASE( old_http_version ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/extension_permessage_compress.cpp	/^BOOST_AUTO_TEST_CASE( deflate_init ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi00.cpp	/^BOOST_AUTO_TEST_CASE( bad_host ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi00.cpp	/^BOOST_AUTO_TEST_CASE( empty_consume ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi00.cpp	/^BOOST_AUTO_TEST_CASE( empty_frame ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi00.cpp	/^BOOST_AUTO_TEST_CASE( exact_match ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi00.cpp	/^BOOST_AUTO_TEST_CASE( extract_subprotocols ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi00.cpp	/^BOOST_AUTO_TEST_CASE( missing_handshake_key1 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi00.cpp	/^BOOST_AUTO_TEST_CASE( missing_handshake_key2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi00.cpp	/^BOOST_AUTO_TEST_CASE( non_get_method ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi00.cpp	/^BOOST_AUTO_TEST_CASE( old_http_version ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi00.cpp	/^BOOST_AUTO_TEST_CASE( prepare_data_frame ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi00.cpp	/^BOOST_AUTO_TEST_CASE( prepare_data_frame_null ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi00.cpp	/^BOOST_AUTO_TEST_CASE( short_frame ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi07.cpp	/^BOOST_AUTO_TEST_CASE( bad_host ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi07.cpp	/^BOOST_AUTO_TEST_CASE( exact_match ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi07.cpp	/^BOOST_AUTO_TEST_CASE( missing_handshake_key1 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi07.cpp	/^BOOST_AUTO_TEST_CASE( missing_handshake_key2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi07.cpp	/^BOOST_AUTO_TEST_CASE( non_get_method ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi07.cpp	/^BOOST_AUTO_TEST_CASE( old_http_version ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi08.cpp	/^BOOST_AUTO_TEST_CASE( bad_host ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi08.cpp	/^BOOST_AUTO_TEST_CASE( exact_match ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi08.cpp	/^BOOST_AUTO_TEST_CASE( missing_handshake_key1 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi08.cpp	/^BOOST_AUTO_TEST_CASE( missing_handshake_key2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi08.cpp	/^BOOST_AUTO_TEST_CASE( non_get_method ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi08.cpp	/^BOOST_AUTO_TEST_CASE( old_http_version ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( bad_host ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( client_handshake_request ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( client_handshake_response ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( client_handshake_response_404 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( client_handshake_response_no_accept ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( client_handshake_response_no_connection ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( client_handshake_response_no_upgrade ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( control_frame_too_large ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( exact_match ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( extension_negotiation_blank ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( extension_negotiation_permessage_deflate ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( extension_negotiation_unknown ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( extensions_disabled ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( extract_subprotocols_empty ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( extract_subprotocols_invalid) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( extract_subprotocols_multiple ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( extract_subprotocols_one ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( fragmented_binary_message ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( fragmented_control_message ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( frame_empty_binary_unmasked ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( frame_extended_binary_unmasked ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( frame_jumbo_binary_unmasked ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( frame_small_binary_masked ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( frame_small_binary_unmasked ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( masked_fragmented_binary_message ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( masked_server_frame ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( missing_handshake_key1 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( missing_handshake_key2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( multiple_frame_message_too_large ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( non_get_method ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( old_http_version ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( prepare_data_frame ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( reserved_opcode_used ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( rsv_bits_used ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( single_frame_message_too_large ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/hybi13.cpp	/^BOOST_AUTO_TEST_CASE( unmasked_client_frame ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/processor.cpp	/^BOOST_AUTO_TEST_CASE( ci_exact_match ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/processor.cpp	/^BOOST_AUTO_TEST_CASE( exact_match ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/processor.cpp	/^BOOST_AUTO_TEST_CASE( non_exact_match1 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/processor.cpp	/^BOOST_AUTO_TEST_CASE( non_exact_match2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/processor.cpp	/^BOOST_AUTO_TEST_CASE( non_match ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/processor.cpp	/^BOOST_AUTO_TEST_CASE( version_13 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/processor.cpp	/^BOOST_AUTO_TEST_CASE( version_7 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/processor.cpp	/^BOOST_AUTO_TEST_CASE( version_8 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/processor.cpp	/^BOOST_AUTO_TEST_CASE( version_blank ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/processors/processor.cpp	/^BOOST_AUTO_TEST_CASE( version_non_numeric ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/random/none.cpp	/^BOOST_AUTO_TEST_CASE( does_it_compile ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/random/random_device.cpp	/^BOOST_AUTO_TEST_CASE( compiles ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/roles/client.cpp	/^BOOST_AUTO_TEST_CASE( add_subprotocols ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/roles/client.cpp	/^BOOST_AUTO_TEST_CASE( add_subprotocols_invalid ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/roles/client.cpp	/^BOOST_AUTO_TEST_CASE( connect_con ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/roles/client.cpp	/^BOOST_AUTO_TEST_CASE( get_connection ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/roles/client.cpp	/^BOOST_AUTO_TEST_CASE( invalid_uri ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/roles/client.cpp	/^BOOST_AUTO_TEST_CASE( select_subprotocol ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/roles/client.cpp	/^BOOST_AUTO_TEST_CASE( unsecure_endpoint ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/roles/server.cpp	/^BOOST_AUTO_TEST_CASE( accept_subprotocol_invalid ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/roles/server.cpp	/^BOOST_AUTO_TEST_CASE( accept_subprotocol_one ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/roles/server.cpp	/^BOOST_AUTO_TEST_CASE( accept_subprotocol_two ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/roles/server.cpp	/^BOOST_AUTO_TEST_CASE( basic_websocket_request ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/roles/server.cpp	/^BOOST_AUTO_TEST_CASE( invalid_websocket_version ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/roles/server.cpp	/^BOOST_AUTO_TEST_CASE( list_subprotocol_empty ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/roles/server.cpp	/^BOOST_AUTO_TEST_CASE( list_subprotocol_one ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/roles/server.cpp	/^BOOST_AUTO_TEST_CASE( unimplemented_websocket_version ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/asio/base.cpp	/^BOOST_AUTO_TEST_CASE( asio_error ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/asio/base.cpp	/^BOOST_AUTO_TEST_CASE( blank_error ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/asio/timers.cpp	/^BOOST_AUTO_TEST_CASE( tls_handshake_timeout ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/hybi_util.cpp	/^BOOST_AUTO_TEST_CASE( circshift_0 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/hybi_util.cpp	/^BOOST_AUTO_TEST_CASE( circshift_1 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/hybi_util.cpp	/^BOOST_AUTO_TEST_CASE( circshift_2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/hybi_util.cpp	/^BOOST_AUTO_TEST_CASE( circshift_3 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/integration.cpp	/^BOOST_AUTO_TEST_CASE( client_failed_connection ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/integration.cpp	/^BOOST_AUTO_TEST_CASE( client_is_perpetual ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/integration.cpp	/^BOOST_AUTO_TEST_CASE( client_open_handshake_timeout ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/integration.cpp	/^BOOST_AUTO_TEST_CASE( client_peer_initiated_close_handshake_timeout ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/integration.cpp	/^BOOST_AUTO_TEST_CASE( client_runs_out_of_work ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/integration.cpp	/^BOOST_AUTO_TEST_CASE( client_self_initiated_close_handshake_timeout ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/integration.cpp	/^BOOST_AUTO_TEST_CASE( pause_reading ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/integration.cpp	/^BOOST_AUTO_TEST_CASE( pong_no_timeout ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/integration.cpp	/^BOOST_AUTO_TEST_CASE( pong_timeout ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/integration.cpp	/^BOOST_AUTO_TEST_CASE( server_connection_cleanup ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/integration.cpp	/^BOOST_AUTO_TEST_CASE( server_open_handshake_timeout ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/integration.cpp	/^BOOST_AUTO_TEST_CASE( server_self_initiated_close_handshake_timeout ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/integration.cpp	/^BOOST_AUTO_TEST_CASE( stop_listening ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/base.cpp	/^BOOST_AUTO_TEST_CASE( placeholder ) {}$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( async_read_at_least ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( async_read_at_least2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( async_read_at_least_double_read ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( async_read_at_least_read_all ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( async_read_at_least_read_some ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( async_read_at_least_read_some_indef ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( async_read_at_least_too_much ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( async_write_handler ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( async_write_handler_error ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( async_write_ostream ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( async_write_vector_0_ostream ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( async_write_vector_0_write_handler ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( async_write_vector_1_ostream ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( async_write_vector_1_write_handler ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( async_write_vector_2_ostream ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( async_write_vector_2_write_handler ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( const_methods ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( eof_flag ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( fatal_error_flag ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( set_timer ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( shared_pointer_memory_cleanup ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( shutdown ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( shutdown_handler ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/connection.cpp	/^BOOST_AUTO_TEST_CASE( write_before_output_method_set ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/transport/iostream/endpoint.cpp	/^BOOST_AUTO_TEST_CASE( placeholder ) {}$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/close.cpp	/^BOOST_AUTO_TEST_CASE( extract_empty ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/close.cpp	/^BOOST_AUTO_TEST_CASE( extract_reason ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/close.cpp	/^BOOST_AUTO_TEST_CASE( extract_short ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/close.cpp	/^BOOST_AUTO_TEST_CASE( invalid_values ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/close.cpp	/^BOOST_AUTO_TEST_CASE( reserved_values ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/close.cpp	/^BOOST_AUTO_TEST_CASE( value_extraction ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/error.cpp	/^BOOST_AUTO_TEST_CASE( constructing_exceptions ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( basic_bits ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( basic_constructors ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( basic_header_length ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( basic_opcode ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( basic_size ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( block_byte_mask ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( block_byte_mask_inplace ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( block_word_mask ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( block_word_mask_inplace ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( circshift ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( continuous_byte_mask ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( continuous_byte_mask_inplace ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( continuous_word_mask ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( continuous_word_mask2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( continuous_word_mask_inplace ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( extended_header_basics ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( extended_header_extractors ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( header_preparation ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( prepare_masking_key ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/frame.cpp	/^BOOST_AUTO_TEST_CASE( prepare_masking_key2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/sha1.cpp	/^BOOST_AUTO_TEST_CASE( sha1_test_a ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/sha1.cpp	/^BOOST_AUTO_TEST_CASE( sha1_test_b ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/sha1.cpp	/^BOOST_AUTO_TEST_CASE( sha1_test_c ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_http_scheme ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_invalid_bad_v6_literal_1 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_invalid_bad_v6_literal_2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_invalid_fragment ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_invalid_gt_16_bit_port ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_invalid_long_port ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_invalid_method_separator ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_invalid_no_scheme ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_invalid_scheme ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_valid ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_valid_2 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_valid_3 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_valid_4 ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_valid_ipv4_literal ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_valid_ipv6_literal ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_valid_no_port_secure ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_valid_no_port_unsecure ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_valid_no_resource ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_valid_v4_mapped ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/uri.cpp	/^BOOST_AUTO_TEST_CASE( uri_valid_v6_mixed_case ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/utilities.cpp	/^BOOST_AUTO_TEST_CASE( string_replace_all ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/utilities.cpp	/^BOOST_AUTO_TEST_CASE( substr_found ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/utilities.cpp	/^BOOST_AUTO_TEST_CASE( substr_found_ci ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/utilities.cpp	/^BOOST_AUTO_TEST_CASE( substr_not_found ) {$/;"	f
BOOST_AUTO_TEST_CASE	NFD/websocketpp/test/utility/utilities.cpp	/^BOOST_AUTO_TEST_CASE( to_lower ) {$/;"	f
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(SetFilter)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(SetRegexFilter)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(SetRegexFilterButNoRegister)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(SetRegexFilterError)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(SetTwoFilters)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(ShutdownWhileSendInProgress) \/\/ Bug #3136$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(Tcp)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/integrated/face.cpp	/^BOOST_AUTO_TEST_CASE(Unix)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/integrated/network-monitor.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/data.t.cpp	/^BOOST_AUTO_TEST_CASE(DataEqualityChecks)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/data.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeWithLocalHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/data.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeWithoutLocalHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/data.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodeWithLocalHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/data.t.cpp	/^BOOST_AUTO_TEST_CASE(SignatureEqualityChecks)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(Data)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(Empty)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(Nested)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(NonNegativeInteger)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(String)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(BlockFromBlock)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(BlockFromBlockCopyOnWriteModifyCopy)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(BlockFromBlockCopyOnWriteModifyOrig)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(BlockToBuffer)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodingBufferToBlock)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(Equality)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(EraseRange)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(EraseSingleElement)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(FromBuffer)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(FromStream)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(FromStreamWhitespace) \/\/ Bug 2728$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(FromStreamZeroLength) \/\/ Bug 2729$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(InsertBeginning)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(InsertEnd)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(InsertMiddle)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(NonNegativeNumberEightBytes)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(NonNegativeNumberFourBytes1)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(NonNegativeNumberFourBytes2)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(NonNegativeNumberOneByte1)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(NonNegativeNumberOneByte2)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(NonNegativeNumberTwoBytes1)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(NonNegativeNumberTwoBytes2)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(Remove)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(VarNumberFiveBytes1)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(VarNumberFiveBytes2)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(VarNumberNineBytes)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(VarNumberOneByte1)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(VarNumberOneByte2)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(VarNumberThreeBytes1)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^BOOST_AUTO_TEST_CASE(VarNumberThreeBytes2)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/encoder.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/encoder.t.cpp	/^BOOST_AUTO_TEST_CASE(Reserve)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/encoder.t.cpp	/^BOOST_AUTO_TEST_CASE(Tlv)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/estimator.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/estimator.t.cpp	/^BOOST_AUTO_TEST_CASE(Tlv)$/;"	f	namespace:ndn::encoding::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/tlv.t.cpp	/^BOOST_AUTO_TEST_CASE(Exception)$/;"	f	namespace:ndn::tlv::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/tlv.t.cpp	/^BOOST_AUTO_TEST_CASE(ReadFromBuffer)$/;"	f	namespace:ndn::tlv::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/tlv.t.cpp	/^BOOST_AUTO_TEST_CASE(ReadFromStream)$/;"	f	namespace:ndn::tlv::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/tlv.t.cpp	/^BOOST_AUTO_TEST_CASE(SizeOf)$/;"	f	namespace:ndn::tlv::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/encoding/tlv.t.cpp	/^BOOST_AUTO_TEST_CASE(Write)$/;"	f	namespace:ndn::tlv::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/exclude.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/exclude.t.cpp	/^BOOST_AUTO_TEST_CASE(Before)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/exclude.t.cpp	/^BOOST_AUTO_TEST_CASE(EqualityComparable)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/exclude.t.cpp	/^BOOST_AUTO_TEST_CASE(ExcludeEmptyComponent) \/\/ Bug #2660$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/exclude.t.cpp	/^BOOST_AUTO_TEST_CASE(ImplicitSha256Digest)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/exclude.t.cpp	/^BOOST_AUTO_TEST_CASE(Malformed)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/exclude.t.cpp	/^BOOST_AUTO_TEST_CASE(Ranges)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(DestructionWithoutCancellingPendingInterests) \/\/ Bug #2518$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ExpressInterestData)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ExpressInterestTimeout)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ExpressInterestWithLocalControlHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ProcessEvents)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(PutDataWithLocalControlHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ReceiveDataWithLocalControlHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ReceiveInterestWithLocalControlHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(RegisterUnregisterPrefix)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(RemovePendingInterest)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(SetRegexFilter)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(SetRegexFilterAndRegister)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(SetRegexFilterError)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(SetUnsetInterestFilter)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(SetUnsetInterestFilterWithoutSucessCallback)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_AUTO_TEST_CASE(SimilarFilters)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(Decode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeFromStream)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeInterestWithLink)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeInterestWithLinkNonDecreasingOrder)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeWithLocalHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeWithoutLocalHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodeDecodeWithLink)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodeWithLocalHeader)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(InterestContainingSelectedDelegationButNoLink)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(InterestEqualityChecks)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(InterestFilterMatching)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(LinkObject)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(LinkObjectMissingContentType)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(LinkObjectNoMetaInfo)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(LinkObjectWrongContentType)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(MatchesData)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(SelectedDelegationChecks)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(SelectedDelegationEqualToDelegationCount)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(SelectedDelegationGreaterThanDelegationCount)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(SelectedDelegationIsNotNonNegativeInteger)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/interest.t.cpp	/^BOOST_AUTO_TEST_CASE(SelectorsEqualityChecks)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/key-locator.t.cpp	/^BOOST_AUTO_TEST_CASE(Equality)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/key-locator.t.cpp	/^BOOST_AUTO_TEST_CASE(TypeKeyDigest)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/key-locator.t.cpp	/^BOOST_AUTO_TEST_CASE(TypeName)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/key-locator.t.cpp	/^BOOST_AUTO_TEST_CASE(TypeNone)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/key-locator.t.cpp	/^BOOST_AUTO_TEST_CASE(UnknownType)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(CheckEncodeDecode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(CheckInsertDelegation)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(CheckRemoveDelegation)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(CountDelegationFromWire)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(Decode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(IncorrectContentType)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(MissingNameEncoding)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(MissingPreferenceEncoding)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/link.t.cpp	/^BOOST_AUTO_TEST_CASE(PairParsingCheck)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/cache-policy.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeInvalidPolicyError)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/cache-policy.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeMissingPolicyError)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/cache-policy.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeUnknownPolicyError)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/cache-policy.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/cache-policy.t.cpp	/^BOOST_AUTO_TEST_CASE(Policy)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/nack-header.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeOmitReason)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/nack-header.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeUnknownReasonCode)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/nack-header.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/nack-header.t.cpp	/^BOOST_AUTO_TEST_CASE(Reason)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/nack.t.cpp	/^BOOST_AUTO_TEST_CASE(Members)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeBareNetworkLayerPacket)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeEmpty)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeFragment)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeIdle)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeIgnoredHeader)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeNormal)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeRepeatedFragment)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeRepeatedNonRepeatableHeader)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeUnrecognizedHeader)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeWrongOrderAmongHeaders)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeWrongOrderFragment)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodeFragment)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodeSortOrder)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodeSubTlv)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^BOOST_AUTO_TEST_CASE(FieldAccess)$/;"	f	namespace:ndn::lp::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-channel-status.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-command-options.t.cpp	/^BOOST_AUTO_TEST_CASE(Prefix)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-command-options.t.cpp	/^BOOST_AUTO_TEST_CASE(SigningInfo)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-command-options.t.cpp	/^BOOST_AUTO_TEST_CASE(Timeout)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(FaceCreate)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(FaceDestroy)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(FaceDisableLocalControl)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(FaceEnableLocalControl)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(FibAddNextHop)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(FibRemoveNextHop)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(RibRegister)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(RibUnregister)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(StrategyChoiceSet)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-command.t.cpp	/^BOOST_AUTO_TEST_CASE(StrategyChoiceUnset)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-parameters.t.cpp	/^BOOST_AUTO_TEST_CASE(FaceLocalControlOptions)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-parameters.t.cpp	/^BOOST_AUTO_TEST_CASE(FaceOptions)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-parameters.t.cpp	/^BOOST_AUTO_TEST_CASE(FibOptions)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-parameters.t.cpp	/^BOOST_AUTO_TEST_CASE(RibOptions)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-parameters.t.cpp	/^BOOST_AUTO_TEST_CASE(StrategyChoiceOptions)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-response.t.cpp	/^BOOST_AUTO_TEST_CASE(ControlResponseDecode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-control-response.t.cpp	/^BOOST_AUTO_TEST_CASE(ControlResponseEncode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-face-event-notification.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodeCreated)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-face-event-notification.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodeDestroyed)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-face-event-notification.t.cpp	/^BOOST_AUTO_TEST_CASE(Traits)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-face-query-filter.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-face-status.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-fib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(TestFibEntryDecode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-fib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(TestFibEntryEncode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-fib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(TestFibEntryNoNextHopEncode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-fib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(TestFibEntryNoNextHopsDecode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-fib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(TestNextHopRecordDecode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-fib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(TestNextHopRecordEncode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-forwarder-status.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RibEntryClear)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RibEntryDecode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RibEntryEncode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RibEntryInfiniteExpirationPeriodDecode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RibEntryInfiniteExpirationPeriodEncode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RibEntryOutputStream)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RouteDecode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RouteEncode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RouteInfiniteExpirationPeriodDecode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RouteInfiniteExpirationPeriodEncode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^BOOST_AUTO_TEST_CASE(RouteOutputStream)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-strategy-choice.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::nfd::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/meta-info.t.cpp	/^BOOST_AUTO_TEST_CASE(AppMetaInfo)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/meta-info.t.cpp	/^BOOST_AUTO_TEST_CASE(AppMetaInfoTypeRange)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/meta-info.t.cpp	/^BOOST_AUTO_TEST_CASE(Decode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/meta-info.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/meta-info.t.cpp	/^BOOST_AUTO_TEST_CASE(EqualityChecks)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(AppendEndReject)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(AppendReject)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(EndAppend)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(EndEnd)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(EndReject)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(Expiry)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(GetPrefix)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(Invalid)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(Reject)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(RejectAppend)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(RejectEnd)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(Respond)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(RespondLarge)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(ResponseMultipleSmall)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(Valid)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(ValidWithAppendCalled)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(ValidWithEndCalled)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^BOOST_AUTO_TEST_CASE(ValidWithRejectCalled)$/;"	f	namespace:ndn::mgmt::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(Append)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(AppendNumber)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(AppendsAndMultiEncode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(Compare)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(CreateComponentWithIterators) \/\/ Bug #2490$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(Decode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeComponent)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(GetSuccessor)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(ImplicitSha256Digest)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(Markers)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(NameWithSpaces)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(SubName)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(SubNameNegativeIndex)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(SubNameOutOfRangeIndexes)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(UnorderedMap)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(ZeroLengthComponent)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_AUTO_TEST_CASE(ZeroLengthComponentCompare)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/ndebug.cpp	/^BOOST_AUTO_TEST_CASE(AssertFalse)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/ndebug.cpp	/^BOOST_AUTO_TEST_CASE(SideEffect)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/additional-info.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/certificate.t.cpp	/^BOOST_AUTO_TEST_CASE(Decode)$/;"	f	namespace:ndn
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/certificate.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodeError)$/;"	f	namespace:ndn
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/certificate.t.cpp	/^BOOST_AUTO_TEST_CASE(Encode)$/;"	f	namespace:ndn
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^BOOST_AUTO_TEST_CASE(CustomizedCheckerTest1)$/;"	f	namespace:ndn::security::conf::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^BOOST_AUTO_TEST_CASE(CustomizedCheckerTest2)$/;"	f	namespace:ndn::security::conf::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^BOOST_AUTO_TEST_CASE(CustomizedCheckerTest3)$/;"	f	namespace:ndn::security::conf::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^BOOST_AUTO_TEST_CASE(FixedSignerCheckerTest1)$/;"	f	namespace:ndn::security::conf::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^BOOST_AUTO_TEST_CASE(HierarchicalCheckerTest1)$/;"	f	namespace:ndn::security::conf::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/digest-sha256.t.cpp	/^BOOST_AUTO_TEST_CASE(DataSignature)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/digest-sha256.t.cpp	/^BOOST_AUTO_TEST_CASE(InterestSignature)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/digest-sha256.t.cpp	/^BOOST_AUTO_TEST_CASE(Sha256)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/identity-management-fixture.t.cpp	/^BOOST_AUTO_TEST_CASE(Tmp)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(ConstructorEmpty2Config)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(ConstructorEmptyConfig)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(ConstructorMal2Config)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(ConstructorMalConfig)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(ConstructorNormalConfig)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(Delete)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(ExportIdentity)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(GeneralSigningInterface)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(KeyChainWithCustomTpmAndPib)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/key-chain.t.cpp	/^BOOST_AUTO_TEST_CASE(PrepareIdentityCertificate)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/key-params.t.cpp	/^BOOST_AUTO_TEST_CASE(AesParameter)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/key-params.t.cpp	/^BOOST_AUTO_TEST_CASE(EcdsaParameter)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/key-params.t.cpp	/^BOOST_AUTO_TEST_CASE(Error)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/key-params.t.cpp	/^BOOST_AUTO_TEST_CASE(RsaParameter)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/pib-memory.t.cpp	/^BOOST_AUTO_TEST_CASE(TpmLocatorManagement)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/pib-sqlite3.t.cpp	/^BOOST_AUTO_TEST_CASE(TpmTest)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/public-key.t.cpp	/^BOOST_AUTO_TEST_CASE(ECDSA)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/public-key.t.cpp	/^BOOST_AUTO_TEST_CASE(RSA)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^BOOST_AUTO_TEST_CASE(KeyTypeEcdsa)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^BOOST_AUTO_TEST_CASE(KeyTypeNonExist)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^BOOST_AUTO_TEST_CASE(KeyTypeRsa)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-rule-relative.t.cpp	/^BOOST_AUTO_TEST_CASE(SecRuleRelativeTest)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-rule-specific.t.cpp	/^BOOST_AUTO_TEST_CASE(SecRuleSpecificTest)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-tpm-file.t.cpp	/^BOOST_AUTO_TEST_CASE(Delete)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-tpm-file.t.cpp	/^BOOST_AUTO_TEST_CASE(EcdsaSigning)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-tpm-file.t.cpp	/^BOOST_AUTO_TEST_CASE(ImportExportEcdsaKey)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-tpm-file.t.cpp	/^BOOST_AUTO_TEST_CASE(ImportExportKey)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-tpm-file.t.cpp	/^BOOST_AUTO_TEST_CASE(RandomGenerator)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-tpm-file.t.cpp	/^BOOST_AUTO_TEST_CASE(SignVerify)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-tpm-osx.t.cpp	/^BOOST_AUTO_TEST_CASE(Delete)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-tpm-osx.t.cpp	/^BOOST_AUTO_TEST_CASE(EcdsaSigning)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-tpm-osx.t.cpp	/^BOOST_AUTO_TEST_CASE(ExportImportEcdsaKey)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-tpm-osx.t.cpp	/^BOOST_AUTO_TEST_CASE(ExportImportKey)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-tpm-osx.t.cpp	/^BOOST_AUTO_TEST_CASE(NonExistingKey)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-tpm-osx.t.cpp	/^BOOST_AUTO_TEST_CASE(RandomGenerator)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-tpm-osx.t.cpp	/^BOOST_AUTO_TEST_CASE(SignVerify)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^BOOST_AUTO_TEST_CASE(DataSignature)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^BOOST_AUTO_TEST_CASE(Decoding)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^BOOST_AUTO_TEST_CASE(Encoding)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^BOOST_AUTO_TEST_CASE(InterestSignature)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^BOOST_AUTO_TEST_CASE(DataSignature)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^BOOST_AUTO_TEST_CASE(Decoding)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^BOOST_AUTO_TEST_CASE(Encoding)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^BOOST_AUTO_TEST_CASE(InterestSignature)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/signing-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(Certificate)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/signing-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(Identity)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/signing-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(Key)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/signing-helpers.t.cpp	/^BOOST_AUTO_TEST_CASE(Sha256)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/signing-info.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/signing-info.t.cpp	/^BOOST_AUTO_TEST_CASE(CustomSignatureInfo)$/;"	f	namespace:ndn::security::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator.t.cpp	/^BOOST_AUTO_TEST_CASE(EcdsaSignatureVerification)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator.t.cpp	/^BOOST_AUTO_TEST_CASE(EcdsaSignatureVerification2)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator.t.cpp	/^BOOST_AUTO_TEST_CASE(Null)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator.t.cpp	/^BOOST_AUTO_TEST_CASE(RsaSignatureVerification)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/validity-period.t.cpp	/^BOOST_AUTO_TEST_CASE(Comparison)$/;"	f	namespace:ndn::security::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/validity-period.t.cpp	/^BOOST_AUTO_TEST_CASE(ConstructorSetter)$/;"	f	namespace:ndn::security::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/validity-period.t.cpp	/^BOOST_AUTO_TEST_CASE(DecodingError)$/;"	f	namespace:ndn::security::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/security/validity-period.t.cpp	/^BOOST_AUTO_TEST_CASE(EncodingDecoding)$/;"	f	namespace:ndn::security::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/signature-info.t.cpp	/^BOOST_AUTO_TEST_CASE(Constructor)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/signature-info.t.cpp	/^BOOST_AUTO_TEST_CASE(ConstructorError)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/signature-info.t.cpp	/^BOOST_AUTO_TEST_CASE(OtherTlvs)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/signature-info.t.cpp	/^BOOST_AUTO_TEST_CASE(SetterGetter)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/signature-info.t.cpp	/^BOOST_AUTO_TEST_CASE(ValidityPeriodExtension)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/transport/tcp-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketHostAndPortBadMalformedUri)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/transport/tcp-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketHostAndPortBadMissingHost)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/transport/tcp-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketHostAndPortBadWrongTransport)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/transport/tcp-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketHostAndPortNameOkOmittedHostOmittedPort)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/transport/tcp-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketHostAndPortOkOmittedPort)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/transport/tcp-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketNameOk)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/transport/unix-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketNameBadMalformedUri)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/transport/unix-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketNameBadWrongTransport)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/transport/unix-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketNameOk)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/transport/unix-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketNameOkOmittedSocketOmittedProtocol)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/transport/unix-transport.t.cpp	/^BOOST_AUTO_TEST_CASE(GetDefaultSocketNameOkOmittedSocketWithProtocol)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(EmptyPathParse)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(MalformedParse)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/config-file.t.cpp	/^BOOST_AUTO_TEST_CASE(TestParse)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(Compare)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(Compute)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(ComputeDigest)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(ConstructFromStream)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(Error)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(OperatorBlock)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(OperatorDigest)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(OperatorString)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(OperatorUint64t)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(Print)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/digest.t.cpp	/^BOOST_AUTO_TEST_CASE(Sha256Digest)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/dns.t.cpp	/^BOOST_AUTO_TEST_CASE(Asynchronous)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/dns.t.cpp	/^BOOST_AUTO_TEST_CASE(AsynchronousV4)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/dns.t.cpp	/^BOOST_AUTO_TEST_CASE(AsynchronousV4AndV6)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/dns.t.cpp	/^BOOST_AUTO_TEST_CASE(AsynchronousV6)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/dns.t.cpp	/^BOOST_AUTO_TEST_CASE(Synchronous)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/ethernet.t.cpp	/^BOOST_AUTO_TEST_CASE(BasicChecks)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/ethernet.t.cpp	/^BOOST_AUTO_TEST_CASE(FromString)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/ethernet.t.cpp	/^BOOST_AUTO_TEST_CASE(StdHash)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/ethernet.t.cpp	/^BOOST_AUTO_TEST_CASE(ToString)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^BOOST_AUTO_TEST_CASE(FourArguments)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^BOOST_AUTO_TEST_CASE(HandlerByRef)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^BOOST_AUTO_TEST_CASE(HandlerByVal)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^BOOST_AUTO_TEST_CASE(OneArgument)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^BOOST_AUTO_TEST_CASE(ThreeArguments)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^BOOST_AUTO_TEST_CASE(TwoArguments)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^BOOST_AUTO_TEST_CASE(TwoListeners)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^BOOST_AUTO_TEST_CASE(ZeroArgument)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^BOOST_AUTO_TEST_CASE(ZeroListener)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(Bug1635)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(CanonizeEmptyCallback)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(ParseDev)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(ParseEther)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(ParseFd)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(ParseInternal)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(ParseTcp)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(ParseUdp)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_AUTO_TEST_CASE(ParseUnix)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/in-memory-storage-fifo.t.cpp	/^BOOST_AUTO_TEST_CASE(ArrivalQueue)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/in-memory-storage-fifo.t.cpp	/^BOOST_AUTO_TEST_CASE(ArrivalQueue2)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/in-memory-storage-lfu.t.cpp	/^BOOST_AUTO_TEST_CASE(FrequencyQueue)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/in-memory-storage-lfu.t.cpp	/^BOOST_AUTO_TEST_CASE(FrequencyQueue2)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/in-memory-storage-lru.t.cpp	/^BOOST_AUTO_TEST_CASE(UsedTimeQueue)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/in-memory-storage-lru.t.cpp	/^BOOST_AUTO_TEST_CASE(UsedTimeQueue2)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/in-memory-storage-persistent.t.cpp	/^BOOST_AUTO_TEST_CASE(GetLimit)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/in-memory-storage-persistent.t.cpp	/^BOOST_AUTO_TEST_CASE(InsertAndDouble)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/indented-stream.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/indented-stream.t.cpp	/^BOOST_AUTO_TEST_CASE(BasicWithFlushes) \/\/ Bug #2723$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/io.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/notification-stream.t.cpp	/^BOOST_AUTO_TEST_CASE(Post)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(BackRefMatcher)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(BackRefMatcherAdvanced)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(BackRefMatcherAdvanced2)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(ComponentMatcher)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(ComponentSetMatcher)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(PatternListMatcher)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(RepeatMatcher)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(TopMatcher)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/regex.t.cpp	/^BOOST_AUTO_TEST_CASE(TopMatcherAdvanced)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^BOOST_AUTO_TEST_CASE(CancelEmptyEvent)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^BOOST_AUTO_TEST_CASE(Events)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^BOOST_AUTO_TEST_CASE(ScopedEventIdAssign)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^BOOST_AUTO_TEST_CASE(ScopedEventIdDestruct)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^BOOST_AUTO_TEST_CASE(ScopedEventIdMove)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^BOOST_AUTO_TEST_CASE(ScopedEventIdRelease)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^BOOST_AUTO_TEST_CASE(SelfCancel)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(AutoDisconnect)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(AutoDisconnectAssign)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(AutoDisconnectAssignSame)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(AutoDisconnectMove)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(AutoDisconnectRelease)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(ConnectInHandler)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(ConnectSingleShot)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(ConnectSingleShot1)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(ConnectSingleShotDisconnected)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(DisconnectSelfInHandler)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(HandlerByRef)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(HandlerByVal)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(ManualDisconnect)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(ManualDisconnectDestructed)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(OneArgument)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(ThrowInHandler)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(TwoArguments)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(TwoListeners)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^BOOST_AUTO_TEST_CASE(ZeroSlot)$/;"	f	namespace:ndn::util::signal::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/sqlite3-statement.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ndn::util::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/string-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(FromHex)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/string-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(FromHexChar)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/string-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(ToHex)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/string-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(Trim)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/string-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(Unescape)$/;"	f	namespace:ndn::util::test
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(DigestExclude)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(DigestOrder)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(EmptyDataName)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(EmptyInterestName)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(ExactName)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(FullName)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(Leftmost)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(MaxSuffixComponents)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(MinSuffixComponents)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE(Rightmost)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/time.t.cpp	/^BOOST_AUTO_TEST_CASE(SteadyClock)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/util/time.t.cpp	/^BOOST_AUTO_TEST_CASE(SystemClock)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/version.t.cpp	/^BOOST_AUTO_TEST_CASE(Version)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	ndn-cxx/tests/unit-tests/version.t.cpp	/^BOOST_AUTO_TEST_CASE(VersionString)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-face-container.t.cpp	/^BOOST_AUTO_TEST_CASE(AddAll)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-face-container.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-fib-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(Base)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-fib-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(Helper1)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-fib-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(Helper2)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-fib-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(Helper3)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-fib-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(Helper4)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-global-routing-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(CalculateRouteCase1)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-global-routing-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(CalculateRouteCase2)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-link-control-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(SixNodeTopology) \/\/ Bug #2783$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-link-control-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(TwoNodeTopology)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-strategy-choice-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(DefaultStrategies)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-strategy-choice-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(InstallAllBuiltInStrategy)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-strategy-choice-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(InstallAllCustomStrategy)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-strategy-choice-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(InstallBuiltInStrategyOnNode)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-strategy-choice-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(InstallBuiltInStrategyOnNodeContainer)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-strategy-choice-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(InstallCustomStrategyOnNode)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/helper/ndn-strategy-choice-helper.t.cpp	/^BOOST_AUTO_TEST_CASE(InstallCustomStrategyOnNodeContainer)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/model/ndn-header.t.cpp	/^BOOST_AUTO_TEST_CASE(TypeId)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/model/ndn-l3-protocol.t.cpp	/^BOOST_AUTO_TEST_CASE(AllEnabled)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/model/ndn-l3-protocol.t.cpp	/^BOOST_AUTO_TEST_CASE(DisabledFaceManager)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/model/ndn-l3-protocol.t.cpp	/^BOOST_AUTO_TEST_CASE(DisabledRibManager)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/model/ndn-l3-protocol.t.cpp	/^BOOST_AUTO_TEST_CASE(DisabledStatusServer)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/model/ndn-l3-protocol.t.cpp	/^BOOST_AUTO_TEST_CASE(DisabledStrategyChoiceManager)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/model/ndn-net-device-face.t.cpp	/^BOOST_AUTO_TEST_CASE(Basic)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/model/ndn-ns3.t.cpp	/^BOOST_AUTO_TEST_CASE(ToPacket)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/ndn-cxx/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ExpressInterestLocalhost)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/ndn-cxx/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ExpressInterestRemote)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/ndn-cxx/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ExpressInterestTimeout)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/ndn-cxx/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ExpressInterestWithRib)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/ndn-cxx/face.t.cpp	/^BOOST_AUTO_TEST_CASE(ExpressMultipleInterests)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/ndn-cxx/face.t.cpp	/^BOOST_AUTO_TEST_CASE(FaceShutdownFromTimeoutCallback)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/ndn-cxx/face.t.cpp	/^BOOST_AUTO_TEST_CASE(SetInterestFilter)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/utils/tracers/ndn-app-delay-tracer.t.cpp	/^BOOST_AUTO_TEST_CASE(InstallAll)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/utils/tracers/ndn-app-delay-tracer.t.cpp	/^BOOST_AUTO_TEST_CASE(InstallNode)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/utils/tracers/ndn-app-delay-tracer.t.cpp	/^BOOST_AUTO_TEST_CASE(InstallNodeContainer)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE	tests/unit-tests/utils/tracers/ndn-app-delay-tracer.t.cpp	/^BOOST_AUTO_TEST_CASE(InstallNodeDumpStream)$/;"	f	namespace:ns3::ndn
BOOST_AUTO_TEST_CASE_TEMPLATE	NFD/tests/daemon/face/udp.t.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(EndToEnd, A, EndToEndAddresses)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE_TEMPLATE	NFD/tests/daemon/face/udp.t.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(IdleClose, A, EndToEndAddresses)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE_TEMPLATE	NFD/tests/daemon/face/udp.t.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(ManualClose, A, EndToEndAddresses)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE_TEMPLATE	NFD/tests/daemon/face/udp.t.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(MultipleAccepts, A, EndToEndAddresses)$/;"	f	namespace:nfd::tests
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/random.t.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(GoodnessOfFit, RandomGenerator, RandomGenerators)$/;"	f	namespace:ndn::tests
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(ChildSelector, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(ChildSelector2, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(DigestCalculation, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(DuplicateInsertion, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(DuplicateInsertion2, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(EraseCanonical, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(ExcludeSelector, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(GetLimit, T, InMemoryStoragesLimited)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(ImplicitDigestSelector, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndDouble, T, InMemoryStoragesLimited)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndEraseByName, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndEraseByPrefix, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndEvict, T, InMemoryStoragesLimited)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndFind, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndFindByFullName, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndFindByName, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndNotFind, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndNotFindByFullName, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertAndNotFindByName, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(InsertCanonical, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(Insertion, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(Insertion2, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(Insertion3, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(Iterator, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(MinMaxComponentsSelector, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(PublisherKeySelector, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(PublisherKeySelector2, T, InMemoryStorages)$/;"	f	namespace:ndn::util
BOOST_AUTO_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^BOOST_AUTO_TEST_CASE_TEMPLATE(setCapacity, T, InMemoryStoragesLimited)$/;"	f	namespace:ndn::util
BOOST_BIND_NO_PLACEHOLDERS	ndn-cxx/src/common.hpp	108;"	d
BOOST_CONCEPT_USAGE	ndn-cxx/src/lp/field.hpp	/^  BOOST_CONCEPT_USAGE(Field)$/;"	f	struct:ndn::lp::Field
BOOST_CONCEPT_USAGE	ndn-cxx/src/util/concepts.hpp	/^  BOOST_CONCEPT_USAGE(Hashable)$/;"	f	class:ndn::Hashable
BOOST_CONCEPT_USAGE	ndn-cxx/src/util/concepts.hpp	/^  BOOST_CONCEPT_USAGE(WireDecodable)$/;"	f	class:ndn::WireDecodable
BOOST_CONCEPT_USAGE	ndn-cxx/src/util/concepts.hpp	/^  BOOST_CONCEPT_USAGE(WireEncodable)$/;"	f	class:ndn::WireEncodable
BOOST_CONCEPT_USAGE	ndn-cxx/src/util/concepts.hpp	/^  BOOST_CONCEPT_USAGE(WireEncodableWithEncodingBuffer)$/;"	f	class:ndn::WireEncodableWithEncodingBuffer
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/config-file.t.cpp	/^BOOST_FIXTURE_TEST_CASE(OnConfigUncoveredSections, MissingCallbackFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/logger.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Basic, LoggerFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/logger.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ConfigureFactory, LoggerFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/logger.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ExplicitlySetModule, LoggerFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/logger.t.cpp	/^BOOST_FIXTURE_TEST_CASE(GenericInTemplatedClass, InClassTemplateLogger<bool>)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/logger.t.cpp	/^BOOST_FIXTURE_TEST_CASE(InClass, InClassLogger)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/logger.t.cpp	/^BOOST_FIXTURE_TEST_CASE(LimitModules, LoggerFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/logger.t.cpp	/^BOOST_FIXTURE_TEST_CASE(LoggerFactoryListModules, LoggerFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/logger.t.cpp	/^BOOST_FIXTURE_TEST_CASE(SpecializedInTemplatedClass, InClassTemplateLogger<int>)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/logger.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestNumberLevel, LoggerFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/logger.t.cpp	/^BOOST_FIXTURE_TEST_CASE(UnknownLevelString, LoggerFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/logger.t.cpp	/^BOOST_FIXTURE_TEST_CASE(UnknownModule, LoggerFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/network-interface.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ListFakeNetworkInterfaces, FakeNetworkInterfaceFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/scheduler.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Events, SchedulerFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/scheduler.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ScopedEventIdAssign, UnitTestTimeFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/scheduler.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ScopedEventIdDestruct, UnitTestTimeFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/scheduler.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ScopedEventIdMove, UnitTestTimeFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/scheduler.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ScopedEventIdRelease, UnitTestTimeFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/core/scheduler.t.cpp	/^BOOST_FIXTURE_TEST_CASE(SelfCancel, SelfCancelFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/ndnlp.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Reassemble1, ReassembleFixture)$/;"	f	namespace:nfd::ndnlp::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/ndnlp.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Reassemble4and2, ReassembleFixture)$/;"	f	namespace:nfd::ndnlp::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/ndnlp.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ReassembleTimeout, ReassembleFixture)$/;"	f	namespace:nfd::ndnlp::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/tcp.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Bug1856, EndToEndFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/tcp.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Bug2292, FakeNetworkInterfaceFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/tcp.t.cpp	/^BOOST_FIXTURE_TEST_CASE(EndToEnd4, EndToEndFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/tcp.t.cpp	/^BOOST_FIXTURE_TEST_CASE(EndToEnd6, EndToEndFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/tcp.t.cpp	/^BOOST_FIXTURE_TEST_CASE(FaceClosing, EndToEndFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/tcp.t.cpp	/^BOOST_FIXTURE_TEST_CASE(FaceCreate, FaceCreateFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/tcp.t.cpp	/^BOOST_FIXTURE_TEST_CASE(FaceCreateTimeout, FaceCreateTimeoutFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/tcp.t.cpp	/^BOOST_FIXTURE_TEST_CASE(MultipleAccepts, EndToEndFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/tcp.t.cpp	/^BOOST_FIXTURE_TEST_CASE(UnsupportedFaceCreate, FaceCreateFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/udp.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Bug2292, FakeNetworkInterfaceFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/udp.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ChannelMapUdp, FactoryErrorCheck)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/udp.t.cpp	/^BOOST_FIXTURE_TEST_CASE(FaceCreate, FaceCreateFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/unix-stream.t.cpp	/^BOOST_FIXTURE_TEST_CASE(EndToEnd, EndToEndFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/unix-stream.t.cpp	/^BOOST_FIXTURE_TEST_CASE(MultipleAccepts, EndToEndFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/unix-stream.t.cpp	/^BOOST_FIXTURE_TEST_CASE(UnixStreamFaceLocalControlHeader, EndToEndFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/face/websocket.t.cpp	/^BOOST_FIXTURE_TEST_CASE(EndToEnd4, EndToEndFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/fw/access-strategy.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Bidirectional, TwoLaptopsFixture)$/;"	f	namespace:nfd::fw::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/fw/access-strategy.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Bug2831, TwoLaptopsFixture)$/;"	f	namespace:nfd::fw::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/fw/access-strategy.t.cpp	/^BOOST_FIXTURE_TEST_CASE(FastSlowProducer, TwoLaptopsFixture)$/;"	f	namespace:nfd::fw::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/fw/access-strategy.t.cpp	/^BOOST_FIXTURE_TEST_CASE(OneProducer, TwoLaptopsFixture)$/;"	f	namespace:nfd::fw::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/fw/access-strategy.t.cpp	/^BOOST_FIXTURE_TEST_CASE(PacketLoss, TwoLaptopsFixture)$/;"	f	namespace:nfd::fw::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/fw/access-strategy.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ProducerMobility, TwoLaptopsFixture)$/;"	f	namespace:nfd::fw::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/fw/forwarder.t.cpp	/^BOOST_FIXTURE_TEST_CASE(InterestLoopWithShortLifetime, UnitTestTimeFixture) \/\/ Bug 1953$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(NoPrivilegesSectionsDryRun, TwoValidatorFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TwoKeys, TwoValidatorFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TwoKeysDryRun, TwoValidatorFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Wildcard, TwoValidatorFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CreateFaceBadUri, AuthorizedCommandFixture<FaceFixture>)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CreateFaceMissingUri, AuthorizedCommandFixture<FaceFixture>)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CreateFaceNoncanonicalUri, AuthorizedCommandFixture<FaceFixture>)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CreateFaceUnknownScheme, AuthorizedCommandFixture<FaceFixture>)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(DestroyFace, AuthorizedCommandFixture<FaceFixture>)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(LocalControlInFaceId,$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(LocalControlInFaceIdFaceNotFound,$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(LocalControlInFaceIdNonLocal,$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(LocalControlMissingFeature,$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(LocalControlNextHopFaceId,$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(LocalControlNextHopFaceIdFaceNotFound,$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(LocalControlNextHopFaceIdNonLocal,$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(OnConnectFailed, AuthorizedCommandFixture<FaceFixture>)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(OnCreated, AuthorizedCommandFixture<FaceFixture>)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestChannelStatus, ChannelStatusFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestFaceList, FaceListFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestInvalidQueryFilter, FaceQueryListFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestValidQueryFilter, FaceQueryListFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(UnauthorizedCommand, UnauthorizedCommandFixture<FaceManagerFixture>)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(UnsupportedCommand, AuthorizedCommandFixture<FaceManagerFixture>)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ValidatedFaceRequestBadOptionParse,$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ValidatedFaceRequestCreateFace,$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ValidatedFaceRequestDestroyFace,$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestFibEnumerationRequest, FibManagerFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(UnauthorizedCommand, UnauthorizedCommandFixture<FibManagerFixture>)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(MalformedCommmand, AllStrategiesFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ShortName, AllStrategiesFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(UnauthorizedCommand,$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(UnsignedCommand, AllStrategiesFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/table/cs-policy-lru.t.cpp	/^BOOST_FIXTURE_TEST_CASE(EvictOneLRU, UnitTestTimeFixture)$/;"	f	namespace:nfd::cs::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/table/cs-policy-priority-fifo.t.cpp	/^BOOST_FIXTURE_TEST_CASE(EvictOne, UnitTestTimeFixture)$/;"	f	namespace:nfd::cs::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/table/cs-policy-priority-fifo.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Refresh, UnitTestTimeFixture)$/;"	f	namespace:nfd::cs::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CapacityDown, PeriodicalInsertionFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CapacityUp, PeriodicalInsertionFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Lifetime, PeriodicalInsertionFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/table/measurements.t.cpp	/^BOOST_FIXTURE_TEST_CASE(EraseNameTreeEntry, UnitTestTimeFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/table/measurements.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Lifetime, UnitTestTimeFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/table/name-tree.t.cpp	/^BOOST_FIXTURE_TEST_CASE(IteratorFindAllMatches, EnumerationFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/daemon/table/name-tree.t.cpp	/^BOOST_FIXTURE_TEST_CASE(IteratorFullEnumerate, EnumerationFixture)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/remote-registrator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(AutoTest, RemoteRegistratorFixture)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/remote-registrator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(EraseFace, RemoteRegistratorFixture)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/remote-registrator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(RebuildConnection, RemoteRegistratorFixture)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/remote-registrator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(RegisterAdvanced, RemoteRegistratorFixture)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/remote-registrator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(RegisterBasic, RemoteRegistratorFixture)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/remote-registrator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(RegisterRetry, RemoteRegistratorFixture)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/remote-registrator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(RegisterWithHubPrefix, RemoteRegistratorFixture)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/remote-registrator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(RegisterWithLocalPrefix, RemoteRegistratorFixture)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/remote-registrator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(RegisterWithRedundantCallback, RemoteRegistratorFixture)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/remote-registrator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(RegisterWithoutConnection, RemoteRegistratorFixture)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/remote-registrator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(RegisterWithoutIdentity, RemoteRegistratorFixture)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/remote-registrator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(UnregisterAdvanced, RemoteRegistratorFixture)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/remote-registrator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(UnregisterBasic, RemoteRegistratorFixture)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/remote-registrator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(UnregisterWithoutConnection, RemoteRegistratorFixture)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/remote-registrator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(UnregisterWithoutInsert, RemoteRegistratorFixture)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/remote-registrator.t.cpp	/^BOOST_FIXTURE_TEST_CASE(UnregisterWithoutSuccessfullRegistration,$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/rib-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Basic, AuthorizedRibManager)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/rib-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CancelExpirationEvent, AuthorizedRibManager)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/rib-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(FaceDestroyEvent, AuthorizedRibManager)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/rib-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(LocalHopInherit, AuthorizedRibManager)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/rib-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Register, AuthorizedRibManager)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/rib-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(RemoveInvalidFaces, AuthorizedRibManager)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/rib-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(RibStatusRequest, AuthorizedRibManager)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/rib-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(RouteExpiration, AuthorizedRibManager)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/rib-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ShortName, AuthorizedRibManager)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/rib-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(UnauthorizedCommand, UnauthorizedRibManager)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	NFD/tests/rib/rib-manager.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Unregister, AuthorizedRibManager)$/;"	f	namespace:nfd::rib::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/integrated/face.cpp	/^BOOST_FIXTURE_TEST_CASE(RegisterPrefix, FacesFixture3)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/integrated/face.cpp	/^BOOST_FIXTURE_TEST_CASE(RegisterUnregisterPrefix, FacesFixture2)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/integrated/face.cpp	/^BOOST_FIXTURE_TEST_CASE(SetRegexFilterAndRegister, FacesFixture3)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/data.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Decode, TestDataFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/data.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Encode, TestDataFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/data.t.cpp	/^BOOST_FIXTURE_TEST_CASE(FullName, DataIdentityFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_FIXTURE_TEST_CASE(RegisterUnregisterPrefixFail, FacesNoRegistrationReplyFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_FIXTURE_TEST_CASE(SetInterestFilterFail, FacesNoRegistrationReplyFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_FIXTURE_TEST_CASE(SetInterestFilterFailWithoutSuccessCallback, FacesNoRegistrationReplyFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/face.t.cpp	/^BOOST_FIXTURE_TEST_CASE(SetInterestFilterNoReg, FacesNoRegistrationReplyFixture) \/\/ Bug 2318$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CommandErrorCode, CommandFixture)$/;"	f	namespace:ndn::nfd::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CommandInvalidRequest, CommandFixture)$/;"	f	namespace:ndn::nfd::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CommandInvalidResponse, CommandFixture)$/;"	f	namespace:ndn::nfd::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CommandSuccess, CommandFixture)$/;"	f	namespace:ndn::nfd::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^BOOST_FIXTURE_TEST_CASE(OptionsPrefix, CommandFixture)$/;"	f	namespace:ndn::nfd::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^BOOST_FIXTURE_TEST_CASE(OptionsTimeout, CommandFixture)$/;"	f	namespace:ndn::nfd::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/dispatcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(AddRemoveTopPrefix, DispatcherFixture)$/;"	f	namespace:ndn::mgmt::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/dispatcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(BasicUsageSemantics, DispatcherFixture)$/;"	f	namespace:ndn::mgmt::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/dispatcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ControlCommand, DispatcherFixture)$/;"	f	namespace:ndn::mgmt::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/dispatcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(NotificationStream, DispatcherFixture)$/;"	f	namespace:ndn::mgmt::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/mgmt/dispatcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(StatusDataset, DispatcherFixture)$/;"	f	namespace:ndn::mgmt::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Expiration, CertificateCacheFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Reset, CertificateCacheFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TtlRefresh, CertificateCacheFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/certificate-container.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestCertificateContainer, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/identity-container.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestIdentityContainer, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/identity.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestKeyOperation, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/identity.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ValidityChecking, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/key-container.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestKeyContainer, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/key.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestCertificateOperation, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/key.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ValidityChecking, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/pib.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TestIdentityOperation, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/pib.t.cpp	/^BOOST_FIXTURE_TEST_CASE(ValidityChecking, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Basic, PibTmpPathFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TpmLocatorTest, PibTmpPathFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(FixedSignerChecker, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(FixedSignerChecker2, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(HierarchicalChecker, FacesFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(KeyLocatorNameChecker1, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(MaxKeyTest, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(MaxKeyTest2, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(NameFilter, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(NameFilter2, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(NameFilter3, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(NameFilter4, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Nrd, FacesFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Reset, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(SignedInterestTest, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TrustAnchorDir, DirTestFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TrustAnchorWildcard, security::IdentityManagementFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CanonizeEther, CanonizeFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CanonizeTcpV4, CanonizeFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CanonizeTcpV6, CanonizeFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CanonizeUdpV4, CanonizeFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CanonizeUdpV6, CanonizeFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CanonizeUnsupported, CanonizeFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CheckCanonicalTcp, CanonizeFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CheckCanonicalUdp, CanonizeFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^BOOST_FIXTURE_TEST_CASE(EndToEnd, EndToEndFixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^BOOST_FIXTURE_TEST_CASE(CancelAll, CancelAllFixture)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Reschedule, SelfRescheduleFixture)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Reschedule2, SelfRescheduleFixture)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Reschedule3, SelfRescheduleFixture)$/;"	f	namespace:ndn::util::scheduler::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Basic, Fixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(NoSegmentInData, Fixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(SegmentValidationFailure, Fixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Timeout, Fixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Triple, Fixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^BOOST_FIXTURE_TEST_CASE(TripleWithInitialSegmentFetching, Fixture)$/;"	f	namespace:ndn::util::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/time-unit-test-clock.t.cpp	/^BOOST_FIXTURE_TEST_CASE(Scheduler, UnitTestTimeFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/time-unit-test-clock.t.cpp	/^BOOST_FIXTURE_TEST_CASE(SteadyClock, UnitTestTimeFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE	ndn-cxx/tests/unit-tests/util/time-unit-test-clock.t.cpp	/^BOOST_FIXTURE_TEST_CASE(SystemClock, UnitTestTimeFixture)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE_TEMPLATE	NFD/tests/core/segment-publisher.t.cpp	/^BOOST_FIXTURE_TEST_CASE_TEMPLATE(Generate, T, DatasetSizes, SegmentPublisherFixture<T::value>)$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE_TEMPLATE	NFD/tests/daemon/face/tcp.t.cpp	/^BOOST_FIXTURE_TEST_CASE_TEMPLATE(FaceCorruptedInput, Dataset,$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE_TEMPLATE	NFD/tests/daemon/face/tcp.t.cpp	/^BOOST_FIXTURE_TEST_CASE_TEMPLATE(LocalFaceCorruptedInput, Dataset,$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE_TEMPLATE	NFD/tests/daemon/face/unix-stream.t.cpp	/^BOOST_FIXTURE_TEST_CASE_TEMPLATE(CorruptedInput, Dataset,$/;"	f	namespace:nfd::tests
BOOST_FIXTURE_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/name.t.cpp	/^BOOST_FIXTURE_TEST_CASE_TEMPLATE(NamingConventions, T, ConventionsDatasets, T)$/;"	f	namespace:ndn::tests
BOOST_FIXTURE_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/security/pib-impl.t.cpp	/^BOOST_FIXTURE_TEST_CASE_TEMPLATE(CertificateManagement, T, PibImpls, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/security/pib-impl.t.cpp	/^BOOST_FIXTURE_TEST_CASE_TEMPLATE(IdentityManagement, T, PibImpls, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/security/pib-impl.t.cpp	/^BOOST_FIXTURE_TEST_CASE_TEMPLATE(KeyManagement, T, PibImpls, PibDataFixture)$/;"	f	namespace:ndn::security::tests
BOOST_FIXTURE_TEST_CASE_TEMPLATE	ndn-cxx/tests/unit-tests/tag-host.t.cpp	/^BOOST_FIXTURE_TEST_CASE_TEMPLATE(Basic, T, Fixtures, T)$/;"	f	namespace:ndn::tests
BOOST_GRAPH_NDN_GLOBAL_ROUTING_HELPER_H	helper/boost-graph-ndn-global-routing-helper.hpp	21;"	d
BOOST_REGEXP_MARK_COUNT_CORRECTION	ndn-cxx/src/util/regex/regex-component-matcher.hpp	/^static const size_t BOOST_REGEXP_MARK_COUNT_CORRECTION =$/;"	m	namespace:ndn
BOOST_TEST_DYN_LINK	NFD/tests/main.cpp	26;"	d	file:
BOOST_TEST_DYN_LINK	ndn-cxx/tests/integrated/face.cpp	23;"	d	file:
BOOST_TEST_DYN_LINK	ndn-cxx/tests/integrated/network-monitor.cpp	23;"	d	file:
BOOST_TEST_DYN_LINK	ndn-cxx/tests/main.cpp	23;"	d	file:
BOOST_TEST_DYN_LINK	tests/main.cpp	21;"	d	file:
BOOST_TEST_MAIN	NFD/tests/main.cpp	25;"	d	file:
BOOST_TEST_MAIN	ndn-cxx/tests/integrated/face.cpp	22;"	d	file:
BOOST_TEST_MAIN	ndn-cxx/tests/integrated/network-monitor.cpp	22;"	d	file:
BOOST_TEST_MAIN	ndn-cxx/tests/main.cpp	22;"	d	file:
BOOST_TEST_MAIN	tests/main.cpp	20;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/connection/connection.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/endpoint/endpoint.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/extension/extension.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/extension/permessage_deflate.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/http/parser.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/logger/basic.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/message_buffer/alloc.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/message_buffer/message.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/message_buffer/pool.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/processors/extension_permessage_compress.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/processors/hybi00.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/processors/hybi07.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/processors/hybi08.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/processors/hybi13.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/processors/processor.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/random/none.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/random/random_device.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/roles/client.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/roles/server.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/transport/asio/base.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/transport/asio/timers.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/transport/hybi_util.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/transport/integration.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/transport/iostream/base.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/transport/iostream/connection.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/transport/iostream/endpoint.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/utility/close.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/utility/error.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/utility/frame.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/utility/sha1.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/utility/uri.cpp	28;"	d	file:
BOOST_TEST_MODULE	NFD/websocketpp/test/utility/utilities.cpp	28;"	d	file:
BOOST_TEST_MODULE	ndn-cxx/tests/integrated/face.cpp	24;"	d	file:
BOOST_TEST_MODULE	ndn-cxx/tests/integrated/network-monitor.cpp	24;"	d	file:
BOOST_TEST_MODULE	ndn-cxx/tests/main.cpp	24;"	d	file:
BUFFER	ndn-cxx/tests/unit-tests/encoding/tlv.t.cpp	/^static const uint8_t BUFFER[] = {$/;"	m	namespace:ndn::tlv::tests	file:
Base	NFD/tools/ndn-autoconfig/base.cpp	/^Base::Base(Face& face, KeyChain& keyChain, const NextStageCallback& nextStageOnFailure)$/;"	f	class:ndn::tools::autoconfig::Base
Base	NFD/tools/ndn-autoconfig/base.hpp	/^class Base : boost::noncopyable$/;"	c	namespace:ndn::tools::autoconfig
Base	ndn-cxx/src/detail/container-with-on-empty-signal.hpp	/^  typedef std::list<T> Base;$/;"	t	class:ndn::ContainerWithOnEmptySignal
Base	ndn-cxx/src/lp/field.hpp	/^class Base$/;"	c	namespace:ndn::lp::field_location_tags
BaseDns	NFD/tools/ndn-autoconfig/base-dns.cpp	/^BaseDns::BaseDns(Face& face, KeyChain& keyChain, const NextStageCallback& nextStageOnFailure)$/;"	f	class:ndn::tools::autoconfig::BaseDns
BaseDns	NFD/tools/ndn-autoconfig/base-dns.hpp	/^class BaseDns : public Base$/;"	c	namespace:ndn::tools::autoconfig
BaseFixture	NFD/tests/test-common.hpp	/^  BaseFixture()$/;"	f	class:nfd::tests::BaseFixture
BaseFixture	NFD/tests/test-common.hpp	/^class BaseFixture$/;"	c	namespace:nfd::tests
BaseTesterApp	tests/unit-tests/ndn-cxx/face.t.cpp	/^class BaseTesterApp$/;"	c	namespace:ns3::ndn	file:
BasicBlockFixture	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^class BasicBlockFixture$/;"	c	namespace:ndn::tests	file:
BasicProducer	tests/unit-tests/ndn-cxx/face.t.cpp	/^  BasicProducer(const Name& name, const NameCallback& onInterest, const VoidCallback& onFail)$/;"	f	class:ns3::ndn::BasicProducer
BasicProducer	tests/unit-tests/ndn-cxx/face.t.cpp	/^class BasicProducer : public BaseTesterApp$/;"	c	namespace:ns3::ndn	file:
Batches	utils/batches.hpp	/^  Batches(){};$/;"	f	class:ns3::Batches
Batches	utils/batches.hpp	/^class Batches : public std::list<std::tuple<Time, uint32_t>> {$/;"	c	namespace:ns3
Begin	helper/ndn-face-container.cpp	/^FaceContainer::Begin(void) const$/;"	f	class:ns3::ndn::FaceContainer
Begin	model/cs/content-store-impl.hpp	/^ContentStoreImpl<Policy>::Begin()$/;"	f	class:ns3::ndn::cs::ContentStoreImpl
Begin	model/cs/content-store-nocache.cpp	/^Nocache::Begin()$/;"	f	class:ns3::ndn::cs::Nocache
BestRouteStrategy	NFD/daemon/fw/best-route-strategy.cpp	/^BestRouteStrategy::BestRouteStrategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::BestRouteStrategy
BestRouteStrategy	NFD/daemon/fw/best-route-strategy.hpp	/^class BestRouteStrategy : public Strategy$/;"	c	namespace:nfd::fw
BestRouteStrategy2	NFD/daemon/fw/best-route-strategy2.cpp	/^BestRouteStrategy2::BestRouteStrategy2(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::BestRouteStrategy2
BestRouteStrategy2	NFD/daemon/fw/best-route-strategy2.hpp	/^class BestRouteStrategy2 : public Strategy$/;"	c	namespace:nfd::fw
Block	ndn-cxx/src/encoding/block.cpp	/^Block::Block()$/;"	f	class:ndn::Block
Block	ndn-cxx/src/encoding/block.cpp	/^Block::Block(const Block& block,$/;"	f	class:ndn::Block
Block	ndn-cxx/src/encoding/block.cpp	/^Block::Block(const ConstBufferPtr& buffer)$/;"	f	class:ndn::Block
Block	ndn-cxx/src/encoding/block.cpp	/^Block::Block(const ConstBufferPtr& buffer,$/;"	f	class:ndn::Block
Block	ndn-cxx/src/encoding/block.cpp	/^Block::Block(const ConstBufferPtr& wire,$/;"	f	class:ndn::Block
Block	ndn-cxx/src/encoding/block.cpp	/^Block::Block(const EncodingBuffer& buffer)$/;"	f	class:ndn::Block
Block	ndn-cxx/src/encoding/block.cpp	/^Block::Block(const uint8_t* buffer, size_t maxlength)$/;"	f	class:ndn::Block
Block	ndn-cxx/src/encoding/block.cpp	/^Block::Block(const void* bufferX, size_t maxlength)$/;"	f	class:ndn::Block
Block	ndn-cxx/src/encoding/block.cpp	/^Block::Block(uint32_t type)$/;"	f	class:ndn::Block
Block	ndn-cxx/src/encoding/block.cpp	/^Block::Block(uint32_t type, const Block& value)$/;"	f	class:ndn::Block
Block	ndn-cxx/src/encoding/block.cpp	/^Block::Block(uint32_t type, const ConstBufferPtr& value)$/;"	f	class:ndn::Block
Block	ndn-cxx/src/encoding/block.hpp	/^class Block$/;"	c	namespace:ndn
BlockPrinter	ndn-cxx/tools/tlvdump.cpp	/^BlockPrinter(const Block& block, const std::string& indent = "")$/;"	f	namespace:ndn
BlockSequence	ndn-cxx/src/transport/stream-transport.hpp	/^  typedef std::list<Block> BlockSequence;$/;"	t	class:ndn::StreamTransportImpl
BoostResolver	ndn-cxx/src/util/dns.cpp	/^typedef boost::asio::ip::basic_resolver<boost::asio::ip::udp> BoostResolver;$/;"	t	namespace:ndn::dns	file:
BroadcastStrategy	NFD/daemon/fw/broadcast-strategy.cpp	/^BroadcastStrategy::BroadcastStrategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::BroadcastStrategy
BroadcastStrategy	NFD/daemon/fw/broadcast-strategy.hpp	/^class BroadcastStrategy : public MulticastStrategy$/;"	c	namespace:nfd::fw
Buffer	ndn-cxx/src/encoding/buffer.cpp	/^Buffer::Buffer()$/;"	f	class:ndn::Buffer
Buffer	ndn-cxx/src/encoding/buffer.cpp	/^Buffer::Buffer(const void* buf, size_t length)$/;"	f	class:ndn::Buffer
Buffer	ndn-cxx/src/encoding/buffer.cpp	/^Buffer::Buffer(size_t size)$/;"	f	class:ndn::Buffer
Buffer	ndn-cxx/src/encoding/buffer.hpp	/^  Buffer(InputIterator first, InputIterator last)$/;"	f	class:ndn::Buffer
Buffer	ndn-cxx/src/encoding/buffer.hpp	/^class Buffer : public std::vector<uint8_t>$/;"	c	namespace:ndn
BufferPtr	ndn-cxx/src/encoding/buffer.hpp	/^typedef shared_ptr<Buffer> BufferPtr;$/;"	t	namespace:ndn
ByteCounter	NFD/daemon/face/face-counters.hpp	/^  ByteCounter()$/;"	f	class:nfd::ByteCounter
ByteCounter	NFD/daemon/face/face-counters.hpp	/^class ByteCounter : noncopyable$/;"	c	namespace:nfd
CAPACITY_DOWN	NFD/daemon/table/dead-nonce-list.cpp	/^const double DeadNonceList::CAPACITY_DOWN = 0.9;$/;"	m	class:nfd::DeadNonceList	file:
CAPACITY_DOWN	NFD/daemon/table/dead-nonce-list.hpp	/^  static const double CAPACITY_DOWN;$/;"	m	class:nfd::DeadNonceList
CAPACITY_UP	NFD/daemon/table/dead-nonce-list.cpp	/^const double DeadNonceList::CAPACITY_UP = 1.2;$/;"	m	class:nfd::DeadNonceList	file:
CAPACITY_UP	NFD/daemon/table/dead-nonce-list.hpp	/^  static const double CAPACITY_UP;$/;"	m	class:nfd::DeadNonceList
CCNX_APP_DELAY_TRACER_H	utils/tracers/ndn-app-delay-tracer.hpp	21;"	d
CCNX_CS_TRACER_H	utils/tracers/ndn-cs-tracer.hpp	21;"	d
CCNX_RATE_L3_TRACER_H	utils/tracers/ndn-l3-rate-tracer.hpp	21;"	d
CERT	ndn-cxx/tests/unit-tests/security/certificate.t.cpp	/^const uint8_t CERT[] = {$/;"	m	namespace:ndn	file:
CERT_INFO	ndn-cxx/tests/unit-tests/security/certificate.t.cpp	/^const std::string CERT_INFO = "Certificate name:\\n"$/;"	m	namespace:ndn	file:
CFReleaser	ndn-cxx/src/security/sec-tpm-osx.cpp	/^  CFReleaser()$/;"	f	class:ndn::CFReleaser
CFReleaser	ndn-cxx/src/security/sec-tpm-osx.cpp	/^  CFReleaser(const CFReleaser& inReleaser)$/;"	f	class:ndn::CFReleaser
CFReleaser	ndn-cxx/src/security/sec-tpm-osx.cpp	/^  CFReleaser(const T& typeRef)$/;"	f	class:ndn::CFReleaser
CFReleaser	ndn-cxx/src/security/sec-tpm-osx.cpp	/^class CFReleaser$/;"	c	namespace:ndn	file:
CHANNELS_LIST_DATASET_NCOMPS	NFD/daemon/mgmt/face-manager.cpp	/^const size_t FaceManager::CHANNELS_LIST_DATASET_NCOMPS = CHANNELS_LIST_DATASET_PREFIX.size();$/;"	m	class:nfd::FaceManager	file:
CHANNELS_LIST_DATASET_NCOMPS	NFD/daemon/mgmt/face-manager.hpp	/^  static const size_t CHANNELS_LIST_DATASET_NCOMPS;$/;"	m	class:nfd::FaceManager
CHANNELS_LIST_DATASET_PREFIX	NFD/daemon/mgmt/face-manager.hpp	/^  static const Name CHANNELS_LIST_DATASET_PREFIX;$/;"	m	class:nfd::FaceManager
CHANNEL_PATH1	NFD/tests/daemon/face/unix-stream.t.cpp	38;"	d	file:
CHANNEL_PATH2	NFD/tests/daemon/face/unix-stream.t.cpp	39;"	d	file:
CHECK_CS_FIND	NFD/tests/daemon/table/cs.t.cpp	31;"	d	file:
CITY_HASH_HPP	NFD/core/city-hash.hpp	63;"	d
CLIENT	utils/topology/rocketfuel-map-reader.hpp	/^  enum node_type_t { UNKNOWN = 0, CLIENT = 1, GATEWAY = 2, BACKBONE = 3 };$/;"	e	enum:ns3::RocketfuelMapReader::node_type_t
CLOSE	NFD/websocketpp/websocketpp/frame.hpp	/^        CLOSE = 0x8,$/;"	e	enum:websocketpp::frame::opcode::value
COMMAND_PREFIX	NFD/daemon/mgmt/face-manager.hpp	/^  static const Name COMMAND_PREFIX; \/\/ \/localhost\/nfd\/faces$/;"	m	class:nfd::FaceManager
COMMAND_PREFIX	NFD/daemon/mgmt/fib-manager.cpp	/^const Name FibManager::COMMAND_PREFIX = "\/localhost\/nfd\/fib";$/;"	m	class:nfd::FibManager	file:
COMMAND_PREFIX	NFD/daemon/mgmt/fib-manager.hpp	/^  static const Name COMMAND_PREFIX; \/\/ \/localhost\/nfd\/fib$/;"	m	class:nfd::FibManager
COMMAND_PREFIX	NFD/daemon/mgmt/strategy-choice-manager.cpp	/^const Name StrategyChoiceManager::COMMAND_PREFIX = "\/localhost\/nfd\/strategy-choice";$/;"	m	class:nfd::StrategyChoiceManager	file:
COMMAND_PREFIX	NFD/daemon/mgmt/strategy-choice-manager.hpp	/^  static const Name COMMAND_PREFIX; \/\/ \/localhost\/nfd\/strategy-choice$/;"	m	class:nfd::StrategyChoiceManager
COMMAND_PREFIX	NFD/rib/rib-manager.cpp	/^const Name RibManager::COMMAND_PREFIX = "\/localhost\/nfd\/rib";$/;"	m	class:nfd::rib::RibManager	file:
COMMAND_PREFIX	NFD/rib/rib-manager.hpp	/^  static const Name COMMAND_PREFIX; \/\/ \/localhost\/nrd$/;"	m	class:nfd::rib::RibManager
COMMAND_PREFIX	NFD/tests/rib/remote-registrator.t.cpp	/^  const Name COMMAND_PREFIX;$/;"	m	class:nfd::rib::tests::RemoteRegistratorFixture	file:
COMMAND_PREFIX	NFD/tests/rib/rib-manager.t.cpp	/^  const Name COMMAND_PREFIX;$/;"	m	class:nfd::rib::tests::RibManagerFixture	file:
COMMAND_SIGNED_NCOMPS	NFD/daemon/mgmt/face-manager.cpp	/^const size_t FaceManager::COMMAND_SIGNED_NCOMPS =$/;"	m	class:nfd::FaceManager	file:
COMMAND_SIGNED_NCOMPS	NFD/daemon/mgmt/face-manager.hpp	/^  static const size_t COMMAND_SIGNED_NCOMPS;$/;"	m	class:nfd::FaceManager
COMMAND_SIGNED_NCOMPS	NFD/daemon/mgmt/fib-manager.cpp	/^const size_t FibManager::COMMAND_SIGNED_NCOMPS =$/;"	m	class:nfd::FibManager	file:
COMMAND_SIGNED_NCOMPS	NFD/daemon/mgmt/fib-manager.hpp	/^  static const size_t COMMAND_SIGNED_NCOMPS;$/;"	m	class:nfd::FibManager
COMMAND_SIGNED_NCOMPS	NFD/daemon/mgmt/strategy-choice-manager.cpp	/^const size_t StrategyChoiceManager::COMMAND_SIGNED_NCOMPS =$/;"	m	class:nfd::StrategyChoiceManager	file:
COMMAND_SIGNED_NCOMPS	NFD/daemon/mgmt/strategy-choice-manager.hpp	/^  static const size_t COMMAND_SIGNED_NCOMPS;$/;"	m	class:nfd::StrategyChoiceManager
COMMAND_SIGNED_NCOMPS	NFD/rib/rib-manager.cpp	/^const size_t RibManager::COMMAND_SIGNED_NCOMPS =$/;"	m	class:nfd::rib::RibManager	file:
COMMAND_SIGNED_NCOMPS	NFD/rib/rib-manager.hpp	/^  static const size_t COMMAND_SIGNED_NCOMPS;$/;"	m	class:nfd::rib::RibManager
COMMAND_UNSIGNED_NCOMPS	NFD/daemon/mgmt/face-manager.cpp	/^const size_t FaceManager::COMMAND_UNSIGNED_NCOMPS =$/;"	m	class:nfd::FaceManager	file:
COMMAND_UNSIGNED_NCOMPS	NFD/daemon/mgmt/face-manager.hpp	/^  static const size_t COMMAND_UNSIGNED_NCOMPS;$/;"	m	class:nfd::FaceManager
COMMAND_UNSIGNED_NCOMPS	NFD/daemon/mgmt/fib-manager.cpp	/^const size_t FibManager::COMMAND_UNSIGNED_NCOMPS =$/;"	m	class:nfd::FibManager	file:
COMMAND_UNSIGNED_NCOMPS	NFD/daemon/mgmt/fib-manager.hpp	/^  static const size_t COMMAND_UNSIGNED_NCOMPS;$/;"	m	class:nfd::FibManager
COMMAND_UNSIGNED_NCOMPS	NFD/daemon/mgmt/strategy-choice-manager.cpp	/^const size_t StrategyChoiceManager::COMMAND_UNSIGNED_NCOMPS =$/;"	m	class:nfd::StrategyChoiceManager	file:
COMMAND_UNSIGNED_NCOMPS	NFD/daemon/mgmt/strategy-choice-manager.hpp	/^  static const size_t COMMAND_UNSIGNED_NCOMPS;$/;"	m	class:nfd::StrategyChoiceManager
COMMAND_UNSIGNED_NCOMPS	NFD/rib/rib-manager.cpp	/^const size_t RibManager::COMMAND_UNSIGNED_NCOMPS =$/;"	m	class:nfd::rib::RibManager	file:
COMMAND_UNSIGNED_NCOMPS	NFD/rib/rib-manager.hpp	/^  static const size_t COMMAND_UNSIGNED_NCOMPS;$/;"	m	class:nfd::rib::RibManager
CONFIG	NFD/tests/core/config-file.t.cpp	/^const std::string CONFIG =$/;"	m	namespace:nfd::tests	file:
CONFIG	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^const std::string CONFIG =$/;"	m	namespace:nfd::tests	file:
CONFIG_N_A_SECTIONS	NFD/tests/core/config-file.t.cpp	/^const int CONFIG_N_A_SECTIONS = 1;$/;"	m	namespace:nfd::tests	file:
CONFIG_N_B_SECTIONS	NFD/tests/core/config-file.t.cpp	/^const int CONFIG_N_B_SECTIONS = 1;$/;"	m	namespace:nfd::tests	file:
CONFIG_PATH	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^const boost::filesystem::path CONFIG_PATH =$/;"	m	namespace:nfd::tests	file:
CONGESTION	ndn-cxx/src/lp/nack-header.hpp	/^  CONGESTION = 50,$/;"	m	class:ndn::lp::NackReason
CONTINUATION	NFD/websocketpp/websocketpp/frame.hpp	/^        CONTINUATION = 0x0,$/;"	e	enum:websocketpp::frame::opcode::value
CONTROL_PARAMETER_COST	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_COST,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_EXPIRATION_PERIOD	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_EXPIRATION_PERIOD,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_FACE_ID	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_FACE_ID,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_FIELD	ndn-cxx/src/management/nfd-control-parameters.hpp	/^const std::string CONTROL_PARAMETER_FIELD[CONTROL_PARAMETER_UBOUND] = {$/;"	m	namespace:ndn::nfd
CONTROL_PARAMETER_FLAGS	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_FLAGS,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_LOCAL_CONTROL_FEATURE	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_LOCAL_CONTROL_FEATURE,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_NAME	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_NAME,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_ORIGIN	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_ORIGIN,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_STRATEGY	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_STRATEGY,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_UBOUND	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_UBOUND$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_PARAMETER_URI	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  CONTROL_PARAMETER_URI,$/;"	e	enum:ndn::nfd::ControlParameterField
CONTROL_RSVB	NFD/websocketpp/websocketpp/frame.hpp	/^        CONTROL_RSVB = 0xB,$/;"	e	enum:websocketpp::frame::opcode::value
CONTROL_RSVC	NFD/websocketpp/websocketpp/frame.hpp	/^        CONTROL_RSVC = 0xC,$/;"	e	enum:websocketpp::frame::opcode::value
CONTROL_RSVD	NFD/websocketpp/websocketpp/frame.hpp	/^        CONTROL_RSVD = 0xD,$/;"	e	enum:websocketpp::frame::opcode::value
CONTROL_RSVE	NFD/websocketpp/websocketpp/frame.hpp	/^        CONTROL_RSVE = 0xE,$/;"	e	enum:websocketpp::frame::opcode::value
CONTROL_RSVF	NFD/websocketpp/websocketpp/frame.hpp	/^        CONTROL_RSVF = 0xF$/;"	e	enum:websocketpp::frame::opcode::value
COUNTING_POLICY_H_	utils/trie/counting-policy.hpp	21;"	d
CRC_LEN	ndn-cxx/src/util/ethernet.hpp	/^const size_t CRC_LEN      = 4;      \/\/\/< Octets in Ethernet frame check sequence$/;"	m	namespace:ndn::util::ethernet
CS_CAPACITY	NFD/tests/other/cs-benchmark.cpp	/^  static const size_t CS_CAPACITY = 50000;$/;"	m	class:nfd::tests::CsBenchmarkFixture	file:
CUSTOM_APP_H_	examples/ndn-custom-apps/custom-app.hpp	23;"	d
Cache	ndn-cxx/src/security/certificate-cache-ttl.hpp	/^  typedef std::map<Name, std::pair<shared_ptr<const IdentityCertificate>, EventId> > Cache;$/;"	t	class:ndn::CertificateCacheTtl
Cache	ndn-cxx/src/util/in-memory-storage.hpp	/^  > Cache;$/;"	t	class:ndn::util::InMemoryStorage
CacheHits	utils/tracers/ndn-cs-tracer.cpp	/^CsTracer::CacheHits(shared_ptr<const Interest>, shared_ptr<const Data>)$/;"	f	class:ns3::ndn::CsTracer
CacheHitsCallback	model/cs/ndn-content-store.hpp	/^  typedef void (*CacheHitsCallback)(shared_ptr<const Interest>, shared_ptr<const Data>);$/;"	t	class:ns3::ndn::ContentStore
CacheMisses	utils/tracers/ndn-cs-tracer.cpp	/^CsTracer::CacheMisses(shared_ptr<const Interest>)$/;"	f	class:ns3::ndn::CsTracer
CacheMissesCallback	model/cs/ndn-content-store.hpp	/^  typedef void (*CacheMissesCallback)(shared_ptr<const Interest>);$/;"	t	class:ns3::ndn::ContentStore
CachePolicy	ndn-cxx/src/lp/cache-policy.cpp	/^CachePolicy::CachePolicy()$/;"	f	class:ndn::lp::CachePolicy
CachePolicy	ndn-cxx/src/lp/cache-policy.cpp	/^CachePolicy::CachePolicy(const Block& block)$/;"	f	class:ndn::lp::CachePolicy
CachePolicy	ndn-cxx/src/lp/cache-policy.hpp	/^class CachePolicy$/;"	c	class:ndn::lp::CachePolicyType
CachePolicy	ndn-cxx/src/lp/tlv.hpp	/^  CachePolicy = 820,$/;"	e	enum:ndn::lp::tlv::__anon4
CachePolicyField	ndn-cxx/src/lp/fields.hpp	/^                          tlv::CachePolicy> CachePolicyField;$/;"	t	namespace:ndn::lp
CachePolicyType	ndn-cxx/src/lp/cache-policy.hpp	/^enum class CachePolicyType {$/;"	c	namespace:ndn::lp
CachePolicyType	ndn-cxx/src/lp/tlv.hpp	/^  CachePolicyType = 821,$/;"	e	enum:ndn::lp::tlv::__anon4
CachingPolicy	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  CachingPolicy      = 83,$/;"	e	enum:ndn::tlv::nfd::__anon12
CalculateAllPossibleRoutes	helper/ndn-global-routing-helper.cpp	/^GlobalRoutingHelper::CalculateAllPossibleRoutes()$/;"	f	class:ns3::ndn::GlobalRoutingHelper
CalculateRoutes	helper/ndn-global-routing-helper.cpp	/^GlobalRoutingHelper::CalculateRoutes()$/;"	f	class:ns3::ndn::GlobalRoutingHelper
CancelAllFixture	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^  CancelAllFixture()$/;"	f	struct:ndn::util::scheduler::tests::CancelAllFixture
CancelAllFixture	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^struct CancelAllFixture : public ::ndn::tests::UnitTestTimeFixture$/;"	s	namespace:ndn::util::scheduler::tests	file:
CanonizeFailureCallback	ndn-cxx/src/util/face-uri.hpp	/^  typedef function<void(const std::string& reason)> CanonizeFailureCallback;$/;"	t	class:ndn::util::FaceUri
CanonizeFixture	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^  CanonizeFixture()$/;"	f	class:ndn::util::tests::CanonizeFixture
CanonizeFixture	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^class CanonizeFixture : noncopyable$/;"	c	namespace:ndn::util::tests	file:
CanonizeProvider	ndn-cxx/src/util/face-uri.cpp	/^class CanonizeProvider : noncopyable$/;"	c	namespace:ndn::util	file:
CanonizeProviderTable	ndn-cxx/src/util/face-uri.cpp	/^typedef std::map<std::string, shared_ptr<CanonizeProvider> > CanonizeProviderTable;$/;"	t	namespace:ndn::util	file:
CanonizeProviderTableInitializer	ndn-cxx/src/util/face-uri.cpp	/^  CanonizeProviderTableInitializer(CanonizeProviderTable& providerTable)$/;"	f	class:ndn::util::CanonizeProviderTableInitializer
CanonizeProviderTableInitializer	ndn-cxx/src/util/face-uri.cpp	/^class CanonizeProviderTableInitializer$/;"	c	namespace:ndn::util	file:
CanonizeProviders	ndn-cxx/src/util/face-uri.cpp	/^  > CanonizeProviders;$/;"	t	namespace:ndn::util	file:
CanonizeSuccessCallback	ndn-cxx/src/util/face-uri.hpp	/^  typedef function<void(const FaceUri&)> CanonizeSuccessCallback;$/;"	t	class:ndn::util::FaceUri
CanonizeTestCase	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^    CanonizeTestCase(const std::string& request,$/;"	f	class:ndn::util::tests::CanonizeFixture::CanonizeTestCase
CanonizeTestCase	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^  class CanonizeTestCase$/;"	c	class:ndn::util::tests::CanonizeFixture	file:
Certificate	ndn-cxx/src/security/certificate.cpp	/^Certificate::Certificate()$/;"	f	class:ndn::Certificate
Certificate	ndn-cxx/src/security/certificate.cpp	/^Certificate::Certificate(const Block& block)$/;"	f	class:ndn::Certificate
Certificate	ndn-cxx/src/security/certificate.cpp	/^Certificate::Certificate(const Data& data)$/;"	f	class:ndn::Certificate
Certificate	ndn-cxx/src/security/certificate.hpp	/^class Certificate : public Data$/;"	c	namespace:ndn
CertificateCache	ndn-cxx/src/security/certificate-cache.hpp	/^class CertificateCache : noncopyable$/;"	c	namespace:ndn
CertificateCacheFixture	ndn-cxx/tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^  CertificateCacheFixture()$/;"	f	class:ndn::tests::CertificateCacheFixture
CertificateCacheFixture	ndn-cxx/tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^class CertificateCacheFixture : public UnitTestTimeFixture$/;"	c	namespace:ndn::tests	file:
CertificateCacheTtl	ndn-cxx/src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::CertificateCacheTtl(boost::asio::io_service& io,$/;"	f	class:ndn::CertificateCacheTtl
CertificateCacheTtl	ndn-cxx/src/security/certificate-cache-ttl.hpp	/^class CertificateCacheTtl : public CertificateCache$/;"	c	namespace:ndn
CertificateContainer	ndn-cxx/src/security/certificate-container.cpp	/^CertificateContainer::CertificateContainer()$/;"	f	class:ndn::security::CertificateContainer
CertificateContainer	ndn-cxx/src/security/certificate-container.cpp	/^CertificateContainer::CertificateContainer(std::set<Name>&& certNames,$/;"	f	class:ndn::security::CertificateContainer
CertificateContainer	ndn-cxx/src/security/certificate-container.hpp	/^class CertificateContainer$/;"	c	namespace:ndn::security
CertificateExtension	ndn-cxx/src/security/certificate-extension.hpp	/^  CertificateExtension(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::CertificateExtension
CertificateExtension	ndn-cxx/src/security/certificate-extension.hpp	/^  CertificateExtension(const OID& oid, const bool isCritical, const Buffer& value)$/;"	f	class:ndn::CertificateExtension
CertificateExtension	ndn-cxx/src/security/certificate-extension.hpp	/^  CertificateExtension(const OID& oid, const bool isCritical,$/;"	f	class:ndn::CertificateExtension
CertificateExtension	ndn-cxx/src/security/certificate-extension.hpp	/^class CertificateExtension$/;"	c	namespace:ndn
CertificateList	ndn-cxx/src/security/validator-config.hpp	/^  typedef std::list<shared_ptr<IdentityCertificate> > CertificateList;$/;"	t	class:ndn::ValidatorConfig
CertificatePackage	ndn-cxx/src/encoding/tlv-security.hpp	/^  CertificatePackage = 130$/;"	e	enum:ndn::tlv::security::__anon10
CertificateSubjectDescription	ndn-cxx/src/security/certificate-subject-description.hpp	/^  CertificateSubjectDescription(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::CertificateSubjectDescription
CertificateSubjectDescription	ndn-cxx/src/security/certificate-subject-description.hpp	/^  CertificateSubjectDescription(const OID& oid, const std::string& value)$/;"	f	class:ndn::CertificateSubjectDescription
CertificateSubjectDescription	ndn-cxx/src/security/certificate-subject-description.hpp	/^class CertificateSubjectDescription$/;"	c	namespace:ndn
Channel	NFD/daemon/face/channel.hpp	/^class Channel : noncopyable$/;"	c	namespace:nfd
ChannelMap	NFD/daemon/face/tcp-factory.hpp	/^  typedef std::map< tcp::Endpoint, shared_ptr<TcpChannel> > ChannelMap;$/;"	t	class:nfd::TcpFactory
ChannelMap	NFD/daemon/face/udp-factory.hpp	/^  typedef std::map<udp::Endpoint, shared_ptr<UdpChannel>> ChannelMap;$/;"	t	class:nfd::UdpFactory
ChannelMap	NFD/daemon/face/unix-stream-factory.hpp	/^  typedef std::map< unix_stream::Endpoint, shared_ptr<UnixStreamChannel> > ChannelMap;$/;"	t	class:nfd::UnixStreamFactory
ChannelMap	NFD/daemon/face/websocket-factory.hpp	/^  typedef std::map< websocket::Endpoint, shared_ptr<WebSocketChannel> > ChannelMap;$/;"	t	class:nfd::WebSocketFactory
ChannelStatus	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  ChannelStatus         = 130,$/;"	e	enum:ndn::tlv::nfd::__anon11
ChannelStatus	ndn-cxx/src/management/nfd-channel-status.cpp	/^ChannelStatus::ChannelStatus()$/;"	f	class:ndn::nfd::ChannelStatus
ChannelStatus	ndn-cxx/src/management/nfd-channel-status.cpp	/^ChannelStatus::ChannelStatus(const Block& payload)$/;"	f	class:ndn::nfd::ChannelStatus
ChannelStatus	ndn-cxx/src/management/nfd-channel-status.hpp	/^class ChannelStatus$/;"	c	namespace:ndn::nfd
ChannelStatusFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^class ChannelStatusFixture : public FaceManagerFixture$/;"	c	namespace:nfd::tests	file:
ChannelStatusPublisher	NFD/daemon/mgmt/channel-status-publisher.cpp	/^ChannelStatusPublisher::ChannelStatusPublisher(const FactoryMap& factories,$/;"	f	class:nfd::ChannelStatusPublisher
ChannelStatusPublisher	NFD/daemon/mgmt/channel-status-publisher.hpp	/^class ChannelStatusPublisher : public SegmentPublisher<AppFace>$/;"	c	namespace:nfd
ChannelStatusPublisherFixture	NFD/tests/daemon/mgmt/channel-status-publisher.t.cpp	/^  ChannelStatusPublisherFixture()$/;"	f	class:nfd::tests::ChannelStatusPublisherFixture
ChannelStatusPublisherFixture	NFD/tests/daemon/mgmt/channel-status-publisher.t.cpp	/^class ChannelStatusPublisherFixture : BaseFixture$/;"	c	namespace:nfd::tests	file:
CheckRetxTimeout	apps/ndn-consumer.cpp	/^Consumer::CheckRetxTimeout()$/;"	f	class:ns3::ndn::Consumer
Checker	ndn-cxx/src/security/conf/checker.hpp	/^class Checker$/;"	c	namespace:ndn::security::conf
CheckerFactory	ndn-cxx/src/security/conf/checker.hpp	/^class CheckerFactory$/;"	c	namespace:ndn::security::conf
CheckerList	ndn-cxx/src/security/conf/rule.hpp	/^  typedef std::vector<shared_ptr<Checker> > CheckerList;$/;"	t	class:ndn::security::conf::Rule
ChildSelector	ndn-cxx/src/encoding/tlv.hpp	/^  ChildSelector = 17,$/;"	e	enum:ndn::tlv::__anon8
CityHash	NFD/daemon/table/name-tree.cpp	/^typedef boost::mpl::if_c<sizeof(size_t) >= 8, Hash64, Hash32>::type CityHash;$/;"	t	namespace:nfd::name_tree	file:
CityHash128	NFD/core/city-hash.cpp	/^uint128 CityHash128(const char *s, size_t len) {$/;"	f
CityHash128WithSeed	NFD/core/city-hash.cpp	/^uint128 CityHash128WithSeed(const char *s, size_t len, uint128 seed) {$/;"	f
CityHash32	NFD/core/city-hash.cpp	/^uint32 CityHash32(const char *s, size_t len) {$/;"	f
CityHash64	NFD/core/city-hash.cpp	/^uint64 CityHash64(const char *s, size_t len) {$/;"	f
CityHash64WithSeed	NFD/core/city-hash.cpp	/^uint64 CityHash64WithSeed(const char *s, size_t len, uint64 seed) {$/;"	f
CityHash64WithSeeds	NFD/core/city-hash.cpp	/^uint64 CityHash64WithSeeds(const char *s, size_t len,$/;"	f
CityMurmur	NFD/core/city-hash.cpp	/^static uint128 CityMurmur(const char *s, size_t len, uint128 seed) {$/;"	f	file:
CleanExpired	model/cs/content-store-with-freshness.hpp	/^ContentStoreWithFreshness<Policy>::CleanExpired()$/;"	f	class:ns3::ndn::cs::ContentStoreWithFreshness
CleanupEntry	ndn-cxx/src/util/in-memory-storage-lfu.hpp	/^  struct CleanupEntry$/;"	s	class:ndn::util::InMemoryStorageLfu
CleanupFixture	tests/unit-tests/tests-common.hpp	/^class CleanupFixture$/;"	c	namespace:ns3::ndn
CleanupIndex	ndn-cxx/src/util/in-memory-storage-fifo.hpp	/^  > CleanupIndex;$/;"	t	class:ndn::util::InMemoryStorageFifo
CleanupIndex	ndn-cxx/src/util/in-memory-storage-lfu.hpp	/^  > CleanupIndex;$/;"	t	class:ndn::util::InMemoryStorageLfu
CleanupIndex	ndn-cxx/src/util/in-memory-storage-lru.hpp	/^  > CleanupIndex;$/;"	t	class:ndn::util::InMemoryStorageLru
ClearSent	utils/ndn-rtt-estimator.cpp	/^RttEstimator::ClearSent()$/;"	f	class:ns3::ndn::RttEstimator
Client	NFD/tests/daemon/face/websocket.t.cpp	/^typedef websocketpp::client<websocketpp::config::asio_client> Client;$/;"	t	file:
ClientControlStrategy	NFD/daemon/fw/client-control-strategy.cpp	/^ClientControlStrategy::ClientControlStrategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::ClientControlStrategy
ClientControlStrategy	NFD/daemon/fw/client-control-strategy.hpp	/^class ClientControlStrategy : public BestRouteStrategy$/;"	c	namespace:nfd::fw
CommandContinuation	ndn-cxx/src/mgmt/dispatcher.hpp	/^typedef std::function<void(const ControlResponse& resp)> CommandContinuation;$/;"	t	namespace:ndn::mgmt
CommandFailArgs	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^  typedef boost::tuple<uint32_t,std::string> CommandFailArgs;$/;"	t	class:ndn::nfd::tests::CommandFixture	file:
CommandFailCallback	ndn-cxx/src/management/nfd-controller.hpp	/^  typedef function<void(uint32_t\/*code*\/,const std::string&\/*reason*\/)> CommandFailCallback;$/;"	t	class:ndn::nfd::Controller
CommandFixture	NFD/tests/daemon/mgmt/validation-common.hpp	/^  CommandFixture()$/;"	f	class:nfd::tests::CommandFixture
CommandFixture	NFD/tests/daemon/mgmt/validation-common.hpp	/^class CommandFixture : public T$/;"	c	namespace:nfd::tests
CommandFixture	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^  CommandFixture()$/;"	f	class:ndn::nfd::tests::CommandFixture
CommandFixture	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^class CommandFixture : public ndn::tests::UnitTestTimeFixture$/;"	c	namespace:ndn::nfd::tests	file:
CommandIdentityGlobalFixture	NFD/tests/daemon/mgmt/validation-common.cpp	/^CommandIdentityGlobalFixture::CommandIdentityGlobalFixture()$/;"	f	class:nfd::tests::CommandIdentityGlobalFixture
CommandIdentityGlobalFixture	NFD/tests/daemon/mgmt/validation-common.hpp	/^class CommandIdentityGlobalFixture$/;"	c	namespace:nfd::tests
CommandInterestGenerator	ndn-cxx/src/util/command-interest-generator.hpp	/^  CommandInterestGenerator()$/;"	f	class:ndn::CommandInterestGenerator
CommandInterestGenerator	ndn-cxx/src/util/command-interest-generator.hpp	/^class CommandInterestGenerator$/;"	c	namespace:ndn
CommandInterestValidator	ndn-cxx/src/util/command-interest-validator.hpp	/^  CommandInterestValidator(const time::milliseconds& graceInterval =$/;"	f	class:ndn::CommandInterestValidator
CommandInterestValidator	ndn-cxx/src/util/command-interest-validator.hpp	/^class CommandInterestValidator : public Validator$/;"	c	namespace:ndn
CommandOptions	ndn-cxx/src/management/nfd-command-options.cpp	/^CommandOptions::CommandOptions()$/;"	f	class:ndn::nfd::CommandOptions
CommandOptions	ndn-cxx/src/management/nfd-command-options.hpp	/^class CommandOptions$/;"	c	namespace:ndn::nfd
CommandSucceedArgs	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^  typedef boost::tuple<ControlParameters> CommandSucceedArgs;$/;"	t	class:ndn::nfd::tests::CommandFixture	file:
CommandSucceedCallback	ndn-cxx/src/management/nfd-controller.hpp	/^  typedef function<void(const ControlParameters&)> CommandSucceedCallback;$/;"	t	class:ndn::nfd::Controller
CommandValidator	NFD/daemon/mgmt/command-validator.cpp	/^CommandValidator::CommandValidator()$/;"	f	class:nfd::CommandValidator
CommandValidator	NFD/daemon/mgmt/command-validator.hpp	/^class CommandValidator$/;"	c	namespace:nfd
CommandValidatorTester	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  CommandValidatorTester()$/;"	f	class:nfd::tests::CommandValidatorTester
CommandValidatorTester	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^class CommandValidatorTester$/;"	c	namespace:nfd::tests	file:
Commit	utils/topology/rocketfuel-weights-reader.cpp	/^RocketfuelWeightsReader::Commit()$/;"	f	class:ns3::RocketfuelWeightsReader
CompleteCallback	ndn-cxx/src/util/segment-fetcher.hpp	/^  typedef function<void (const ConstBufferPtr& data)> CompleteCallback;$/;"	t	class:ndn::util::SegmentFetcher
Component	ndn-cxx/src/name-component.cpp	/^Component::Component()$/;"	f	class:ndn::name::Component
Component	ndn-cxx/src/name-component.cpp	/^Component::Component(const Block& wire)$/;"	f	class:ndn::name::Component
Component	ndn-cxx/src/name-component.cpp	/^Component::Component(const Buffer& value)$/;"	f	class:ndn::name::Component
Component	ndn-cxx/src/name-component.cpp	/^Component::Component(const ConstBufferPtr& buffer)$/;"	f	class:ndn::name::Component
Component	ndn-cxx/src/name-component.cpp	/^Component::Component(const char* str)$/;"	f	class:ndn::name::Component
Component	ndn-cxx/src/name-component.cpp	/^Component::Component(const std::string& str)$/;"	f	class:ndn::name::Component
Component	ndn-cxx/src/name-component.cpp	/^Component::Component(const uint8_t* value, size_t valueLen)$/;"	f	class:ndn::name::Component
Component	ndn-cxx/src/name-component.hpp	/^Component::Component(Iterator first, Iterator last)$/;"	f	class:ndn::name::Component
Component	ndn-cxx/src/name-component.hpp	/^class Component : public Block$/;"	c	namespace:ndn::name
Component	ndn-cxx/src/name.hpp	/^  typedef name::Component Component;$/;"	t	class:ndn::Name
Component1	ndn-cxx/tests/unit-tests/name.t.cpp	/^const uint8_t Component1[] = {0x7, 0x3, \/\/ Error in Type$/;"	m	namespace:ndn::tests	file:
ComponentsSet	ndn-cxx/src/util/regex/regex-component-set-matcher.hpp	/^  typedef std::set<shared_ptr<RegexComponentMatcher> > ComponentsSet;$/;"	t	class:ndn::RegexComponentSetMatcher
ConfigFile	NFD/core/config-file.cpp	/^ConfigFile::ConfigFile(UnknownConfigSectionHandler unknownSectionCallback)$/;"	f	class:nfd::ConfigFile
ConfigFile	NFD/core/config-file.hpp	/^class ConfigFile : noncopyable$/;"	c	namespace:nfd
ConfigFile	ndn-cxx/src/util/config-file.cpp	/^ConfigFile::ConfigFile()$/;"	f	class:ndn::ConfigFile
ConfigFile	ndn-cxx/src/util/config-file.hpp	/^class ConfigFile : noncopyable$/;"	c	namespace:ndn
ConfigSection	NFD/core/config-file.hpp	/^typedef boost::property_tree::ptree ConfigSection;$/;"	t	namespace:nfd
ConfigSection	model/ndn-l3-protocol.hpp	/^typedef boost::property_tree::ptree ConfigSection;$/;"	t	namespace:nfd
ConfigSection	ndn-cxx/src/security/conf/common.hpp	/^typedef boost::property_tree::ptree ConfigSection;$/;"	t	namespace:ndn::security::conf
ConfigSectionHandler	NFD/core/config-file.hpp	/^                      const std::string& \/*filename*\/)> ConfigSectionHandler;$/;"	t	namespace:nfd
Connect	utils/tracers/l2-tracer.cpp	/^L2Tracer::Connect()$/;"	f	class:ns3::L2Tracer
Connect	utils/tracers/ndn-app-delay-tracer.cpp	/^AppDelayTracer::Connect()$/;"	f	class:ns3::ndn::AppDelayTracer
Connect	utils/tracers/ndn-cs-tracer.cpp	/^CsTracer::Connect()$/;"	f	class:ns3::ndn::CsTracer
Connect	utils/tracers/ndn-l3-tracer.cpp	/^L3Tracer::Connect()$/;"	f	class:ns3::ndn::L3Tracer
ConnectBackboneRouters	utils/topology/rocketfuel-map-reader.cpp	/^RocketfuelMapReader::ConnectBackboneRouters()$/;"	f	class:ns3::RocketfuelMapReader
ConnectFailedCallback	NFD/daemon/face/channel.hpp	/^  typedef function<void(const std::string& reason)> ConnectFailedCallback;$/;"	t	class:nfd::Channel
Connection	ndn-cxx/src/util/signal-connection.cpp	/^Connection::Connection()$/;"	f	class:ndn::util::signal::Connection
Connection	ndn-cxx/src/util/signal-connection.cpp	/^Connection::Connection(weak_ptr<function<void()>> disconnect)$/;"	f	class:ndn::util::signal::Connection
Connection	ndn-cxx/src/util/signal-connection.hpp	/^class Connection$/;"	c	namespace:ndn::util::signal
ConstBufferPtr	ndn-cxx/src/encoding/buffer.hpp	/^typedef shared_ptr<const Buffer> ConstBufferPtr;$/;"	t	namespace:ndn
Consumer	apps/ndn-consumer.cpp	/^Consumer::Consumer()$/;"	f	class:ns3::ndn::Consumer
Consumer	apps/ndn-consumer.hpp	/^class Consumer : public App {$/;"	c	namespace:ns3::ndn
Consumer	ndn-cxx/examples/consumer.cpp	/^class Consumer : noncopyable$/;"	c	namespace:ndn::examples	file:
Consumer	ndn-cxx/tools/ndncatchunks3.cpp	/^  Consumer(const std::string& dataName,$/;"	f	class:ndn::Consumer
Consumer	ndn-cxx/tools/ndncatchunks3.cpp	/^class Consumer$/;"	c	namespace:ndn	file:
ConsumerBatches	apps/ndn-consumer-batches.cpp	/^ConsumerBatches::ConsumerBatches()$/;"	f	class:ns3::ndn::ConsumerBatches
ConsumerBatches	apps/ndn-consumer-batches.hpp	/^class ConsumerBatches : public Consumer {$/;"	c	namespace:ns3::ndn
ConsumerCbr	apps/ndn-consumer-cbr.cpp	/^ConsumerCbr::ConsumerCbr()$/;"	f	class:ns3::ndn::ConsumerCbr
ConsumerCbr	apps/ndn-consumer-cbr.hpp	/^class ConsumerCbr : public Consumer {$/;"	c	namespace:ns3::ndn
ConsumerWindow	apps/ndn-consumer-window.cpp	/^ConsumerWindow::ConsumerWindow()$/;"	f	class:ns3::ndn::ConsumerWindow
ConsumerWindow	apps/ndn-consumer-window.hpp	/^class ConsumerWindow : public Consumer {$/;"	c	namespace:ns3::ndn
ConsumerWithTimer	ndn-cxx/examples/consumer-with-timer.cpp	/^  ConsumerWithTimer()$/;"	f	class:ndn::examples::ConsumerWithTimer
ConsumerWithTimer	ndn-cxx/examples/consumer-with-timer.cpp	/^class ConsumerWithTimer : noncopyable$/;"	c	namespace:ndn::examples	file:
ConsumerZipfMandelbrot	apps/ndn-consumer-zipf-mandelbrot.cpp	/^ConsumerZipfMandelbrot::ConsumerZipfMandelbrot()$/;"	f	class:ns3::ndn::ConsumerZipfMandelbrot
ConsumerZipfMandelbrot	apps/ndn-consumer-zipf-mandelbrot.hpp	/^class ConsumerZipfMandelbrot : public ConsumerCbr {$/;"	c	namespace:ns3::ndn
Container	NFD/tests/daemon/face/packet-datasets.hpp	/^  typedef std::vector<ndn::Buffer> Container;$/;"	t	class:nfd::tests::CorruptedInterest
Container	NFD/tests/daemon/face/packet-datasets.hpp	/^  typedef std::vector<ndn::Buffer> Container;$/;"	t	class:nfd::tests::CorruptedInterestWithLocalControlHeader
Container	helper/ndn-face-container.hpp	/^  typedef std::vector<shared_ptr<Face>> Container;$/;"	t	class:ns3::ndn::FaceContainer
ContainerWithOnEmptySignal	ndn-cxx/src/detail/container-with-on-empty-signal.hpp	/^class ContainerWithOnEmptySignal$/;"	c	namespace:ndn
Content	ndn-cxx/src/encoding/tlv.hpp	/^  Content       = 21,$/;"	e	enum:ndn::tlv::__anon8
Content1	ndn-cxx/tests/unit-tests/data.t.cpp	/^const uint8_t Content1[] = {0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x21};$/;"	m	namespace:ndn::tests	file:
ContentStore	model/cs/ndn-content-store.hpp	/^class ContentStore : public Object {$/;"	c	namespace:ns3::ndn
ContentStoreImpl	model/cs/content-store-impl.hpp	/^  ContentStoreImpl(){};$/;"	f	class:ns3::ndn::cs::ContentStoreImpl
ContentStoreImpl	model/cs/content-store-impl.hpp	/^class ContentStoreImpl$/;"	c	namespace:ns3::ndn::cs
ContentStoreWithFreshness	model/cs/content-store-with-freshness.hpp	/^class ContentStoreWithFreshness$/;"	c	namespace:ns3::ndn::cs
ContentStoreWithProbability	model/cs/content-store-with-probability.hpp	/^  ContentStoreWithProbability(){};$/;"	f	class:ns3::ndn::cs::ContentStoreWithProbability
ContentStoreWithProbability	model/cs/content-store-with-probability.hpp	/^class ContentStoreWithProbability$/;"	c	namespace:ns3::ndn::cs
ContentStoreWithStats	model/cs/content-store-with-stats.hpp	/^  ContentStoreWithStats()$/;"	f	class:ns3::ndn::cs::ContentStoreWithStats
ContentStoreWithStats	model/cs/content-store-with-stats.hpp	/^class ContentStoreWithStats$/;"	c	namespace:ns3::ndn::cs
ContentType	ndn-cxx/src/encoding/tlv.hpp	/^  ContentType     = 24,$/;"	e	enum:ndn::tlv::__anon8
ContentTypeValue	ndn-cxx/src/encoding/tlv.hpp	/^enum ContentTypeValue {$/;"	g	namespace:ndn::tlv
ContentType_Blob	ndn-cxx/src/encoding/tlv.hpp	/^  ContentType_Blob = 0,$/;"	e	enum:ndn::tlv::ContentTypeValue
ContentType_Key	ndn-cxx/src/encoding/tlv.hpp	/^  ContentType_Key = 2,$/;"	e	enum:ndn::tlv::ContentTypeValue
ContentType_Link	ndn-cxx/src/encoding/tlv.hpp	/^  ContentType_Link = 1,$/;"	e	enum:ndn::tlv::ContentTypeValue
ContentType_Nack	ndn-cxx/src/encoding/tlv.hpp	/^  ContentType_Nack = 3$/;"	e	enum:ndn::tlv::ContentTypeValue
ControlCommand	ndn-cxx/src/management/nfd-control-command.cpp	/^ControlCommand::ControlCommand(const std::string& module, const std::string& verb)$/;"	f	class:ndn::nfd::ControlCommand
ControlCommand	ndn-cxx/src/management/nfd-control-command.hpp	/^class ControlCommand : noncopyable$/;"	c	namespace:ndn::nfd
ControlCommandHandler	ndn-cxx/src/mgmt/dispatcher.hpp	/^                           CommandContinuation done)> ControlCommandHandler;$/;"	t	namespace:ndn::mgmt
ControlParameterField	ndn-cxx/src/management/nfd-control-parameters.hpp	/^enum ControlParameterField {$/;"	g	namespace:ndn::nfd
ControlParameters	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  ControlParameters   = 104,$/;"	e	enum:ndn::tlv::nfd::__anon11
ControlParameters	ndn-cxx/src/management/nfd-control-parameters.cpp	/^ControlParameters::ControlParameters()$/;"	f	class:ndn::nfd::ControlParameters
ControlParameters	ndn-cxx/src/management/nfd-control-parameters.cpp	/^ControlParameters::ControlParameters(const Block& block)$/;"	f	class:ndn::nfd::ControlParameters
ControlParameters	ndn-cxx/src/management/nfd-control-parameters.hpp	/^class ControlParameters : public ndn::mgmt::ControlParameters$/;"	c	namespace:ndn::nfd
ControlParameters	ndn-cxx/src/mgmt/control-parameters.hpp	/^class ControlParameters$/;"	c	namespace:ndn::mgmt
ControlParametersParser	ndn-cxx/src/mgmt/dispatcher.hpp	/^  ControlParametersParser;$/;"	t	class:ndn::mgmt::Dispatcher
ControlResponse	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  ControlResponse = 101,$/;"	e	enum:ndn::tlv::nfd::__anon11
ControlResponse	ndn-cxx/src/management/nfd-control-response.hpp	/^typedef ndn::mgmt::ControlResponse ControlResponse;$/;"	t	namespace:ndn::nfd
ControlResponse	ndn-cxx/src/mgmt/control-response.cpp	/^ControlResponse::ControlResponse()$/;"	f	class:ndn::mgmt::ControlResponse
ControlResponse	ndn-cxx/src/mgmt/control-response.cpp	/^ControlResponse::ControlResponse(const Block& block)$/;"	f	class:ndn::mgmt::ControlResponse
ControlResponse	ndn-cxx/src/mgmt/control-response.cpp	/^ControlResponse::ControlResponse(uint32_t code, const std::string& text)$/;"	f	class:ndn::mgmt::ControlResponse
ControlResponse	ndn-cxx/src/mgmt/control-response.hpp	/^class ControlResponse$/;"	c	namespace:ndn::mgmt
Controller	ndn-cxx/src/management/nfd-controller.cpp	/^Controller::Controller(Face& face, KeyChain& keyChain)$/;"	f	class:ndn::nfd::Controller
Controller	ndn-cxx/src/management/nfd-controller.hpp	/^class Controller : noncopyable$/;"	c	namespace:ndn::nfd
ConventionsDatasets	ndn-cxx/tests/unit-tests/name.t.cpp	/^typedef boost::mpl::vector<Numeric, Timestamp> ConventionsDatasets;$/;"	t	namespace:ndn::tests	file:
Convert	model/ndn-ns3.hpp	/^class Convert {$/;"	c	namespace:ns3::ndn
Copy	utils/ndn-rtt-mean-deviation.cpp	/^RttMeanDeviation::Copy() const$/;"	f	class:ns3::ndn::RttMeanDeviation
CorruptedInterest	NFD/tests/daemon/face/packet-datasets.hpp	/^  CorruptedInterest()$/;"	f	class:nfd::tests::CorruptedInterest
CorruptedInterest	NFD/tests/daemon/face/packet-datasets.hpp	/^class CorruptedInterest$/;"	c	namespace:nfd::tests
CorruptedInterestWithLocalControlHeader	NFD/tests/daemon/face/packet-datasets.hpp	/^  CorruptedInterestWithLocalControlHeader()$/;"	f	class:nfd::tests::CorruptedInterestWithLocalControlHeader
CorruptedInterestWithLocalControlHeader	NFD/tests/daemon/face/packet-datasets.hpp	/^class CorruptedInterestWithLocalControlHeader$/;"	c	namespace:nfd::tests
CorruptedPackets	NFD/tests/daemon/face/packet-datasets.hpp	/^                            CorruptedInterest> CorruptedPackets;$/;"	t	namespace:nfd::tests
Cost	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  Cost                = 106,$/;"	e	enum:ndn::tlv::nfd::__anon11
CreateLink	utils/topology/rocketfuel-map-reader.cpp	/^RocketfuelMapReader::CreateLink(string nodeName1, string nodeName2, double averageRtt,$/;"	f	class:ns3::RocketfuelMapReader
CreateNode	utils/topology/annotated-topology-reader.cpp	/^AnnotatedTopologyReader::CreateNode(const std::string name, double posX, double posY,$/;"	f	class:ns3::AnnotatedTopologyReader
CreateNode	utils/topology/annotated-topology-reader.cpp	/^AnnotatedTopologyReader::CreateNode(const std::string name, uint32_t systemId)$/;"	f	class:ns3::AnnotatedTopologyReader
CryptoPP	ndn-cxx/src/encoding/oid.hpp	/^namespace CryptoPP {$/;"	n
CryptoPP	ndn-cxx/src/security/certificate-extension.hpp	/^namespace CryptoPP {$/;"	n
CryptoPP	ndn-cxx/src/security/certificate-subject-description.hpp	/^namespace CryptoPP {$/;"	n
CryptoPP	ndn-cxx/src/security/public-key.hpp	/^namespace CryptoPP {$/;"	n
Cs	NFD/daemon/table/cs.cpp	/^Cs::Cs(size_t nMaxPackets, unique_ptr<Policy> policy)$/;"	f	class:nfd::cs::Cs
Cs	NFD/daemon/table/cs.hpp	/^class Cs : noncopyable$/;"	c	namespace:nfd::cs
CsBenchmarkFixture	NFD/tests/other/cs-benchmark.cpp	/^  CsBenchmarkFixture()$/;"	f	class:nfd::tests::CsBenchmarkFixture
CsBenchmarkFixture	NFD/tests/other/cs-benchmark.cpp	/^class CsBenchmarkFixture : public BaseFixture$/;"	c	namespace:nfd::tests	file:
CsEntryCallback	model/cs/content-store-impl.hpp	/^  typedef void (*CsEntryCallback)(Ptr<const Entry>);$/;"	t	class:ns3::ndn::cs::ContentStoreImpl
CsTracer	utils/tracers/ndn-cs-tracer.cpp	/^CsTracer::CsTracer(shared_ptr<std::ostream> os, Ptr<Node> node)$/;"	f	class:ns3::ndn::CsTracer
CsTracer	utils/tracers/ndn-cs-tracer.cpp	/^CsTracer::CsTracer(shared_ptr<std::ostream> os, const std::string& node)$/;"	f	class:ns3::ndn::CsTracer
CsTracer	utils/tracers/ndn-cs-tracer.hpp	/^class CsTracer : public SimpleRefCount<CsTracer> {$/;"	c	namespace:ns3::ndn
CurrentTimestamp	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  CurrentTimestamp     = 130,$/;"	e	enum:ndn::tlv::nfd::__anon11
CustomApp	examples/ndn-custom-apps/custom-app.hpp	/^class CustomApp : public ndn::App {$/;"	c	namespace:ns3
CustomClock	ndn-cxx/src/util/time-custom-clock.hpp	/^class CustomClock$/;"	c	namespace:ndn::time
CustomSteadyClock	ndn-cxx/src/util/time-custom-clock.hpp	/^typedef CustomClock<steady_clock> CustomSteadyClock;$/;"	t	namespace:ndn::time
CustomSteadyClock	utils/ndn-time.hpp	/^class CustomSteadyClock : public CustomClock<steady_clock> {$/;"	c	namespace:ns3::ndn::time
CustomSystemClock	ndn-cxx/src/util/time-custom-clock.hpp	/^typedef CustomClock<system_clock> CustomSystemClock;$/;"	t	namespace:ndn::time
CustomSystemClock	utils/ndn-time.hpp	/^class CustomSystemClock : public CustomClock<system_clock> {$/;"	c	namespace:ns3::ndn::time
CustomizedChecker	ndn-cxx/src/security/conf/checker.hpp	/^  CustomizedChecker(uint32_t sigType,$/;"	f	class:ndn::security::conf::CustomizedChecker
CustomizedChecker	ndn-cxx/src/security/conf/checker.hpp	/^class CustomizedChecker : public Checker$/;"	c	namespace:ndn::security::conf
DATASET_PREFIX	NFD/daemon/mgmt/status-server.cpp	/^const Name StatusServer::DATASET_PREFIX = "ndn:\/localhost\/nfd\/status";$/;"	m	class:nfd::StatusServer	file:
DATASET_PREFIX	NFD/daemon/mgmt/status-server.hpp	/^  static const Name DATASET_PREFIX;$/;"	m	class:nfd::StatusServer
DATA_HAS_NO_SEGMENT	ndn-cxx/src/util/segment-fetcher.hpp	/^    DATA_HAS_NO_SEGMENT = 2,$/;"	e	enum:ndn::util::SegmentFetcher::ErrorCode
DECLARE_SIGNAL_EMIT	ndn-cxx/src/util/signal-emit.hpp	59;"	d
DECL_OVERRIDE	NFD/common.hpp	47;"	d
DECL_OVERRIDE	NFD/common.hpp	49;"	d
DECL_OVERRIDE	NFD/daemon/face/datagram-face.hpp	/^  close() DECL_OVERRIDE;$/;"	m	class:nfd::DatagramFace
DECL_OVERRIDE	NFD/daemon/face/datagram-face.hpp	/^  sendData(const Data& data) DECL_OVERRIDE;$/;"	m	class:nfd::DatagramFace
DECL_OVERRIDE	NFD/daemon/face/datagram-face.hpp	/^  sendInterest(const Interest& interest) DECL_OVERRIDE;$/;"	m	class:nfd::DatagramFace
DECL_OVERRIDE	NFD/daemon/face/ethernet-face.hpp	/^  close() DECL_OVERRIDE;$/;"	m	class:nfd::EthernetFace
DECL_OVERRIDE	NFD/daemon/face/ethernet-face.hpp	/^  sendData(const Data& data) DECL_OVERRIDE;$/;"	m	class:nfd::EthernetFace
DECL_OVERRIDE	NFD/daemon/face/ethernet-face.hpp	/^  sendInterest(const Interest& interest) DECL_OVERRIDE;$/;"	m	class:nfd::EthernetFace
DECL_OVERRIDE	NFD/daemon/face/ethernet-factory.hpp	/^             const FaceConnectFailedCallback& onConnectFailed) DECL_OVERRIDE;$/;"	m	class:nfd::EthernetFactory
DECL_OVERRIDE	NFD/daemon/face/multicast-udp-face.hpp	/^  sendData(const Data& data) DECL_OVERRIDE;$/;"	m	class:nfd::MulticastUdpFace
DECL_OVERRIDE	NFD/daemon/face/multicast-udp-face.hpp	/^  sendInterest(const Interest& interest) DECL_OVERRIDE;$/;"	m	class:nfd::MulticastUdpFace
DECL_OVERRIDE	NFD/daemon/face/null-face.hpp	/^  close() DECL_OVERRIDE;$/;"	m	class:nfd::NullFace
DECL_OVERRIDE	NFD/daemon/face/null-face.hpp	/^  sendData(const Data& data) DECL_OVERRIDE;$/;"	m	class:nfd::NullFace
DECL_OVERRIDE	NFD/daemon/face/null-face.hpp	/^  sendInterest(const Interest& interest) DECL_OVERRIDE;$/;"	m	class:nfd::NullFace
DECL_OVERRIDE	NFD/daemon/face/stream-face.hpp	/^  close() DECL_OVERRIDE;$/;"	m	class:nfd::StreamFace
DECL_OVERRIDE	NFD/daemon/face/stream-face.hpp	/^  sendData(const Data& data) DECL_OVERRIDE;$/;"	m	class:nfd::StreamFace
DECL_OVERRIDE	NFD/daemon/face/stream-face.hpp	/^  sendInterest(const Interest& interest) DECL_OVERRIDE;$/;"	m	class:nfd::StreamFace
DECL_OVERRIDE	NFD/daemon/face/tcp-factory.hpp	/^             const FaceConnectFailedCallback& onConnectFailed) DECL_OVERRIDE;$/;"	m	class:nfd::TcpFactory
DECL_OVERRIDE	NFD/daemon/face/udp-face.hpp	/^  getFaceStatus() const DECL_OVERRIDE;$/;"	m	class:nfd::UdpFace
DECL_OVERRIDE	NFD/daemon/face/udp-factory.hpp	/^             const FaceConnectFailedCallback& onConnectFailed) DECL_OVERRIDE;$/;"	m	class:nfd::UdpFactory
DECL_OVERRIDE	NFD/daemon/face/unix-stream-channel.hpp	/^  ~UnixStreamChannel() DECL_OVERRIDE;$/;"	m	class:nfd::UnixStreamChannel
DECL_OVERRIDE	NFD/daemon/face/unix-stream-factory.hpp	/^             const FaceConnectFailedCallback& onConnectFailed) DECL_OVERRIDE;$/;"	m	class:nfd::UnixStreamFactory
DECL_OVERRIDE	NFD/daemon/face/websocket-face.hpp	/^  close() DECL_OVERRIDE;$/;"	m	class:nfd::WebSocketFace
DECL_OVERRIDE	NFD/daemon/face/websocket-face.hpp	/^  sendData(const Data& data) DECL_OVERRIDE;$/;"	m	class:nfd::WebSocketFace
DECL_OVERRIDE	NFD/daemon/face/websocket-face.hpp	/^  sendInterest(const Interest& interest) DECL_OVERRIDE;$/;"	m	class:nfd::WebSocketFace
DECL_OVERRIDE	NFD/daemon/face/websocket-factory.hpp	/^             const FaceConnectFailedCallback& onConnectFailed) DECL_OVERRIDE;$/;"	m	class:nfd::WebSocketFactory
DECL_OVERRIDE	NFD/daemon/fw/access-strategy.hpp	/^                        const Face& inFace, const Data& data) DECL_OVERRIDE;$/;"	m	class:nfd::fw::AccessStrategy
DECL_OVERRIDE	NFD/daemon/fw/access-strategy.hpp	/^                       shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;$/;"	m	class:nfd::fw::AccessStrategy
DECL_OVERRIDE	NFD/daemon/fw/best-route-strategy.hpp	/^                       shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;$/;"	m	class:nfd::fw::BestRouteStrategy
DECL_OVERRIDE	NFD/daemon/fw/best-route-strategy2.hpp	/^                       shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;$/;"	m	class:nfd::fw::BestRouteStrategy2
DECL_OVERRIDE	NFD/daemon/fw/broadcast-strategy.hpp	/^                       shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;$/;"	m	class:nfd::fw::BroadcastStrategy
DECL_OVERRIDE	NFD/daemon/fw/client-control-strategy.hpp	/^                       shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;$/;"	m	class:nfd::fw::ClientControlStrategy
DECL_OVERRIDE	NFD/daemon/fw/multicast-strategy.hpp	/^                       shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;$/;"	m	class:nfd::fw::MulticastStrategy
DECL_OVERRIDE	NFD/daemon/fw/ncc-strategy.hpp	/^                        const Face& inFace, const Data& data) DECL_OVERRIDE;$/;"	m	class:nfd::fw::NccStrategy
DECL_OVERRIDE	NFD/daemon/fw/ncc-strategy.hpp	/^                       shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;$/;"	m	class:nfd::fw::NccStrategy
DECL_OVERRIDE	NFD/daemon/fw/retx-suppression-exponential.hpp	/^         pit::Entry& pitEntry) const DECL_OVERRIDE;$/;"	m	class:nfd::fw::RetxSuppressionExponential
DECL_OVERRIDE	NFD/daemon/fw/retx-suppression-fixed.hpp	/^         pit::Entry& pitEntry) const DECL_OVERRIDE;$/;"	m	class:nfd::fw::RetxSuppressionFixed
DECL_OVERRIDE	NFD/daemon/table/cs-policy-lru.hpp	/^  doAfterInsert(iterator i) DECL_OVERRIDE;$/;"	m	class:nfd::cs::lru::LruPolicy
DECL_OVERRIDE	NFD/daemon/table/cs-policy-lru.hpp	/^  doAfterRefresh(iterator i) DECL_OVERRIDE;$/;"	m	class:nfd::cs::lru::LruPolicy
DECL_OVERRIDE	NFD/daemon/table/cs-policy-lru.hpp	/^  doBeforeErase(iterator i) DECL_OVERRIDE;$/;"	m	class:nfd::cs::lru::LruPolicy
DECL_OVERRIDE	NFD/daemon/table/cs-policy-lru.hpp	/^  doBeforeUse(iterator i) DECL_OVERRIDE;$/;"	m	class:nfd::cs::lru::LruPolicy
DECL_OVERRIDE	NFD/daemon/table/cs-policy-lru.hpp	/^  evictEntries() DECL_OVERRIDE;$/;"	m	class:nfd::cs::lru::LruPolicy
DECL_OVERRIDE	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^  doAfterInsert(iterator i) DECL_OVERRIDE;$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy
DECL_OVERRIDE	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^  doAfterRefresh(iterator i) DECL_OVERRIDE;$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy
DECL_OVERRIDE	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^  doBeforeErase(iterator i) DECL_OVERRIDE;$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy
DECL_OVERRIDE	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^  doBeforeUse(iterator i) DECL_OVERRIDE;$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy
DECL_OVERRIDE	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^  evictEntries() DECL_OVERRIDE;$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy
DECL_OVERRIDE	NFD/tests/daemon/fw/strategy-tester.hpp	/^               bool wantNewNonce = false) DECL_OVERRIDE;$/;"	m	class:nfd::fw::tests::StrategyTester
DECL_OVERRIDE	NFD/tests/daemon/fw/strategy-tester.hpp	/^  rejectPendingInterest(shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;$/;"	m	class:nfd::fw::tests::StrategyTester
DECL_OVERRIDE	NFD/tools/ndn-autoconfig/guess-from-identity-name.hpp	/^  start() DECL_OVERRIDE;$/;"	m	class:ndn::tools::autoconfig::GuessFromIdentityName
DECL_OVERRIDE	NFD/tools/ndn-autoconfig/guess-from-search-domains.hpp	/^  start() DECL_OVERRIDE;$/;"	m	class:ndn::tools::autoconfig::GuessFromSearchDomains
DECL_OVERRIDE	NFD/tools/ndn-autoconfig/multicast-discovery.hpp	/^  start() DECL_OVERRIDE;$/;"	m	class:ndn::tools::autoconfig::MulticastDiscovery
DEFAULT_APP_NAME	NFD/tests/rib/remote-registrator.t.cpp	/^  static const name::Component DEFAULT_APP_NAME;$/;"	m	class:nfd::rib::tests::RemoteRegistratorFixture	file:
DEFAULT_CERTIFICATE_CACHE	ndn-cxx/src/security/validator-config.cpp	/^const shared_ptr<CertificateCache> ValidatorConfig::DEFAULT_CERTIFICATE_CACHE;$/;"	m	class:ndn::ValidatorConfig	file:
DEFAULT_CERTIFICATE_CACHE	ndn-cxx/src/security/validator-config.hpp	/^  static const shared_ptr<CertificateCache> DEFAULT_CERTIFICATE_CACHE;$/;"	m	class:ndn::ValidatorConfig
DEFAULT_CERTIFICATE_CACHE	ndn-cxx/src/security/validator-regex.cpp	/^const shared_ptr<CertificateCache> ValidatorRegex::DEFAULT_CERTIFICATE_CACHE;$/;"	m	class:ndn::ValidatorRegex	file:
DEFAULT_CERTIFICATE_CACHE	ndn-cxx/src/security/validator-regex.hpp	/^  static const shared_ptr<CertificateCache> DEFAULT_CERTIFICATE_CACHE;$/;"	m	class:ndn::ValidatorRegex
DEFAULT_CERTIFICATE_NAME	ndn-cxx/src/util/command-interest-generator.hpp	/^  static const Name DEFAULT_CERTIFICATE_NAME;$/;"	m	class:ndn::CommandInterestGenerator
DEFAULT_COST	NFD/tools/nfdc.cpp	/^const uint64_t Nfdc::DEFAULT_COST = 0;$/;"	m	class:nfdc::Nfdc	file:
DEFAULT_COST	NFD/tools/nfdc.hpp	/^  static const uint64_t DEFAULT_COST;$/;"	m	class:nfdc::Nfdc
DEFAULT_CS_MAX_PACKETS	NFD/daemon/mgmt/tables-config-section.cpp	/^const size_t TablesConfigSection::DEFAULT_CS_MAX_PACKETS = 65536;$/;"	m	class:nfd::TablesConfigSection	file:
DEFAULT_CS_MAX_PACKETS	NFD/daemon/mgmt/tables-config-section.hpp	/^  static const size_t DEFAULT_CS_MAX_PACKETS;$/;"	m	class:nfd::TablesConfigSection
DEFAULT_EXPIRATION_PERIOD	NFD/tools/nfdc.cpp	/^const ndn::time::milliseconds Nfdc::DEFAULT_EXPIRATION_PERIOD = ndn::time::milliseconds::max();$/;"	m	class:nfdc::Nfdc	file:
DEFAULT_EXPIRATION_PERIOD	NFD/tools/nfdc.hpp	/^  static const ndn::time::milliseconds DEFAULT_EXPIRATION_PERIOD;$/;"	m	class:nfdc::Nfdc
DEFAULT_GRACE_INTERVAL	ndn-cxx/src/security/validator-config.hpp	/^  static const time::milliseconds DEFAULT_GRACE_INTERVAL;$/;"	m	class:ndn::ValidatorConfig
DEFAULT_INITIAL_INTERVAL	NFD/daemon/fw/retx-suppression-exponential.cpp	/^const RetxSuppressionExponential::Duration RetxSuppressionExponential::DEFAULT_INITIAL_INTERVAL =$/;"	m	class:nfd::fw::RetxSuppressionExponential	file:
DEFAULT_INITIAL_INTERVAL	NFD/daemon/fw/retx-suppression-exponential.hpp	/^  static const Duration DEFAULT_INITIAL_INTERVAL;$/;"	m	class:nfd::fw::RetxSuppressionExponential
DEFAULT_INTEREST_LIFETIME	ndn-cxx/src/interest.hpp	/^const time::milliseconds DEFAULT_INTEREST_LIFETIME = time::milliseconds(4000);$/;"	m	namespace:ndn
DEFAULT_KEY_PARAMS	ndn-cxx/src/security/key-chain.cpp	/^const RsaKeyParams KeyChain::DEFAULT_KEY_PARAMS;$/;"	m	class:ndn::security::KeyChain	file:
DEFAULT_KEY_PARAMS	ndn-cxx/src/security/key-chain.hpp	/^  static const RsaKeyParams DEFAULT_KEY_PARAMS;$/;"	m	class:ndn::security::KeyChain
DEFAULT_KEY_TIMESTAMP_TTL	ndn-cxx/src/security/validator-config.cpp	/^const time::system_clock::Duration ValidatorConfig::DEFAULT_KEY_TIMESTAMP_TTL = time::hours(1);$/;"	m	class:ndn::ValidatorConfig	file:
DEFAULT_KEY_TIMESTAMP_TTL	ndn-cxx/src/security/validator-config.hpp	/^  static const time::system_clock::Duration DEFAULT_KEY_TIMESTAMP_TTL;$/;"	m	class:ndn::ValidatorConfig
DEFAULT_LIFETIME	NFD/daemon/table/dead-nonce-list.cpp	/^const time::nanoseconds DeadNonceList::DEFAULT_LIFETIME = time::seconds(6);$/;"	m	class:nfd::DeadNonceList	file:
DEFAULT_LIFETIME	NFD/daemon/table/dead-nonce-list.hpp	/^  static const time::nanoseconds DEFAULT_LIFETIME;$/;"	m	class:nfd::DeadNonceList
DEFAULT_MAX_INTERVAL	NFD/daemon/fw/retx-suppression-exponential.cpp	/^const RetxSuppressionExponential::Duration RetxSuppressionExponential::DEFAULT_MAX_INTERVAL =$/;"	m	class:nfd::fw::RetxSuppressionExponential	file:
DEFAULT_MAX_INTERVAL	NFD/daemon/fw/retx-suppression-exponential.hpp	/^  static const Duration DEFAULT_MAX_INTERVAL;$/;"	m	class:nfd::fw::RetxSuppressionExponential
DEFAULT_MIN_RETX_INTERVAL	NFD/daemon/fw/retx-suppression-fixed.hpp	/^  static const time::milliseconds DEFAULT_MIN_RETX_INTERVAL;$/;"	m	class:nfd::fw::RetxSuppressionFixed
DEFAULT_MULTIPLIER	NFD/daemon/fw/retx-suppression-exponential.cpp	/^const float RetxSuppressionExponential::DEFAULT_MULTIPLIER = 2.0;$/;"	m	class:nfd::fw::RetxSuppressionExponential	file:
DEFAULT_MULTIPLIER	NFD/daemon/fw/retx-suppression-exponential.hpp	/^  static const float DEFAULT_MULTIPLIER;$/;"	m	class:nfd::fw::RetxSuppressionExponential
DEFAULT_OPTIONS	ndn-cxx/src/util/dummy-client-face.hpp	/^  static const Options DEFAULT_OPTIONS;$/;"	m	class:ndn::util::DummyClientFace
DEFAULT_PIB_SCHEME	ndn-cxx/src/security/key-chain.cpp	/^const std::string DEFAULT_PIB_SCHEME = "pib-sqlite3";$/;"	m	namespace:ndn::security	file:
DEFAULT_PREFIX	ndn-cxx/src/management/nfd-command-options.hpp	/^  static const Name DEFAULT_PREFIX;$/;"	m	class:ndn::nfd::CommandOptions
DEFAULT_PREFIX	ndn-cxx/src/security/key-chain.hpp	/^  static const Name DEFAULT_PREFIX;$/;"	m	class:ndn::security::KeyChain
DEFAULT_PRIVATE_KEY_DER	ndn-cxx/tests/unit-tests/data.t.cpp	/^const unsigned char DEFAULT_PRIVATE_KEY_DER[] = {$/;"	m	namespace:ndn::tests	file:
DEFAULT_SIGNING_INFO	ndn-cxx/src/security/key-chain.hpp	/^  static const SigningInfo DEFAULT_SIGNING_INFO;$/;"	m	class:ndn::security::KeyChain
DEFAULT_STATUS_DATASET_FRESHNESS_PERIOD	ndn-cxx/src/mgmt/status-dataset-context.cpp	/^const time::milliseconds DEFAULT_STATUS_DATASET_FRESHNESS_PERIOD = time::milliseconds(1000);$/;"	m	namespace:ndn::mgmt	file:
DEFAULT_TIMEOUT	ndn-cxx/src/management/nfd-command-options.hpp	/^  static const time::milliseconds DEFAULT_TIMEOUT;$/;"	m	class:ndn::nfd::CommandOptions
DEFAULT_TPM_SCHEME	ndn-cxx/src/security/key-chain.cpp	/^const std::string DEFAULT_TPM_SCHEME = "tpm-file";$/;"	m	namespace:ndn::security	file:
DEFAULT_TPM_SCHEME	ndn-cxx/src/security/key-chain.cpp	/^const std::string DEFAULT_TPM_SCHEME = "tpm-osxkeychain";$/;"	m	namespace:ndn::security	file:
DEFER_FIRST_WITHOUT_BEST_FACE	NFD/daemon/fw/ncc-strategy.cpp	/^const time::microseconds NccStrategy::DEFER_FIRST_WITHOUT_BEST_FACE = time::microseconds(4000);$/;"	m	class:nfd::fw::NccStrategy	file:
DEFER_FIRST_WITHOUT_BEST_FACE	NFD/daemon/fw/ncc-strategy.hpp	/^  static const time::microseconds DEFER_FIRST_WITHOUT_BEST_FACE;$/;"	m	class:nfd::fw::NccStrategy
DEFER_RANGE_WITHOUT_BEST_FACE	NFD/daemon/fw/ncc-strategy.cpp	/^const time::microseconds NccStrategy::DEFER_RANGE_WITHOUT_BEST_FACE = time::microseconds(75000);$/;"	m	class:nfd::fw::NccStrategy	file:
DEFER_RANGE_WITHOUT_BEST_FACE	NFD/daemon/fw/ncc-strategy.hpp	/^  static const time::microseconds DEFER_RANGE_WITHOUT_BEST_FACE;$/;"	m	class:nfd::fw::NccStrategy
DEPRECATED	ndn-cxx/src/common.hpp	78;"	d
DEPRECATED	ndn-cxx/src/common.hpp	80;"	d
DEPRECATED	ndn-cxx/src/common.hpp	83;"	d
DEPRECATED	ndn-cxx/src/encoding/block.hpp	/^  DEPRECATED($/;"	f	class:ndn::Block
DEPRECATED	ndn-cxx/src/name-component.hpp	/^  DEPRECATED($/;"	f	class:ndn::name::Component
DEREncodeGeneralTime	ndn-cxx/src/encoding/cryptopp/asn_ext.cpp	/^DEREncodeGeneralTime(CryptoPP::BufferedTransformation& bt,$/;"	f	namespace:ndn
DIGEST_ALGORITHM_SHA256	ndn-cxx/src/security/security-common.hpp	/^  DIGEST_ALGORITHM_SHA256$/;"	e	enum:ndn::DigestAlgorithm
DIGEST_SHA256_IDENTITY	ndn-cxx/src/security/key-chain.hpp	/^  static const Name DIGEST_SHA256_IDENTITY;$/;"	m	class:ndn::security::KeyChain
DONE	NFD/websocketpp/websocketpp/http/response.hpp	/^        DONE = 3$/;"	e	enum:websocketpp::http::parser::response::state
DUMB_REQUESTER_H_	examples/ndn-simple-with-content-freshness/one-interest-requester.hpp	23;"	d
DUMMY_CERT	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^static const uint8_t DUMMY_CERT[] =$/;"	m	namespace:ndn::security	file:
DUMMY_CERT	utils/dummy-keychain.cpp	/^static const uint8_t DUMMY_CERT[] =$/;"	m	namespace:ndn::security	file:
DUMMY_SIGNATURE	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^static const uint8_t DUMMY_SIGNATURE[] =$/;"	m	namespace:ndn::security	file:
DUMMY_SIGNATURE	utils/dummy-keychain.cpp	/^static const uint8_t DUMMY_SIGNATURE[] =$/;"	m	namespace:ndn::security	file:
DUPLICATE	ndn-cxx/src/lp/nack-header.hpp	/^  DUPLICATE = 100,$/;"	m	class:ndn::lp::NackReason
DUPLICATE_NONCE_IN_OTHER	NFD/daemon/table/pit-entry.hpp	/^  DUPLICATE_NONCE_IN_OTHER  = (1 << 1),$/;"	e	enum:nfd::pit::DuplicateNonceWhere
DUPLICATE_NONCE_IN_SAME	NFD/daemon/table/pit-entry.hpp	/^  DUPLICATE_NONCE_IN_SAME   = (1 << 0),$/;"	e	enum:nfd::pit::DuplicateNonceWhere
DUPLICATE_NONCE_NONE	NFD/daemon/table/pit-entry.hpp	/^  DUPLICATE_NONCE_NONE      = 0,$/;"	e	enum:nfd::pit::DuplicateNonceWhere
DUPLICATE_NONCE_OUT_OTHER	NFD/daemon/table/pit-entry.hpp	/^  DUPLICATE_NONCE_OUT_OTHER = (1 << 3)$/;"	e	enum:nfd::pit::DuplicateNonceWhere
DUPLICATE_NONCE_OUT_SAME	NFD/daemon/table/pit-entry.hpp	/^  DUPLICATE_NONCE_OUT_SAME  = (1 << 2),$/;"	e	enum:nfd::pit::DuplicateNonceWhere
Data	ndn-cxx/src/data.cpp	/^Data::Data()$/;"	f	class:ndn::Data
Data	ndn-cxx/src/data.cpp	/^Data::Data(const Block& wire)$/;"	f	class:ndn::Data
Data	ndn-cxx/src/data.cpp	/^Data::Data(const Name& name)$/;"	f	class:ndn::Data
Data	ndn-cxx/src/data.hpp	/^class Data : public TagHost, public enable_shared_from_this<Data>$/;"	c	namespace:ndn
Data	ndn-cxx/src/encoding/tlv.hpp	/^  Data          = 6,$/;"	e	enum:ndn::tlv::__anon8
Data1	ndn-cxx/tests/unit-tests/data.t.cpp	/^const uint8_t Data1[] = {$/;"	m	namespace:ndn::tests	file:
DataBlockFast	ndn-cxx/src/encoding/block-helpers.hpp	/^class DataBlockFast$/;"	c	namespace:ndn::encoding
DataBlockSlow	ndn-cxx/src/encoding/block-helpers.hpp	/^class DataBlockSlow$/;"	c	namespace:ndn::encoding
DataHeader	model/ndn-header.cpp	/^typedef PacketHeader<Data> DataHeader;$/;"	t	namespace:ns3::ndn	file:
DataIdentityFixture	ndn-cxx/tests/unit-tests/data.t.cpp	/^  DataIdentityFixture()$/;"	f	class:ndn::tests::DataIdentityFixture
DataIdentityFixture	ndn-cxx/tests/unit-tests/data.t.cpp	/^class DataIdentityFixture$/;"	c	namespace:ndn::tests	file:
DataMatchResult	NFD/daemon/table/pit.hpp	/^typedef std::vector<shared_ptr<pit::Entry>> DataMatchResult;$/;"	t	namespace:nfd::pit
DataRule	ndn-cxx/src/security/validator-config.hpp	/^  typedef security::conf::Rule<Data>     DataRule;$/;"	t	class:ndn::ValidatorConfig
DataRuleList	ndn-cxx/src/security/validator-config.hpp	/^  typedef std::vector<shared_ptr<DataRule> >     DataRuleList;$/;"	t	class:ndn::ValidatorConfig
DataSender	ndn-cxx/src/mgmt/status-dataset-context.hpp	/^                             const MetaInfo& metaInfo)> DataSender;$/;"	t	class:ndn::mgmt::StatusDatasetContext
DataTraceCallback	apps/ndn-app.hpp	/^  typedef void (*DataTraceCallback)(shared_ptr<const Data>, Ptr<App>, shared_ptr<Face>);$/;"	t	class:ns3::ndn::App
DataTraceCallback	model/ndn-l3-protocol.hpp	/^  typedef void (*DataTraceCallback)(const Data&, const Face&);$/;"	t	class:ns3::ndn::L3Protocol
DataWithLocalControlHeader	ndn-cxx/tests/unit-tests/data.t.cpp	/^const uint8_t DataWithLocalControlHeader[] = {$/;"	m	namespace:ndn::tests	file:
DataWithoutLocalControlHeader	ndn-cxx/tests/unit-tests/data.t.cpp	/^const uint8_t DataWithoutLocalControlHeader[] = {$/;"	m	namespace:ndn::tests	file:
DatagramFace	NFD/daemon/face/datagram-face.hpp	/^DatagramFace<T, U>::DatagramFace(const FaceUri& remoteUri, const FaceUri& localUri,$/;"	f	class:nfd::DatagramFace
DatagramFace	NFD/daemon/face/datagram-face.hpp	/^class DatagramFace : public Face$/;"	c	namespace:nfd
Dataset	ndn-cxx/tests/unit-tests/name.t.cpp	/^                                 function<bool(const name::Component&)> > > Dataset;$/;"	t	class:ndn::tests::Numeric	file:
Dataset	ndn-cxx/tests/unit-tests/name.t.cpp	/^                                 function<bool(const name::Component&)> > > Dataset;$/;"	t	class:ndn::tests::Timestamp	file:
DatasetSizes	NFD/tests/core/segment-publisher.t.cpp	/^typedef boost::mpl::vector<int_<10000>, int_<100>, int_<10>, int_<0> > DatasetSizes;$/;"	t	namespace:nfd::tests	file:
DeadNonceList	NFD/daemon/table/dead-nonce-list.cpp	/^DeadNonceList::DeadNonceList(const time::nanoseconds& lifetime)$/;"	f	class:nfd::DeadNonceList
DeadNonceList	NFD/daemon/table/dead-nonce-list.hpp	/^class DeadNonceList : noncopyable$/;"	c	namespace:nfd
DecodeHelper	ndn-cxx/src/lp/detail/field-decl.hpp	/^struct DecodeHelper$/;"	s	namespace:ndn::lp::detail
DecodeHelper	ndn-cxx/src/lp/detail/field-decl.hpp	/^struct DecodeHelper<TlvType, std::pair<Buffer::const_iterator, Buffer::const_iterator>>$/;"	s	namespace:ndn::lp::detail
DecodeHelper	ndn-cxx/src/lp/detail/field-decl.hpp	/^struct DecodeHelper<TlvType, uint64_t>$/;"	s	namespace:ndn::lp::detail
DefaultNetDeviceCallback	helper/ndn-stack-helper.cpp	/^StackHelper::DefaultNetDeviceCallback(Ptr<Node> node, Ptr<L3Protocol> ndn,$/;"	f	class:ns3::ndn::StackHelper
DefaultStrategyOnlyFixture	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  DefaultStrategyOnlyFixture()$/;"	f	class:nfd::tests::DefaultStrategyOnlyFixture
DefaultStrategyOnlyFixture	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^class DefaultStrategyOnlyFixture : public StrategyChoiceManagerFixture$/;"	c	namespace:nfd::tests	file:
DelegationSet	ndn-cxx/src/link.hpp	/^  typedef std::set<std::pair<uint32_t, Name>> DelegationSet;$/;"	t	class:ndn::Link
DescriptionEntry	ndn-cxx/src/encoding/tlv.hpp	/^  DescriptionEntry = 512,$/;"	e	enum:ndn::tlv::__anon9
DescriptionKey	ndn-cxx/src/encoding/tlv.hpp	/^  DescriptionKey = 513,$/;"	e	enum:ndn::tlv::__anon9
DescriptionValue	ndn-cxx/src/encoding/tlv.hpp	/^  DescriptionValue = 514$/;"	e	enum:ndn::tlv::__anon9
Deserialize	model/ndn-header.cpp	/^PacketHeader<Pkt>::Deserialize(ns3::Buffer::Iterator start)$/;"	f	class:ns3::ndn::PacketHeader
Deserialize	utils/ndn-fw-hop-count-tag.cpp	/^FwHopCountTag::Deserialize(TagBuffer i)$/;"	f	class:ns3::ndn::FwHopCountTag
DestinationFlag	ndn-cxx/src/destination-flag.hpp	/^  DestinationFlag()$/;"	f	class:ndn::DestinationFlag
DestinationFlag	ndn-cxx/src/destination-flag.hpp	/^  DestinationFlag(unsigned int flag)$/;"	f	class:ndn::DestinationFlag
DestinationFlag	ndn-cxx/src/destination-flag.hpp	/^class DestinationFlag $/;"	c	namespace:ndn
DestinationFlag	ndn-cxx/src/encoding/tlv.hpp	/^  DestinationFlag = 33,$/;"	e	enum:ndn::tlv::__anon8
Destroy	utils/tracers/l2-rate-tracer.cpp	/^L2RateTracer::Destroy()$/;"	f	class:ns3::L2RateTracer
Destroy	utils/tracers/ndn-app-delay-tracer.cpp	/^AppDelayTracer::Destroy()$/;"	f	class:ns3::ndn::AppDelayTracer
Destroy	utils/tracers/ndn-cs-tracer.cpp	/^CsTracer::Destroy()$/;"	f	class:ns3::ndn::CsTracer
Destroy	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::Destroy()$/;"	f	class:ns3::ndn::L3RateTracer
Digest	ndn-cxx/src/util/digest.cpp	/^Digest<Hash>::Digest()$/;"	f	class:ndn::util::Digest
Digest	ndn-cxx/src/util/digest.cpp	/^Digest<Hash>::Digest(std::istream& is)$/;"	f	class:ndn::util::Digest
Digest	ndn-cxx/src/util/digest.hpp	/^class Digest$/;"	c	namespace:ndn::util
DigestAlgorithm	ndn-cxx/src/security/security-common.hpp	/^enum DigestAlgorithm {$/;"	g	namespace:ndn
DigestSha256	ndn-cxx/src/encoding/tlv.hpp	/^  DigestSha256 = 0,$/;"	e	enum:ndn::tlv::SignatureTypeValue
DigestSha256	ndn-cxx/src/security/digest-sha256.cpp	/^DigestSha256::DigestSha256()$/;"	f	class:ndn::DigestSha256
DigestSha256	ndn-cxx/src/security/digest-sha256.cpp	/^DigestSha256::DigestSha256(const Signature& signature)$/;"	f	class:ndn::DigestSha256
DigestSha256	ndn-cxx/src/security/digest-sha256.hpp	/^class DigestSha256 : public Signature$/;"	c	namespace:ndn
DirTestFixture	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  DirTestFixture()$/;"	f	struct:ndn::tests::DirTestFixture
DirTestFixture	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^struct DirTestFixture : public security::IdentityManagementTimeFixture$/;"	s	namespace:ndn::tests	file:
Dispatcher	ndn-cxx/src/mgmt/dispatcher.cpp	/^Dispatcher::Dispatcher(Face& face, security::KeyChain& keyChain,$/;"	f	class:ndn::mgmt::Dispatcher
Dispatcher	ndn-cxx/src/mgmt/dispatcher.hpp	/^class Dispatcher : noncopyable$/;"	c	namespace:ndn::mgmt
DispatcherFixture	ndn-cxx/tests/unit-tests/mgmt/dispatcher.t.cpp	/^  DispatcherFixture()$/;"	f	class:ndn::mgmt::tests::DispatcherFixture
DispatcherFixture	ndn-cxx/tests/unit-tests/mgmt/dispatcher.t.cpp	/^class DispatcherFixture : public UnitTestTimeFixture$/;"	c	namespace:ndn::mgmt::tests	file:
DistancesMap	helper/boost-graph-ndn-global-routing-helper.hpp	/^struct DistancesMap : public std::map<ns3::Ptr<ns3::ndn::GlobalRouter>,$/;"	s	namespace:boost
DnsFixture	ndn-cxx/tests/unit-tests/util/dns.t.cpp	/^  DnsFixture()$/;"	f	class:ndn::util::tests::DnsFixture
DnsFixture	ndn-cxx/tests/unit-tests/util/dns.t.cpp	/^class DnsFixture$/;"	c	namespace:ndn::util::tests	file:
DoDispose	apps/ndn-app.cpp	/^App::DoDispose(void)$/;"	f	class:ns3::ndn::App
DoDispose	model/ndn-l3-protocol.cpp	/^L3Protocol::DoDispose(void)$/;"	f	class:ns3::ndn::L3Protocol
DoInitialize	apps/ndn-app.cpp	/^App::DoInitialize()$/;"	f	class:ns3::ndn::App
DontVerifySegment	ndn-cxx/src/util/segment-fetcher.hpp	/^class DontVerifySegment$/;"	c	namespace:ndn::util
Drop	utils/tracers/l2-rate-tracer.cpp	/^L2RateTracer::Drop(Ptr<const Packet> packet)$/;"	f	class:ns3::L2RateTracer
DummyAllSubscriber	NFD/tests/core/config-file.t.cpp	/^  DummyAllSubscriber(ConfigFile& config, bool expectDryRun=false)$/;"	f	class:nfd::tests::DummyAllSubscriber
DummyAllSubscriber	NFD/tests/core/config-file.t.cpp	/^class DummyAllSubscriber : public DummySubscriber$/;"	c	namespace:nfd::tests	file:
DummyChannel	NFD/tests/daemon/mgmt/channel-status-common.hpp	/^  DummyChannel(const std::string& uri)$/;"	f	class:nfd::tests::DummyChannel
DummyChannel	NFD/tests/daemon/mgmt/channel-status-common.hpp	/^class DummyChannel : public Channel$/;"	c	namespace:nfd::tests
DummyClientFace	ndn-cxx/src/util/dummy-client-face.cpp	/^DummyClientFace::DummyClientFace(const Options& options, shared_ptr<Transport> transport)$/;"	f	class:ndn::util::DummyClientFace
DummyClientFace	ndn-cxx/src/util/dummy-client-face.cpp	/^DummyClientFace::DummyClientFace(const Options& options, shared_ptr<Transport> transport,$/;"	f	class:ndn::util::DummyClientFace
DummyClientFace	ndn-cxx/src/util/dummy-client-face.hpp	/^class DummyClientFace : public ndn::Face$/;"	c	namespace:ndn::util
DummyExtraArg	ndn-cxx/src/util/signal-emit.hpp	/^class DummyExtraArg$/;"	c	namespace:ndn::util::signal
DummyFace	NFD/tests/daemon/face/dummy-face.hpp	/^typedef DummyFaceImpl<Face> DummyFace;$/;"	t	namespace:nfd::tests
DummyFaceImpl	NFD/tests/daemon/face/dummy-face.hpp	/^  DummyFaceImpl()$/;"	f	class:nfd::tests::DummyFaceImpl
DummyFaceImpl	NFD/tests/daemon/face/dummy-face.hpp	/^  DummyFaceImpl(const std::string& remoteUri, const std::string& localUri)$/;"	f	class:nfd::tests::DummyFaceImpl
DummyFaceImpl	NFD/tests/daemon/face/dummy-face.hpp	/^class DummyFaceImpl : public FaceBase$/;"	c	namespace:nfd::tests
DummyLocalFace	NFD/tests/daemon/face/dummy-face.hpp	/^typedef DummyFaceImpl<LocalFace> DummyLocalFace;$/;"	t	namespace:nfd::tests
DummyNoSubscriber	NFD/tests/core/config-file.t.cpp	/^  DummyNoSubscriber(ConfigFile& config, bool expectDryRun)$/;"	f	class:nfd::tests::DummyNoSubscriber
DummyNoSubscriber	NFD/tests/core/config-file.t.cpp	/^class DummyNoSubscriber : public DummySubscriber$/;"	c	namespace:nfd::tests	file:
DummyOneSubscriber	NFD/tests/core/config-file.t.cpp	/^  DummyOneSubscriber(ConfigFile& config,$/;"	f	class:nfd::tests::DummyOneSubscriber
DummyOneSubscriber	NFD/tests/core/config-file.t.cpp	/^class DummyOneSubscriber : public DummySubscriber$/;"	c	namespace:nfd::tests	file:
DummyProtocolFactory	NFD/tests/daemon/mgmt/channel-status-common.hpp	/^  DummyProtocolFactory()$/;"	f	class:nfd::tests::DummyProtocolFactory
DummyProtocolFactory	NFD/tests/daemon/mgmt/channel-status-common.hpp	/^class DummyProtocolFactory : public ProtocolFactory$/;"	c	namespace:nfd::tests
DummyPublicInfo	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::DummyPublicInfo(const std::string& locator)$/;"	f	class:ndn::security::DummyPublicInfo
DummyPublicInfo	ndn-cxx/tests/unit-tests/security/dummy-keychain.hpp	/^class DummyPublicInfo : public SecPublicInfo$/;"	c	namespace:ndn::security
DummyPublicInfo	utils/dummy-keychain.cpp	/^DummyPublicInfo::DummyPublicInfo(const std::string& locator)$/;"	f	class:ndn::security::DummyPublicInfo
DummyPublicInfo	utils/dummy-keychain.hpp	/^class DummyPublicInfo : public SecPublicInfo {$/;"	c	namespace:ndn::security
DummyPublicInfo2	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^typedef DummyPublicInfo DummyPublicInfo2;$/;"	t	namespace:ndn::security	file:
DummyStrategy	NFD/tests/daemon/fw/dummy-strategy.hpp	/^  DummyStrategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::tests::DummyStrategy
DummyStrategy	NFD/tests/daemon/fw/dummy-strategy.hpp	/^class DummyStrategy : public fw::Strategy$/;"	c	namespace:nfd::tests
DummyStrategyInfo	NFD/tests/daemon/table/strategy-info-host.t.cpp	/^  DummyStrategyInfo(int id)$/;"	f	class:nfd::tests::DummyStrategyInfo
DummyStrategyInfo	NFD/tests/daemon/table/strategy-info-host.t.cpp	/^class DummyStrategyInfo : public StrategyInfo$/;"	c	namespace:nfd::tests	file:
DummyStrategyInfo1	NFD/tests/daemon/table/measurements.t.cpp	/^class DummyStrategyInfo1 : public fw::StrategyInfo$/;"	c	namespace:nfd::tests	file:
DummyStrategyInfo2	NFD/tests/daemon/table/measurements.t.cpp	/^class DummyStrategyInfo2 : public fw::StrategyInfo$/;"	c	namespace:nfd::tests	file:
DummyStrategyInfo2	NFD/tests/daemon/table/strategy-info-host.t.cpp	/^  DummyStrategyInfo2(int id)$/;"	f	class:nfd::tests::DummyStrategyInfo2
DummyStrategyInfo2	NFD/tests/daemon/table/strategy-info-host.t.cpp	/^class DummyStrategyInfo2 : public StrategyInfo$/;"	c	namespace:nfd::tests	file:
DummyStreamSender	NFD/tests/daemon/face/dummy-stream-sender.hpp	/^  DummyStreamSender()$/;"	f	class:nfd::tests::DummyStreamSender
DummyStreamSender	NFD/tests/daemon/face/dummy-stream-sender.hpp	/^class DummyStreamSender : public Dataset$/;"	c	namespace:nfd::tests
DummySubscriber	NFD/tests/core/config-file.t.cpp	/^  DummySubscriber(ConfigFile& config,$/;"	f	class:nfd::tests::DummySubscriber
DummySubscriber	NFD/tests/core/config-file.t.cpp	/^class DummySubscriber$/;"	c	namespace:nfd::tests	file:
DummyTpm	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::DummyTpm(const std::string& locator)$/;"	f	class:ndn::security::DummyTpm
DummyTpm	ndn-cxx/tests/unit-tests/security/dummy-keychain.hpp	/^class DummyTpm : public SecTpm$/;"	c	namespace:ndn::security
DummyTpm	utils/dummy-keychain.cpp	/^DummyTpm::DummyTpm(const std::string& locator)$/;"	f	class:ndn::security::DummyTpm
DummyTpm	utils/dummy-keychain.hpp	/^class DummyTpm : public SecTpm {$/;"	c	namespace:ndn::security
DummyTpm2	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^typedef DummyTpm DummyTpm2;$/;"	t	namespace:ndn::security	file:
DuplicateNonceWhere	NFD/daemon/table/pit-entry.hpp	/^enum DuplicateNonceWhere {$/;"	g	namespace:nfd::pit
Duration	NFD/daemon/fw/retx-suppression-exponential.hpp	/^  typedef time::microseconds Duration;$/;"	t	class:nfd::fw::RetxSuppressionExponential
Duration	NFD/daemon/fw/rtt-estimator.hpp	/^  typedef time::microseconds Duration;$/;"	t	class:nfd::RttEstimator
Duration	ndn-cxx/src/util/time.hpp	/^  typedef duration Duration;$/;"	t	class:ndn::time::steady_clock
Duration	ndn-cxx/src/util/time.hpp	/^  typedef duration Duration;$/;"	t	class:ndn::time::system_clock
DynamicContainers	ndn-cxx/src/security/validator-config.hpp	/^  typedef std::list<DynamicTrustAnchorContainer> DynamicContainers; \/\/ sorted by m_lastRefresh$/;"	t	class:ndn::ValidatorConfig
DynamicTrustAnchorContainer	ndn-cxx/src/security/validator-config.hpp	/^    DynamicTrustAnchorContainer(const boost::filesystem::path& path, bool isDir,$/;"	f	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
DynamicTrustAnchorContainer	ndn-cxx/src/security/validator-config.hpp	/^  class DynamicTrustAnchorContainer : public TrustAnchorContainer$/;"	c	class:ndn::ValidatorConfig
ECDSA_DER_KEY_DIGEST	ndn-cxx/tests/unit-tests/security/public-key.t.cpp	/^const uint8_t ECDSA_DER_KEY_DIGEST[] = {$/;"	m	namespace:ndn::tests	file:
ECDSA_KEY_SIZES	ndn-cxx/src/security/key-params.cpp	/^static const uint32_t ECDSA_KEY_SIZES[] = {256, 384};$/;"	m	namespace:ndn	file:
EMPTY_KEY_ID	ndn-cxx/src/security/identity.cpp	/^const name::Component Identity::EMPTY_KEY_ID;$/;"	m	class:ndn::security::Identity	file:
EMPTY_KEY_ID	ndn-cxx/src/security/identity.hpp	/^  static const name::Component EMPTY_KEY_ID;$/;"	m	class:ndn::security::Identity
EMPTY_NAME	ndn-cxx/src/security/signing-info.cpp	/^const Name SigningInfo::EMPTY_NAME;$/;"	m	class:ndn::security::SigningInfo	file:
EMPTY_NAME	ndn-cxx/src/security/signing-info.hpp	/^  static const Name EMPTY_NAME;$/;"	m	class:ndn::security::SigningInfo
EMPTY_POLICY_H_	utils/trie/empty-policy.hpp	21;"	d
EMPTY_SIGNATURE_INFO	ndn-cxx/src/security/signing-info.cpp	/^const SignatureInfo SigningInfo::EMPTY_SIGNATURE_INFO;$/;"	m	class:ndn::security::SigningInfo	file:
EMPTY_SIGNATURE_INFO	ndn-cxx/src/security/signing-info.hpp	/^  static const SignatureInfo EMPTY_SIGNATURE_INFO;$/;"	m	class:ndn::security::SigningInfo
ENCRYPT_MODE_CFB_AES	ndn-cxx/src/security/security-common.hpp	/^  ENCRYPT_MODE_CFB_AES$/;"	e	enum:ndn::EncryptMode
ENCRYPT_MODE_DEFAULT	ndn-cxx/src/security/security-common.hpp	/^  ENCRYPT_MODE_DEFAULT,$/;"	e	enum:ndn::EncryptMode
END	utils/topology/rocketfuel-map-reader.cpp	87;"	d	file:
ERROR_FACE_NOT_FOUND	NFD/rib/fib-updater.cpp	/^const uint32_t FibUpdater::ERROR_FACE_NOT_FOUND = 410;$/;"	m	class:nfd::rib::FibUpdater	file:
ERROR_FACE_NOT_FOUND	NFD/rib/fib-updater.hpp	/^  static const uint32_t ERROR_FACE_NOT_FOUND;$/;"	m	class:nfd::rib::FibUpdater
ERROR_LBOUND	ndn-cxx/src/management/nfd-controller.cpp	/^const uint32_t Controller::ERROR_LBOUND = 400;$/;"	m	class:ndn::nfd::Controller	file:
ERROR_LBOUND	ndn-cxx/src/management/nfd-controller.hpp	/^  static const uint32_t ERROR_LBOUND;$/;"	m	class:ndn::nfd::Controller
ERROR_SERVER	ndn-cxx/src/management/nfd-controller.cpp	/^const uint32_t Controller::ERROR_SERVER = 500;$/;"	m	class:ndn::nfd::Controller	file:
ERROR_SERVER	ndn-cxx/src/management/nfd-controller.hpp	/^  static const uint32_t ERROR_SERVER;$/;"	m	class:ndn::nfd::Controller
ERROR_TIMEOUT	ndn-cxx/src/management/nfd-controller.cpp	/^const uint32_t Controller::ERROR_TIMEOUT = 10060;$/;"	m	class:ndn::nfd::Controller	file:
ERROR_TIMEOUT	ndn-cxx/src/management/nfd-controller.hpp	/^  static const uint32_t ERROR_TIMEOUT;$/;"	m	class:ndn::nfd::Controller
ETHERNET_FRAME_TYPE	model/ndn-l3-protocol.cpp	/^const uint16_t L3Protocol::ETHERNET_FRAME_TYPE = 0x7777;$/;"	m	class:ns3::ndn::L3Protocol	file:
ETHERNET_FRAME_TYPE	model/ndn-l3-protocol.hpp	/^  static const uint16_t ETHERNET_FRAME_TYPE; \/\/\/< @brief Ethernet Frame Type of Ndn$/;"	m	class:ns3::ndn::L3Protocol
ETHERTYPE_NDN	ndn-cxx/src/util/ethernet.hpp	/^const uint16_t ETHERTYPE_NDN = 0x8624;$/;"	m	namespace:ndn::util::ethernet
EVICT_LIMIT	NFD/daemon/table/dead-nonce-list.cpp	/^const size_t DeadNonceList::EVICT_LIMIT = (1 << 6);$/;"	m	class:nfd::DeadNonceList	file:
EVICT_LIMIT	NFD/daemon/table/dead-nonce-list.hpp	/^  static const size_t EVICT_LIMIT;$/;"	m	class:nfd::DeadNonceList
EXCEED_OPS	NFD/tests/limited-io.hpp	/^    EXCEED_OPS,$/;"	e	enum:nfd::tests::LimitedIo::StopReason
EXCEED_TIME	NFD/tests/limited-io.hpp	/^    EXCEED_TIME,$/;"	e	enum:nfd::tests::LimitedIo::StopReason
EXCEPTION	NFD/tests/limited-io.hpp	/^    EXCEPTION$/;"	e	enum:nfd::tests::LimitedIo::StopReason
EXPECTED_MARK_COUNT	NFD/daemon/table/dead-nonce-list.cpp	/^const size_t DeadNonceList::EXPECTED_MARK_COUNT = 5;$/;"	m	class:nfd::DeadNonceList	file:
EXPECTED_MARK_COUNT	NFD/daemon/table/dead-nonce-list.hpp	/^  static const size_t EXPECTED_MARK_COUNT;$/;"	m	class:nfd::DeadNonceList
EXPR_BACKREF	ndn-cxx/src/util/regex/regex-matcher.hpp	/^    EXPR_BACKREF,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_COMPONENT	ndn-cxx/src/util/regex/regex-matcher.hpp	/^    EXPR_COMPONENT,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_COMPONENT_SET	ndn-cxx/src/util/regex/regex-matcher.hpp	/^    EXPR_COMPONENT_SET,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_PATTERN_LIST	ndn-cxx/src/util/regex/regex-matcher.hpp	/^    EXPR_PATTERN_LIST,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_PSEUDO	ndn-cxx/src/util/regex/regex-matcher.hpp	/^    EXPR_PSEUDO$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_REPEAT_PATTERN	ndn-cxx/src/util/regex/regex-matcher.hpp	/^    EXPR_REPEAT_PATTERN,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXPR_TOP	ndn-cxx/src/util/regex/regex-matcher.hpp	/^    EXPR_TOP,$/;"	e	enum:ndn::RegexMatcher::RegexExprType
EXTENSION	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^        EXTENSION = 2,$/;"	e	enum:websocketpp::processor::hybi13::state
EcdsaKeyParams	ndn-cxx/src/security/key-params.hpp	/^typedef SimplePublicKeyParams<EcdsaKeyParamsInfo> EcdsaKeyParams;$/;"	t	namespace:ndn
EcdsaKeyParamsInfo	ndn-cxx/src/security/key-params.hpp	/^class EcdsaKeyParamsInfo$/;"	c	namespace:ndn
EdgeWeights	helper/boost-graph-ndn-global-routing-helper.hpp	/^  EdgeWeights(const NdnGlobalRouterGraph& graph)$/;"	f	struct:boost::EdgeWeights
EdgeWeights	helper/boost-graph-ndn-global-routing-helper.hpp	/^struct EdgeWeights {$/;"	s	namespace:boost
EncodeHelper	ndn-cxx/src/lp/detail/field-decl.hpp	/^struct EncodeHelper$/;"	s	namespace:ndn::lp::detail
EncodeHelper	ndn-cxx/src/lp/detail/field-decl.hpp	/^struct EncodeHelper<TAG, TlvType, std::pair<Buffer::const_iterator, Buffer::const_iterator>>$/;"	s	namespace:ndn::lp::detail
EncodeHelper	ndn-cxx/src/lp/detail/field-decl.hpp	/^struct EncodeHelper<TAG, TlvType, uint64_t>$/;"	s	namespace:ndn::lp::detail
Encoder	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::Encoder(const Block& block)$/;"	f	class:ndn::encoding::Encoder
Encoder	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::Encoder(size_t totalReserve\/* = 8800*\/, size_t reserveFromBack\/* = 400*\/)$/;"	f	class:ndn::encoding::Encoder
Encoder	ndn-cxx/src/encoding/encoder.hpp	/^class Encoder$/;"	c	namespace:ndn::encoding
EncoderTag	ndn-cxx/src/encoding/encoding-buffer-fwd.hpp	/^static const Tag EncoderTag = true;$/;"	m	namespace:ndn::encoding
EncodingBuffer	ndn-cxx/src/encoding/encoding-buffer-fwd.hpp	/^typedef EncodingImpl<EncoderTag> EncodingBuffer;$/;"	t	namespace:ndn::encoding
EncodingEstimator	ndn-cxx/src/encoding/encoding-buffer-fwd.hpp	/^typedef EncodingImpl<EstimatorTag> EncodingEstimator;$/;"	t	namespace:ndn::encoding
EncodingImpl	ndn-cxx/src/encoding/encoding-buffer.hpp	/^  EncodingImpl(const Block& block)$/;"	f	class:ndn::encoding::EncodingImpl
EncodingImpl	ndn-cxx/src/encoding/encoding-buffer.hpp	/^  EncodingImpl(size_t totalReserve = 0, size_t totalFromBack = 0)$/;"	f	class:ndn::encoding::EncodingImpl
EncodingImpl	ndn-cxx/src/encoding/encoding-buffer.hpp	/^  EncodingImpl(size_t totalReserve = 8800, size_t reserveFromBack = 400)$/;"	f	class:ndn::encoding::EncodingImpl
EncodingImpl	ndn-cxx/src/encoding/encoding-buffer.hpp	/^class EncodingImpl<EncoderTag> : public encoding::Encoder$/;"	c	namespace:ndn::encoding
EncodingImpl	ndn-cxx/src/encoding/encoding-buffer.hpp	/^class EncodingImpl<EstimatorTag> : public encoding::Estimator$/;"	c	namespace:ndn::encoding
EncryptMode	ndn-cxx/src/security/security-common.hpp	/^enum EncryptMode {$/;"	g	namespace:ndn
End	helper/ndn-face-container.cpp	/^FaceContainer::End(void) const$/;"	f	class:ns3::ndn::FaceContainer
End	model/cs/content-store-impl.hpp	/^ContentStoreImpl<Policy>::End()$/;"	f	class:ns3::ndn::cs::ContentStoreImpl
End	model/cs/content-store-nocache.cpp	/^Nocache::End()$/;"	f	class:ns3::ndn::cs::Nocache
EndPoint	ndn-cxx/src/util/dns.cpp	/^typedef boost::asio::ip::udp::endpoint EndPoint;$/;"	t	namespace:ndn::dns	file:
EndToEndAddresses	NFD/tests/daemon/face/udp.t.cpp	/^typedef boost::mpl::list<EndToEndIpv4, EndToEndIpv6> EndToEndAddresses;$/;"	t	namespace:nfd::tests	file:
EndToEndFixture	NFD/tests/daemon/face/tcp.t.cpp	/^class EndToEndFixture : protected BaseFixture$/;"	c	namespace:nfd::tests	file:
EndToEndFixture	NFD/tests/daemon/face/unix-stream.t.cpp	/^class EndToEndFixture : protected BaseFixture$/;"	c	namespace:nfd::tests	file:
EndToEndFixture	NFD/tests/daemon/face/websocket.t.cpp	/^class EndToEndFixture : protected BaseFixture$/;"	c	namespace:nfd::tests	file:
EndToEndFixture	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  EndToEndFixture()$/;"	f	class:ndn::util::tests::EndToEndFixture
EndToEndFixture	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^class EndToEndFixture : public ndn::tests::UnitTestTimeFixture$/;"	c	namespace:ndn::util::tests	file:
EndToEndIpv4	NFD/tests/daemon/face/udp.t.cpp	/^class EndToEndIpv4$/;"	c	namespace:nfd::tests	file:
EndToEndIpv6	NFD/tests/daemon/face/udp.t.cpp	/^class EndToEndIpv6$/;"	c	namespace:nfd::tests	file:
Endpoint	NFD/daemon/face/tcp-channel.hpp	/^typedef boost::asio::ip::tcp::endpoint Endpoint;$/;"	t	namespace:nfd::tcp
Endpoint	NFD/daemon/face/udp-channel.hpp	/^typedef boost::asio::ip::udp::endpoint Endpoint;$/;"	t	namespace:nfd::udp
Endpoint	NFD/daemon/face/unix-stream-channel.hpp	/^typedef boost::asio::local::stream_protocol::endpoint Endpoint;$/;"	t	namespace:nfd::unix_stream
Endpoint	NFD/daemon/face/websocket-face.hpp	/^typedef boost::asio::ip::tcp::endpoint Endpoint;$/;"	t	namespace:nfd::websocket
Endpoint	NFD/tests/daemon/face/dummy-stream-sender.hpp	/^  typedef typename Protocol::endpoint Endpoint;$/;"	t	class:nfd::tests::DummyStreamSender
Entry	NFD/daemon/table/cs-entry.hpp	/^class Entry$/;"	c	namespace:nfd::cs
Entry	NFD/daemon/table/dead-nonce-list.hpp	/^  typedef uint64_t Entry;$/;"	t	class:nfd::DeadNonceList
Entry	NFD/daemon/table/fib-entry.cpp	/^Entry::Entry(const Name& prefix)$/;"	f	class:nfd::fib::Entry
Entry	NFD/daemon/table/fib-entry.hpp	/^class Entry : noncopyable$/;"	c	namespace:nfd::fib
Entry	NFD/daemon/table/measurements-entry.cpp	/^Entry::Entry(const Name& name)$/;"	f	class:nfd::measurements::Entry
Entry	NFD/daemon/table/measurements-entry.hpp	/^class Entry : public StrategyInfoHost, noncopyable$/;"	c	namespace:nfd::measurements
Entry	NFD/daemon/table/name-tree-entry.cpp	/^Entry::Entry(const Name& name)$/;"	f	class:nfd::name_tree::Entry
Entry	NFD/daemon/table/name-tree-entry.hpp	/^class Entry : public enable_shared_from_this<Entry>, noncopyable$/;"	c	namespace:nfd::name_tree
Entry	NFD/daemon/table/pit-entry.cpp	/^Entry::Entry(const Interest& interest)$/;"	f	class:nfd::pit::Entry
Entry	NFD/daemon/table/pit-entry.hpp	/^class Entry : public StrategyInfoHost, noncopyable$/;"	c	namespace:nfd::pit
Entry	NFD/daemon/table/strategy-choice-entry.cpp	/^Entry::Entry(const Name& prefix)$/;"	f	class:nfd::strategy_choice::Entry
Entry	NFD/daemon/table/strategy-choice-entry.hpp	/^class Entry : noncopyable$/;"	c	namespace:nfd::strategy_choice
Entry	model/cs/ndn-content-store.cpp	/^Entry::Entry(Ptr<ContentStore> cs, shared_ptr<const Data> data)$/;"	f	class:ns3::ndn::cs::Entry
Entry	model/cs/ndn-content-store.hpp	/^class Entry : public SimpleRefCount<Entry> {$/;"	c	namespace:ns3::ndn::cs
EntryFromEntryImpl	NFD/daemon/table/cs.hpp	/^  struct EntryFromEntryImpl$/;"	s	class:nfd::cs::Cs
EntryImpl	NFD/daemon/table/cs-entry-impl.cpp	/^EntryImpl::EntryImpl(const Name& name)$/;"	f	class:nfd::cs::EntryImpl
EntryImpl	NFD/daemon/table/cs-entry-impl.cpp	/^EntryImpl::EntryImpl(shared_ptr<const Data> data, bool isUnsolicited)$/;"	f	class:nfd::cs::EntryImpl
EntryImpl	NFD/daemon/table/cs-entry-impl.hpp	/^class EntryImpl : public Entry$/;"	c	namespace:nfd::cs
EntryImpl	model/cs/content-store-impl.hpp	/^  EntryImpl(Ptr<ContentStore> cs, shared_ptr<const Data> data)$/;"	f	class:ns3::ndn::cs::EntryImpl
EntryImpl	model/cs/content-store-impl.hpp	/^class EntryImpl : public Entry {$/;"	c	namespace:ns3::ndn::cs
EntryInfo	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^struct EntryInfo$/;"	s	namespace:nfd::cs::priority_fifo
EntryInfoMapFifo	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^typedef std::map<iterator, EntryInfo*, EntryItComparator> EntryInfoMapFifo;$/;"	t	namespace:nfd::cs::priority_fifo
EntryItComparator	NFD/daemon/table/cs-policy-lru.hpp	/^struct EntryItComparator$/;"	s	namespace:nfd::cs::lru
EntryItComparator	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^struct EntryItComparator$/;"	s	namespace:nfd::cs::priority_fifo
EntryPredicate	NFD/daemon/table/measurements.hpp	/^typedef std::function<bool(const Entry&)> EntryPredicate;$/;"	t	namespace:nfd::measurements
EntrySelector	NFD/daemon/table/name-tree.hpp	/^typedef function<bool (const Entry& entry)> EntrySelector;$/;"	t	namespace:nfd::name_tree
EntrySubTreeSelector	NFD/daemon/table/name-tree.hpp	/^typedef function<std::pair<bool,bool> (const Entry& entry)> EntrySubTreeSelector;$/;"	t	namespace:nfd::name_tree
EntryWithStrategyInfo	NFD/daemon/table/measurements.hpp	/^class EntryWithStrategyInfo$/;"	c	namespace:nfd::measurements
EnumerationFixture	NFD/tests/daemon/table/name-tree.t.cpp	/^  EnumerationFixture()$/;"	f	class:nfd::tests::EnumerationFixture
EnumerationFixture	NFD/tests/daemon/table/name-tree.t.cpp	/^class EnumerationFixture : public BaseFixture$/;"	c	namespace:nfd::tests	file:
EnumerationVerifier	NFD/tests/daemon/table/name-tree.t.cpp	/^  EnumerationVerifier(Enumerable&& enumerable)$/;"	f	class:nfd::tests::EnumerationVerifier
EnumerationVerifier	NFD/tests/daemon/table/name-tree.t.cpp	/^class EnumerationVerifier : noncopyable$/;"	c	namespace:nfd::tests	file:
Error	NFD/core/config-file.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::ConfigFile::Error
Error	NFD/core/config-file.hpp	/^  class Error : public std::runtime_error$/;"	c	class:nfd::ConfigFile
Error	NFD/core/privilege-helper.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::PrivilegeHelper::Error
Error	NFD/core/privilege-helper.hpp	/^  class Error$/;"	c	class:nfd::PrivilegeHelper
Error	NFD/daemon/face/ethernet-face.hpp	/^    Error(const std::string& what) : Face::Error(what) {}$/;"	f	struct:nfd::EthernetFace::Error
Error	NFD/daemon/face/ethernet-face.hpp	/^  struct Error : public Face::Error$/;"	s	class:nfd::EthernetFace
Error	NFD/daemon/face/ethernet-factory.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::EthernetFactory::Error
Error	NFD/daemon/face/ethernet-factory.hpp	/^  class Error : public ProtocolFactory::Error$/;"	c	class:nfd::EthernetFactory
Error	NFD/daemon/face/face.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::Face::Error
Error	NFD/daemon/face/face.hpp	/^  class Error : public std::runtime_error$/;"	c	class:nfd::Face
Error	NFD/daemon/face/protocol-factory.hpp	/^    Error(const std::string& what) : std::runtime_error(what) {}$/;"	f	struct:nfd::ProtocolFactory::Error
Error	NFD/daemon/face/protocol-factory.hpp	/^  struct Error : public std::runtime_error$/;"	s	class:nfd::ProtocolFactory
Error	NFD/daemon/face/tcp-factory.hpp	/^    Error(const std::string& what) : ProtocolFactory::Error(what) {}$/;"	f	struct:nfd::TcpFactory::Error
Error	NFD/daemon/face/tcp-factory.hpp	/^  struct Error : public ProtocolFactory::Error$/;"	s	class:nfd::TcpFactory
Error	NFD/daemon/face/udp-factory.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::UdpFactory::Error
Error	NFD/daemon/face/udp-factory.hpp	/^  class Error : public ProtocolFactory::Error$/;"	c	class:nfd::UdpFactory
Error	NFD/daemon/face/unix-stream-channel.hpp	/^    Error(const std::string& what) : std::runtime_error(what) {}$/;"	f	struct:nfd::UnixStreamChannel::Error
Error	NFD/daemon/face/unix-stream-channel.hpp	/^  struct Error : public std::runtime_error$/;"	s	class:nfd::UnixStreamChannel
Error	NFD/daemon/face/unix-stream-factory.hpp	/^    Error(const std::string& what) : ProtocolFactory::Error(what) {}$/;"	f	struct:nfd::UnixStreamFactory::Error
Error	NFD/daemon/face/unix-stream-factory.hpp	/^  struct Error : public ProtocolFactory::Error$/;"	s	class:nfd::UnixStreamFactory
Error	NFD/daemon/face/websocket-factory.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::WebSocketFactory::Error
Error	NFD/daemon/face/websocket-factory.hpp	/^  class Error : public ProtocolFactory::Error$/;"	c	class:nfd::WebSocketFactory
Error	NFD/daemon/mgmt/command-validator.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::CommandValidator::Error
Error	NFD/daemon/mgmt/command-validator.hpp	/^  class Error : public std::runtime_error$/;"	c	class:nfd::CommandValidator
Error	NFD/daemon/mgmt/face-manager.hpp	/^    Error(const std::string& what) : ManagerBase::Error(what) {}$/;"	f	class:nfd::FaceManager::Error
Error	NFD/daemon/mgmt/face-manager.hpp	/^  class Error : public ManagerBase::Error$/;"	c	class:nfd::FaceManager
Error	NFD/daemon/mgmt/internal-face.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::InternalFace::Error
Error	NFD/daemon/mgmt/internal-face.hpp	/^  class Error : public Face::Error$/;"	c	class:nfd::InternalFace
Error	NFD/daemon/mgmt/manager-base.hpp	/^    Error(const std::string& what) : std::runtime_error(what) {}$/;"	f	struct:nfd::ManagerBase::Error
Error	NFD/daemon/mgmt/manager-base.hpp	/^  struct Error : public std::runtime_error$/;"	s	class:nfd::ManagerBase
Error	NFD/rib/fib-updater.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::rib::FibUpdater::Error
Error	NFD/rib/fib-updater.hpp	/^  class Error : public std::runtime_error$/;"	c	class:nfd::rib::FibUpdater
Error	NFD/rib/nrd.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::rib::Nrd::Error
Error	NFD/rib/nrd.hpp	/^  class Error : public std::runtime_error$/;"	c	class:nfd::rib::Nrd
Error	NFD/rib/remote-registrator.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::rib::RemoteRegistrator::Error
Error	NFD/rib/remote-registrator.hpp	/^  class Error : public std::runtime_error$/;"	c	class:nfd::rib::RemoteRegistrator
Error	NFD/rib/rib-manager.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::rib::RibManager::Error
Error	NFD/rib/rib-manager.hpp	/^  class Error : public std::runtime_error$/;"	c	class:nfd::rib::RibManager
Error	NFD/tests/daemon/face/dummy-stream-sender.hpp	/^    Error(const std::string& what)$/;"	f	class:nfd::tests::DummyStreamSender::Error
Error	NFD/tests/daemon/face/dummy-stream-sender.hpp	/^  class Error : public std::runtime_error$/;"	c	class:nfd::tests::DummyStreamSender
Error	NFD/tools/ndn-autoconfig/base-dns.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::tools::autoconfig::BaseDns::Error
Error	NFD/tools/ndn-autoconfig/base-dns.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::tools::autoconfig::BaseDns
Error	NFD/tools/ndn-autoconfig/base.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::tools::autoconfig::Base::Error
Error	NFD/tools/ndn-autoconfig/base.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::tools::autoconfig::Base
Error	NFD/tools/ndn-autoconfig/main.cpp	/^    Error(const std::string& what)$/;"	f	class:ndn::tools::NdnAutoconfig::Error
Error	NFD/tools/ndn-autoconfig/main.cpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::tools::NdnAutoconfig	file:
Error	NFD/tools/nfdc.hpp	/^    Error(const std::string& what)$/;"	f	class:nfdc::Nfdc::Error
Error	NFD/tools/nfdc.hpp	/^  class Error : public std::runtime_error$/;"	c	class:nfdc::Nfdc
Error	ndn-cxx/src/data.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Data::Error
Error	ndn-cxx/src/data.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Data
Error	ndn-cxx/src/encoding/block.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Block::Error
Error	ndn-cxx/src/encoding/block.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Block
Error	ndn-cxx/src/encoding/tlv.hpp	/^  Error(const std::string& what)$/;"	f	class:ndn::tlv::Error
Error	ndn-cxx/src/encoding/tlv.hpp	/^class Error : public std::runtime_error$/;"	c	namespace:ndn::tlv
Error	ndn-cxx/src/exclude.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Exclude::Error
Error	ndn-cxx/src/exclude.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Exclude
Error	ndn-cxx/src/face.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Face::Error
Error	ndn-cxx/src/face.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::Face
Error	ndn-cxx/src/interest-filter.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::InterestFilter::Error
Error	ndn-cxx/src/interest-filter.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::InterestFilter
Error	ndn-cxx/src/interest.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Interest::Error
Error	ndn-cxx/src/interest.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Interest
Error	ndn-cxx/src/key-locator.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::KeyLocator::Error
Error	ndn-cxx/src/key-locator.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::KeyLocator
Error	ndn-cxx/src/link.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Link::Error
Error	ndn-cxx/src/link.hpp	/^  class Error : public Data::Error$/;"	c	class:ndn::Link
Error	ndn-cxx/src/lp/cache-policy.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::lp::CachePolicyType::CachePolicy::Error
Error	ndn-cxx/src/lp/cache-policy.hpp	/^  class Error : public ndn::tlv::Error$/;"	c	class:ndn::lp::CachePolicyType::CachePolicy
Error	ndn-cxx/src/lp/packet.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::lp::Packet::Error
Error	ndn-cxx/src/lp/packet.hpp	/^  class Error : public ndn::tlv::Error$/;"	c	class:ndn::lp::Packet
Error	ndn-cxx/src/management/nfd-channel-status.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::ChannelStatus::Error
Error	ndn-cxx/src/management/nfd-channel-status.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::ChannelStatus
Error	ndn-cxx/src/management/nfd-control-parameters.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::ControlParameters::Error
Error	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::ControlParameters
Error	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::FaceQueryFilter::Error
Error	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::FaceQueryFilter
Error	ndn-cxx/src/management/nfd-face-traits.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::FaceTraits::Error
Error	ndn-cxx/src/management/nfd-face-traits.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::FaceTraits
Error	ndn-cxx/src/management/nfd-fib-entry.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::FibEntry::Error
Error	ndn-cxx/src/management/nfd-fib-entry.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::NextHopRecord::Error
Error	ndn-cxx/src/management/nfd-fib-entry.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::FibEntry
Error	ndn-cxx/src/management/nfd-fib-entry.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::NextHopRecord
Error	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::ForwarderStatus::Error
Error	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::ForwarderStatus
Error	ndn-cxx/src/management/nfd-local-control-header.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::LocalControlHeader::Error
Error	ndn-cxx/src/management/nfd-local-control-header.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::nfd::LocalControlHeader
Error	ndn-cxx/src/management/nfd-rib-entry.hpp	/^    Error(const std::string& what) : tlv::Error(what)$/;"	f	class:ndn::nfd::RibEntry::Error
Error	ndn-cxx/src/management/nfd-rib-entry.hpp	/^    Error(const std::string& what) : tlv::Error(what)$/;"	f	class:ndn::nfd::Route::Error
Error	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::RibEntry
Error	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::Route
Error	ndn-cxx/src/management/nfd-strategy-choice.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::nfd::StrategyChoice::Error
Error	ndn-cxx/src/management/nfd-strategy-choice.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::nfd::StrategyChoice
Error	ndn-cxx/src/meta-info.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::MetaInfo::Error
Error	ndn-cxx/src/meta-info.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::MetaInfo
Error	ndn-cxx/src/mgmt/control-response.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::mgmt::ControlResponse::Error
Error	ndn-cxx/src/mgmt/control-response.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::mgmt::ControlResponse
Error	ndn-cxx/src/mgmt/dispatcher.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::mgmt::Dispatcher::Error
Error	ndn-cxx/src/mgmt/dispatcher.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::mgmt::Dispatcher
Error	ndn-cxx/src/name-component.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::name::Component::Error
Error	ndn-cxx/src/name-component.hpp	/^  class Error : public Block::Error$/;"	c	class:ndn::name::Component
Error	ndn-cxx/src/name.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Name::Error
Error	ndn-cxx/src/name.hpp	/^  class Error : public name::Component::Error$/;"	c	class:ndn::Name
Error	ndn-cxx/src/security/additional-description.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::AdditionalDescription::Error
Error	ndn-cxx/src/security/additional-description.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::security::AdditionalDescription
Error	ndn-cxx/src/security/certificate-extension.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::CertificateExtension::Error
Error	ndn-cxx/src/security/certificate-extension.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::CertificateExtension
Error	ndn-cxx/src/security/certificate.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Certificate::Error
Error	ndn-cxx/src/security/certificate.hpp	/^  class Error : public Data::Error$/;"	c	class:ndn::Certificate
Error	ndn-cxx/src/security/conf/common.hpp	/^  Error(const std::string& what)$/;"	f	class:ndn::security::conf::Error
Error	ndn-cxx/src/security/conf/common.hpp	/^class Error : public std::runtime_error$/;"	c	namespace:ndn::security::conf
Error	ndn-cxx/src/security/digest-sha256.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::DigestSha256::Error
Error	ndn-cxx/src/security/digest-sha256.hpp	/^  class Error : public Signature::Error$/;"	c	class:ndn::DigestSha256
Error	ndn-cxx/src/security/identity-certificate.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::IdentityCertificate::Error
Error	ndn-cxx/src/security/identity-certificate.hpp	/^  class Error : public Certificate::Error$/;"	c	class:ndn::IdentityCertificate
Error	ndn-cxx/src/security/key-chain.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::KeyChain::Error
Error	ndn-cxx/src/security/key-chain.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::security::KeyChain
Error	ndn-cxx/src/security/key-params.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::KeyParams::Error
Error	ndn-cxx/src/security/key-params.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::KeyParams
Error	ndn-cxx/src/security/pib-impl.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::PibImpl::Error
Error	ndn-cxx/src/security/pib-impl.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::security::PibImpl
Error	ndn-cxx/src/security/pib-memory.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::PibMemory::Error
Error	ndn-cxx/src/security/pib-memory.hpp	/^  class Error : public PibImpl::Error$/;"	c	class:ndn::security::PibMemory
Error	ndn-cxx/src/security/pib.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::Pib::Error
Error	ndn-cxx/src/security/pib.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::security::Pib
Error	ndn-cxx/src/security/public-key.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::PublicKey::Error
Error	ndn-cxx/src/security/public-key.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::PublicKey
Error	ndn-cxx/src/security/sec-public-info-sqlite3.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecPublicInfoSqlite3::Error
Error	ndn-cxx/src/security/sec-public-info-sqlite3.hpp	/^  class Error : public SecPublicInfo::Error$/;"	c	class:ndn::SecPublicInfoSqlite3
Error	ndn-cxx/src/security/sec-public-info.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecPublicInfo::Error
Error	ndn-cxx/src/security/sec-public-info.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::SecPublicInfo
Error	ndn-cxx/src/security/sec-rule-relative.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecRuleRelative::Error
Error	ndn-cxx/src/security/sec-rule-relative.hpp	/^  class Error : public SecRule::Error$/;"	c	class:ndn::SecRuleRelative
Error	ndn-cxx/src/security/sec-rule.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecRule::Error
Error	ndn-cxx/src/security/sec-rule.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::SecRule
Error	ndn-cxx/src/security/sec-tpm-file.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecTpmFile::Error
Error	ndn-cxx/src/security/sec-tpm-file.hpp	/^  class Error : public SecTpm::Error$/;"	c	class:ndn::SecTpmFile
Error	ndn-cxx/src/security/sec-tpm-osx.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecTpmOsx::Error
Error	ndn-cxx/src/security/sec-tpm-osx.hpp	/^  class Error : public SecTpm::Error$/;"	c	class:ndn::SecTpmOsx
Error	ndn-cxx/src/security/sec-tpm.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecTpm::Error
Error	ndn-cxx/src/security/sec-tpm.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::SecTpm
Error	ndn-cxx/src/security/secured-bag.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SecuredBag::Error
Error	ndn-cxx/src/security/secured-bag.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::SecuredBag
Error	ndn-cxx/src/security/signature-sha256-with-ecdsa.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SignatureSha256WithEcdsa::Error
Error	ndn-cxx/src/security/signature-sha256-with-ecdsa.hpp	/^  class Error : public Signature::Error$/;"	c	class:ndn::SignatureSha256WithEcdsa
Error	ndn-cxx/src/security/signature-sha256-with-rsa.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SignatureSha256WithRsa::Error
Error	ndn-cxx/src/security/signature-sha256-with-rsa.hpp	/^  class Error : public Signature::Error$/;"	c	class:ndn::SignatureSha256WithRsa
Error	ndn-cxx/src/security/signing-info.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::SigningInfo::Error
Error	ndn-cxx/src/security/signing-info.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::security::SigningInfo
Error	ndn-cxx/src/security/validator-config.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::ValidatorConfig::Error
Error	ndn-cxx/src/security/validator-config.hpp	/^  class Error : public Validator::Error$/;"	c	class:ndn::ValidatorConfig
Error	ndn-cxx/src/security/validator-regex.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::ValidatorRegex::Error
Error	ndn-cxx/src/security/validator-regex.hpp	/^  class Error : public Validator::Error$/;"	c	class:ndn::ValidatorRegex
Error	ndn-cxx/src/security/validator.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Validator::Error
Error	ndn-cxx/src/security/validator.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::Validator
Error	ndn-cxx/src/security/validity-period.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::security::ValidityPeriod::Error
Error	ndn-cxx/src/security/validity-period.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::security::ValidityPeriod
Error	ndn-cxx/src/selectors.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Selectors::Error
Error	ndn-cxx/src/selectors.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Selectors
Error	ndn-cxx/src/signature-info.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::SignatureInfo::Error
Error	ndn-cxx/src/signature-info.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::SignatureInfo
Error	ndn-cxx/src/signature.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::Signature::Error
Error	ndn-cxx/src/signature.hpp	/^  class Error : public tlv::Error$/;"	c	class:ndn::Signature
Error	ndn-cxx/src/transport/transport.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::Transport
Error	ndn-cxx/src/transport/transport.hpp	/^Transport::Error::Error(const boost::system::error_code& code, const std::string& msg)$/;"	f	class:ndn::Transport::Error
Error	ndn-cxx/src/transport/transport.hpp	/^Transport::Error::Error(const std::string& msg)$/;"	f	class:ndn::Transport::Error
Error	ndn-cxx/src/util/config-file.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::ConfigFile::Error
Error	ndn-cxx/src/util/config-file.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::ConfigFile
Error	ndn-cxx/src/util/digest.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::util::Digest::Error
Error	ndn-cxx/src/util/digest.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::util::Digest
Error	ndn-cxx/src/util/dns.hpp	/^  Error(const std::string& what)$/;"	f	struct:ndn::dns::Error
Error	ndn-cxx/src/util/dns.hpp	/^struct Error : public std::runtime_error$/;"	s	namespace:ndn::dns
Error	ndn-cxx/src/util/face-uri.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::util::FaceUri::Error
Error	ndn-cxx/src/util/face-uri.hpp	/^  class Error : public std::invalid_argument$/;"	c	class:ndn::util::FaceUri
Error	ndn-cxx/src/util/in-memory-storage.hpp	/^    Error() : std::runtime_error("Cannot reduce the capacity of the in-memory storage!")$/;"	f	class:ndn::util::InMemoryStorage::Error
Error	ndn-cxx/src/util/in-memory-storage.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::util::InMemoryStorage
Error	ndn-cxx/src/util/io.hpp	/^  Error(const std::string& what)$/;"	f	class:ndn::io::Error
Error	ndn-cxx/src/util/io.hpp	/^class Error : public std::runtime_error$/;"	c	namespace:ndn::io
Error	ndn-cxx/src/util/network-monitor.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::util::NetworkMonitor::Error
Error	ndn-cxx/src/util/network-monitor.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::util::NetworkMonitor
Error	ndn-cxx/src/util/regex/regex-matcher.hpp	/^    Error(const std::string& what)$/;"	f	class:ndn::RegexMatcher::Error
Error	ndn-cxx/src/util/regex/regex-matcher.hpp	/^  class Error : public std::runtime_error$/;"	c	class:ndn::RegexMatcher
ErrorCallback	ndn-cxx/src/transport/transport.hpp	/^  typedef function<void ()> ErrorCallback;$/;"	t	class:ndn::Transport
ErrorCallback	ndn-cxx/src/util/dns.hpp	/^typedef function<void (const std::string& reason)> ErrorCallback;$/;"	t	namespace:ndn::dns
ErrorCallback	ndn-cxx/src/util/segment-fetcher.hpp	/^  typedef function<void (uint32_t code, const std::string& msg)> ErrorCallback;$/;"	t	class:ndn::util::SegmentFetcher
ErrorCode	ndn-cxx/src/util/segment-fetcher.hpp	/^  enum ErrorCode {$/;"	g	class:ndn::util::SegmentFetcher
Estimator	ndn-cxx/src/encoding/estimator.cpp	/^Estimator::Estimator(size_t totalReserve, size_t reserveFromBack)$/;"	f	class:ndn::encoding::Estimator
Estimator	ndn-cxx/src/encoding/estimator.hpp	/^class Estimator$/;"	c	namespace:ndn::encoding
EstimatorTag	ndn-cxx/src/encoding/encoding-buffer-fwd.hpp	/^static const Tag EstimatorTag = false;$/;"	m	namespace:ndn::encoding
EtherCanonizeProvider	ndn-cxx/src/util/face-uri.cpp	/^class EtherCanonizeProvider : public CanonizeProvider$/;"	c	namespace:ndn::util	file:
EthernetFace	NFD/daemon/face/ethernet-face.cpp	/^EthernetFace::EthernetFace(boost::asio::posix::stream_descriptor socket,$/;"	f	class:nfd::EthernetFace
EthernetFace	NFD/daemon/face/ethernet-face.hpp	/^class EthernetFace : public Face$/;"	c	namespace:nfd
EthernetFactory	NFD/daemon/face/ethernet-factory.hpp	/^class EthernetFactory : public ProtocolFactory$/;"	c	namespace:nfd
Event	ndn-cxx/src/util/scheduler.hpp	/^  typedef function<void()> Event;$/;"	t	class:ndn::util::scheduler::Scheduler
EventEmitter	ndn-cxx/src/util/event-emitter.hpp	/^class EventEmitter : noncopyable$/;"	c	namespace:ndn::util
EventEmitterTest_RefObject	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^  EventEmitterTest_RefObject() {}$/;"	f	class:ndn::util::tests::EventEmitterTest_RefObject
EventEmitterTest_RefObject	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^EventEmitterTest_RefObject::EventEmitterTest_RefObject(const EventEmitterTest_RefObject& other)$/;"	f	class:ndn::util::tests::EventEmitterTest_RefObject
EventEmitterTest_RefObject	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^class EventEmitterTest_RefObject$/;"	c	namespace:ndn::util::tests	file:
EventEmitterTest_RefObject_byRef	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^EventEmitterTest_RefObject_byRef(const EventEmitterTest_RefObject& a1) {}$/;"	f	namespace:ndn::util::tests
EventEmitterTest_RefObject_byVal	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^EventEmitterTest_RefObject_byVal(EventEmitterTest_RefObject a1) {}$/;"	f	namespace:ndn::util::tests
EventEmitterTester	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^EventEmitterTester::EventEmitterTester()$/;"	f	class:ndn::util::tests::EventEmitterTester
EventEmitterTester	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^class EventEmitterTester : noncopyable$/;"	c	namespace:ndn::util::tests	file:
EventId	NFD/core/scheduler.hpp	/^typedef std::shared_ptr<ns3::EventId> EventId;$/;"	t	namespace:nfd::scheduler
EventId	ndn-cxx/src/util/scheduler.hpp	/^typedef std::shared_ptr<ns3::EventId> EventId;$/;"	t	namespace:ndn::util::scheduler
EventIdImpl	ndn-cxx/src/util/scheduler.cpp	/^  EventIdImpl(const Scheduler::EventQueue::iterator& event)$/;"	f	struct:ndn::util::scheduler::EventIdImpl
EventIdImpl	ndn-cxx/src/util/scheduler.cpp	/^struct EventIdImpl$/;"	s	namespace:ndn::util::scheduler	file:
EventInfo	ndn-cxx/src/util/scheduler.cpp	/^Scheduler::EventInfo::EventInfo(const time::nanoseconds& after,$/;"	f	class:ndn::util::scheduler::Scheduler::EventInfo
EventInfo	ndn-cxx/src/util/scheduler.cpp	/^Scheduler::EventInfo::EventInfo(const time::steady_clock::TimePoint& when,$/;"	f	class:ndn::util::scheduler::Scheduler::EventInfo
EventInfo	ndn-cxx/src/util/scheduler.hpp	/^  struct EventInfo$/;"	s	class:ndn::util::scheduler::Scheduler
EventMemberImplObjTraits	NFD/core/scheduler.cpp	/^struct EventMemberImplObjTraits<std::function<void()>> {$/;"	s	namespace:ns3	file:
EventMemberImplObjTraits	ndn-cxx/src/util/scheduler.cpp	/^struct EventMemberImplObjTraits<std::function<void()>> {$/;"	s	namespace:ns3	file:
EventQueue	ndn-cxx/src/util/scheduler.hpp	/^  typedef std::multiset<EventId> EventQueue;$/;"	t	class:ndn::util::scheduler::Scheduler
Exclude	ndn-cxx/src/encoding/tlv.hpp	/^  Exclude       = 16,$/;"	e	enum:ndn::tlv::__anon8
Exclude	ndn-cxx/src/exclude.cpp	/^Exclude::Exclude()$/;"	f	class:ndn::Exclude
Exclude	ndn-cxx/src/exclude.cpp	/^Exclude::Exclude(const Block& wire)$/;"	f	class:ndn::Exclude
Exclude	ndn-cxx/src/exclude.hpp	/^class Exclude$/;"	c	namespace:ndn
ExpirationPeriod	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  ExpirationPeriod    = 109,$/;"	e	enum:ndn::tlv::nfd::__anon11
ExtensionList	ndn-cxx/src/security/certificate.hpp	/^  typedef std::vector<CertificateExtension> ExtensionList;$/;"	t	class:ndn::Certificate
ExtractFieldInfo	ndn-cxx/src/lp/detail/field-info.cpp	/^struct ExtractFieldInfo$/;"	s	namespace:ndn::lp::detail	file:
FACEID_CONTENT_STORE	NFD/daemon/face/face.hpp	/^const FaceId FACEID_CONTENT_STORE = 254;$/;"	m	namespace:nfd
FACEID_INTERNAL_FACE	NFD/daemon/face/face.hpp	/^const FaceId FACEID_INTERNAL_FACE = 1;$/;"	m	namespace:nfd
FACEID_NULL	NFD/daemon/face/face.hpp	/^const FaceId FACEID_NULL = 255;$/;"	m	namespace:nfd
FACEID_RESERVED_MAX	NFD/daemon/face/face.hpp	/^const FaceId FACEID_RESERVED_MAX = 255;$/;"	m	namespace:nfd
FACES_LIST_DATASET_NCOMPS	NFD/daemon/mgmt/face-manager.cpp	/^const size_t FaceManager::FACES_LIST_DATASET_NCOMPS = FACES_LIST_DATASET_PREFIX.size();$/;"	m	class:nfd::FaceManager	file:
FACES_LIST_DATASET_NCOMPS	NFD/daemon/mgmt/face-manager.hpp	/^  static const size_t FACES_LIST_DATASET_NCOMPS;$/;"	m	class:nfd::FaceManager
FACES_LIST_DATASET_PREFIX	NFD/daemon/mgmt/face-manager.hpp	/^  static const Name FACES_LIST_DATASET_PREFIX;$/;"	m	class:nfd::FaceManager
FACES_LIST_DATASET_PREFIX	NFD/rib/rib-manager.cpp	/^const Name RibManager::FACES_LIST_DATASET_PREFIX = "\/localhost\/nfd\/faces\/list";$/;"	m	class:nfd::rib::RibManager	file:
FACES_LIST_DATASET_PREFIX	NFD/rib/rib-manager.hpp	/^  static const Name FACES_LIST_DATASET_PREFIX;$/;"	m	class:nfd::rib::RibManager
FACES_QUERY_DATASET_NCOMPS	NFD/daemon/mgmt/face-manager.cpp	/^const size_t FaceManager::FACES_QUERY_DATASET_NCOMPS = FACES_QUERY_DATASET_PREFIX.size() + 1;$/;"	m	class:nfd::FaceManager	file:
FACES_QUERY_DATASET_NCOMPS	NFD/daemon/mgmt/face-manager.hpp	/^  static const size_t FACES_QUERY_DATASET_NCOMPS;$/;"	m	class:nfd::FaceManager
FACES_QUERY_DATASET_PREFIX	NFD/daemon/mgmt/face-manager.hpp	/^  static const Name FACES_QUERY_DATASET_PREFIX;$/;"	m	class:nfd::FaceManager
FACE_EVENTS_PREFIX	NFD/daemon/mgmt/face-manager.hpp	/^  static const Name FACE_EVENTS_PREFIX;$/;"	m	class:nfd::FaceManager
FACE_EVENT_CREATED	ndn-cxx/src/management/nfd-face-event-notification.hpp	/^  FACE_EVENT_CREATED = 1,$/;"	e	enum:ndn::nfd::FaceEventKind
FACE_EVENT_DESTROYED	ndn-cxx/src/management/nfd-face-event-notification.hpp	/^  FACE_EVENT_DESTROYED = 2$/;"	e	enum:ndn::nfd::FaceEventKind
FACE_MANAGER_PRIVILEGE	NFD/daemon/mgmt/face-manager.hpp	/^const std::string FACE_MANAGER_PRIVILEGE = "faces";$/;"	m	namespace:nfd
FACE_PERSISTENCY_ON_DEMAND	ndn-cxx/src/encoding/nfd-constants.hpp	/^  FACE_PERSISTENCY_ON_DEMAND = 1,$/;"	e	enum:ndn::nfd::FacePersistency
FACE_PERSISTENCY_PERMANENT	ndn-cxx/src/encoding/nfd-constants.hpp	/^  FACE_PERSISTENCY_PERMANENT = 2$/;"	e	enum:ndn::nfd::FacePersistency
FACE_PERSISTENCY_PERSISTENT	ndn-cxx/src/encoding/nfd-constants.hpp	/^  FACE_PERSISTENCY_PERSISTENT = 0,$/;"	e	enum:ndn::nfd::FacePersistency
FACE_SCOPE_LOCAL	ndn-cxx/src/encoding/nfd-constants.hpp	/^  FACE_SCOPE_LOCAL = 1$/;"	e	enum:ndn::nfd::FaceScope
FACE_SCOPE_NON_LOCAL	ndn-cxx/src/encoding/nfd-constants.hpp	/^  FACE_SCOPE_NON_LOCAL = 0,$/;"	e	enum:ndn::nfd::FaceScope
FATAL_ERROR	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^        FATAL_ERROR = 3$/;"	e	enum:websocketpp::processor::hybi00::state
FATAL_ERROR	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^        FATAL_ERROR = 5$/;"	e	enum:websocketpp::processor::hybi13::state
FIB_PRIVILEGE	NFD/daemon/mgmt/fib-manager.hpp	/^const std::string FIB_PRIVILEGE = "fib"; \/\/ config file privilege name$/;"	m	namespace:nfd
FIFO_POLICY_H_	utils/trie/fifo-policy.hpp	21;"	d
FIND_ALL_MATCHES_TYPE	NFD/daemon/table/name-tree.hpp	/^    FIND_ALL_MATCHES_TYPE$/;"	e	enum:nfd::NameTree::IteratorType
FORWARD	NFD/daemon/fw/retx-suppression.hpp	/^    FORWARD,$/;"	e	enum:nfd::fw::RetxSuppression::Result
FRESHNESS_POLICY_H_	model/cs/custom-policies/freshness-policy.hpp	21;"	d
FULL_ENUMERATE_TYPE	NFD/daemon/table/name-tree.hpp	/^    FULL_ENUMERATE_TYPE,$/;"	e	enum:nfd::NameTree::IteratorType
FUNCTOR_HOOK_H_	utils/trie/detail/functor-hook.hpp	21;"	d
Face	NFD/daemon/face/face.cpp	/^Face::Face(const FaceUri& remoteUri, const FaceUri& localUri, bool isLocal, bool isMultiAccess)$/;"	f	class:nfd::Face
Face	NFD/daemon/face/face.hpp	/^class Face : noncopyable, public enable_shared_from_this<Face>$/;"	c	namespace:nfd
Face	ndn-cxx/src/face.cpp	/^Face::Face()$/;"	f	class:ndn::Face
Face	ndn-cxx/src/face.cpp	/^Face::Face(boost::asio::io_service&)$/;"	f	class:ndn::Face
Face	ndn-cxx/src/face.hpp	/^class Face : noncopyable$/;"	c	namespace:ndn
FaceConnectFailedCallback	NFD/daemon/face/protocol-factory.hpp	/^typedef function<void(const std::string& reason)> FaceConnectFailedCallback;$/;"	t	namespace:nfd
FaceContainer	helper/ndn-face-container.cpp	/^FaceContainer::FaceContainer(const FaceContainer& other)$/;"	f	class:ns3::ndn::FaceContainer
FaceContainer	helper/ndn-face-container.hpp	/^class FaceContainer : public SimpleRefCount<FaceContainer> {$/;"	c	namespace:ns3::ndn
FaceCounters	NFD/daemon/face/face-counters.hpp	/^class FaceCounters : public NetworkLayerCounters, public LinkLayerCounters$/;"	c	namespace:nfd
FaceCreateCommand	ndn-cxx/src/management/nfd-control-command.cpp	/^FaceCreateCommand::FaceCreateCommand()$/;"	f	class:ndn::nfd::FaceCreateCommand
FaceCreateCommand	ndn-cxx/src/management/nfd-control-command.hpp	/^class FaceCreateCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
FaceCreateFixture	NFD/tests/daemon/face/tcp.t.cpp	/^class FaceCreateFixture : protected BaseFixture$/;"	c	namespace:nfd::tests	file:
FaceCreateFixture	NFD/tests/daemon/face/udp.t.cpp	/^class FaceCreateFixture : protected BaseFixture$/;"	c	namespace:nfd::tests	file:
FaceCreateTimeoutFixture	NFD/tests/daemon/face/tcp.t.cpp	/^class FaceCreateTimeoutFixture : protected BaseFixture$/;"	c	namespace:nfd::tests	file:
FaceCreatedCallback	NFD/daemon/face/channel.hpp	/^  typedef function<void(const shared_ptr<Face>& newFace)> FaceCreatedCallback;$/;"	t	class:nfd::Channel
FaceCreatedCallback	NFD/daemon/face/protocol-factory.hpp	/^typedef function<void(const shared_ptr<Face>& newFace)> FaceCreatedCallback;$/;"	t	namespace:nfd
FaceDestroyCommand	ndn-cxx/src/management/nfd-control-command.cpp	/^FaceDestroyCommand::FaceDestroyCommand()$/;"	f	class:ndn::nfd::FaceDestroyCommand
FaceDestroyCommand	ndn-cxx/src/management/nfd-control-command.hpp	/^class FaceDestroyCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
FaceDisableLocalControlCommand	ndn-cxx/src/management/nfd-control-command.cpp	/^FaceDisableLocalControlCommand::FaceDisableLocalControlCommand()$/;"	f	class:ndn::nfd::FaceDisableLocalControlCommand
FaceDisableLocalControlCommand	ndn-cxx/src/management/nfd-control-command.hpp	/^class FaceDisableLocalControlCommand : public FaceLocalControlCommand$/;"	c	namespace:ndn::nfd
FaceEnableLocalControlCommand	ndn-cxx/src/management/nfd-control-command.cpp	/^FaceEnableLocalControlCommand::FaceEnableLocalControlCommand()$/;"	f	class:ndn::nfd::FaceEnableLocalControlCommand
FaceEnableLocalControlCommand	ndn-cxx/src/management/nfd-control-command.hpp	/^class FaceEnableLocalControlCommand : public FaceLocalControlCommand$/;"	c	namespace:ndn::nfd
FaceEventKind	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  FaceEventKind         = 193,$/;"	e	enum:ndn::tlv::nfd::__anon11
FaceEventKind	ndn-cxx/src/management/nfd-face-event-notification.hpp	/^enum FaceEventKind {$/;"	g	namespace:ndn::nfd
FaceEventNotification	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  FaceEventNotification = 192,$/;"	e	enum:ndn::tlv::nfd::__anon11
FaceEventNotification	ndn-cxx/src/management/nfd-face-event-notification.cpp	/^FaceEventNotification::FaceEventNotification()$/;"	f	class:ndn::nfd::FaceEventNotification
FaceEventNotification	ndn-cxx/src/management/nfd-face-event-notification.cpp	/^FaceEventNotification::FaceEventNotification(const Block& block)$/;"	f	class:ndn::nfd::FaceEventNotification
FaceEventNotification	ndn-cxx/src/management/nfd-face-event-notification.hpp	/^class FaceEventNotification : public FaceTraits<FaceEventNotification>$/;"	c	namespace:ndn::nfd
FaceFailTestFace	NFD/tests/daemon/face/face.t.cpp	/^  FaceFailTestFace()$/;"	f	class:nfd::tests::FaceFailTestFace
FaceFailTestFace	NFD/tests/daemon/face/face.t.cpp	/^class FaceFailTestFace : public DummyFace$/;"	c	namespace:nfd::tests	file:
FaceFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  FaceFixture()$/;"	f	class:nfd::tests::FaceFixture
FaceFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^class FaceFixture : public FaceTableFixture,$/;"	c	namespace:nfd::tests	file:
FaceFixture	ndn-cxx/tests/unit-tests/face.t.cpp	/^  FaceFixture(bool enableRegistrationReply = true)$/;"	f	class:ndn::tests::FaceFixture
FaceFixture	ndn-cxx/tests/unit-tests/face.t.cpp	/^class FaceFixture : public UnitTestTimeFixture$/;"	c	namespace:ndn::tests	file:
FaceHistory	NFD/tests/daemon/face/face-history.hpp	/^  FaceHistory(Face& face)$/;"	f	class:nfd::tests::FaceHistory
FaceHistory	NFD/tests/daemon/face/face-history.hpp	/^  FaceHistory(Face& face, LimitedIo& limitedIo)$/;"	f	class:nfd::tests::FaceHistory
FaceHistory	NFD/tests/daemon/face/face-history.hpp	/^class FaceHistory : noncopyable$/;"	c	namespace:nfd::tests
FaceId	NFD/daemon/face/face.hpp	/^typedef int FaceId;$/;"	t	namespace:nfd
FaceId	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  FaceId              = 105,$/;"	e	enum:ndn::tlv::nfd::__anon11
FaceIdFetcher	NFD/tools/nfdc.cpp	/^Nfdc::FaceIdFetcher::FaceIdFetcher(ndn::Face& face,$/;"	f	class:nfdc::Nfdc::FaceIdFetcher
FaceIdFetcher	NFD/tools/nfdc.hpp	/^  class FaceIdFetcher$/;"	c	class:nfdc::Nfdc
FaceIdSet	NFD/rib/rib-manager.hpp	/^  typedef std::set<uint64_t> FaceIdSet;$/;"	t	class:nfd::rib::RibManager
FaceInfo	NFD/daemon/fw/access-strategy.cpp	/^AccessStrategy::FaceInfo::FaceInfo()$/;"	f	class:nfd::fw::AccessStrategy::FaceInfo
FaceInfo	NFD/daemon/fw/access-strategy.hpp	/^  class FaceInfo$/;"	c	class:nfd::fw::AccessStrategy
FaceInfoTable	NFD/daemon/fw/access-strategy.hpp	/^  typedef std::unordered_map<FaceId, FaceInfo> FaceInfoTable;$/;"	t	class:nfd::fw::AccessStrategy
FaceListFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  FaceListFixture()$/;"	f	class:nfd::tests::FaceListFixture
FaceListFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^class FaceListFixture : public FaceStatusPublisherFixture$/;"	c	namespace:nfd::tests	file:
FaceLocalControlCommand	ndn-cxx/src/management/nfd-control-command.cpp	/^FaceLocalControlCommand::FaceLocalControlCommand(const std::string& verb)$/;"	f	class:ndn::nfd::FaceLocalControlCommand
FaceLocalControlCommand	ndn-cxx/src/management/nfd-control-command.hpp	/^class FaceLocalControlCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
FaceLookupTable	NFD/rib/rib.hpp	/^  typedef std::map<uint64_t, std::list<shared_ptr<RibEntry>>> FaceLookupTable;$/;"	t	class:nfd::rib::Rib
FaceManager	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::FaceManager(FaceTable& faceTable,$/;"	f	class:nfd::FaceManager
FaceManager	NFD/daemon/mgmt/face-manager.hpp	/^class FaceManager : public ManagerBase$/;"	c	namespace:nfd
FaceManagerFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  FaceManagerFixture()$/;"	f	class:nfd::tests::FaceManagerFixture
FaceManagerFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^class FaceManagerFixture : public TestFaceTableFixture, public TestFaceManagerCommon$/;"	c	namespace:nfd::tests	file:
FaceManagerTestFace	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  FaceManagerTestFace()$/;"	f	class:nfd::tests::FaceManagerTestFace
FaceManagerTestFace	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^class FaceManagerTestFace : public DummyFace$/;"	c	namespace:nfd::tests	file:
FaceMap	NFD/daemon/fw/face-table.hpp	/^  typedef std::map<FaceId, shared_ptr<Face>> FaceMap;$/;"	t	class:nfd::FaceTable
FaceMonitor	ndn-cxx/src/management/nfd-face-monitor.hpp	/^  FaceMonitor(Face& face)$/;"	f	class:ndn::nfd::FaceMonitor
FaceMonitor	ndn-cxx/src/management/nfd-face-monitor.hpp	/^class FaceMonitor : public util::NotificationSubscriber<FaceEventNotification>$/;"	c	namespace:ndn::nfd
FacePersistency	ndn-cxx/src/encoding/nfd-constants.hpp	/^enum FacePersistency {$/;"	g	namespace:ndn::nfd
FacePersistency	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  FacePersistency       = 133,$/;"	e	enum:ndn::tlv::nfd::__anon11
FaceQueryFilter	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  FaceQueryFilter       = 150,$/;"	e	enum:ndn::tlv::nfd::__anon11
FaceQueryFilter	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::FaceQueryFilter()$/;"	f	class:ndn::nfd::FaceQueryFilter
FaceQueryFilter	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::FaceQueryFilter(const Block& block)$/;"	f	class:ndn::nfd::FaceQueryFilter
FaceQueryFilter	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^class FaceQueryFilter$/;"	c	namespace:ndn::nfd
FaceQueryListFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  FaceQueryListFixture()$/;"	f	class:nfd::tests::FaceQueryListFixture
FaceQueryListFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^class FaceQueryListFixture : public FaceQueryStatusPublisherFixture$/;"	c	namespace:nfd::tests	file:
FaceQueryStatusPublisher	NFD/daemon/mgmt/face-query-status-publisher.cpp	/^FaceQueryStatusPublisher::FaceQueryStatusPublisher(const FaceTable& faceTable,$/;"	f	class:nfd::FaceQueryStatusPublisher
FaceQueryStatusPublisher	NFD/daemon/mgmt/face-query-status-publisher.hpp	/^class FaceQueryStatusPublisher : public SegmentPublisher<AppFace>$/;"	c	namespace:nfd
FaceQueryStatusPublisherFixture	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  FaceQueryStatusPublisherFixture()$/;"	f	class:nfd::tests::FaceQueryStatusPublisherFixture
FaceQueryStatusPublisherFixture	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^class FaceQueryStatusPublisherFixture : public BaseFixture$/;"	c	namespace:nfd::tests
FaceRecord	NFD/daemon/table/pit-face-record.cpp	/^FaceRecord::FaceRecord(shared_ptr<Face> face)$/;"	f	class:nfd::pit::FaceRecord
FaceRecord	NFD/daemon/table/pit-face-record.hpp	/^class FaceRecord : public StrategyInfoHost$/;"	c	namespace:nfd::pit
FaceScope	ndn-cxx/src/encoding/nfd-constants.hpp	/^enum FaceScope {$/;"	g	namespace:ndn::nfd
FaceScope	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  FaceScope             = 132,$/;"	e	enum:ndn::tlv::nfd::__anon11
FaceStatus	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  FaceStatus            = 128,$/;"	e	enum:ndn::tlv::nfd::__anon11
FaceStatus	ndn-cxx/src/management/nfd-face-status.cpp	/^FaceStatus::FaceStatus()$/;"	f	class:ndn::nfd::FaceStatus
FaceStatus	ndn-cxx/src/management/nfd-face-status.cpp	/^FaceStatus::FaceStatus(const Block& block)$/;"	f	class:ndn::nfd::FaceStatus
FaceStatus	ndn-cxx/src/management/nfd-face-status.hpp	/^class FaceStatus : public FaceTraits<FaceStatus>$/;"	c	namespace:ndn::nfd
FaceStatusPublisher	NFD/daemon/mgmt/face-status-publisher.cpp	/^FaceStatusPublisher::FaceStatusPublisher(const FaceTable& faceTable,$/;"	f	class:nfd::FaceStatusPublisher
FaceStatusPublisher	NFD/daemon/mgmt/face-status-publisher.hpp	/^class FaceStatusPublisher : public SegmentPublisher<AppFace>$/;"	c	namespace:nfd
FaceStatusPublisherFixture	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^  FaceStatusPublisherFixture()$/;"	f	class:nfd::tests::FaceStatusPublisherFixture
FaceStatusPublisherFixture	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^class FaceStatusPublisherFixture : public BaseFixture$/;"	c	namespace:nfd::tests
FaceTable	NFD/daemon/fw/face-table.cpp	/^FaceTable::FaceTable(Forwarder& forwarder)$/;"	f	class:nfd::FaceTable
FaceTable	NFD/daemon/fw/face-table.hpp	/^class FaceTable : noncopyable$/;"	c	namespace:nfd
FaceTableAccessTestStrategy	NFD/tests/daemon/fw/strategy.t.cpp	/^  FaceTableAccessTestStrategy(Forwarder& forwarder)$/;"	f	class:nfd::fw::tests::FaceTableAccessTestStrategy
FaceTableAccessTestStrategy	NFD/tests/daemon/fw/strategy.t.cpp	/^class FaceTableAccessTestStrategy : public DummyStrategy$/;"	c	namespace:nfd::fw::tests	file:
FaceTableFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  FaceTableFixture()$/;"	f	class:nfd::tests::FaceTableFixture
FaceTableFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^class FaceTableFixture$/;"	c	namespace:nfd::tests	file:
FaceTraits	ndn-cxx/src/management/nfd-face-traits.hpp	/^  FaceTraits()$/;"	f	class:ndn::nfd::FaceTraits
FaceTraits	ndn-cxx/src/management/nfd-face-traits.hpp	/^class FaceTraits$/;"	c	namespace:ndn::nfd
FaceUri	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::FaceUri()$/;"	f	class:ndn::util::FaceUri
FaceUri	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::FaceUri(const boost::asio::ip::tcp::endpoint& endpoint)$/;"	f	class:ndn::util::FaceUri
FaceUri	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::FaceUri(const boost::asio::ip::tcp::endpoint& endpoint, const std::string& scheme)$/;"	f	class:ndn::util::FaceUri
FaceUri	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::FaceUri(const boost::asio::ip::udp::endpoint& endpoint)$/;"	f	class:ndn::util::FaceUri
FaceUri	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::FaceUri(const boost::asio::local::stream_protocol::endpoint& endpoint)$/;"	f	class:ndn::util::FaceUri
FaceUri	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::FaceUri(const char* uri)$/;"	f	class:ndn::util::FaceUri
FaceUri	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::FaceUri(const ethernet::Address& address)$/;"	f	class:ndn::util::FaceUri
FaceUri	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::FaceUri(const std::string& uri)$/;"	f	class:ndn::util::FaceUri
FaceUri	ndn-cxx/src/util/face-uri.hpp	/^class FaceUri$/;"	c	namespace:ndn::util
FacesFixture	ndn-cxx/tests/integrated/face.cpp	/^  FacesFixture()$/;"	f	class:ndn::tests::FacesFixture
FacesFixture	ndn-cxx/tests/integrated/face.cpp	/^class FacesFixture : public security::IdentityManagementFixture$/;"	c	namespace:ndn::tests	file:
FacesFixture	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  FacesFixture()$/;"	f	struct:ndn::tests::FacesFixture
FacesFixture	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^struct FacesFixture : public security::IdentityManagementTimeFixture$/;"	s	namespace:ndn::tests	file:
FacesFixture2	ndn-cxx/tests/integrated/face.cpp	/^class FacesFixture2 : public FacesFixture$/;"	c	namespace:ndn::tests	file:
FacesFixture3	ndn-cxx/tests/integrated/face.cpp	/^  FacesFixture3()$/;"	f	class:ndn::tests::FacesFixture3
FacesFixture3	ndn-cxx/tests/integrated/face.cpp	/^class FacesFixture3 : public FacesFixture2$/;"	c	namespace:ndn::tests	file:
FacesNoRegistrationReplyFixture	ndn-cxx/tests/unit-tests/face.t.cpp	/^  FacesNoRegistrationReplyFixture()$/;"	f	class:ndn::tests::FacesNoRegistrationReplyFixture
FacesNoRegistrationReplyFixture	ndn-cxx/tests/unit-tests/face.t.cpp	/^class FacesNoRegistrationReplyFixture : public FaceFixture$/;"	c	namespace:ndn::tests	file:
Factory	ndn-cxx/src/security/key-chain.cpp	/^  Factory(const std::string& canonicalName, const T& create)$/;"	f	struct:ndn::security::Factory
Factory	ndn-cxx/src/security/key-chain.cpp	/^struct Factory$/;"	s	namespace:ndn::security	file:
FactoryCallback	helper/ndn-app-helper.hpp	/^  typedef std::function<shared_ptr<void>()> FactoryCallback;$/;"	t	class:ns3::ndn::FactoryCallbackApp
FactoryCallbackApp	helper/ndn-app-helper.cpp	/^FactoryCallbackApp::FactoryCallbackApp(const FactoryCallback& factory)$/;"	f	class:ns3::ndn::FactoryCallbackApp
FactoryCallbackApp	helper/ndn-app-helper.hpp	/^class FactoryCallbackApp : public Application$/;"	c	namespace:ns3::ndn
FactoryErrorCheck	NFD/tests/daemon/face/udp.t.cpp	/^class FactoryErrorCheck : protected BaseFixture$/;"	c	namespace:nfd::tests	file:
FactoryMap	NFD/daemon/mgmt/channel-status-publisher.hpp	/^  typedef std::map< std::string\/*protocol*\/, shared_ptr<ProtocolFactory> > FactoryMap;$/;"	t	class:nfd::ChannelStatusPublisher
FactoryMap	NFD/daemon/mgmt/face-manager.hpp	/^  typedef std::map<std::string\/*protocol*\/, shared_ptr<ProtocolFactory>> FactoryMap;$/;"	t	class:nfd::FaceManager
FailLink	helper/ndn-link-control-helper.cpp	/^LinkControlHelper::FailLink(Ptr<Node> node1, Ptr<Node> node2)$/;"	f	class:ns3::ndn::LinkControlHelper
FailLinkByName	helper/ndn-link-control-helper.cpp	/^LinkControlHelper::FailLinkByName(const std::string& node1, const std::string& node2)$/;"	f	class:ns3::ndn::LinkControlHelper
FailureCallback	NFD/tools/nfdc.hpp	/^    typedef std::function<void(const std::string&)> FailureCallback;$/;"	t	class:nfdc::Nfdc::FaceIdFetcher
FailureCallback	ndn-cxx/src/detail/registered-prefix.hpp	/^  typedef function<void(uint32_t\/*code*\/,const std::string&\/*reason*\/)> FailureCallback;$/;"	t	class:ndn::RegisteredPrefix
FakeNetworkInterfaceFixture	NFD/tests/core/network-interface.t.cpp	/^  FakeNetworkInterfaceFixture()$/;"	f	class:nfd::tests::FakeNetworkInterfaceFixture
FakeNetworkInterfaceFixture	NFD/tests/core/network-interface.t.cpp	/^class FakeNetworkInterfaceFixture : public BaseFixture$/;"	c	namespace:nfd::tests	file:
FakeNetworkInterfaceFixture	NFD/tests/daemon/face/tcp.t.cpp	/^  FakeNetworkInterfaceFixture()$/;"	f	class:nfd::tests::FakeNetworkInterfaceFixture
FakeNetworkInterfaceFixture	NFD/tests/daemon/face/tcp.t.cpp	/^class FakeNetworkInterfaceFixture : public BaseFixture$/;"	c	namespace:nfd::tests	file:
FakeNetworkInterfaceFixture	NFD/tests/daemon/face/udp.t.cpp	/^  FakeNetworkInterfaceFixture()$/;"	f	class:nfd::tests::FakeNetworkInterfaceFixture
FakeNetworkInterfaceFixture	NFD/tests/daemon/face/udp.t.cpp	/^class FakeNetworkInterfaceFixture : public BaseFixture$/;"	c	namespace:nfd::tests	file:
Fetch32	NFD/core/city-hash.cpp	/^static uint32 Fetch32(const char *p) {$/;"	f	file:
Fetch64	NFD/core/city-hash.cpp	/^static uint64 Fetch64(const char *p) {$/;"	f	file:
Fib	NFD/daemon/table/fib.cpp	/^Fib::Fib(NameTree& nameTree)$/;"	f	class:nfd::Fib
Fib	NFD/daemon/table/fib.hpp	/^class Fib : noncopyable$/;"	c	namespace:nfd
FibAddNextHopCommand	ndn-cxx/src/management/nfd-control-command.cpp	/^FibAddNextHopCommand::FibAddNextHopCommand()$/;"	f	class:ndn::nfd::FibAddNextHopCommand
FibAddNextHopCommand	ndn-cxx/src/management/nfd-control-command.hpp	/^class FibAddNextHopCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
FibEntry	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  FibEntry      = 128,$/;"	e	enum:ndn::tlv::nfd::__anon11
FibEntry	ndn-cxx/src/management/nfd-fib-entry.cpp	/^FibEntry::FibEntry()$/;"	f	class:ndn::nfd::FibEntry
FibEntry	ndn-cxx/src/management/nfd-fib-entry.cpp	/^FibEntry::FibEntry(const Block& block)$/;"	f	class:ndn::nfd::FibEntry
FibEntry	ndn-cxx/src/management/nfd-fib-entry.hpp	/^class FibEntry$/;"	c	namespace:ndn::nfd
FibEnumerationPublisher	NFD/daemon/mgmt/fib-enumeration-publisher.cpp	/^FibEnumerationPublisher::FibEnumerationPublisher(const Fib& fib,$/;"	f	class:nfd::FibEnumerationPublisher
FibEnumerationPublisher	NFD/daemon/mgmt/fib-enumeration-publisher.hpp	/^class FibEnumerationPublisher : public SegmentPublisher<AppFace>$/;"	c	namespace:nfd
FibEnumerationPublisherFixture	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^  FibEnumerationPublisherFixture()$/;"	f	class:nfd::tests::FibEnumerationPublisherFixture
FibEnumerationPublisherFixture	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^class FibEnumerationPublisherFixture : public BaseFixture$/;"	c	namespace:nfd::tests
FibHelper	helper/ndn-fib-helper.hpp	/^class FibHelper {$/;"	c	namespace:ns3::ndn
FibManager	NFD/daemon/mgmt/fib-manager.cpp	/^FibManager::FibManager(Fib& fib,$/;"	f	class:nfd::FibManager
FibManager	NFD/daemon/mgmt/fib-manager.hpp	/^class FibManager : public ManagerBase$/;"	c	namespace:nfd
FibManagerFixture	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  FibManagerFixture()$/;"	f	class:nfd::tests::FibManagerFixture
FibManagerFixture	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^class FibManagerFixture : public FibEnumerationPublisherFixture$/;"	c	namespace:nfd::tests	file:
FibRemoveNextHopCommand	ndn-cxx/src/management/nfd-control-command.cpp	/^FibRemoveNextHopCommand::FibRemoveNextHopCommand()$/;"	f	class:ndn::nfd::FibRemoveNextHopCommand
FibRemoveNextHopCommand	ndn-cxx/src/management/nfd-control-command.hpp	/^class FibRemoveNextHopCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
FibUpdate	NFD/rib/fib-update.hpp	/^  FibUpdate()$/;"	f	class:nfd::rib::FibUpdate
FibUpdate	NFD/rib/fib-update.hpp	/^class FibUpdate$/;"	c	namespace:nfd::rib
FibUpdateFailureCallback	NFD/rib/fib-updater.hpp	/^  typedef function<void(uint32_t code, const std::string& error)> FibUpdateFailureCallback;$/;"	t	class:nfd::rib::FibUpdater
FibUpdateList	NFD/rib/fib-updater.hpp	/^  typedef std::list<FibUpdate> FibUpdateList;$/;"	t	class:nfd::rib::FibUpdater
FibUpdateSuccessCallback	NFD/rib/fib-updater.hpp	/^  typedef function<void(RibUpdateList inheritedRoutes)> FibUpdateSuccessCallback;$/;"	t	class:nfd::rib::FibUpdater
FibUpdater	NFD/rib/fib-updater.cpp	/^FibUpdater::FibUpdater(Rib& rib, ndn::nfd::Controller& controller)$/;"	f	class:nfd::rib::FibUpdater
FibUpdater	NFD/rib/fib-updater.hpp	/^class FibUpdater : noncopyable$/;"	c	namespace:nfd::rib
FibUpdatesFixture	NFD/tests/rib/fib-updates-common.hpp	/^  FibUpdatesFixture()$/;"	f	class:nfd::rib::tests::FibUpdatesFixture
FibUpdatesFixture	NFD/tests/rib/fib-updates-common.hpp	/^class FibUpdatesFixture : public nfd::tests::BaseFixture$/;"	c	namespace:nfd::rib::tests
Field	ndn-cxx/src/lp/field.hpp	/^struct Field$/;"	s	namespace:ndn::lp
FieldDecl	ndn-cxx/src/lp/detail/field-decl.hpp	/^class FieldDecl$/;"	c	namespace:ndn::lp::detail
FieldInfo	ndn-cxx/src/lp/detail/field-info.cpp	/^FieldInfo::FieldInfo()$/;"	f	class:ndn::lp::detail::FieldInfo
FieldInfo	ndn-cxx/src/lp/detail/field-info.cpp	/^FieldInfo::FieldInfo(uint64_t tlv)$/;"	f	class:ndn::lp::detail::FieldInfo
FieldInfo	ndn-cxx/src/lp/detail/field-info.hpp	/^class FieldInfo$/;"	c	namespace:ndn::lp::detail
FieldLocation	ndn-cxx/src/lp/detail/field-decl.hpp	/^  typedef LOCATION FieldLocation;$/;"	t	class:ndn::lp::detail::FieldDecl
FieldSet	ndn-cxx/src/lp/fields.hpp	/^  > FieldSet;$/;"	t	namespace:ndn::lp
FieldValidator	ndn-cxx/src/management/nfd-control-command.cpp	/^ControlCommand::FieldValidator::FieldValidator()$/;"	f	class:ndn::nfd::ControlCommand::FieldValidator
FieldValidator	ndn-cxx/src/management/nfd-control-command.hpp	/^  class FieldValidator$/;"	c	class:ndn::nfd::ControlCommand
Fifo	model/cs/content-store-impl.cpp	/^class Fifo : public ContentStoreImpl<fifo_policy_traits> {$/;"	c	namespace:ns3::ndn::cs	file:
Fifo	model/cs/content-store-with-freshness.cpp	/^class Freshness::Fifo : public ContentStoreWithFreshness<fifo_policy_traits> {$/;"	c	class:ns3::ndn::cs::Freshness	file:
Fifo	model/cs/content-store-with-probability.cpp	/^class Probability::Fifo : public ContentStoreWithProbability<fifo_policy_traits> {$/;"	c	class:ns3::ndn::cs::Probability	file:
Fifo	model/cs/content-store-with-stats.cpp	/^class Stats::Fifo : public ContentStoreWithStats<fifo_policy_traits> {$/;"	c	class:ns3::ndn::cs::Stats	file:
FifoWithCountsTraits	model/cs/content-store-impl.cpp	/^  FifoWithCountsTraits;$/;"	t	namespace:ns3::ndn::cs	file:
Filter	ndn-cxx/src/security/conf/filter.hpp	/^class Filter$/;"	c	namespace:ndn::security::conf
FilterFactory	ndn-cxx/src/security/conf/filter.hpp	/^class FilterFactory$/;"	c	namespace:ndn::security::conf
FilterList	ndn-cxx/src/security/conf/rule.hpp	/^  typedef std::vector<shared_ptr<Filter> > FilterList;$/;"	t	class:ndn::security::conf::Rule
FinalBlockId	ndn-cxx/src/encoding/tlv.hpp	/^  FinalBlockId  = 26,$/;"	e	enum:ndn::tlv::__anon8
FindFixture	NFD/tests/daemon/table/cs.t.cpp	/^class FindFixture : protected BaseFixture$/;"	c	namespace:nfd::cs::tests	file:
FindFixture	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^class FindFixture$/;"	c	namespace:ndn::util	file:
FirstInterestDataDelay	utils/tracers/ndn-app-delay-tracer.cpp	/^AppDelayTracer::FirstInterestDataDelay(Ptr<App> app, uint32_t seqno, Time delay, uint32_t retxCount,$/;"	f	class:ns3::ndn::AppDelayTracer
FirstInterestDataDelayCallback	apps/ndn-consumer.hpp	/^  typedef void (*FirstInterestDataDelayCallback)(Ptr<App> app, uint32_t seqno, Time delay, uint32_t retxCount, int32_t hopCount);$/;"	t	class:ns3::ndn::Consumer
FixedSignerChecker	ndn-cxx/src/security/conf/checker.hpp	/^  FixedSignerChecker(uint32_t sigType,$/;"	f	class:ndn::security::conf::FixedSignerChecker
FixedSignerChecker	ndn-cxx/src/security/conf/checker.hpp	/^class FixedSignerChecker : public Checker$/;"	c	namespace:ndn::security::conf
Fixture	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^  Fixture()$/;"	f	class:ndn::util::tests::Fixture
Fixture	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^class Fixture : public ndn::tests::UnitTestTimeFixture$/;"	c	namespace:ndn::util::tests	file:
Fixtures	ndn-cxx/tests/unit-tests/tag-host.t.cpp	/^typedef boost::mpl::vector<TagHost, Interest, Data> Fixtures;$/;"	t	namespace:ndn::tests	file:
Flags	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  Flags               = 108,$/;"	e	enum:ndn::tlv::nfd::__anon11
ForwardRange	NFD/daemon/fw/face-table.hpp	/^  typedef boost::select_second_const_range<FaceMap> ForwardRange;$/;"	t	class:nfd::FaceTable
Forwarder	NFD/daemon/fw/forwarder.cpp	/^Forwarder::Forwarder()$/;"	f	class:nfd::Forwarder
Forwarder	NFD/daemon/fw/forwarder.hpp	/^class Forwarder$/;"	c	namespace:nfd
ForwarderCounters	NFD/daemon/fw/forwarder-counters.hpp	/^class ForwarderCounters : public NetworkLayerCounters$/;"	c	namespace:nfd
ForwarderStatus	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::ForwarderStatus()$/;"	f	class:ndn::nfd::ForwarderStatus
ForwarderStatus	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::ForwarderStatus(const Block& payload)$/;"	f	class:ndn::nfd::ForwarderStatus
ForwarderStatus	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^class ForwarderStatus$/;"	c	namespace:ndn::nfd
FragCount	ndn-cxx/src/lp/tlv.hpp	/^  FragCount = 83,$/;"	e	enum:ndn::lp::tlv::__anon4
FragCountField	ndn-cxx/src/lp/fields.hpp	/^                          tlv::FragCount> FragCountField;$/;"	t	namespace:ndn::lp
FragIndex	ndn-cxx/src/lp/tlv.hpp	/^  FragIndex = 82,$/;"	e	enum:ndn::lp::tlv::__anon4
FragIndexField	ndn-cxx/src/lp/fields.hpp	/^                          tlv::FragIndex> FragIndexField;$/;"	t	namespace:ndn::lp
Fragment	ndn-cxx/src/lp/field.hpp	/^class Fragment : public Base$/;"	c	namespace:ndn::lp::field_location_tags
Fragment	ndn-cxx/src/lp/tlv.hpp	/^  Fragment = 80,$/;"	e	enum:ndn::lp::tlv::__anon4
FragmentField	ndn-cxx/src/lp/fields.hpp	/^                          tlv::Fragment> FragmentField;$/;"	t	namespace:ndn::lp
FreshnessPeriod	ndn-cxx/src/encoding/tlv.hpp	/^  FreshnessPeriod = 25,$/;"	e	enum:ndn::tlv::__anon8
FromPacket	model/ndn-ns3.cpp	/^Convert::FromPacket(Ptr<Packet> packet)$/;"	f	class:ns3::ndn::Convert
FunctorHook	utils/trie/detail/functor-hook.hpp	/^struct FunctorHook {$/;"	s	namespace:ns3::ndn::ndnSIM::detail
FwHopCountTag	utils/ndn-fw-hop-count-tag.hpp	/^  FwHopCountTag()$/;"	f	class:ns3::ndn::FwHopCountTag
FwHopCountTag	utils/ndn-fw-hop-count-tag.hpp	/^class FwHopCountTag : public Tag {$/;"	c	namespace:ns3::ndn
GATEWAY	utils/topology/rocketfuel-map-reader.hpp	/^  enum node_type_t { UNKNOWN = 0, CLIENT = 1, GATEWAY = 2, BACKBONE = 3 };$/;"	e	enum:ns3::RocketfuelMapReader::node_type_t
GOOD	NFD/websocketpp/websocketpp/connection.hpp	/^        GOOD = 0,           \/\/ no failure yet!$/;"	e	enum:websocketpp::session::fail::status::value
GRACE_INTERVAL	ndn-cxx/src/util/command-interest-validator.hpp	/^    GRACE_INTERVAL = 3000 \/\/ ms$/;"	e	enum:ndn::CommandInterestValidator::__anon6
Gain	utils/ndn-rtt-mean-deviation.cpp	/^RttMeanDeviation::Gain(double g)$/;"	f	class:ns3::ndn::RttMeanDeviation
GeneralConfigSectionFixture	NFD/tests/daemon/mgmt/general-config-section.t.cpp	/^class GeneralConfigSectionFixture : public BaseFixture$/;"	c	namespace:nfd::general::tests	file:
GenerateFromMapsFile	utils/topology/rocketfuel-map-reader.cpp	/^RocketfuelMapReader::GenerateFromMapsFile(int argc, char* argv[])$/;"	f	class:ns3::RocketfuelMapReader
Get	helper/ndn-face-container.cpp	/^FaceContainer::Get(size_t i) const$/;"	f	class:ns3::ndn::FaceContainer
Get	utils/mem-usage.hpp	/^  Get()$/;"	f	class:MemUsage
Get	utils/ndn-fw-hop-count-tag.hpp	/^  Get() const$/;"	f	class:ns3::ndn::FwHopCountTag
GetBackboneRouters	utils/topology/rocketfuel-map-reader.cpp	/^RocketfuelMapReader::GetBackboneRouters() const$/;"	f	class:ns3::RocketfuelMapReader
GetCacheProbability	model/cs/content-store-with-probability.hpp	/^  GetCacheProbability() const$/;"	f	class:ns3::ndn::cs::ContentStoreWithProbability
GetContentStore	model/cs/ndn-content-store.cpp	/^Entry::GetContentStore()$/;"	f	class:ns3::ndn::cs::Entry
GetContentStore	model/cs/ndn-content-store.hpp	/^ContentStore::GetContentStore(Ptr<Object> node)$/;"	f	class:ns3::ndn::ContentStore
GetCurrentEstimate	utils/ndn-rtt-estimator.cpp	/^RttEstimator::GetCurrentEstimate(void) const$/;"	f	class:ns3::ndn::RttEstimator
GetCustomerRouters	utils/topology/rocketfuel-map-reader.cpp	/^RocketfuelMapReader::GetCustomerRouters() const$/;"	f	class:ns3::RocketfuelMapReader
GetData	model/cs/ndn-content-store.cpp	/^Entry::GetData() const$/;"	f	class:ns3::ndn::cs::Entry
GetDefaultBandwidth	utils/topology/rocketfuel-weights-reader.hpp	/^RocketfuelWeightsReader::GetDefaultBandwidth() const$/;"	f	class:ns3::RocketfuelWeightsReader
GetDefaultQueue	utils/topology/rocketfuel-weights-reader.hpp	/^RocketfuelWeightsReader::GetDefaultQueue() const$/;"	f	class:ns3::RocketfuelWeightsReader
GetErases	utils/trie/aggregate-stats-policy.hpp	/^      GetErases() const$/;"	f	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
GetGatewayRouters	utils/topology/rocketfuel-map-reader.cpp	/^RocketfuelMapReader::GetGatewayRouters() const$/;"	f	class:ns3::RocketfuelMapReader
GetId	apps/ndn-app.cpp	/^App::GetId() const$/;"	f	class:ns3::ndn::App
GetId	model/ndn-global-router.cpp	/^GlobalRouter::GetId() const$/;"	f	class:ns3::ndn::GlobalRouter
GetIncidencies	model/ndn-global-router.cpp	/^GlobalRouter::GetIncidencies()$/;"	f	class:ns3::ndn::GlobalRouter
GetInserts	utils/trie/aggregate-stats-policy.hpp	/^      GetInserts() const$/;"	f	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
GetInstanceTypeId	model/ndn-header.cpp	/^PacketHeader<Pkt>::GetInstanceTypeId(void) const$/;"	f	class:ns3::ndn::PacketHeader
GetInstanceTypeId	utils/ndn-fw-hop-count-tag.cpp	/^FwHopCountTag::GetInstanceTypeId() const$/;"	f	class:ns3::ndn::FwHopCountTag
GetInstanceTypeId	utils/ndn-rtt-estimator.cpp	/^RttEstimator::GetInstanceTypeId(void) const$/;"	f	class:ns3::ndn::RttEstimator
GetInstanceTypeId	utils/ndn-rtt-mean-deviation.cpp	/^RttMeanDeviation::GetInstanceTypeId(void) const$/;"	f	class:ns3::ndn::RttMeanDeviation
GetL3Protocol	model/ndn-global-router.cpp	/^GlobalRouter::GetL3Protocol() const$/;"	f	class:ns3::ndn::GlobalRouter
GetLinks	utils/topology/annotated-topology-reader.cpp	/^AnnotatedTopologyReader::GetLinks() const$/;"	f	class:ns3::AnnotatedTopologyReader
GetLocalPrefixes	model/ndn-global-router.cpp	/^GlobalRouter::GetLocalPrefixes() const$/;"	f	class:ns3::ndn::GlobalRouter
GetLookups	utils/trie/aggregate-stats-policy.hpp	/^      GetLookups() const$/;"	f	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
GetMaxRto	utils/ndn-rtt-estimator.cpp	/^RttEstimator::GetMaxRto(void) const$/;"	f	class:ns3::ndn::RttEstimator
GetMaxSize	apps/ndn-consumer-window.cpp	/^ConsumerWindow::GetMaxSize() const$/;"	f	class:ns3::ndn::ConsumerWindow
GetMaxSize	model/cs/content-store-impl.hpp	/^ContentStoreImpl<Policy>::GetMaxSize() const$/;"	f	class:ns3::ndn::cs::ContentStoreImpl
GetMinRto	utils/ndn-rtt-estimator.cpp	/^RttEstimator::GetMinRto(void) const$/;"	f	class:ns3::ndn::RttEstimator
GetN	helper/ndn-face-container.cpp	/^FaceContainer::GetN(void) const$/;"	f	class:ns3::ndn::FaceContainer
GetName	model/cs/custom-policies/freshness-policy.hpp	/^  GetName()$/;"	f	struct:ns3::ndn::ndnSIM::freshness_policy_traits
GetName	model/cs/custom-policies/lifetime-stats-policy.hpp	/^  GetName()$/;"	f	struct:ns3::ndn::ndnSIM::lifetime_stats_policy_traits
GetName	model/cs/custom-policies/probability-policy.hpp	/^  GetName()$/;"	f	struct:ns3::ndn::ndnSIM::probability_policy_traits
GetName	model/cs/ndn-content-store.cpp	/^Entry::GetName() const$/;"	f	class:ns3::ndn::cs::Entry
GetName	utils/trie/aggregate-stats-policy.hpp	/^  GetName()$/;"	f	struct:ns3::ndn::ndnSIM::aggregate_stats_policy_traits
GetName	utils/trie/counting-policy.hpp	/^  GetName()$/;"	f	struct:ns3::ndn::ndnSIM::counting_policy_traits
GetName	utils/trie/empty-policy.hpp	/^  GetName()$/;"	f	struct:ns3::ndn::ndnSIM::empty_policy_traits
GetName	utils/trie/fifo-policy.hpp	/^  GetName()$/;"	f	struct:ns3::ndn::ndnSIM::fifo_policy_traits
GetName	utils/trie/lfu-policy.hpp	/^  GetName()$/;"	f	struct:ns3::ndn::ndnSIM::lfu_policy_traits
GetName	utils/trie/lru-policy.hpp	/^  GetName()$/;"	f	struct:ns3::ndn::ndnSIM::lru_policy_traits
GetName	utils/trie/multi-policy.hpp	/^  GetName()$/;"	f	struct:ns3::ndn::ndnSIM::multi_policy_traits
GetName	utils/trie/persistent-policy.hpp	/^  GetName()$/;"	f	struct:ns3::ndn::ndnSIM::persistent_policy_traits
GetName	utils/trie/random-policy.hpp	/^  GetName()$/;"	f	struct:ns3::ndn::ndnSIM::random_policy_traits
GetNetDevice	model/ndn-net-device-face.cpp	/^NetDeviceFace::GetNetDevice() const$/;"	f	class:ns3::ndn::NetDeviceFace
GetNextSeq	apps/ndn-consumer-zipf-mandelbrot.cpp	/^ConsumerZipfMandelbrot::GetNextSeq()$/;"	f	class:ns3::ndn::ConsumerZipfMandelbrot
GetNodes	utils/topology/annotated-topology-reader.cpp	/^AnnotatedTopologyReader::GetNodes() const$/;"	f	class:ns3::AnnotatedTopologyReader
GetNumberOfContents	apps/ndn-consumer-zipf-mandelbrot.cpp	/^ConsumerZipfMandelbrot::GetNumberOfContents() const$/;"	f	class:ns3::ndn::ConsumerZipfMandelbrot
GetPayloadSize	apps/ndn-consumer-window.cpp	/^ConsumerWindow::GetPayloadSize() const$/;"	f	class:ns3::ndn::ConsumerWindow
GetPolicy	model/cs/content-store-impl.hpp	/^  GetPolicy() const$/;"	f	class:ns3::ndn::cs::ContentStoreImpl
GetPolicy	model/cs/content-store-impl.hpp	/^  GetPolicy()$/;"	f	class:ns3::ndn::cs::ContentStoreImpl
GetQ	apps/ndn-consumer-zipf-mandelbrot.cpp	/^ConsumerZipfMandelbrot::GetQ() const$/;"	f	class:ns3::ndn::ConsumerZipfMandelbrot
GetRandomize	apps/ndn-consumer-cbr.cpp	/^ConsumerCbr::GetRandomize() const$/;"	f	class:ns3::ndn::ConsumerCbr
GetReference	NFD/core/scheduler.cpp	/^  GetReference(T& p)$/;"	f	struct:ns3::EventMemberImplObjTraits
GetReference	ndn-cxx/src/util/scheduler.cpp	/^  GetReference(T& p)$/;"	f	struct:ns3::EventMemberImplObjTraits
GetRetxTimer	apps/ndn-consumer.cpp	/^Consumer::GetRetxTimer() const$/;"	f	class:ns3::ndn::Consumer
GetS	apps/ndn-consumer-zipf-mandelbrot.cpp	/^ConsumerZipfMandelbrot::GetS() const$/;"	f	class:ns3::ndn::ConsumerZipfMandelbrot
GetSeqMax	apps/ndn-consumer-window.cpp	/^ConsumerWindow::GetSeqMax() const$/;"	f	class:ns3::ndn::ConsumerWindow
GetSerializedSize	model/ndn-header.cpp	/^PacketHeader<Pkt>::GetSerializedSize(void) const$/;"	f	class:ns3::ndn::PacketHeader
GetSerializedSize	utils/ndn-fw-hop-count-tag.cpp	/^FwHopCountTag::GetSerializedSize() const$/;"	f	class:ns3::ndn::FwHopCountTag
GetSize	model/cs/content-store-impl.hpp	/^ContentStoreImpl<Policy>::GetSize() const$/;"	f	class:ns3::ndn::cs::ContentStoreImpl
GetSize	model/cs/content-store-nocache.cpp	/^Nocache::GetSize() const$/;"	f	class:ns3::ndn::cs::Nocache
GetTypeId	apps/ndn-app.cpp	/^App::GetTypeId(void)$/;"	f	class:ns3::ndn::App
GetTypeId	apps/ndn-consumer-batches.cpp	/^ConsumerBatches::GetTypeId(void)$/;"	f	class:ns3::ndn::ConsumerBatches
GetTypeId	apps/ndn-consumer-cbr.cpp	/^ConsumerCbr::GetTypeId(void)$/;"	f	class:ns3::ndn::ConsumerCbr
GetTypeId	apps/ndn-consumer-window.cpp	/^ConsumerWindow::GetTypeId(void)$/;"	f	class:ns3::ndn::ConsumerWindow
GetTypeId	apps/ndn-consumer-zipf-mandelbrot.cpp	/^ConsumerZipfMandelbrot::GetTypeId(void)$/;"	f	class:ns3::ndn::ConsumerZipfMandelbrot
GetTypeId	apps/ndn-consumer.cpp	/^Consumer::GetTypeId(void)$/;"	f	class:ns3::ndn::Consumer
GetTypeId	apps/ndn-producer.cpp	/^Producer::GetTypeId(void)$/;"	f	class:ns3::ndn::Producer
GetTypeId	examples/ndn-custom-apps/custom-app.cpp	/^CustomApp::GetTypeId()$/;"	f	class:ns3::CustomApp
GetTypeId	examples/ndn-custom-apps/hijacker.cpp	/^Hijacker::GetTypeId()$/;"	f	class:ns3::Hijacker
GetTypeId	examples/ndn-cxx-simple/real-app-starter.hpp	/^  GetTypeId()$/;"	f	class:ns3::RealAppStarter
GetTypeId	examples/ndn-simple-with-content-freshness/one-interest-requester.cpp	/^OneInterestRequester::GetTypeId()$/;"	f	class:ns3::OneInterestRequester
GetTypeId	model/cs/content-store-impl.hpp	/^ContentStoreImpl<Policy>::GetTypeId()$/;"	f	class:ns3::ndn::cs::ContentStoreImpl
GetTypeId	model/cs/content-store-nocache.cpp	/^Nocache::GetTypeId(void)$/;"	f	class:ns3::ndn::cs::Nocache
GetTypeId	model/cs/content-store-with-freshness.hpp	/^ContentStoreWithFreshness<Policy>::GetTypeId()$/;"	f	class:ns3::ndn::cs::ContentStoreWithFreshness
GetTypeId	model/cs/content-store-with-probability.hpp	/^ContentStoreWithProbability<Policy>::GetTypeId()$/;"	f	class:ns3::ndn::cs::ContentStoreWithProbability
GetTypeId	model/cs/content-store-with-stats.hpp	/^ContentStoreWithStats<Policy>::GetTypeId()$/;"	f	class:ns3::ndn::cs::ContentStoreWithStats
GetTypeId	model/cs/ndn-content-store.cpp	/^ContentStore::GetTypeId(void)$/;"	f	class:ns3::ndn::ContentStore
GetTypeId	model/ndn-global-router.cpp	/^GlobalRouter::GetTypeId()$/;"	f	class:ns3::ndn::GlobalRouter
GetTypeId	model/ndn-header.cpp	/^PacketHeader<Data>::GetTypeId()$/;"	f	class:ns3::ndn::PacketHeader
GetTypeId	model/ndn-header.cpp	/^PacketHeader<Interest>::GetTypeId()$/;"	f	class:ns3::ndn::PacketHeader
GetTypeId	model/ndn-l3-protocol.cpp	/^L3Protocol::GetTypeId(void)$/;"	f	class:ns3::ndn::L3Protocol
GetTypeId	utils/ndn-fw-hop-count-tag.cpp	/^FwHopCountTag::GetTypeId()$/;"	f	class:ns3::ndn::FwHopCountTag
GetTypeId	utils/ndn-rtt-estimator.cpp	/^RttEstimator::GetTypeId(void)$/;"	f	class:ns3::ndn::RttEstimator
GetTypeId	utils/ndn-rtt-mean-deviation.cpp	/^RttMeanDeviation::GetTypeId(void)$/;"	f	class:ns3::ndn::RttMeanDeviation
GetUpdates	utils/trie/aggregate-stats-policy.hpp	/^      GetUpdates() const$/;"	f	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
GetVertices	helper/boost-graph-ndn-global-routing-helper.hpp	/^  GetVertices() const$/;"	f	class:boost::NdnGlobalRouterGraph
GetWindow	apps/ndn-consumer-window.cpp	/^ConsumerWindow::GetWindow() const$/;"	f	class:ns3::ndn::ConsumerWindow
GlobalConfigurationFixture	NFD/tests/global-configuration.cpp	/^  GlobalConfigurationFixture()$/;"	f	class:nfd::tests::GlobalConfigurationFixture
GlobalConfigurationFixture	NFD/tests/global-configuration.cpp	/^class GlobalConfigurationFixture$/;"	c	namespace:nfd::tests	file:
GlobalRouter	model/ndn-global-router.cpp	/^GlobalRouter::GlobalRouter()$/;"	f	class:ns3::ndn::GlobalRouter
GlobalRouter	model/ndn-global-router.hpp	/^class GlobalRouter : public Object {$/;"	c	namespace:ns3::ndn
GlobalRoutingHelper	helper/ndn-global-routing-helper.hpp	/^class GlobalRoutingHelper {$/;"	c	namespace:ns3::ndn
GlobalRoutingHelperFixture	tests/unit-tests/helper/ndn-global-routing-helper.t.cpp	/^  GlobalRoutingHelperFixture()$/;"	f	class:ns3::ndn::GlobalRoutingHelperFixture
GlobalRoutingHelperFixture	tests/unit-tests/helper/ndn-global-routing-helper.t.cpp	/^class GlobalRoutingHelperFixture : public CleanupFixture$/;"	c	namespace:ns3::ndn	file:
Graph	utils/topology/rocketfuel-map-reader.hpp	/^                                edgeProperty> Graph;$/;"	t	class:ns3::RocketfuelMapReader
GuessFromIdentityName	NFD/tools/ndn-autoconfig/guess-from-identity-name.cpp	/^GuessFromIdentityName::GuessFromIdentityName(Face& face, KeyChain& keyChain,$/;"	f	class:ndn::tools::autoconfig::GuessFromIdentityName
GuessFromIdentityName	NFD/tools/ndn-autoconfig/guess-from-identity-name.hpp	/^class GuessFromIdentityName : public BaseDns$/;"	c	namespace:ndn::tools::autoconfig
GuessFromSearchDomains	NFD/tools/ndn-autoconfig/guess-from-search-domains.cpp	/^GuessFromSearchDomains::GuessFromSearchDomains(Face& face, KeyChain& keyChain,$/;"	f	class:ndn::tools::autoconfig::GuessFromSearchDomains
GuessFromSearchDomains	NFD/tools/ndn-autoconfig/guess-from-search-domains.hpp	/^class GuessFromSearchDomains : public BaseDns$/;"	c	namespace:ndn::tools::autoconfig
HDR_LEN	ndn-cxx/src/util/ethernet.hpp	/^const size_t HDR_LEN      = 14;     \/\/\/< Total octets in Ethernet header (without 802.1Q tag)$/;"	m	namespace:ndn::util::ethernet
HEADER	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^        HEADER = 0,$/;"	e	enum:websocketpp::processor::hybi00::state
HEADER1_MAX	ndn-cxx/src/lp/tlv.hpp	/^  HEADER1_MAX = 99,$/;"	e	enum:ndn::lp::tlv::__anon5
HEADER1_MIN	ndn-cxx/src/lp/tlv.hpp	/^  HEADER1_MIN = 81,$/;"	e	enum:ndn::lp::tlv::__anon5
HEADER3_MAX	ndn-cxx/src/lp/tlv.hpp	/^  HEADER3_MAX = 959$/;"	e	enum:ndn::lp::tlv::__anon5
HEADER3_MIN	ndn-cxx/src/lp/tlv.hpp	/^  HEADER3_MIN = 800,$/;"	e	enum:ndn::lp::tlv::__anon5
HEADERS	NFD/websocketpp/websocketpp/http/response.hpp	/^        HEADERS = 1,$/;"	e	enum:websocketpp::http::parser::response::state
HEADER_BASIC	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^        HEADER_BASIC = 0,$/;"	e	enum:websocketpp::processor::hybi13::state
HEADER_EXTENDED	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^        HEADER_EXTENDED = 1,$/;"	e	enum:websocketpp::processor::hybi13::state
HEX	ndn-cxx/src/util/io.hpp	/^  HEX$/;"	e	enum:ndn::io::IoEncoding
HIJACKER_H_	examples/ndn-custom-apps/hijacker.hpp	23;"	d
HTTP_CONSTANTS_HPP	NFD/websocketpp/websocketpp/http/constants.hpp	29;"	d
HTTP_PARSER_HPP	NFD/websocketpp/websocketpp/http/parser.hpp	29;"	d
HTTP_PARSER_IMPL_HPP	NFD/websocketpp/websocketpp/http/impl/parser.hpp	29;"	d
HTTP_PARSER_REQUEST_HPP	NFD/websocketpp/websocketpp/http/request.hpp	29;"	d
HTTP_PARSER_REQUEST_IMPL_HPP	NFD/websocketpp/websocketpp/http/impl/request.hpp	29;"	d
HTTP_PARSER_RESPONSE_HPP	NFD/websocketpp/websocketpp/http/response.hpp	29;"	d
HTTP_PARSER_RESPONSE_IMPL_HPP	NFD/websocketpp/websocketpp/http/impl/response.hpp	29;"	d
Handler	ndn-cxx/src/util/event-emitter.hpp	/^  typedef function<void(const TArgs&...)> Handler;$/;"	t	class:ndn::util::EventEmitter
Handler	ndn-cxx/src/util/signal-signal.hpp	/^  typedef function<void(const TArgs&...)> Handler;$/;"	t	class:ndn::util::signal::Signal
HandlerMap	ndn-cxx/src/mgmt/dispatcher.hpp	/^  typedef std::unordered_map<PartialName, InterestHandler> HandlerMap;$/;"	t	class:ndn::mgmt::Dispatcher
HandlerMapIt	ndn-cxx/src/mgmt/dispatcher.hpp	/^  typedef HandlerMap::iterator HandlerMapIt;$/;"	t	class:ndn::mgmt::Dispatcher
Hash128to64	NFD/core/city-hash.hpp	/^inline uint64 Hash128to64(const uint128& x) {$/;"	f
Hash32	NFD/daemon/table/name-tree.cpp	/^class Hash32$/;"	c	namespace:nfd::name_tree	file:
Hash32Len0to4	NFD/core/city-hash.cpp	/^static uint32 Hash32Len0to4(const char *s, size_t len) {$/;"	f	file:
Hash32Len13to24	NFD/core/city-hash.cpp	/^static uint32 Hash32Len13to24(const char *s, size_t len) {$/;"	f	file:
Hash32Len5to12	NFD/core/city-hash.cpp	/^static uint32 Hash32Len5to12(const char *s, size_t len) {$/;"	f	file:
Hash64	NFD/daemon/table/name-tree.cpp	/^class Hash64$/;"	c	namespace:nfd::name_tree	file:
Hash64	NFD/daemon/table/name-tree.cpp	/^typedef boost::mpl::if_c<sizeof(size_t) >= 8, Hash64, Hash32>::type CityHash;$/;"	t	namespace:nfd::name_tree	file:
HashFunction	ndn-cxx/src/util/digest.hpp	/^  typedef Hash HashFunction;$/;"	t	class:ndn::util::Digest
HashLen0to16	NFD/core/city-hash.cpp	/^static uint64 HashLen0to16(const char *s, size_t len) {$/;"	f	file:
HashLen16	NFD/core/city-hash.cpp	/^static uint64 HashLen16(uint64 u, uint64 v) {$/;"	f	file:
HashLen16	NFD/core/city-hash.cpp	/^static uint64 HashLen16(uint64 u, uint64 v, uint64 mul) {$/;"	f	file:
HashLen17to32	NFD/core/city-hash.cpp	/^static uint64 HashLen17to32(const char *s, size_t len) {$/;"	f	file:
HashLen33to64	NFD/core/city-hash.cpp	/^static uint64 HashLen33to64(const char *s, size_t len) {$/;"	f	file:
Hashable	ndn-cxx/src/util/concepts.hpp	/^class Hashable$/;"	c	namespace:ndn
Hashtable	NFD/daemon/table/dead-nonce-list.hpp	/^  typedef Index::nth_index<1>::type Hashtable;$/;"	t	class:nfd::DeadNonceList
Header	ndn-cxx/src/lp/field.hpp	/^class Header : public Base$/;"	c	namespace:ndn::lp::field_location_tags
HexPrinter	ndn-cxx/tools/tlvdump.cpp	/^HexPrinter(const Block& block, const std::string& indent = "")$/;"	f	namespace:ndn
HierarchicalChecker	ndn-cxx/src/security/conf/checker.hpp	/^  HierarchicalChecker(uint32_t sigType)$/;"	f	class:ndn::security::conf::HierarchicalChecker
HierarchicalChecker	ndn-cxx/src/security/conf/checker.hpp	/^class HierarchicalChecker : public CustomizedChecker$/;"	c	namespace:ndn::security::conf
Hijacker	examples/ndn-custom-apps/hijacker.cpp	/^Hijacker::Hijacker()$/;"	f	class:ns3::Hijacker
Hijacker	examples/ndn-custom-apps/hijacker.hpp	/^class Hijacker : public ndn::App {$/;"	c	namespace:ns3
HitCallback	NFD/daemon/table/cs.hpp	/^  typedef std::function<void(const Interest&, const Data& data)> HitCallback;$/;"	t	class:nfd::cs::Cs
HttpException	ndn-cxx/tools/ndnsec/cert-install.hpp	/^  HttpException(const std::string& what)$/;"	f	class:HttpException
HttpException	ndn-cxx/tools/ndnsec/cert-install.hpp	/^class HttpException : public std::runtime_error$/;"	c
HyperKeyLocatorNameChecker	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  HyperKeyLocatorNameChecker(const std::string& pExpr, const std::string pExpand,$/;"	f	class:ndn::security::conf::HyperKeyLocatorNameChecker
HyperKeyLocatorNameChecker	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^class HyperKeyLocatorNameChecker : public KeyLocatorChecker$/;"	c	namespace:ndn::security::conf
ID1_KEY1	ndn-cxx/tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID1_KEY1[] = {$/;"	v
ID1_KEY1_CERT1	ndn-cxx/tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID1_KEY1_CERT1[] = {$/;"	v
ID1_KEY1_CERT2	ndn-cxx/tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID1_KEY1_CERT2[] = {$/;"	v
ID1_KEY2	ndn-cxx/tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID1_KEY2[] = {$/;"	v
ID1_KEY2_CERT1	ndn-cxx/tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID1_KEY2_CERT1[] = {$/;"	v
ID1_KEY2_CERT2	ndn-cxx/tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID1_KEY2_CERT2[] = {$/;"	v
ID2_KEY1	ndn-cxx/tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID2_KEY1[] = {$/;"	v
ID2_KEY1_CERT1	ndn-cxx/tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID2_KEY1_CERT1[] = {$/;"	v
ID2_KEY1_CERT2	ndn-cxx/tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID2_KEY1_CERT2[] = {$/;"	v
ID2_KEY2	ndn-cxx/tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID2_KEY2[] = {$/;"	v
ID2_KEY2_CERT1	ndn-cxx/tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID2_KEY2_CERT1[] = {$/;"	v
ID2_KEY2_CERT2	ndn-cxx/tests/unit-tests/security/pib-data-fixture.cpp	/^uint8_t ID2_KEY2_CERT2[] = {$/;"	v
IDLE_DURATION	NFD/tests/daemon/face/ndnlp.t.cpp	/^  static const time::nanoseconds IDLE_DURATION;$/;"	m	class:nfd::ndnlp::tests::ReassembleFixture	file:
IGNORE_COMMPONENT	NFD/rib/remote-registrator.hpp	/^  static const name::Component IGNORE_COMMPONENT; \/\/ rib$/;"	m	class:nfd::rib::RemoteRegistrator
INFINITE_EXPIRATION_PERIOD	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  static const time::milliseconds INFINITE_EXPIRATION_PERIOD;$/;"	m	class:ndn::nfd::Route
INITIAL	ndn-cxx/src/mgmt/status-dataset-context.hpp	/^    INITIAL, \/\/\/< none of .append, .end, .reject has been invoked$/;"	m	class:ndn::mgmt::StatusDatasetContext::State
INITIALIZATION	ndn-cxx/src/security/pib-sqlite3.cpp	/^static const string INITIALIZATION =$/;"	m	namespace:ndn::security	file:
INITIAL_CAPACITY	NFD/daemon/table/dead-nonce-list.cpp	/^const size_t DeadNonceList::INITIAL_CAPACITY = (1 << 7);$/;"	m	class:nfd::DeadNonceList	file:
INITIAL_CAPACITY	NFD/daemon/table/dead-nonce-list.hpp	/^  static const size_t INITIAL_CAPACITY;$/;"	m	class:nfd::DeadNonceList
INITIAL_PREDICTION	NFD/daemon/fw/ncc-strategy.cpp	/^const time::microseconds NccStrategy::MeasurementsEntryInfo::INITIAL_PREDICTION =$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo	file:
INITIAL_PREDICTION	NFD/daemon/fw/ncc-strategy.hpp	/^    static const time::microseconds INITIAL_PREDICTION;$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
INIT_CERT_TABLE	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^static const string INIT_CERT_TABLE =$/;"	m	namespace:ndn	file:
INIT_ID_TABLE	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^static const string INIT_ID_TABLE =$/;"	m	namespace:ndn	file:
INIT_KEY_TABLE	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^static const string INIT_KEY_TABLE =$/;"	m	namespace:ndn	file:
INIT_TPM_INFO_TABLE	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^static const string INIT_TPM_INFO_TABLE =$/;"	m	namespace:ndn	file:
INTEREST_SIG_INFO	ndn-cxx/src/security/conf/checker.hpp	/^    INTEREST_SIG_INFO = -2$/;"	e	enum:ndn::security::conf::Checker::__anon2
INTEREST_SIG_VALUE	ndn-cxx/src/security/conf/checker.hpp	/^    INTEREST_SIG_VALUE = -1,$/;"	e	enum:ndn::security::conf::Checker::__anon2
INTEREST_TIMEOUT	ndn-cxx/src/util/segment-fetcher.hpp	/^    INTEREST_TIMEOUT = 1,$/;"	e	enum:ndn::util::SegmentFetcher::ErrorCode
INTERNAL_CONFIG	NFD/daemon/nfd.cpp	/^static const std::string INTERNAL_CONFIG = "internal:\/\/nfd.conf";$/;"	m	namespace:nfd	file:
INTERNAL_CONFIG	NFD/rib/nrd.cpp	/^static const std::string INTERNAL_CONFIG = "internal:\/\/nfd.conf";$/;"	m	namespace:nfd::rib	file:
INTERNAL_ERROR	NFD/websocketpp/websocketpp/processors/base.hpp	/^    INTERNAL_ERROR = 1, \/\/ Error was a logic error internal to WebSocket++$/;"	e	enum:websocketpp::processor::error_cat::value
INVALID_FACEID	NFD/daemon/face/face.hpp	/^const FaceId INVALID_FACEID = -1;$/;"	m	namespace:nfd
INVALID_FACE_ID	ndn-cxx/src/encoding/nfd-constants.hpp	/^static const uint64_t INVALID_FACE_ID = std::numeric_limits<uint64_t>::max();$/;"	m	namespace:ndn::nfd
INVALID_SELECTED_DELEGATION_INDEX	ndn-cxx/src/link.hpp	/^const size_t INVALID_SELECTED_DELEGATION_INDEX = std::numeric_limits<size_t>::max();$/;"	m	namespace:ndn
IP_STACK_PORT	model/ndn-l3-protocol.cpp	/^const uint16_t L3Protocol::IP_STACK_PORT = 9695;$/;"	m	class:ns3::ndn::L3Protocol	file:
IP_STACK_PORT	model/ndn-l3-protocol.hpp	/^  static const uint16_t IP_STACK_PORT;       \/\/\/< @brief TCP\/UDP port for NDN stack$/;"	m	class:ns3::ndn::L3Protocol
ISO_DATETIME_SIZE	ndn-cxx/src/security/validity-period.cpp	/^static const size_t ISO_DATETIME_SIZE = 15;$/;"	m	namespace:ndn::security	file:
Identity	ndn-cxx/src/security/identity.cpp	/^Identity::Identity()$/;"	f	class:ndn::security::Identity
Identity	ndn-cxx/src/security/identity.cpp	/^Identity::Identity(const Name& identityName, shared_ptr<PibImpl> impl, bool needInit)$/;"	f	class:ndn::security::Identity
Identity	ndn-cxx/src/security/identity.hpp	/^class Identity$/;"	c	namespace:ndn::security
IdentityCertificate	ndn-cxx/src/security/identity-certificate.cpp	/^IdentityCertificate::IdentityCertificate()$/;"	f	class:ndn::IdentityCertificate
IdentityCertificate	ndn-cxx/src/security/identity-certificate.cpp	/^IdentityCertificate::IdentityCertificate(const Block& block)$/;"	f	class:ndn::IdentityCertificate
IdentityCertificate	ndn-cxx/src/security/identity-certificate.cpp	/^IdentityCertificate::IdentityCertificate(const Data& data)$/;"	f	class:ndn::IdentityCertificate
IdentityCertificate	ndn-cxx/src/security/identity-certificate.hpp	/^class IdentityCertificate : public Certificate$/;"	c	namespace:ndn
IdentityContainer	ndn-cxx/src/security/identity-container.cpp	/^IdentityContainer::IdentityContainer()$/;"	f	class:ndn::security::IdentityContainer
IdentityContainer	ndn-cxx/src/security/identity-container.cpp	/^IdentityContainer::IdentityContainer(std::set<Name>&& identities,$/;"	f	class:ndn::security::IdentityContainer
IdentityContainer	ndn-cxx/src/security/identity-container.hpp	/^class IdentityContainer$/;"	c	namespace:ndn::security
IdentityFixture	ndn-cxx/tests/unit-tests/security/identity-fixture.cpp	/^  IdentityFixture()$/;"	f	class:ndn::security::IdentityFixture
IdentityFixture	ndn-cxx/tests/unit-tests/security/identity-fixture.cpp	/^class IdentityFixture : public util::TestHomeEnvironmentFixture$/;"	c	namespace:ndn::security	file:
IdentityManagementFixture	NFD/tests/identity-management-fixture.cpp	/^IdentityManagementFixture::IdentityManagementFixture()$/;"	f	class:nfd::tests::IdentityManagementFixture
IdentityManagementFixture	NFD/tests/identity-management-fixture.hpp	/^class IdentityManagementFixture : public nfd::tests::BaseFixture$/;"	c	namespace:nfd::tests
IdentityManagementFixture	ndn-cxx/tests/identity-management-fixture.cpp	/^IdentityManagementFixture::IdentityManagementFixture()$/;"	f	class:ndn::security::IdentityManagementFixture
IdentityManagementFixture	ndn-cxx/tests/identity-management-fixture.hpp	/^class IdentityManagementFixture$/;"	c	namespace:ndn::security
IdentityManagementTimeFixture	ndn-cxx/tests/unit-tests/identity-management-time-fixture.cpp	/^IdentityManagementTimeFixture::IdentityManagementTimeFixture()$/;"	f	class:ndn::security::IdentityManagementTimeFixture
IdentityManagementTimeFixture	ndn-cxx/tests/unit-tests/identity-management-time-fixture.hpp	/^class IdentityManagementTimeFixture : public tests::UnitTestTimeFixture$/;"	c	namespace:ndn::security
IdentityPackage	ndn-cxx/src/encoding/tlv-security.hpp	/^  IdentityPackage    = 128,$/;"	e	enum:ndn::tlv::security::__anon10
IgnoreNotTablesSection	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^class IgnoreNotTablesSection$/;"	c	namespace:nfd::tests	file:
IgnoreSections	model/ndn-l3-protocol.cpp	/^  IgnoreSections(const std::vector<std::string>& ignored)$/;"	f	class:ns3::ndn::IgnoreSections
IgnoreSections	model/ndn-l3-protocol.cpp	/^class IgnoreSections$/;"	c	namespace:ns3::ndn	file:
Impl	model/ndn-l3-protocol.cpp	/^  Impl()$/;"	f	class:ns3::ndn::L3Protocol::Impl	file:
Impl	model/ndn-l3-protocol.cpp	/^class L3Protocol::Impl {$/;"	c	class:ns3::ndn::L3Protocol	file:
Impl	ndn-cxx/src/detail/face-impl.hpp	/^  Impl(Face& face)$/;"	f	class:ndn::Face::Impl
Impl	ndn-cxx/src/detail/face-impl.hpp	/^class Face::Impl : noncopyable$/;"	c	class:ndn::Face
Impl	ndn-cxx/src/security/sec-tpm-file.cpp	/^  Impl(const string& dir)$/;"	f	class:ndn::SecTpmFile::Impl
Impl	ndn-cxx/src/security/sec-tpm-file.cpp	/^class SecTpmFile::Impl$/;"	c	class:ndn::SecTpmFile	file:
Impl	ndn-cxx/src/security/sec-tpm-osx.cpp	/^  Impl()$/;"	f	class:ndn::SecTpmOsx::Impl
Impl	ndn-cxx/src/security/sec-tpm-osx.cpp	/^class SecTpmOsx::Impl$/;"	c	class:ndn::SecTpmOsx	file:
Impl	ndn-cxx/src/transport/stream-transport.hpp	/^  typedef StreamTransportImpl<BaseTransport,Protocol> Impl;$/;"	t	class:ndn::StreamTransportImpl
Impl	ndn-cxx/src/transport/stream-transport.hpp	/^  typedef StreamTransportWithResolverImpl<BaseTransport,Protocol> Impl;$/;"	t	class:ndn::StreamTransportWithResolverImpl
Impl	ndn-cxx/src/transport/tcp-transport.hpp	/^  typedef StreamTransportWithResolverImpl<TcpTransport, boost::asio::ip::tcp> Impl;$/;"	t	class:ndn::TcpTransport
Impl	ndn-cxx/src/transport/unix-transport.hpp	/^  typedef StreamTransportImpl<UnixTransport, boost::asio::local::stream_protocol> Impl;$/;"	t	class:ndn::UnixTransport
Impl	ndn-cxx/src/util/network-monitor.cpp	/^  Impl(boost::asio::io_service& io)$/;"	f	class:ndn::util::NetworkMonitor::Impl
Impl	ndn-cxx/src/util/network-monitor.cpp	/^class NetworkMonitor::Impl$/;"	c	class:ndn::util::NetworkMonitor	file:
ImplicitSha256DigestComponent	ndn-cxx/src/encoding/tlv.hpp	/^  ImplicitSha256DigestComponent = 1,$/;"	e	enum:ndn::tlv::__anon8
InClassLogger	NFD/tests/core/logger.t.cpp	/^  InClassLogger()$/;"	f	class:nfd::tests::InClassLogger
InClassLogger	NFD/tests/core/logger.t.cpp	/^class InClassLogger : public LoggerFixture$/;"	c	namespace:nfd::tests	file:
InClassTemplateLogger	NFD/tests/core/logger.t.cpp	/^  InClassTemplateLogger()$/;"	f	class:nfd::tests::InClassTemplateLogger
InClassTemplateLogger	NFD/tests/core/logger.t.cpp	/^class InClassTemplateLogger : public LoggerFixture$/;"	c	namespace:nfd::tests	file:
InData	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::InData(const Data& data, const Face& face)$/;"	f	class:ns3::ndn::L3RateTracer
InInterests	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::InInterests(const Interest& interest, const Face& face)$/;"	f	class:ns3::ndn::L3RateTracer
InMemoryStorage	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::InMemoryStorage(size_t limit)$/;"	f	class:ndn::util::InMemoryStorage
InMemoryStorage	ndn-cxx/src/util/in-memory-storage.hpp	/^class InMemoryStorage : noncopyable$/;"	c	namespace:ndn::util
InMemoryStorageEntry	ndn-cxx/src/util/in-memory-storage-entry.hpp	/^class InMemoryStorageEntry : noncopyable$/;"	c	namespace:ndn::util
InMemoryStorageFifo	ndn-cxx/src/util/in-memory-storage-fifo.cpp	/^InMemoryStorageFifo::InMemoryStorageFifo(size_t limit)$/;"	f	class:ndn::util::InMemoryStorageFifo
InMemoryStorageFifo	ndn-cxx/src/util/in-memory-storage-fifo.hpp	/^class InMemoryStorageFifo : public InMemoryStorage$/;"	c	namespace:ndn::util
InMemoryStorageLfu	ndn-cxx/src/util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::InMemoryStorageLfu(size_t limit)$/;"	f	class:ndn::util::InMemoryStorageLfu
InMemoryStorageLfu	ndn-cxx/src/util/in-memory-storage-lfu.hpp	/^class InMemoryStorageLfu : public InMemoryStorage$/;"	c	namespace:ndn::util
InMemoryStorageLru	ndn-cxx/src/util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::InMemoryStorageLru(size_t limit)$/;"	f	class:ndn::util::InMemoryStorageLru
InMemoryStorageLru	ndn-cxx/src/util/in-memory-storage-lru.hpp	/^class InMemoryStorageLru : public InMemoryStorage$/;"	c	namespace:ndn::util
InMemoryStoragePersistent	ndn-cxx/src/util/in-memory-storage-persistent.cpp	/^InMemoryStoragePersistent::InMemoryStoragePersistent()$/;"	f	class:ndn::util::InMemoryStoragePersistent
InMemoryStoragePersistent	ndn-cxx/src/util/in-memory-storage-persistent.hpp	/^class InMemoryStoragePersistent : public InMemoryStorage$/;"	c	namespace:ndn::util
InMemoryStorages	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^                         InMemoryStorageLru> InMemoryStorages;$/;"	t	namespace:ndn::util	file:
InMemoryStoragesLimited	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^                         InMemoryStoragesLimited;$/;"	t	namespace:ndn::util	file:
InRecord	NFD/daemon/table/pit-in-record.cpp	/^InRecord::InRecord(shared_ptr<Face> face)$/;"	f	class:nfd::pit::InRecord
InRecord	NFD/daemon/table/pit-in-record.hpp	/^class InRecord : public FaceRecord$/;"	c	namespace:nfd::pit
InRecordCollection	NFD/daemon/table/pit-entry.hpp	/^typedef std::list< InRecord>  InRecordCollection;$/;"	t	namespace:nfd::pit
Incidency	model/ndn-global-router.hpp	/^  typedef std::tuple<Ptr<GlobalRouter>, shared_ptr<Face>, Ptr<GlobalRouter>> Incidency;$/;"	t	class:ns3::ndn::GlobalRouter
IncidencyList	model/ndn-global-router.hpp	/^  typedef std::list<Incidency> IncidencyList;$/;"	t	class:ns3::ndn::GlobalRouter
IncomingFaceId	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  IncomingFaceId     = 81,$/;"	e	enum:ndn::tlv::nfd::__anon12
IncomingFaceId	ndn-cxx/src/lp/tlv.hpp	/^  IncomingFaceId = 817$/;"	e	enum:ndn::lp::tlv::__anon4
IncomingFaceIdField	ndn-cxx/src/lp/fields.hpp	/^                          tlv::IncomingFaceId> IncomingFaceIdField;$/;"	t	namespace:ndn::lp
IncorrectContentTypeLink	ndn-cxx/tests/unit-tests/link.t.cpp	/^const uint8_t IncorrectContentTypeLink[] = {$/;"	m	namespace:ndn::tests	file:
IncreaseMultiplier	utils/ndn-rtt-estimator.cpp	/^RttEstimator::IncreaseMultiplier()$/;"	f	class:ns3::ndn::RttEstimator
Increment	utils/ndn-fw-hop-count-tag.hpp	/^  Increment()$/;"	f	class:ns3::ndn::FwHopCountTag
IndentedStream	ndn-cxx/src/util/indented-stream.cpp	/^IndentedStream::IndentedStream(std::ostream& os, const std::string& indent)$/;"	f	class:ndn::util::IndentedStream
IndentedStream	ndn-cxx/src/util/indented-stream.hpp	/^class IndentedStream : public std::ostream$/;"	c	namespace:ndn::util
Index	NFD/daemon/table/dead-nonce-list.hpp	/^  > Index;$/;"	t	class:nfd::DeadNonceList
Install	helper/ndn-app-helper.cpp	/^AppHelper::Install(NodeContainer c)$/;"	f	class:ns3::ndn::AppHelper
Install	helper/ndn-app-helper.cpp	/^AppHelper::Install(Ptr<Node> node)$/;"	f	class:ns3::ndn::AppHelper
Install	helper/ndn-app-helper.cpp	/^AppHelper::Install(std::string nodeName)$/;"	f	class:ns3::ndn::AppHelper
Install	helper/ndn-app-helper.cpp	/^FactoryCallbackApp::Install(Ptr<Node> node, const FactoryCallback& factory)$/;"	f	class:ns3::ndn::FactoryCallbackApp
Install	helper/ndn-global-routing-helper.cpp	/^GlobalRoutingHelper::Install(Ptr<Channel> channel)$/;"	f	class:ns3::ndn::GlobalRoutingHelper
Install	helper/ndn-global-routing-helper.cpp	/^GlobalRoutingHelper::Install(Ptr<Node> node)$/;"	f	class:ns3::ndn::GlobalRoutingHelper
Install	helper/ndn-global-routing-helper.cpp	/^GlobalRoutingHelper::Install(const NodeContainer& nodes)$/;"	f	class:ns3::ndn::GlobalRoutingHelper
Install	helper/ndn-stack-helper.cpp	/^StackHelper::Install(Ptr<Node> node) const$/;"	f	class:ns3::ndn::StackHelper
Install	helper/ndn-stack-helper.cpp	/^StackHelper::Install(const NodeContainer& c) const$/;"	f	class:ns3::ndn::StackHelper
Install	helper/ndn-stack-helper.cpp	/^StackHelper::Install(const std::string& nodeName) const$/;"	f	class:ns3::ndn::StackHelper
Install	helper/ndn-strategy-choice-helper.cpp	/^StrategyChoiceHelper::Install(Ptr<Node> node, const Name& namePrefix, const Name& strategy)$/;"	f	class:ns3::ndn::StrategyChoiceHelper
Install	helper/ndn-strategy-choice-helper.cpp	/^StrategyChoiceHelper::Install(const NodeContainer& c, const Name& namePrefix, const Name& strategy)$/;"	f	class:ns3::ndn::StrategyChoiceHelper
Install	helper/ndn-strategy-choice-helper.hpp	/^StrategyChoiceHelper::Install(Ptr<Node> node, const Name& namePrefix)$/;"	f	class:ns3::ndn::StrategyChoiceHelper
Install	helper/ndn-strategy-choice-helper.hpp	/^StrategyChoiceHelper::Install(const NodeContainer& c, const Name& namePrefix)$/;"	f	class:ns3::ndn::StrategyChoiceHelper
Install	utils/tracers/ndn-app-delay-tracer.cpp	/^AppDelayTracer::Install(Ptr<Node> node, const std::string& file)$/;"	f	class:ns3::ndn::AppDelayTracer
Install	utils/tracers/ndn-app-delay-tracer.cpp	/^AppDelayTracer::Install(Ptr<Node> node, shared_ptr<std::ostream> outputStream)$/;"	f	class:ns3::ndn::AppDelayTracer
Install	utils/tracers/ndn-app-delay-tracer.cpp	/^AppDelayTracer::Install(const NodeContainer& nodes, const std::string& file)$/;"	f	class:ns3::ndn::AppDelayTracer
Install	utils/tracers/ndn-cs-tracer.cpp	/^CsTracer::Install(Ptr<Node> node, const std::string& file,$/;"	f	class:ns3::ndn::CsTracer
Install	utils/tracers/ndn-cs-tracer.cpp	/^CsTracer::Install(Ptr<Node> node, shared_ptr<std::ostream> outputStream,$/;"	f	class:ns3::ndn::CsTracer
Install	utils/tracers/ndn-cs-tracer.cpp	/^CsTracer::Install(const NodeContainer& nodes, const std::string& file,$/;"	f	class:ns3::ndn::CsTracer
Install	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::Install(Ptr<Node> node, const std::string& file,$/;"	f	class:ns3::ndn::L3RateTracer
Install	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::Install(Ptr<Node> node, shared_ptr<std::ostream> outputStream,$/;"	f	class:ns3::ndn::L3RateTracer
Install	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::Install(const NodeContainer& nodes, const std::string& file,$/;"	f	class:ns3::ndn::L3RateTracer
InstallAll	helper/ndn-global-routing-helper.cpp	/^GlobalRoutingHelper::InstallAll()$/;"	f	class:ns3::ndn::GlobalRoutingHelper
InstallAll	helper/ndn-stack-helper.cpp	/^StackHelper::InstallAll() const$/;"	f	class:ns3::ndn::StackHelper
InstallAll	helper/ndn-strategy-choice-helper.cpp	/^StrategyChoiceHelper::InstallAll(const Name& namePrefix, const Name& strategy)$/;"	f	class:ns3::ndn::StrategyChoiceHelper
InstallAll	helper/ndn-strategy-choice-helper.hpp	/^StrategyChoiceHelper::InstallAll(const Name& namePrefix)$/;"	f	class:ns3::ndn::StrategyChoiceHelper
InstallAll	utils/tracers/l2-rate-tracer.cpp	/^L2RateTracer::InstallAll(const std::string& file, Time averagingPeriod \/* = Seconds (0.5)*\/)$/;"	f	class:ns3::L2RateTracer
InstallAll	utils/tracers/ndn-app-delay-tracer.cpp	/^AppDelayTracer::InstallAll(const std::string& file)$/;"	f	class:ns3::ndn::AppDelayTracer
InstallAll	utils/tracers/ndn-cs-tracer.cpp	/^CsTracer::InstallAll(const std::string& file, Time averagingPeriod \/* = Seconds (0.5)*\/)$/;"	f	class:ns3::ndn::CsTracer
InstallAll	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::InstallAll(const std::string& file, Time averagingPeriod \/* = Seconds (0.5)*\/)$/;"	f	class:ns3::ndn::L3RateTracer
InstallPriv	helper/ndn-app-helper.cpp	/^AppHelper::InstallPriv(Ptr<Node> node)$/;"	f	class:ns3::ndn::AppHelper
Interest	ndn-cxx/src/encoding/tlv.hpp	/^  Interest      = 5,$/;"	e	enum:ndn::tlv::__anon8
Interest	ndn-cxx/src/interest.cpp	/^Interest::Interest()$/;"	f	class:ndn::Interest
Interest	ndn-cxx/src/interest.cpp	/^Interest::Interest(const Block& wire)$/;"	f	class:ndn::Interest
Interest	ndn-cxx/src/interest.cpp	/^Interest::Interest(const Name& name)$/;"	f	class:ndn::Interest
Interest	ndn-cxx/src/interest.cpp	/^Interest::Interest(const Name& name, const time::milliseconds& interestLifetime)$/;"	f	class:ndn::Interest
Interest	ndn-cxx/src/interest.hpp	/^class Interest : public TagHost, public enable_shared_from_this<Interest>$/;"	c	namespace:ndn
Interest1	ndn-cxx/tests/unit-tests/interest.t.cpp	/^const uint8_t Interest1[] = {$/;"	m	namespace:ndn::tests	file:
Interest2	ndn-cxx/tests/unit-tests/interest.t.cpp	/^const uint8_t Interest2[] = {$/;"	m	namespace:ndn::tests	file:
InterestCallback	ndn-cxx/src/detail/interest-filter-record.hpp	/^  typedef function<void (const InterestFilter&, const Interest&)> InterestCallback;$/;"	t	class:ndn::InterestFilterRecord
InterestFilter	ndn-cxx/src/interest-filter.cpp	/^InterestFilter::InterestFilter(const Name& prefix, const std::string& regexFilter)$/;"	f	class:ndn::InterestFilter
InterestFilter	ndn-cxx/src/interest-filter.hpp	/^InterestFilter::InterestFilter(const Name& prefix)$/;"	f	class:ndn::InterestFilter
InterestFilter	ndn-cxx/src/interest-filter.hpp	/^InterestFilter::InterestFilter(const char* prefixUri)$/;"	f	class:ndn::InterestFilter
InterestFilter	ndn-cxx/src/interest-filter.hpp	/^InterestFilter::InterestFilter(const std::string& prefixUri)$/;"	f	class:ndn::InterestFilter
InterestFilter	ndn-cxx/src/interest-filter.hpp	/^class InterestFilter$/;"	c	namespace:ndn
InterestFilterRecord	ndn-cxx/src/detail/interest-filter-record.hpp	/^  InterestFilterRecord(const InterestFilter& filter, const InterestCallback& afterInterest)$/;"	f	class:ndn::InterestFilterRecord
InterestFilterRecord	ndn-cxx/src/detail/interest-filter-record.hpp	/^class InterestFilterRecord : noncopyable$/;"	c	namespace:ndn
InterestFilterTable	ndn-cxx/src/detail/face-impl.hpp	/^  typedef std::list<shared_ptr<InterestFilterRecord> > InterestFilterTable;$/;"	t	class:ndn::Face::Impl
InterestHandler	ndn-cxx/src/mgmt/dispatcher.hpp	/^                             const Interest& interest)> InterestHandler;$/;"	t	class:ndn::mgmt::Dispatcher
InterestHeader	model/ndn-header.cpp	/^typedef PacketHeader<Interest> InterestHeader;$/;"	t	namespace:ns3::ndn	file:
InterestLifetime	ndn-cxx/src/encoding/tlv.hpp	/^  InterestLifetime          = 12,$/;"	e	enum:ndn::tlv::__anon8
InterestRule	ndn-cxx/src/security/validator-config.hpp	/^  typedef security::conf::Rule<Interest> InterestRule;$/;"	t	class:ndn::ValidatorConfig
InterestRuleList	ndn-cxx/src/security/validator-config.hpp	/^  typedef std::vector<shared_ptr<InterestRule> > InterestRuleList;$/;"	t	class:ndn::ValidatorConfig
InterestTraceCallback	apps/ndn-app.hpp	/^  typedef void (*InterestTraceCallback)(shared_ptr<const Interest>, Ptr<App>, shared_ptr<Face>);$/;"	t	class:ns3::ndn::App
InterestTraceCallback	model/ndn-l3-protocol.hpp	/^  typedef void (*InterestTraceCallback)(const Interest&, const Face&);$/;"	t	class:ns3::ndn::L3Protocol
InterestWithLink	ndn-cxx/tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithLink[] = {$/;"	m	namespace:ndn::tests	file:
InterestWithLinkMissingContentType	ndn-cxx/tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithLinkMissingContentType[] = {$/;"	m	namespace:ndn::tests	file:
InterestWithLinkNoMetaInfo	ndn-cxx/tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithLinkNoMetaInfo[] = {$/;"	m	namespace:ndn::tests	file:
InterestWithLinkNonDecreasingOrder	ndn-cxx/tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithLinkNonDecreasingOrder[] = {$/;"	m	namespace:ndn::tests	file:
InterestWithLinkNotNonIntegerSelectedDelegation	ndn-cxx/tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithLinkNotNonIntegerSelectedDelegation[] = {$/;"	m	namespace:ndn::tests	file:
InterestWithLinkWrongContentType	ndn-cxx/tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithLinkWrongContentType[] = {$/;"	m	namespace:ndn::tests	file:
InterestWithLocalControlHeader	ndn-cxx/tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithLocalControlHeader[] = {$/;"	m	namespace:ndn::tests	file:
InterestWithSelectedDelegationButNoLink	ndn-cxx/tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithSelectedDelegationButNoLink[] = {$/;"	m	namespace:ndn::tests	file:
InterestWithoutLocalControlHeader	ndn-cxx/tests/unit-tests/interest.t.cpp	/^const uint8_t InterestWithoutLocalControlHeader[] = {$/;"	m	namespace:ndn::tests	file:
InterfacesFixture	NFD/tests/daemon/face/ethernet.t.cpp	/^  InterfacesFixture()$/;"	f	class:nfd::tests::InterfacesFixture
InterfacesFixture	NFD/tests/daemon/face/ethernet.t.cpp	/^class InterfacesFixture : protected BaseFixture$/;"	c	namespace:nfd::tests	file:
InternalFace	NFD/daemon/mgmt/internal-face.cpp	/^InternalFace::InternalFace()$/;"	f	class:nfd::InternalFace
InternalFace	NFD/daemon/mgmt/internal-face.hpp	/^class InternalFace : public Face, public AppFace$/;"	c	namespace:nfd
InternalFaceFixture	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^  InternalFaceFixture()$/;"	f	class:nfd::tests::InternalFaceFixture
InternalFaceFixture	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^class InternalFaceFixture : protected BaseFixture$/;"	c	namespace:nfd::tests	file:
IoEncoding	ndn-cxx/src/util/io.hpp	/^enum IoEncoding {$/;"	g	namespace:ndn::io
IpAddress	ndn-cxx/src/util/dns.hpp	/^typedef boost::asio::ip::address IpAddress;$/;"	t	namespace:ndn::dns
IpHostCanonizeProvider	ndn-cxx/src/util/face-uri.cpp	/^  IpHostCanonizeProvider(const std::string& baseScheme,$/;"	f	class:ndn::util::IpHostCanonizeProvider
IpHostCanonizeProvider	ndn-cxx/src/util/face-uri.cpp	/^class IpHostCanonizeProvider : public CanonizeProvider$/;"	c	namespace:ndn::util	file:
Ipv4Only	ndn-cxx/src/util/dns.hpp	/^struct Ipv4Only$/;"	s	namespace:ndn::dns
Ipv6Only	ndn-cxx/src/util/dns.hpp	/^struct Ipv6Only$/;"	s	namespace:ndn::dns
IsRepeatable	ndn-cxx/src/lp/detail/field-decl.hpp	/^  typedef std::integral_constant<bool, REPEATABLE> IsRepeatable;$/;"	t	class:ndn::lp::detail::FieldDecl
Iterator	helper/ndn-face-container.hpp	/^  typedef Container::const_iterator Iterator; \/\/\/< @brief Iterator over FaceContainer$/;"	t	class:ns3::ndn::FaceContainer
IteratorType	NFD/daemon/table/name-tree.hpp	/^  enum IteratorType {$/;"	g	class:nfd::NameTree
KEY_CLASS_PRIVATE	ndn-cxx/src/security/security-common.hpp	/^  KEY_CLASS_PRIVATE,$/;"	e	enum:ndn::KeyClass
KEY_CLASS_PUBLIC	ndn-cxx/src/security/security-common.hpp	/^  KEY_CLASS_PUBLIC,$/;"	e	enum:ndn::KeyClass
KEY_CLASS_SYMMETRIC	ndn-cxx/src/security/security-common.hpp	/^  KEY_CLASS_SYMMETRIC$/;"	e	enum:ndn::KeyClass
KEY_OFFSET	ndn-cxx/src/security/additional-description.cpp	/^static const size_t KEY_OFFSET = 0;$/;"	m	namespace:ndn::security	file:
KEY_TYPE_AES	ndn-cxx/src/security/security-common.hpp	/^  KEY_TYPE_AES   = 128,$/;"	e	enum:ndn::KeyType
KEY_TYPE_ECDSA	ndn-cxx/src/security/security-common.hpp	/^  KEY_TYPE_ECDSA = 1,$/;"	e	enum:ndn::KeyType
KEY_TYPE_NULL	ndn-cxx/src/security/security-common.hpp	/^  KEY_TYPE_NULL  = 255$/;"	e	enum:ndn::KeyType
KEY_TYPE_RSA	ndn-cxx/src/security/security-common.hpp	/^  KEY_TYPE_RSA   = 0,$/;"	e	enum:ndn::KeyType
KeepOnlyBiggestConnectedComponent	utils/topology/rocketfuel-map-reader.cpp	/^RocketfuelMapReader::KeepOnlyBiggestConnectedComponent()$/;"	f	class:ns3::RocketfuelMapReader
Key	ndn-cxx/src/security/key.cpp	/^Key::Key()$/;"	f	class:ndn::security::Key
Key	ndn-cxx/src/security/key.cpp	/^Key::Key(const Name& identityName, const name::Component& keyId,$/;"	f	class:ndn::security::Key
Key	ndn-cxx/src/security/key.hpp	/^class Key$/;"	c	namespace:ndn::security
Key	utils/trie/trie.hpp	/^  typedef typename FullKey::value_type Key;$/;"	t	class:ns3::ndn::ndnSIM::trie
KeyChain	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::KeyChain()$/;"	f	class:ndn::security::KeyChain
KeyChain	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::KeyChain(const std::string& pibName,$/;"	f	class:ndn::security::KeyChain
KeyChain	ndn-cxx/src/security/key-chain.hpp	/^class KeyChain : noncopyable$/;"	c	namespace:ndn::security
KeyClass	ndn-cxx/src/security/security-common.hpp	/^enum KeyClass {$/;"	g	namespace:ndn
KeyContainer	ndn-cxx/src/security/key-container.cpp	/^KeyContainer::KeyContainer()$/;"	f	class:ndn::security::KeyContainer
KeyContainer	ndn-cxx/src/security/key-container.cpp	/^KeyContainer::KeyContainer(const Name& identity,$/;"	f	class:ndn::security::KeyContainer
KeyContainer	ndn-cxx/src/security/key-container.hpp	/^class KeyContainer$/;"	c	namespace:ndn::security
KeyDigest	ndn-cxx/src/encoding/tlv.hpp	/^  KeyDigest     = 29,$/;"	e	enum:ndn::tlv::__anon8
KeyLocator	ndn-cxx/src/encoding/tlv.hpp	/^  KeyLocator    = 28,$/;"	e	enum:ndn::tlv::__anon8
KeyLocator	ndn-cxx/src/key-locator.cpp	/^KeyLocator::KeyLocator()$/;"	f	class:ndn::KeyLocator
KeyLocator	ndn-cxx/src/key-locator.cpp	/^KeyLocator::KeyLocator(const Block& wire)$/;"	f	class:ndn::KeyLocator
KeyLocator	ndn-cxx/src/key-locator.cpp	/^KeyLocator::KeyLocator(const Name& name)$/;"	f	class:ndn::KeyLocator
KeyLocator	ndn-cxx/src/key-locator.hpp	/^class KeyLocator$/;"	c	namespace:ndn
KeyLocatorChecker	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^class KeyLocatorChecker$/;"	c	namespace:ndn::security::conf
KeyLocatorCheckerFactory	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^class KeyLocatorCheckerFactory$/;"	c	namespace:ndn::security::conf
KeyLocator_KeyDigest	ndn-cxx/src/key-locator.hpp	/^    KeyLocator_KeyDigest = 1,$/;"	e	enum:ndn::KeyLocator::Type
KeyLocator_Name	ndn-cxx/src/key-locator.hpp	/^    KeyLocator_Name = 0,$/;"	e	enum:ndn::KeyLocator::Type
KeyLocator_None	ndn-cxx/src/key-locator.hpp	/^    KeyLocator_None = 65535,$/;"	e	enum:ndn::KeyLocator::Type
KeyLocator_Unknown	ndn-cxx/src/key-locator.hpp	/^    KeyLocator_Unknown = 255$/;"	e	enum:ndn::KeyLocator::Type
KeyPackage	ndn-cxx/src/encoding/tlv-security.hpp	/^  KeyPackage         = 129,$/;"	e	enum:ndn::tlv::security::__anon10
KeyParams	ndn-cxx/src/security/key-params.hpp	/^  KeyParams(KeyType keyType)$/;"	f	class:ndn::KeyParams
KeyParams	ndn-cxx/src/security/key-params.hpp	/^class KeyParams$/;"	c	namespace:ndn
KeyType	ndn-cxx/src/security/security-common.hpp	/^enum KeyType {$/;"	g	namespace:ndn
L2RateTracer	utils/tracers/l2-rate-tracer.cpp	/^L2RateTracer::L2RateTracer(std::shared_ptr<std::ostream> os, Ptr<Node> node)$/;"	f	class:ns3::L2RateTracer
L2RateTracer	utils/tracers/l2-rate-tracer.hpp	/^class L2RateTracer : public L2Tracer {$/;"	c	namespace:ns3
L2Tracer	utils/tracers/l2-tracer.cpp	/^L2Tracer::L2Tracer(Ptr<Node> node)$/;"	f	class:ns3::L2Tracer
L2Tracer	utils/tracers/l2-tracer.hpp	/^class L2Tracer : public SimpleRefCount<L2Tracer> {$/;"	c	namespace:ns3
L2_RATE_TRACER_H	utils/tracers/l2-rate-tracer.hpp	21;"	d
L2_TRACER_H	utils/tracers/l2-tracer.hpp	21;"	d
L3Protocol	model/ndn-l3-protocol.cpp	/^L3Protocol::L3Protocol()$/;"	f	class:ns3::ndn::L3Protocol
L3Protocol	model/ndn-l3-protocol.hpp	/^class L3Protocol : boost::noncopyable, public Object {$/;"	c	namespace:ns3::ndn
L3RateTracer	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::L3RateTracer(shared_ptr<std::ostream> os, Ptr<Node> node)$/;"	f	class:ns3::ndn::L3RateTracer
L3RateTracer	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::L3RateTracer(shared_ptr<std::ostream> os, const std::string& node)$/;"	f	class:ns3::ndn::L3RateTracer
L3RateTracer	utils/tracers/ndn-l3-rate-tracer.hpp	/^class L3RateTracer : public L3Tracer {$/;"	c	namespace:ns3::ndn
L3Tracer	utils/tracers/ndn-l3-tracer.cpp	/^L3Tracer::L3Tracer(Ptr<Node> node)$/;"	f	class:ns3::ndn::L3Tracer
L3Tracer	utils/tracers/ndn-l3-tracer.cpp	/^L3Tracer::L3Tracer(const std::string& node)$/;"	f	class:ns3::ndn::L3Tracer
L3Tracer	utils/tracers/ndn-l3-tracer.hpp	/^class L3Tracer : public SimpleRefCount<L3Tracer> {$/;"	c	namespace:ns3::ndn
LATENCIES	utils/topology/rocketfuel-weights-reader.hpp	/^  enum { LINKS, WEIGHTS, LATENCIES, POSITIONS };$/;"	e	enum:ns3::RocketfuelWeightsReader::__anon1
LFU_POLICY_H_	utils/trie/lfu-policy.hpp	21;"	d
LIFETIME	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^  static const time::nanoseconds LIFETIME;$/;"	m	class:nfd::tests::PeriodicalInsertionFixture	file:
LIFETIME	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^const time::nanoseconds PeriodicalInsertionFixture::LIFETIME = time::milliseconds(200);$/;"	m	class:nfd::tests::PeriodicalInsertionFixture	file:
LIFETIME_STATS_POLICY_H_	model/cs/custom-policies/lifetime-stats-policy.hpp	21;"	d
LIKELY	NFD/core/city-hash.cpp	101;"	d	file:
LIKELY	NFD/core/city-hash.cpp	99;"	d	file:
LINKS	utils/topology/rocketfuel-weights-reader.hpp	/^  enum { LINKS, WEIGHTS, LATENCIES, POSITIONS };$/;"	e	enum:ns3::RocketfuelWeightsReader::__anon1
LINK_TYPE_MULTI_ACCESS	ndn-cxx/src/encoding/nfd-constants.hpp	/^  LINK_TYPE_MULTI_ACCESS = 1$/;"	e	enum:ndn::nfd::LinkType
LINK_TYPE_POINT_TO_POINT	ndn-cxx/src/encoding/nfd-constants.hpp	/^  LINK_TYPE_POINT_TO_POINT = 0,$/;"	e	enum:ndn::nfd::LinkType
LISTENING	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^        LISTENING = 2$/;"	e	enum:websocketpp::transport::asio::endpoint::state
LIST_COMMAND_NCOMPS	NFD/daemon/mgmt/fib-manager.cpp	/^const size_t FibManager::LIST_COMMAND_NCOMPS = LIST_COMMAND_PREFIX.size();$/;"	m	class:nfd::FibManager	file:
LIST_COMMAND_NCOMPS	NFD/daemon/mgmt/fib-manager.hpp	/^  static const size_t LIST_COMMAND_NCOMPS;$/;"	m	class:nfd::FibManager
LIST_COMMAND_NCOMPS	NFD/rib/rib-manager.cpp	/^const size_t RibManager::LIST_COMMAND_NCOMPS = LIST_COMMAND_PREFIX.size();$/;"	m	class:nfd::rib::RibManager	file:
LIST_COMMAND_NCOMPS	NFD/rib/rib-manager.hpp	/^  static const size_t LIST_COMMAND_NCOMPS;$/;"	m	class:nfd::rib::RibManager
LIST_COMMAND_PREFIX	NFD/daemon/mgmt/fib-manager.hpp	/^  static const Name LIST_COMMAND_PREFIX;$/;"	m	class:nfd::FibManager
LIST_COMMAND_PREFIX	NFD/rib/rib-manager.hpp	/^  static const Name LIST_COMMAND_PREFIX;$/;"	m	class:nfd::rib::RibManager
LIST_DATASET_PREFIX	NFD/daemon/mgmt/strategy-choice-manager.hpp	/^  static const Name LIST_DATASET_PREFIX; \/\/ \/localhost\/nfd\/strategy-choice\/list$/;"	m	class:nfd::StrategyChoiceManager
LOCALHOP_HUB	NFD/tools/ndn-autoconfig-server.cpp	/^const static Name LOCALHOP_HUB               = "\/localhop\/ndn-autoconf\/hub";$/;"	m	namespace:ndn	file:
LOCALHOP_HUB_DISCOVERY_PREFIX	NFD/tools/ndn-autoconfig/multicast-discovery.cpp	/^static const Name LOCALHOP_HUB_DISCOVERY_PREFIX = "\/localhop\/ndn-autoconf\/hub";$/;"	m	namespace:ndn::tools::autoconfig	file:
LOCALHOP_NAME	NFD/daemon/table/pit-entry.hpp	/^  static const Name LOCALHOP_NAME;$/;"	m	class:nfd::pit::Entry
LOCALHOP_ROUTABLE_PREFIXES	NFD/tools/ndn-autoconfig-server.cpp	/^const static Name LOCALHOP_ROUTABLE_PREFIXES = "\/localhop\/nfd\/rib\/routable-prefixes";$/;"	m	namespace:ndn	file:
LOCALHOST_NAME	NFD/daemon/fw/forwarder.hpp	/^  static const Name LOCALHOST_NAME;$/;"	m	class:nfd::Forwarder
LOCALHOST_NAME	NFD/daemon/table/pit-entry.hpp	/^  static const Name LOCALHOST_NAME;$/;"	m	class:nfd::pit::Entry
LOCAL_CONTROL_FEATURE_ANY	NFD/daemon/face/local-face.hpp	/^  static const size_t LOCAL_CONTROL_FEATURE_ANY = 0; \/\/\/ any feature$/;"	m	class:nfd::LocalFace
LOCAL_CONTROL_FEATURE_INCOMING_FACE_ID	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  LOCAL_CONTROL_FEATURE_INCOMING_FACE_ID = 1,$/;"	e	enum:ndn::nfd::LocalControlFeature
LOCAL_CONTROL_FEATURE_MAX	NFD/daemon/face/local-face.hpp	/^  static const size_t LOCAL_CONTROL_FEATURE_MAX = 3; \/\/\/ upper bound of LocalControlFeature enum$/;"	m	class:nfd::LocalFace
LOCAL_CONTROL_FEATURE_NEXT_HOP_FACE_ID	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  LOCAL_CONTROL_FEATURE_NEXT_HOP_FACE_ID = 2$/;"	e	enum:ndn::nfd::LocalControlFeature
LOCAL_REGISTRATION_PREFIX	NFD/rib/remote-registrator.cpp	/^const Name RemoteRegistrator::LOCAL_REGISTRATION_PREFIX = "\/localhost";$/;"	m	class:nfd::rib::RemoteRegistrator	file:
LOCAL_REGISTRATION_PREFIX	NFD/rib/remote-registrator.hpp	/^  static const Name LOCAL_REGISTRATION_PREFIX; \/\/ \/localhost$/;"	m	class:nfd::rib::RemoteRegistrator
LRU_POLICY_H_	utils/trie/lru-policy.hpp	21;"	d
LastRetransmittedInterestDataDelay	utils/tracers/ndn-app-delay-tracer.cpp	/^AppDelayTracer::LastRetransmittedInterestDataDelay(Ptr<App> app, uint32_t seqno, Time delay,$/;"	f	class:ns3::ndn::AppDelayTracer
LastRetransmittedInterestDataDelayCallback	apps/ndn-consumer.hpp	/^  typedef void (*LastRetransmittedInterestDataDelayCallback)(Ptr<App> app, uint32_t seqno, Time delay, int32_t hopCount);$/;"	t	class:ns3::ndn::Consumer
LastTimestampMap	ndn-cxx/src/security/validator-config.hpp	/^  typedef std::map<Name, time::system_clock::TimePoint> LastTimestampMap;$/;"	t	class:ndn::ValidatorConfig
LastTimestampMap	ndn-cxx/src/util/command-interest-validator.hpp	/^  typedef std::map<Name, time::system_clock::TimePoint> LastTimestampMap;$/;"	t	class:ndn::CommandInterestValidator
Lfu	model/cs/content-store-impl.cpp	/^class Lfu : public ContentStoreImpl<lfu_policy_traits> {$/;"	c	namespace:ns3::ndn::cs	file:
Lfu	model/cs/content-store-with-freshness.cpp	/^class Freshness::Lfu : public ContentStoreWithFreshness<lfu_policy_traits> {$/;"	c	class:ns3::ndn::cs::Freshness	file:
Lfu	model/cs/content-store-with-probability.cpp	/^class Probability::Lfu : public ContentStoreWithProbability<lfu_policy_traits> {$/;"	c	class:ns3::ndn::cs::Probability	file:
Lfu	model/cs/content-store-with-stats.cpp	/^class Stats::Lfu : public ContentStoreWithStats<lfu_policy_traits> {$/;"	c	class:ns3::ndn::cs::Stats	file:
LfuWithCountsTraits	model/cs/content-store-impl.cpp	/^  LfuWithCountsTraits;$/;"	t	namespace:ns3::ndn::cs	file:
LimitedIo	NFD/tests/limited-io.cpp	/^LimitedIo::LimitedIo()$/;"	f	class:nfd::tests::LimitedIo
LimitedIo	NFD/tests/limited-io.cpp	/^LimitedIo::LimitedIo(UnitTestTimeFixture* uttf)$/;"	f	class:nfd::tests::LimitedIo
LimitedIo	NFD/tests/limited-io.hpp	/^class LimitedIo : noncopyable$/;"	c	namespace:nfd::tests
Link	ndn-cxx/src/link.cpp	/^Link::Link(const Block& block)$/;"	f	class:ndn::Link
Link	ndn-cxx/src/link.cpp	/^Link::Link(const Name& name)$/;"	f	class:ndn::Link
Link	ndn-cxx/src/link.cpp	/^Link::Link(const Name& name, std::initializer_list<std::pair<uint32_t, Name>> links)$/;"	f	class:ndn::Link
Link	ndn-cxx/src/link.hpp	/^class Link : public Data$/;"	c	namespace:ndn
LinkControlHelper	helper/ndn-link-control-helper.hpp	/^class LinkControlHelper {$/;"	c	namespace:ns3::ndn
LinkDelegation	ndn-cxx/src/encoding/tlv.hpp	/^  LinkDelegation = 31,$/;"	e	enum:ndn::tlv::__anon8
LinkFace	NFD/tests/daemon/fw/topology-tester.hpp	/^  struct LinkFace$/;"	s	class:nfd::fw::tests::TopologyLink
LinkLayerCounters	NFD/daemon/face/face-counters.hpp	/^class LinkLayerCounters : noncopyable$/;"	c	namespace:nfd
LinkPreference	ndn-cxx/src/encoding/tlv.hpp	/^  LinkPreference = 30,$/;"	e	enum:ndn::tlv::__anon8
LinkTest	ndn-cxx/tests/unit-tests/link.t.cpp	/^const uint8_t LinkTest[] = {$/;"	m	namespace:ndn::tests	file:
LinkType	ndn-cxx/src/encoding/nfd-constants.hpp	/^enum LinkType {$/;"	g	namespace:ndn::nfd
LinkType	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  LinkType              = 134,$/;"	e	enum:ndn::tlv::nfd::__anon11
LocalControlFeature	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  LocalControlFeature = 110,$/;"	e	enum:ndn::tlv::nfd::__anon11
LocalControlFeature	ndn-cxx/src/management/nfd-control-parameters.hpp	/^enum LocalControlFeature {$/;"	g	namespace:ndn::nfd
LocalControlFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  LocalControlFixture()$/;"	f	class:nfd::tests::LocalControlFixture
LocalControlFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^class LocalControlFixture : public FaceTableFixture,$/;"	c	namespace:nfd::tests	file:
LocalControlHeader	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  LocalControlHeader = 80,$/;"	e	enum:ndn::tlv::nfd::__anon12
LocalControlHeader	ndn-cxx/src/management/nfd-local-control-header.hpp	/^  LocalControlHeader()$/;"	f	class:ndn::nfd::LocalControlHeader
LocalControlHeader	ndn-cxx/src/management/nfd-local-control-header.hpp	/^  LocalControlHeader(const Block& wire, uint8_t encodeMask = ENCODE_ALL)$/;"	f	class:ndn::nfd::LocalControlHeader
LocalControlHeader	ndn-cxx/src/management/nfd-local-control-header.hpp	/^class LocalControlHeader$/;"	c	namespace:ndn::nfd
LocalFace	NFD/daemon/face/local-face.hpp	/^LocalFace::LocalFace(const FaceUri& remoteUri, const FaceUri& localUri)$/;"	f	class:nfd::LocalFace
LocalFace	NFD/daemon/face/local-face.hpp	/^class LocalFace : public Face$/;"	c	namespace:nfd
LocalPrefixList	model/ndn-global-router.hpp	/^  typedef std::list<shared_ptr<Name>> LocalPrefixList;$/;"	t	class:ns3::ndn::GlobalRouter
LocalUri	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  LocalUri              = 129,$/;"	e	enum:ndn::tlv::nfd::__anon11
LoggerFixture	NFD/tests/core/logger.t.cpp	/^  LoggerFixture()$/;"	f	class:nfd::tests::LoggerFixture
LoggerFixture	NFD/tests/core/logger.t.cpp	/^class LoggerFixture : protected BaseFixture$/;"	c	namespace:nfd::tests	file:
Lookup	model/cs/content-store-impl.hpp	/^ContentStoreImpl<Policy>::Lookup(shared_ptr<const Interest> interest)$/;"	f	class:ns3::ndn::cs::ContentStoreImpl
Lookup	model/cs/content-store-nocache.cpp	/^Nocache::Lookup(shared_ptr<const Interest> interest)$/;"	f	class:ns3::ndn::cs::Nocache
LpPacket	ndn-cxx/src/lp/tlv.hpp	/^  LpPacket = 100,$/;"	e	enum:ndn::lp::tlv::__anon4
Lru	model/cs/content-store-impl.cpp	/^class Lru : public ContentStoreImpl<lru_policy_traits> {$/;"	c	namespace:ns3::ndn::cs	file:
Lru	model/cs/content-store-with-freshness.cpp	/^class Freshness::Lru : public ContentStoreWithFreshness<lru_policy_traits> {$/;"	c	class:ns3::ndn::cs::Freshness	file:
Lru	model/cs/content-store-with-probability.cpp	/^class Probability::Lru : public ContentStoreWithProbability<lru_policy_traits> {$/;"	c	class:ns3::ndn::cs::Probability	file:
Lru	model/cs/content-store-with-stats.cpp	/^class Stats::Lru : public ContentStoreWithStats<lru_policy_traits> {$/;"	c	class:ns3::ndn::cs::Stats	file:
LruPolicy	NFD/daemon/table/cs-policy-lru.cpp	/^LruPolicy::LruPolicy()$/;"	f	class:nfd::cs::lru::LruPolicy
LruPolicy	NFD/daemon/table/cs-policy-lru.hpp	/^class LruPolicy : public Policy$/;"	c	namespace:nfd::cs::lru
LruWithCountsTraits	model/cs/content-store-impl.cpp	/^  LruWithCountsTraits;$/;"	t	namespace:ns3::ndn::cs	file:
MALFORMED_CONFIG	NFD/tests/core/config-file.t.cpp	/^const std::string MALFORMED_CONFIG =$/;"	m	namespace:nfd::tests	file:
MARK	NFD/daemon/table/dead-nonce-list.cpp	/^const DeadNonceList::Entry DeadNonceList::MARK = 0;$/;"	m	class:nfd::DeadNonceList	file:
MARK	NFD/daemon/table/dead-nonce-list.hpp	/^  static const Entry MARK;$/;"	m	class:nfd::DeadNonceList
MAX_CAPACITY	NFD/daemon/table/dead-nonce-list.cpp	/^const size_t DeadNonceList::MAX_CAPACITY = (1 << 24);$/;"	m	class:nfd::DeadNonceList	file:
MAX_CAPACITY	NFD/daemon/table/dead-nonce-list.hpp	/^  static const size_t MAX_CAPACITY;$/;"	m	class:nfd::DeadNonceList
MAX_DATA_LEN	ndn-cxx/src/util/ethernet.hpp	/^const size_t MAX_DATA_LEN = 1500;   \/\/\/< Max octets in Ethernet payload$/;"	m	namespace:ndn::util::ethernet
MAX_EXTENDED_HEADER_LENGTH	NFD/websocketpp/websocketpp/frame.hpp	/^static unsigned int const MAX_EXTENDED_HEADER_LENGTH = 12;$/;"	m	namespace:websocketpp::frame
MAX_HEADER_LENGTH	NFD/websocketpp/websocketpp/frame.hpp	/^static unsigned int const MAX_HEADER_LENGTH = 14;$/;"	m	namespace:websocketpp::frame
MAX_NDN_PACKET_SIZE	ndn-cxx/src/encoding/tlv.hpp	/^const size_t MAX_NDN_PACKET_SIZE = 8800;$/;"	m	namespace:ndn
MAX_NUM_TIMEOUTS	NFD/rib/fib-updater.cpp	/^const unsigned int FibUpdater::MAX_NUM_TIMEOUTS = 10;$/;"	m	class:nfd::rib::FibUpdater	file:
MAX_NUM_TIMEOUTS	NFD/rib/fib-updater.hpp	/^  static const unsigned int MAX_NUM_TIMEOUTS;$/;"	m	class:nfd::rib::FibUpdater
MAX_PREDICTION	NFD/daemon/fw/ncc-strategy.cpp	/^const time::microseconds NccStrategy::MeasurementsEntryInfo::MAX_PREDICTION =$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo	file:
MAX_PREDICTION	NFD/daemon/fw/ncc-strategy.hpp	/^    static const time::microseconds MAX_PREDICTION;$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
MAX_SEG_SIZE	ndn-cxx/tools/ndnputchunks3.cpp	/^const size_t MAX_SEG_SIZE = 4096;$/;"	m	namespace:ndn	file:
MAX_SIZE_OF_BLOCK_FROM_STREAM	ndn-cxx/src/encoding/block.cpp	/^const size_t MAX_SIZE_OF_BLOCK_FROM_STREAM = 8800;$/;"	m	namespace:ndn	file:
MAYSPACE	utils/topology/rocketfuel-map-reader.cpp	89;"	d	file:
MEASUREMENTS_LIFETIME	NFD/daemon/fw/ncc-strategy.cpp	/^const time::nanoseconds NccStrategy::MEASUREMENTS_LIFETIME = time::seconds(16);$/;"	m	class:nfd::fw::NccStrategy	file:
MEASUREMENTS_LIFETIME	NFD/daemon/fw/ncc-strategy.hpp	/^  static const time::nanoseconds MEASUREMENTS_LIFETIME;$/;"	m	class:nfd::fw::NccStrategy
MEM_USAGE_H	utils/mem-usage.hpp	21;"	d
MESSAGE	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    MESSAGE$/;"	e	enum:action_type	file:
MESSAGE_TOO_BIG	NFD/websocketpp/websocketpp/processors/base.hpp	/^    MESSAGE_TOO_BIG = 3,$/;"	e	enum:websocketpp::processor::error_cat::value
MIN_CAPACITY	NFD/daemon/table/dead-nonce-list.cpp	/^const size_t DeadNonceList::MIN_CAPACITY = (1 << 3);$/;"	m	class:nfd::DeadNonceList	file:
MIN_CAPACITY	NFD/daemon/table/dead-nonce-list.hpp	/^  static const size_t MIN_CAPACITY;$/;"	m	class:nfd::DeadNonceList
MIN_DATA_LEN	ndn-cxx/src/util/ethernet.hpp	/^const size_t MIN_DATA_LEN = 46;     \/\/\/< Min octets in Ethernet payload (assuming no 802.1Q tag)$/;"	m	namespace:ndn::util::ethernet
MIN_LENGTH	ndn-cxx/src/security/security-common.hpp	/^  MIN_LENGTH = 4$/;"	e	enum:ndn::signed_interest::__anon3
MIN_LENGTH	ndn-cxx/src/util/command-interest-validator.hpp	/^    MIN_LENGTH = 4,$/;"	e	enum:ndn::CommandInterestValidator::__anon6
MIN_LIFETIME	NFD/daemon/table/dead-nonce-list.cpp	/^const time::nanoseconds DeadNonceList::MIN_LIFETIME = time::milliseconds(1);$/;"	m	class:nfd::DeadNonceList	file:
MIN_LIFETIME	NFD/daemon/table/dead-nonce-list.hpp	/^  static const time::nanoseconds MIN_LIFETIME;$/;"	m	class:nfd::DeadNonceList
MIN_PREDICTION	NFD/daemon/fw/ncc-strategy.cpp	/^const time::microseconds NccStrategy::MeasurementsEntryInfo::MIN_PREDICTION =$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo	file:
MIN_PREDICTION	NFD/daemon/fw/ncc-strategy.hpp	/^    static const time::microseconds MIN_PREDICTION;$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
MULTI_POLICY_CONTAINER_H_	utils/trie/detail/multi-policy-container.hpp	21;"	d
MULTI_POLICY_H_	utils/trie/multi-policy.hpp	21;"	d
MULTI_TYPE_CONTAINER_H_	utils/trie/detail/multi-type-container.hpp	21;"	d
ManagerBase	NFD/daemon/mgmt/manager-base.cpp	/^ManagerBase::ManagerBase(shared_ptr<InternalFace> face, const std::string& privilege,$/;"	f	class:nfd::ManagerBase
ManagerBase	NFD/daemon/mgmt/manager-base.hpp	/^class ManagerBase$/;"	c	namespace:nfd
ManagerBaseTest	NFD/tests/daemon/mgmt/manager-base.t.cpp	/^  ManagerBaseTest()$/;"	f	class:nfd::tests::ManagerBaseTest
ManagerBaseTest	NFD/tests/daemon/mgmt/manager-base.t.cpp	/^class ManagerBaseTest : public ManagerBase, protected BaseFixture$/;"	c	namespace:nfd::tests	file:
ManagerCheckFixture	tests/unit-tests/model/ndn-l3-protocol.t.cpp	/^class ManagerCheckFixture : public ScenarioHelperWithCleanupFixture$/;"	c	namespace:ns3::ndn	file:
MatchInterestFilterId	ndn-cxx/src/detail/interest-filter-record.hpp	/^  MatchInterestFilterId(const InterestFilterId* interestFilterId)$/;"	f	class:ndn::MatchInterestFilterId
MatchInterestFilterId	ndn-cxx/src/detail/interest-filter-record.hpp	/^class MatchInterestFilterId$/;"	c	namespace:ndn
MatchPendingInterestId	ndn-cxx/src/detail/pending-interest.hpp	/^  MatchPendingInterestId(const PendingInterestId* pendingInterestId)$/;"	f	class:ndn::MatchPendingInterestId
MatchPendingInterestId	ndn-cxx/src/detail/pending-interest.hpp	/^class MatchPendingInterestId$/;"	c	namespace:ndn
MatchRegisteredPrefixId	ndn-cxx/src/detail/registered-prefix.hpp	/^  MatchRegisteredPrefixId(const RegisteredPrefixId* registeredPrefixId)$/;"	f	class:ndn::MatchRegisteredPrefixId
MatchRegisteredPrefixId	ndn-cxx/src/detail/registered-prefix.hpp	/^class MatchRegisteredPrefixId$/;"	c	namespace:ndn
MaxSuffixComponents	ndn-cxx/src/encoding/tlv.hpp	/^  MaxSuffixComponents       = 14,$/;"	e	enum:ndn::tlv::__anon8
Measurement	utils/ndn-rtt-mean-deviation.cpp	/^RttMeanDeviation::Measurement(Time m)$/;"	f	class:ns3::ndn::RttMeanDeviation
Measurements	NFD/daemon/table/measurements.cpp	/^Measurements::Measurements(NameTree& nameTree)$/;"	f	class:nfd::Measurements
Measurements	NFD/daemon/table/measurements.hpp	/^class Measurements : noncopyable$/;"	c	namespace:nfd
MeasurementsAccessor	NFD/daemon/table/measurements-accessor.cpp	/^MeasurementsAccessor::MeasurementsAccessor(Measurements& measurements,$/;"	f	class:nfd::MeasurementsAccessor
MeasurementsAccessor	NFD/daemon/table/measurements-accessor.hpp	/^class MeasurementsAccessor : noncopyable$/;"	c	namespace:nfd
MeasurementsAccessorFixture	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^  MeasurementsAccessorFixture()$/;"	f	class:nfd::tests::MeasurementsAccessorFixture
MeasurementsAccessorFixture	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^class MeasurementsAccessorFixture : public BaseFixture$/;"	c	namespace:nfd::tests	file:
MeasurementsAccessorTestStrategy	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^  MeasurementsAccessorTestStrategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::tests::MeasurementsAccessorTestStrategy
MeasurementsAccessorTestStrategy	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^class MeasurementsAccessorTestStrategy : public DummyStrategy$/;"	c	namespace:nfd::tests	file:
MeasurementsEntryInfo	NFD/daemon/fw/ncc-strategy.cpp	/^NccStrategy::MeasurementsEntryInfo::MeasurementsEntryInfo()$/;"	f	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
MeasurementsEntryInfo	NFD/daemon/fw/ncc-strategy.hpp	/^  class MeasurementsEntryInfo : public StrategyInfo$/;"	c	class:nfd::fw::NccStrategy
MemUsage	utils/mem-usage.hpp	/^class MemUsage {$/;"	c
MemberHookLess	model/cs/custom-policies/freshness-policy.hpp	/^    struct MemberHookLess {$/;"	s	struct:ns3::ndn::ndnSIM::freshness_policy_traits::policy
MemberHookLess	utils/trie/lfu-policy.hpp	/^    struct MemberHookLess {$/;"	s	struct:ns3::ndn::ndnSIM::lfu_policy_traits::policy
MemberHookLess	utils/trie/random-policy.hpp	/^    struct MemberHookLess {$/;"	s	struct:ns3::ndn::ndnSIM::random_policy_traits::policy
MetaInfo	ndn-cxx/src/encoding/tlv.hpp	/^  MetaInfo      = 20,$/;"	e	enum:ndn::tlv::__anon8
MetaInfo	ndn-cxx/src/meta-info.cpp	/^MetaInfo::MetaInfo()$/;"	f	class:ndn::MetaInfo
MetaInfo	ndn-cxx/src/meta-info.cpp	/^MetaInfo::MetaInfo(const Block& block)$/;"	f	class:ndn::MetaInfo
MetaInfo	ndn-cxx/src/meta-info.hpp	/^class MetaInfo$/;"	c	namespace:ndn
MetaInfo1	ndn-cxx/tests/unit-tests/meta-info.t.cpp	/^const uint8_t MetaInfo1[] = {0x14, 0x04, 0x19, 0x02, 0x27, 0x10};$/;"	m	namespace:ndn::tests	file:
MetaInfo2	ndn-cxx/tests/unit-tests/meta-info.t.cpp	/^const uint8_t MetaInfo2[] = {0x14, 0x14, 0x19, 0x02, 0x27, 0x10, 0x1a, 0x0e, 0x08, 0x0c,$/;"	m	namespace:ndn::tests	file:
MetaInfo3	ndn-cxx/tests/unit-tests/meta-info.t.cpp	/^const uint8_t MetaInfo3[] = {0x14, 0x17, 0x18, 0x01, 0x01, 0x19, 0x02, 0x27, 0x10, 0x1a,$/;"	m	namespace:ndn::tests	file:
MinSuffixComponents	ndn-cxx/src/encoding/tlv.hpp	/^  MinSuffixComponents       = 13,$/;"	e	enum:ndn::tlv::__anon8
MismatchError	ndn-cxx/src/security/key-chain.hpp	/^    MismatchError(const std::string& what)$/;"	f	class:ndn::security::KeyChain::MismatchError
MismatchError	ndn-cxx/src/security/key-chain.hpp	/^  class MismatchError : public Error$/;"	c	class:ndn::security::KeyChain
MissCallback	NFD/daemon/table/cs.hpp	/^  typedef std::function<void(const Interest&)> MissCallback;$/;"	t	class:nfd::cs::Cs
MissingCallbackFixture	NFD/tests/core/config-file.t.cpp	/^  MissingCallbackFixture()$/;"	f	class:nfd::tests::MissingCallbackFixture
MissingCallbackFixture	NFD/tests/core/config-file.t.cpp	/^class MissingCallbackFixture : public BaseFixture$/;"	c	namespace:nfd::tests	file:
MissingNameLink	ndn-cxx/tests/unit-tests/link.t.cpp	/^const uint8_t MissingNameLink[] = {$/;"	m	namespace:ndn::tests	file:
MissingPreferenceLink	ndn-cxx/tests/unit-tests/link.t.cpp	/^const uint8_t MissingPreferenceLink[] = {$/;"	m	namespace:ndn::tests	file:
MtInfo	NFD/daemon/fw/access-strategy.cpp	/^AccessStrategy::MtInfo::MtInfo()$/;"	f	class:nfd::fw::AccessStrategy::MtInfo
MtInfo	NFD/daemon/fw/access-strategy.hpp	/^  class MtInfo : public StrategyInfo$/;"	c	class:nfd::fw::AccessStrategy
Multicast	NFD/daemon/face/datagram-face.hpp	/^struct Multicast {};$/;"	s	namespace:nfd
MulticastDiscovery	NFD/tools/ndn-autoconfig/multicast-discovery.cpp	/^MulticastDiscovery::MulticastDiscovery(Face& face, KeyChain& keyChain,$/;"	f	class:ndn::tools::autoconfig::MulticastDiscovery
MulticastDiscovery	NFD/tools/ndn-autoconfig/multicast-discovery.hpp	/^class MulticastDiscovery : public Base$/;"	c	namespace:ndn::tools::autoconfig
MulticastFaceMap	NFD/daemon/face/ethernet-factory.hpp	/^                   shared_ptr<EthernetFace>> MulticastFaceMap;$/;"	t	class:nfd::EthernetFactory
MulticastFaceMap	NFD/daemon/face/udp-factory.hpp	/^  typedef std::map<udp::Endpoint, shared_ptr<MulticastUdpFace>> MulticastFaceMap;$/;"	t	class:nfd::UdpFactory
MulticastStrategy	NFD/daemon/fw/multicast-strategy.cpp	/^MulticastStrategy::MulticastStrategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::MulticastStrategy
MulticastStrategy	NFD/daemon/fw/multicast-strategy.hpp	/^class MulticastStrategy : public Strategy$/;"	c	namespace:nfd::fw
MulticastUdpFace	NFD/daemon/face/multicast-udp-face.cpp	/^MulticastUdpFace::MulticastUdpFace(const protocol::endpoint& multicastGroup,$/;"	f	class:nfd::MulticastUdpFace
MulticastUdpFace	NFD/daemon/face/multicast-udp-face.hpp	/^class MulticastUdpFace : public DatagramFace<boost::asio::ip::udp, Multicast>$/;"	c	namespace:nfd
MultipleInterest	tests/unit-tests/ndn-cxx/face.t.cpp	/^  MultipleInterest(const Name& name, const NameCallback& onData, const VoidCallback& onTimeout)$/;"	f	class:ns3::ndn::MultipleInterest
MultipleInterest	tests/unit-tests/ndn-cxx/face.t.cpp	/^class MultipleInterest : public BaseTesterApp$/;"	c	namespace:ns3::ndn	file:
Mur	NFD/core/city-hash.cpp	/^static uint32 Mur(uint32 a, uint32 h) {$/;"	f	file:
MustBeFresh	ndn-cxx/src/encoding/tlv.hpp	/^  MustBeFresh   = 18,$/;"	e	enum:ndn::tlv::__anon8
NCsEntries	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  NCsEntries           = 135,$/;"	e	enum:ndn::tlv::nfd::__anon11
NDNSIM_EXAMPLES_NDN_CXX_SIMPLE_REAL_APP_HPP	examples/ndn-cxx-simple/real-app.hpp	21;"	d
NDNSIM_EXAMPLES_NDN_CXX_SIMPLE_REAL_APP_STARTER_HPP	examples/ndn-cxx-simple/real-app-starter.hpp	21;"	d
NDNSIM_EXAMPLES_NDN_LOAD_BALANCER_RANDOM_LOAD_BALANCER_STRATEGY_HPP	examples/ndn-load-balancer/random-load-balancer-strategy.hpp	27;"	d
NDNSIM_HELPER_NDN_SCENARIO_HELPER_HPP	helper/ndn-scenario-helper.hpp	21;"	d
NDNSIM_HELPER_NDN_STRATEGY_CHOICE_HELPER_HPP	helper/ndn-strategy-choice-helper.hpp	21;"	d
NDNSIM_NDN_ALL_HPP	ndn-all.hpp	21;"	d
NDNSIM_NDN_FACE_HPP	model/ndn-face.hpp	21;"	d
NDNSIM_NDN_HEADER_HPP	model/ndn-header.hpp	21;"	d
NDNSIM_TESTS_UNIT_TESTS_TESTS_COMMON_HPP	tests/unit-tests/tests-common.hpp	21;"	d
NDNSIM_UTILS_DUMMY_KEYCHAIN_HPP	utils/dummy-keychain.hpp	21;"	d
NDNSIM_UTILS_TIME_HPP	utils/ndn-time.hpp	21;"	d
NDN_APP_FACE_H	model/ndn-app-face.hpp	21;"	d
NDN_APP_H	apps/ndn-app.hpp	21;"	d
NDN_APP_HELPER_H	helper/ndn-app-helper.hpp	21;"	d
NDN_ASN_EXT_HPP	ndn-cxx/src/encoding/cryptopp/asn_ext.hpp	26;"	d
NDN_COMMON_H	model/ndn-common.hpp	21;"	d
NDN_COMMON_HPP	ndn-cxx/src/common.hpp	29;"	d
NDN_COMMON_PCH_HPP	ndn-cxx/src/common-pch.hpp	23;"	d
NDN_CONSUMER_BATCHES_H	apps/ndn-consumer-batches.hpp	21;"	d
NDN_CONSUMER_CBR_H	apps/ndn-consumer-cbr.hpp	21;"	d
NDN_CONSUMER_H	apps/ndn-consumer.hpp	21;"	d
NDN_CONSUMER_WINDOW_H	apps/ndn-consumer-window.hpp	21;"	d
NDN_CONSUMER_ZIPF_MANDELBROT_H_	apps/ndn-consumer-zipf-mandelbrot.hpp	23;"	d
NDN_CONTENT_STORE_H	model/cs/ndn-content-store.hpp	21;"	d
NDN_CONTENT_STORE_IMPL_H_	model/cs/content-store-impl.hpp	21;"	d
NDN_CONTENT_STORE_NOCACHE_H	model/cs/content-store-nocache.hpp	21;"	d
NDN_CONTENT_STORE_WITH_FRESHNESS_H_	model/cs/content-store-with-freshness.hpp	21;"	d
NDN_CONTENT_STORE_WITH_PROBABILITY_H_	model/cs/content-store-with-probability.hpp	21;"	d
NDN_CONTENT_STORE_WITH_STATS_H_	model/cs/content-store-with-stats.hpp	21;"	d
NDN_CXX_DECL_FINAL	ndn-cxx/src/common.hpp	55;"	d
NDN_CXX_DECL_FINAL	ndn-cxx/src/common.hpp	58;"	d
NDN_CXX_DECL_FINAL	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  wireDecode(const Block& wire) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::nfd::ControlParameters
NDN_CXX_DECL_FINAL	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  wireEncode() const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::nfd::ControlParameters
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^                             const Name& certName) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  addCertificate(const IdentityCertificate& certificate) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  addIdentity(const Name& identity) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  addKey(const Name& identity, const name::Component& keyId, const PublicKey& publicKey) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  getCertificate(const Name& certName) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  getCertificatesOfKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  getDefaultCertificateOfKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  getDefaultIdentity() const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  getDefaultKeyOfIdentity(const Name& identity) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  getIdentities() const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  getKeyBits(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  getKeysOfIdentity(const Name& identity) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  getTpmLocator() const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  hasCertificate(const Name& certName) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  hasIdentity(const Name& identity) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  hasKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  removeCertificate(const Name& certName) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  removeIdentity(const Name& identity) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  removeKey(const Name& identity, const name::Component& keyId) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  setDefaultIdentity(const Name& identityName) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  setDefaultKeyOfIdentity(const Name& identity, const name::Component& keyId) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_FINAL	ndn-cxx/src/security/pib-sqlite3.hpp	/^  setTpmLocator(const std::string& tpmLocator) NDN_CXX_DECL_FINAL;$/;"	m	class:ndn::security::PibSqlite3
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/common.hpp	54;"	d
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/common.hpp	57;"	d
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  addCertificate(const IdentityCertificate& certificate) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  addIdentity(const Name& identity) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  addKey(const Name& identity, const name::Component& keyId, const PublicKey& publicKey) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  getCertificate(const Name& certName) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  getCertificatesOfKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  getDefaultCertificateOfKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  getDefaultIdentity() const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  getDefaultKeyOfIdentity(const Name& identity) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  getIdentities() const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  getKeyBits(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  getKeysOfIdentity(const Name& identity) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  getTpmLocator() const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  hasCertificate(const Name& certName) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  hasIdentity(const Name& identity) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  hasKey(const Name& identity, const name::Component& keyId) const NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  removeCertificate(const Name& certName) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  removeIdentity(const Name& identity) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  removeKey(const Name& identity, const name::Component& keyId) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  setDefaultCertificateOfKey(const Name& identity, const name::Component& keyId, const Name& certName) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  setDefaultIdentity(const Name& identityName) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  setDefaultKeyOfIdentity(const Name& identity, const name::Component& keyId) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_DECL_OVERRIDE	ndn-cxx/src/security/pib-memory.hpp	/^  setTpmLocator(const std::string& tpmLocator) NDN_CXX_DECL_OVERRIDE;$/;"	m	class:ndn::security::PibMemory
NDN_CXX_ENABLE_DEPRECATED_BLOCK_HELPERS	ndn-cxx/src/encoding/block-helpers.hpp	223;"	d
NDN_CXX_KEYCHAIN_REGISTER_PIB	ndn-cxx/src/security/key-chain.hpp	934;"	d
NDN_CXX_KEYCHAIN_REGISTER_TPM	ndn-cxx/src/security/key-chain.hpp	950;"	d
NDN_CXX_LP_CACHE_POLICY_HPP	ndn-cxx/src/lp/cache-policy.hpp	25;"	d
NDN_CXX_LP_DETAIL_FIELD_DECL_HPP	ndn-cxx/src/lp/detail/field-decl.hpp	23;"	d
NDN_CXX_LP_DETAIL_FIELD_INFO_HPP	ndn-cxx/src/lp/detail/field-info.hpp	23;"	d
NDN_CXX_LP_FIELDS_HPP	ndn-cxx/src/lp/fields.hpp	23;"	d
NDN_CXX_LP_FIELD_HPP	ndn-cxx/src/lp/field.hpp	23;"	d
NDN_CXX_LP_NACK_HEADER_HPP	ndn-cxx/src/lp/nack-header.hpp	25;"	d
NDN_CXX_LP_NACK_HPP	ndn-cxx/src/lp/nack.hpp	25;"	d
NDN_CXX_LP_PACKET_HPP	ndn-cxx/src/lp/packet.hpp	23;"	d
NDN_CXX_LP_SEQUENCE_HPP	ndn-cxx/src/lp/sequence.hpp	25;"	d
NDN_CXX_LP_TLV_HPP	ndn-cxx/src/lp/tlv.hpp	23;"	d
NDN_CXX_PROTECTED_WITH_TESTS_ELSE_PRIVATE	ndn-cxx/src/common.hpp	39;"	d
NDN_CXX_PROTECTED_WITH_TESTS_ELSE_PRIVATE	ndn-cxx/src/common.hpp	44;"	d
NDN_CXX_PUBLIC_WITH_TESTS_ELSE_PRIVATE	ndn-cxx/src/common.hpp	38;"	d
NDN_CXX_PUBLIC_WITH_TESTS_ELSE_PRIVATE	ndn-cxx/src/common.hpp	43;"	d
NDN_CXX_PUBLIC_WITH_TESTS_ELSE_PROTECTED	ndn-cxx/src/common.hpp	37;"	d
NDN_CXX_PUBLIC_WITH_TESTS_ELSE_PROTECTED	ndn-cxx/src/common.hpp	42;"	d
NDN_CXX_SECURITY_SIGNING_HELPERS_HPP	ndn-cxx/src/security/signing-helpers.hpp	23;"	d
NDN_CXX_SIGNAL_EMIT	ndn-cxx/src/util/signal-emit.hpp	71;"	d
NDN_CXX_SPECIALIZE_BOOST_IS_PLACEHOLDER_FOR_STD_PLACEHOLDER	ndn-cxx/src/common.hpp	111;"	d
NDN_CXX_SPECIALIZE_BOOST_IS_PLACEHOLDER_FOR_STD_PLACEHOLDER	ndn-cxx/src/common.hpp	128;"	d
NDN_CXX_VIRTUAL_WITH_TESTS	ndn-cxx/src/common.hpp	36;"	d
NDN_CXX_VIRTUAL_WITH_TESTS	ndn-cxx/src/common.hpp	41;"	d
NDN_DATA_HPP	ndn-cxx/src/data.hpp	23;"	d
NDN_DESTINATIONFLAG_HPP	ndn-cxx/src/destination-flag.hpp	2;"	d
NDN_DETAIL_CONTAINER_WITH_ON_EMPTY_SIGNAL_HPP	ndn-cxx/src/detail/container-with-on-empty-signal.hpp	23;"	d
NDN_DETAIL_FACE_IMPL_HPP	ndn-cxx/src/detail/face-impl.hpp	23;"	d
NDN_DETAIL_INTEREST_FILTER_RECORD_HPP	ndn-cxx/src/detail/interest-filter-record.hpp	23;"	d
NDN_DETAIL_PENDING_INTEREST_HPP	ndn-cxx/src/detail/pending-interest.hpp	23;"	d
NDN_DETAIL_REGISTERED_PREFIX_HPP	ndn-cxx/src/detail/registered-prefix.hpp	23;"	d
NDN_ENCODING_BLOCK_HELPERS_HPP	ndn-cxx/src/encoding/block-helpers.hpp	23;"	d
NDN_ENCODING_BLOCK_HPP	ndn-cxx/src/encoding/block.hpp	25;"	d
NDN_ENCODING_BUFFER_HPP	ndn-cxx/src/encoding/buffer.hpp	25;"	d
NDN_ENCODING_BUFFER_STREAM_HPP	ndn-cxx/src/encoding/buffer-stream.hpp	25;"	d
NDN_ENCODING_ENCODER_HPP	ndn-cxx/src/encoding/encoder.hpp	23;"	d
NDN_ENCODING_ENCODING_BUFFER_FWD_HPP	ndn-cxx/src/encoding/encoding-buffer-fwd.hpp	23;"	d
NDN_ENCODING_ENCODING_BUFFER_HPP	ndn-cxx/src/encoding/encoding-buffer.hpp	23;"	d
NDN_ENCODING_ENDIAN_HPP	ndn-cxx/src/encoding/endian.hpp	25;"	d
NDN_ENCODING_ESTIMATOR_HPP	ndn-cxx/src/encoding/estimator.hpp	23;"	d
NDN_ENCODING_NFD_CONSTANTS_HPP	ndn-cxx/src/encoding/nfd-constants.hpp	23;"	d
NDN_ENCODING_OID_HPP	ndn-cxx/src/encoding/oid.hpp	23;"	d
NDN_ENCODING_TLV_HPP	ndn-cxx/src/encoding/tlv.hpp	23;"	d
NDN_ENCODING_TLV_NFD_HPP	ndn-cxx/src/encoding/tlv-nfd.hpp	23;"	d
NDN_ENCODING_TLV_SECURITY_HPP	ndn-cxx/src/encoding/tlv-security.hpp	23;"	d
NDN_EXCLUDE_H	ndn-cxx/src/exclude.hpp	25;"	d
NDN_FACE_CONTAINER_H	helper/ndn-face-container.hpp	21;"	d
NDN_FACE_HPP	ndn-cxx/src/face.hpp	23;"	d
NDN_FACE_KEEP_DEPRECATED_REGISTRATION_SIGNING	ndn-cxx/src/face.hpp	33;"	d
NDN_FIB_HELPER_H	helper/ndn-fib-helper.hpp	21;"	d
NDN_FW_HOP_COUNT_TAG_H	utils/ndn-fw-hop-count-tag.hpp	21;"	d
NDN_GLOBAL_ROUTER_H	model/ndn-global-router.hpp	21;"	d
NDN_GLOBAL_ROUTING_HELPER_H	helper/ndn-global-routing-helper.hpp	21;"	d
NDN_HELPERS_COMMAND_INTEREST_GENERATOR_HPP	ndn-cxx/src/util/command-interest-generator.hpp	23;"	d
NDN_INTEREST_FILTER_HPP	ndn-cxx/src/interest-filter.hpp	23;"	d
NDN_INTEREST_HPP	ndn-cxx/src/interest.hpp	23;"	d
NDN_KEY_LOCATOR_HPP	ndn-cxx/src/key-locator.hpp	23;"	d
NDN_L3_PROTOCOL_H	model/ndn-l3-protocol.hpp	21;"	d
NDN_L3_TRACER_H	utils/tracers/ndn-l3-tracer.hpp	21;"	d
NDN_LINK_CONTROL_HELPER_H	helper/ndn-link-control-helper.hpp	21;"	d
NDN_LINK_HPP	ndn-cxx/src/link.hpp	23;"	d
NDN_MANAGEMENT_CONFIG_FILE_HPP	ndn-cxx/src/util/config-file.hpp	23;"	d
NDN_MANAGEMENT_CONTROL_RESPONSE_HPP	ndn-cxx/src/management/nfd-control-response.hpp	23;"	d
NDN_MANAGEMENT_NFD_CHANNEL_STATUS_HPP	ndn-cxx/src/management/nfd-channel-status.hpp	23;"	d
NDN_MANAGEMENT_NFD_COMMAND_OPTIONS_HPP	ndn-cxx/src/management/nfd-command-options.hpp	23;"	d
NDN_MANAGEMENT_NFD_COMMAND_OPTIONS_KEEP_DEPRECATED_SIGNING_PARAMS	ndn-cxx/src/management/nfd-command-options.hpp	27;"	d
NDN_MANAGEMENT_NFD_CONTROLLER_HPP	ndn-cxx/src/management/nfd-controller.hpp	23;"	d
NDN_MANAGEMENT_NFD_CONTROL_COMMAND_HPP	ndn-cxx/src/management/nfd-control-command.hpp	23;"	d
NDN_MANAGEMENT_NFD_CONTROL_PARAMETERS_HPP	ndn-cxx/src/management/nfd-control-parameters.hpp	23;"	d
NDN_MANAGEMENT_NFD_FACE_EVENT_NOTIFICATION_HPP	ndn-cxx/src/management/nfd-face-event-notification.hpp	23;"	d
NDN_MANAGEMENT_NFD_FACE_MONITOR_HPP	ndn-cxx/src/management/nfd-face-monitor.hpp	49;"	d
NDN_MANAGEMENT_NFD_FACE_QUERY_FILTER_HPP	ndn-cxx/src/management/nfd-face-query-filter.hpp	23;"	d
NDN_MANAGEMENT_NFD_FACE_STATUS_HPP	ndn-cxx/src/management/nfd-face-status.hpp	23;"	d
NDN_MANAGEMENT_NFD_FACE_TRAITS_HPP	ndn-cxx/src/management/nfd-face-traits.hpp	23;"	d
NDN_MANAGEMENT_NFD_FIB_ENTRY_HPP	ndn-cxx/src/management/nfd-fib-entry.hpp	23;"	d
NDN_MANAGEMENT_NFD_FORWARDER_STATUS_HPP	ndn-cxx/src/management/nfd-forwarder-status.hpp	23;"	d
NDN_MANAGEMENT_NFD_LOCAL_CONTROL_HEADER_HPP	ndn-cxx/src/management/nfd-local-control-header.hpp	23;"	d
NDN_MANAGEMENT_NFD_RIB_ENTRY_HPP	ndn-cxx/src/management/nfd-rib-entry.hpp	23;"	d
NDN_MANAGEMENT_NFD_RIB_FLAGS_HPP	ndn-cxx/src/management/nfd-rib-flags.hpp	23;"	d
NDN_MANAGEMENT_NFD_STRATEGY_CHOICE_HPP	ndn-cxx/src/management/nfd-strategy-choice.hpp	23;"	d
NDN_META_INFO_HPP	ndn-cxx/src/meta-info.hpp	23;"	d
NDN_MGMT_CONTROL_PARAMETERS_HPP	ndn-cxx/src/mgmt/control-parameters.hpp	27;"	d
NDN_MGMT_CONTROL_RESPONSE_HPP	ndn-cxx/src/mgmt/control-response.hpp	27;"	d
NDN_MGMT_DISPATCHER_HPP	ndn-cxx/src/mgmt/dispatcher.hpp	27;"	d
NDN_MGMT_STATUS_DATASET_CONTEXT_HPP	ndn-cxx/src/mgmt/status-dataset-context.hpp	27;"	d
NDN_NAME_COMPONENT_HPP	ndn-cxx/src/name-component.hpp	23;"	d
NDN_NAME_HPP	ndn-cxx/src/name.hpp	27;"	d
NDN_NET_DEVICE_FACE_H	model/ndn-net-device-face.hpp	21;"	d
NDN_NS3_HPP	model/ndn-ns3.hpp	21;"	d
NDN_NS3_PACKET_TAG_HPP	utils/ndn-ns3-packet-tag.hpp	21;"	d
NDN_PRODUCER_H	apps/ndn-producer.hpp	21;"	d
NDN_RTT_ESTIMATOR_H	utils/ndn-rtt-estimator.hpp	27;"	d
NDN_RTT_MEAN_DEVIATION_H	utils/ndn-rtt-mean-deviation.hpp	29;"	d
NDN_SECURITTY_PIB_SQLITE3_HPP	ndn-cxx/src/security/pib-sqlite3.hpp	23;"	d
NDN_SECURITY_ADDITIONAL_DESCRIPTION_HPP	ndn-cxx/src/security/additional-description.hpp	23;"	d
NDN_SECURITY_CERTIFICATE_CACHE_HPP	ndn-cxx/src/security/certificate-cache.hpp	25;"	d
NDN_SECURITY_CERTIFICATE_CACHE_TTL_HPP	ndn-cxx/src/security/certificate-cache-ttl.hpp	25;"	d
NDN_SECURITY_CERTIFICATE_CONTAINER_HPP	ndn-cxx/src/security/certificate-container.hpp	23;"	d
NDN_SECURITY_CERTIFICATE_EXTENSION_HPP	ndn-cxx/src/security/certificate-extension.hpp	27;"	d
NDN_SECURITY_CERTIFICATE_HPP	ndn-cxx/src/security/certificate.hpp	27;"	d
NDN_SECURITY_CERTIFICATE_SUBJECT_DESCRIPTION_HPP	ndn-cxx/src/security/certificate-subject-description.hpp	27;"	d
NDN_SECURITY_COMMON_HPP	ndn-cxx/src/security/security-common.hpp	23;"	d
NDN_SECURITY_CONF_CHECKER_HPP	ndn-cxx/src/security/conf/checker.hpp	25;"	d
NDN_SECURITY_CONF_COMMON_HPP	ndn-cxx/src/security/conf/common.hpp	25;"	d
NDN_SECURITY_CONF_FILTER_HPP	ndn-cxx/src/security/conf/filter.hpp	25;"	d
NDN_SECURITY_CONF_KEY_LOCATOR_CHECKER_HPP	ndn-cxx/src/security/conf/key-locator-checker.hpp	25;"	d
NDN_SECURITY_CONF_RULE_HPP	ndn-cxx/src/security/conf/rule.hpp	25;"	d
NDN_SECURITY_CRYPTOPP_HPP	ndn-cxx/src/security/cryptopp.hpp	23;"	d
NDN_SECURITY_DIGEST_SHA256_HPP	ndn-cxx/src/security/digest-sha256.hpp	23;"	d
NDN_SECURITY_IDENTITY_CERTIFICATE_HPP	ndn-cxx/src/security/identity-certificate.hpp	25;"	d
NDN_SECURITY_IDENTITY_CONTAINER_HPP	ndn-cxx/src/security/identity-container.hpp	23;"	d
NDN_SECURITY_IDENTITY_HPP	ndn-cxx/src/security/identity.hpp	23;"	d
NDN_SECURITY_KEY_CHAIN_HPP	ndn-cxx/src/security/key-chain.hpp	25;"	d
NDN_SECURITY_KEY_CONTAINER_HPP	ndn-cxx/src/security/key-container.hpp	23;"	d
NDN_SECURITY_KEY_HPP	ndn-cxx/src/security/key.hpp	23;"	d
NDN_SECURITY_KEY_PARAMS_HPP	ndn-cxx/src/security/key-params.hpp	23;"	d
NDN_SECURITY_OPENSSL_HPP	ndn-cxx/src/security/openssl.hpp	23;"	d
NDN_SECURITY_PIB_HPP	ndn-cxx/src/security/pib.hpp	23;"	d
NDN_SECURITY_PIB_IMPL_HPP	ndn-cxx/src/security/pib-impl.hpp	23;"	d
NDN_SECURITY_PIB_MEMORY_HPP	ndn-cxx/src/security/pib-memory.hpp	23;"	d
NDN_SECURITY_PUBLIC_KEY_HPP	ndn-cxx/src/security/public-key.hpp	27;"	d
NDN_SECURITY_SECURED_BAG_HPP	ndn-cxx/src/security/secured-bag.hpp	23;"	d
NDN_SECURITY_SEC_PUBLIC_INFO_HPP	ndn-cxx/src/security/sec-public-info.hpp	23;"	d
NDN_SECURITY_SEC_PUBLIC_INFO_SQLITE3_HPP	ndn-cxx/src/security/sec-public-info-sqlite3.hpp	26;"	d
NDN_SECURITY_SEC_RULE_HPP	ndn-cxx/src/security/sec-rule.hpp	25;"	d
NDN_SECURITY_SEC_RULE_RELATIVE_HPP	ndn-cxx/src/security/sec-rule-relative.hpp	25;"	d
NDN_SECURITY_SEC_RULE_SPECIFIC_H	ndn-cxx/src/security/sec-rule-specific.hpp	25;"	d
NDN_SECURITY_SEC_TPM_FILE_HPP	ndn-cxx/src/security/sec-tpm-file.hpp	27;"	d
NDN_SECURITY_SEC_TPM_HPP	ndn-cxx/src/security/sec-tpm.hpp	25;"	d
NDN_SECURITY_SEC_TPM_OSX_HPP	ndn-cxx/src/security/sec-tpm-osx.hpp	25;"	d
NDN_SECURITY_SIGNATURE_SHA256_WITH_ECDSA_HPP	ndn-cxx/src/security/signature-sha256-with-ecdsa.hpp	23;"	d
NDN_SECURITY_SIGNATURE_SHA256_WITH_RSA_HPP	ndn-cxx/src/security/signature-sha256-with-rsa.hpp	23;"	d
NDN_SECURITY_SIGNING_INFO_HPP	ndn-cxx/src/security/signing-info.hpp	23;"	d
NDN_SECURITY_VALIDATION_REQUEST_HPP	ndn-cxx/src/security/validation-request.hpp	25;"	d
NDN_SECURITY_VALIDATOR_CONFIG_HPP	ndn-cxx/src/security/validator-config.hpp	25;"	d
NDN_SECURITY_VALIDATOR_HPP	ndn-cxx/src/security/validator.hpp	26;"	d
NDN_SECURITY_VALIDATOR_NULL_HPP	ndn-cxx/src/security/validator-null.hpp	26;"	d
NDN_SECURITY_VALIDATOR_REGEX_HPP	ndn-cxx/src/security/validator-regex.hpp	25;"	d
NDN_SECURITY_VALIDITY_PERIOD_HPP	ndn-cxx/src/security/validity-period.hpp	23;"	d
NDN_SELECTORS_HPP	ndn-cxx/src/selectors.hpp	23;"	d
NDN_SIGNATURE_HPP	ndn-cxx/src/signature.hpp	23;"	d
NDN_SIGNATURE_INFO_HPP	ndn-cxx/src/signature-info.hpp	23;"	d
NDN_STACK_HELPER_H	helper/ndn-stack-helper.hpp	21;"	d
NDN_STRING_HELPER_HPP	ndn-cxx/src/util/string-helper.hpp	23;"	d
NDN_TAG_HOST_HPP	ndn-cxx/src/tag-host.hpp	23;"	d
NDN_TAG_HPP	ndn-cxx/src/tag.hpp	23;"	d
NDN_TESTS_BOOST_TEST_HPP	ndn-cxx/tests/boost-test.hpp	23;"	d
NDN_TESTS_BOOST_TEST_HPP	tests/boost-test.hpp	21;"	d
NDN_TESTS_IDENTITY_MANAGEMENT_FIXTURE_HPP	ndn-cxx/tests/identity-management-fixture.hpp	23;"	d
NDN_TESTS_IDENTITY_MANAGEMENT_TIME_FIXTURE_HPP	ndn-cxx/tests/unit-tests/identity-management-time-fixture.hpp	23;"	d
NDN_TESTS_NETWORK_CONFIGURATION_DETECTOR_HPP	ndn-cxx/tests/unit-tests/network-configuration-detector.hpp	23;"	d
NDN_TESTS_PIB_DATA_FIXTURE_HPP	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	23;"	d
NDN_TESTS_SECURITY_DUMMY_KEYCHAIN_HPP	ndn-cxx/tests/unit-tests/security/dummy-keychain.hpp	23;"	d
NDN_TESTS_UNIT_TESTS_MAKE_INTEREST_DATA_HPP	ndn-cxx/tests/unit-tests/make-interest-data.hpp	28;"	d
NDN_TESTS_UNIT_TESTS_TRANSPORT_FIXTURE_HPP	ndn-cxx/tests/unit-tests/transport/transport-fixture.hpp	26;"	d
NDN_TESTS_UNIT_TESTS_UNIT_TEST_TIME_FIXTURE_HPP	ndn-cxx/tests/unit-tests/unit-test-time-fixture.hpp	23;"	d
NDN_TESTS_UNIT_TESTS_UTIL_HOME_ENVIRONMENT_FIXTURE_HPP	ndn-cxx/tests/unit-tests/util/test-home-environment-fixture.hpp	23;"	d
NDN_TIME_CUSTOM_CLOCK_HPP	ndn-cxx/src/util/time-custom-clock.hpp	23;"	d
NDN_TIME_HPP	ndn-cxx/src/util/time.hpp	23;"	d
NDN_TIME_UNIT_TEST_CLOCK_HPP	ndn-cxx/src/util/time-unit-test-clock.hpp	23;"	d
NDN_TOOLS_NDNSEC_CERT_DUMP_HPP	ndn-cxx/tools/ndnsec/cert-dump.hpp	25;"	d
NDN_TOOLS_NDNSEC_CERT_GEN_HPP	ndn-cxx/tools/ndnsec/cert-gen.hpp	25;"	d
NDN_TOOLS_NDNSEC_CERT_INSTALL_HPP	ndn-cxx/tools/ndnsec/cert-install.hpp	25;"	d
NDN_TOOLS_NDNSEC_CERT_REVOKE_HPP	ndn-cxx/tools/ndnsec/cert-revoke.hpp	25;"	d
NDN_TOOLS_NDNSEC_DELETE_HPP	ndn-cxx/tools/ndnsec/delete.hpp	25;"	d
NDN_TOOLS_NDNSEC_DSK_GEN_HPP	ndn-cxx/tools/ndnsec/dsk-gen.hpp	25;"	d
NDN_TOOLS_NDNSEC_EXPORT_HPP	ndn-cxx/tools/ndnsec/export.hpp	25;"	d
NDN_TOOLS_NDNSEC_GET_DEFAULT_HPP	ndn-cxx/tools/ndnsec/get-default.hpp	25;"	d
NDN_TOOLS_NDNSEC_IMPORT_HPP	ndn-cxx/tools/ndnsec/import.hpp	25;"	d
NDN_TOOLS_NDNSEC_KEY_GEN_HPP	ndn-cxx/tools/ndnsec/key-gen.hpp	25;"	d
NDN_TOOLS_NDNSEC_LIST_HPP	ndn-cxx/tools/ndnsec/list.hpp	25;"	d
NDN_TOOLS_NDNSEC_OP_TOOL_HPP	ndn-cxx/tools/ndnsec/op-tool.hpp	25;"	d
NDN_TOOLS_NDNSEC_SET_ACL_HPP	ndn-cxx/tools/ndnsec/set-acl.hpp	25;"	d
NDN_TOOLS_NDNSEC_SET_DEFAULT_HPP	ndn-cxx/tools/ndnsec/set-default.hpp	25;"	d
NDN_TOOLS_NDNSEC_SIGN_REQ_HPP	ndn-cxx/tools/ndnsec/sign-req.hpp	25;"	d
NDN_TOOLS_NDNSEC_SIG_VERIFY_HPP	ndn-cxx/tools/ndnsec/sig-verify.hpp	25;"	d
NDN_TOOLS_NDNSEC_UNLOCK_TPM_HPP	ndn-cxx/tools/ndnsec/unlock-tpm.hpp	25;"	d
NDN_TOOLS_NDNSEC_UTIL_HPP	ndn-cxx/tools/ndnsec/util.hpp	25;"	d
NDN_TRANSPORT_STREAM_TRANSPORT_HPP	ndn-cxx/src/transport/stream-transport.hpp	23;"	d
NDN_TRANSPORT_TCP_TRANSPORT_HPP	ndn-cxx/src/transport/tcp-transport.hpp	23;"	d
NDN_TRANSPORT_TRANSPORT_HPP	ndn-cxx/src/transport/transport.hpp	23;"	d
NDN_TRANSPORT_UNIX_TRANSPORT_HPP	ndn-cxx/src/transport/unix-transport.hpp	23;"	d
NDN_UNIT_TESTS_UTIL_SIMPLE_NOTIFICATION_HPP	ndn-cxx/tests/unit-tests/util/simple-notification.hpp	29;"	d
NDN_UTIL_COMMAND_INTEREST_VALIDATOR_HPP	ndn-cxx/src/util/command-interest-validator.hpp	23;"	d
NDN_UTIL_CONCEPTS_HPP	ndn-cxx/src/util/concepts.hpp	23;"	d
NDN_UTIL_CRYPTO_HPP	ndn-cxx/src/util/crypto.hpp	23;"	d
NDN_UTIL_DIGEST_HPP	ndn-cxx/src/util/digest.hpp	23;"	d
NDN_UTIL_DNS_H	ndn-cxx/src/util/dns.hpp	23;"	d
NDN_UTIL_DUMMY_CLIENT_FACE_HPP	ndn-cxx/src/util/dummy-client-face.hpp	23;"	d
NDN_UTIL_ETHERNET_HPP	ndn-cxx/src/util/ethernet.hpp	29;"	d
NDN_UTIL_EVENT_EMITTER_HPP	ndn-cxx/src/util/event-emitter.hpp	23;"	d
NDN_UTIL_FACE_URI_HPP	ndn-cxx/src/util/face-uri.hpp	29;"	d
NDN_UTIL_INDENTED_STREAM_HPP	ndn-cxx/src/util/indented-stream.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_ENTRY_HPP	ndn-cxx/src/util/in-memory-storage-entry.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_FIFO_HPP	ndn-cxx/src/util/in-memory-storage-fifo.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_HPP	ndn-cxx/src/util/in-memory-storage.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_LFU_HPP	ndn-cxx/src/util/in-memory-storage-lfu.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_LRU_HPP	ndn-cxx/src/util/in-memory-storage-lru.hpp	23;"	d
NDN_UTIL_IN_MEMORY_STORAGE_PERSISTENT_HPP	ndn-cxx/src/util/in-memory-storage-persistent.hpp	23;"	d
NDN_UTIL_IO_HPP	ndn-cxx/src/util/io.hpp	23;"	d
NDN_UTIL_MONOTONIC_DEADLINE_TIMER_HPP	ndn-cxx/src/util/monotonic_deadline_timer.hpp	27;"	d
NDN_UTIL_NETWORK_MONITOR_HPP	ndn-cxx/src/util/network-monitor.hpp	23;"	d
NDN_UTIL_NOTIFICATION_STREAM_HPP	ndn-cxx/src/util/notification-stream.hpp	49;"	d
NDN_UTIL_NOTIFICATION_SUBSCRIBER_HPP	ndn-cxx/src/util/notification-subscriber.hpp	49;"	d
NDN_UTIL_RANDOM_HPP	ndn-cxx/src/util/random.hpp	23;"	d
NDN_UTIL_REGEX_BACKREF_MANAGER_HPP	ndn-cxx/src/util/regex/regex-backref-manager.hpp	25;"	d
NDN_UTIL_REGEX_COMPONENT_SET_MATCHER_HPP	ndn-cxx/src/util/regex/regex-component-set-matcher.hpp	25;"	d
NDN_UTIL_REGEX_HPP	ndn-cxx/src/util/regex.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_BACKREF_MATCHER_HPP	ndn-cxx/src/util/regex/regex-backref-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_COMPONENT_MATCHER_HPP	ndn-cxx/src/util/regex/regex-component-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_MATCHER_H	ndn-cxx/src/util/regex/regex-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_PATTERN_LIST_MATCHER_HPP	ndn-cxx/src/util/regex/regex-pattern-list-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_PSEUDO_MATCHER_HPP	ndn-cxx/src/util/regex/regex-pseudo-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_REPEAT_MATCHER_HPP	ndn-cxx/src/util/regex/regex-repeat-matcher.hpp	25;"	d
NDN_UTIL_REGEX_REGEX_TOP_MATCHER_HPP	ndn-cxx/src/util/regex/regex-top-matcher.hpp	25;"	d
NDN_UTIL_SCHEDULER_HPP	ndn-cxx/src/util/scheduler.hpp	23;"	d
NDN_UTIL_SCHEDULER_SCOPED_EVENT_ID_HPP	ndn-cxx/src/util/scheduler-scoped-event-id.hpp	23;"	d
NDN_UTIL_SEGMENT_FETCHER_HPP	ndn-cxx/src/util/segment-fetcher.hpp	23;"	d
NDN_UTIL_SIGNAL_CONNECTION_HPP	ndn-cxx/src/util/signal-connection.hpp	23;"	d
NDN_UTIL_SIGNAL_EMIT_HPP	ndn-cxx/src/util/signal-emit.hpp	34;"	d
NDN_UTIL_SIGNAL_HPP	ndn-cxx/src/util/signal.hpp	23;"	d
NDN_UTIL_SIGNAL_SCOPED_CONNECTION_HPP	ndn-cxx/src/util/signal-scoped-connection.hpp	23;"	d
NDN_UTIL_SIGNAL_SIGNAL_HPP	ndn-cxx/src/util/signal-signal.hpp	23;"	d
NDN_UTIL_SQLITE3_STATEMENT_HPP	ndn-cxx/src/util/sqlite3-statement.hpp	23;"	d
NEW	NFD/daemon/fw/retx-suppression.hpp	/^    NEW,$/;"	e	enum:nfd::fw::RetxSuppression::Result
NFD_COMMON_HPP	NFD/common.hpp	27;"	d
NFD_CORE_ALGORITHM_HPP	NFD/core/algorithm.hpp	27;"	d
NFD_CORE_CONFIG_FILE_HPP	NFD/core/config-file.hpp	26;"	d
NFD_CORE_GLOBAL_IO_HPP	NFD/core/global-io.hpp	26;"	d
NFD_CORE_LOGGER_HPP	NFD/core/logger.hpp	27;"	d
NFD_CORE_NETWORK_HPP	NFD/core/network.hpp	27;"	d
NFD_CORE_NETWORK_INTERFACE_HPP	NFD/core/network-interface.hpp	27;"	d
NFD_CORE_NOTIFICATION_STREAM_HPP	NFD/core/notification-stream.hpp	27;"	d
NFD_CORE_PRIVILEGE_HELPER_HPP	NFD/core/privilege-helper.hpp	27;"	d
NFD_CORE_RANDOM_HPP	NFD/core/random.hpp	36;"	d
NFD_CORE_SCHEDULER_HPP	NFD/core/scheduler.hpp	27;"	d
NFD_CORE_SEGMENT_PUBLISHER_HPP	NFD/core/segment-publisher.hpp	27;"	d
NFD_DAEMON_FACE_CHANNEL_HPP	NFD/daemon/face/channel.hpp	26;"	d
NFD_DAEMON_FACE_DATAGRAM_FACE_HPP	NFD/daemon/face/datagram-face.hpp	27;"	d
NFD_DAEMON_FACE_ETHERNET_FACE_HPP	NFD/daemon/face/ethernet-face.hpp	27;"	d
NFD_DAEMON_FACE_ETHERNET_FACTORY_HPP	NFD/daemon/face/ethernet-factory.hpp	27;"	d
NFD_DAEMON_FACE_FACE_COUNTERS_HPP	NFD/daemon/face/face-counters.hpp	27;"	d
NFD_DAEMON_FACE_FACE_HPP	NFD/daemon/face/face.hpp	27;"	d
NFD_DAEMON_FACE_LOCAL_FACE_HPP	NFD/daemon/face/local-face.hpp	27;"	d
NFD_DAEMON_FACE_MULTICAST_UDP_FACE_HPP	NFD/daemon/face/multicast-udp-face.hpp	27;"	d
NFD_DAEMON_FACE_NDNLP_PARSE_HPP	NFD/daemon/face/ndnlp-data.hpp	27;"	d
NFD_DAEMON_FACE_NDNLP_PARTIAL_MESSAGE_STORE_HPP	NFD/daemon/face/ndnlp-partial-message-store.hpp	27;"	d
NFD_DAEMON_FACE_NDNLP_SEQUENCE_GENERATOR_HPP	NFD/daemon/face/ndnlp-sequence-generator.hpp	26;"	d
NFD_DAEMON_FACE_NDNLP_SLICER_HPP	NFD/daemon/face/ndnlp-slicer.hpp	27;"	d
NFD_DAEMON_FACE_NDNLP_TLV_HPP	NFD/daemon/face/ndnlp-tlv.hpp	26;"	d
NFD_DAEMON_FACE_NULL_FACE_HPP	NFD/daemon/face/null-face.hpp	27;"	d
NFD_DAEMON_FACE_PROTOCOL_FACTORY_HPP	NFD/daemon/face/protocol-factory.hpp	27;"	d
NFD_DAEMON_FACE_STREAM_FACE_HPP	NFD/daemon/face/stream-face.hpp	27;"	d
NFD_DAEMON_FACE_TCP_CHANNEL_HPP	NFD/daemon/face/tcp-channel.hpp	27;"	d
NFD_DAEMON_FACE_TCP_FACE_HPP	NFD/daemon/face/tcp-face.hpp	26;"	d
NFD_DAEMON_FACE_TCP_FACTORY_HPP	NFD/daemon/face/tcp-factory.hpp	27;"	d
NFD_DAEMON_FACE_UDP_CHANNEL_HPP	NFD/daemon/face/udp-channel.hpp	27;"	d
NFD_DAEMON_FACE_UDP_FACE_HPP	NFD/daemon/face/udp-face.hpp	27;"	d
NFD_DAEMON_FACE_UDP_FACTORY_HPP	NFD/daemon/face/udp-factory.hpp	27;"	d
NFD_DAEMON_FACE_UNIX_STREAM_CHANNEL_HPP	NFD/daemon/face/unix-stream-channel.hpp	26;"	d
NFD_DAEMON_FACE_UNIX_STREAM_FACE_HPP	NFD/daemon/face/unix-stream-face.hpp	26;"	d
NFD_DAEMON_FACE_UNIX_STREAM_FACTORY_HPP	NFD/daemon/face/unix-stream-factory.hpp	27;"	d
NFD_DAEMON_FACE_WEBSOCKETPP_HPP	NFD/daemon/face/websocketpp.hpp	27;"	d
NFD_DAEMON_FACE_WEBSOCKET_CHANNEL_HPP	NFD/daemon/face/websocket-channel.hpp	27;"	d
NFD_DAEMON_FACE_WEBSOCKET_FACE_HPP	NFD/daemon/face/websocket-face.hpp	27;"	d
NFD_DAEMON_FACE_WEBSOCKET_FACTORY_HPP	NFD/daemon/face/websocket-factory.hpp	27;"	d
NFD_DAEMON_FW_ACCESS_STRATEGY_HPP	NFD/daemon/fw/access-strategy.hpp	27;"	d
NFD_DAEMON_FW_BEST_ROUTE_STRATEGY2_HPP	NFD/daemon/fw/best-route-strategy2.hpp	27;"	d
NFD_DAEMON_FW_BEST_ROUTE_STRATEGY_HPP	NFD/daemon/fw/best-route-strategy.hpp	27;"	d
NFD_DAEMON_FW_BROADCAST_STRATEGY_HPP	NFD/daemon/fw/broadcast-strategy.hpp	27;"	d
NFD_DAEMON_FW_CLIENT_CONTROL_STRATEGY_HPP	NFD/daemon/fw/client-control-strategy.hpp	27;"	d
NFD_DAEMON_FW_FACE_TABLE_HPP	NFD/daemon/fw/face-table.hpp	27;"	d
NFD_DAEMON_FW_FORWARDER_COUNTERS_HPP	NFD/daemon/fw/forwarder-counters.hpp	27;"	d
NFD_DAEMON_FW_FORWARDER_HPP	NFD/daemon/fw/forwarder.hpp	27;"	d
NFD_DAEMON_FW_MULTICAST_STRATEGY_HPP	NFD/daemon/fw/multicast-strategy.hpp	27;"	d
NFD_DAEMON_FW_NCC_STRATEGY_HPP	NFD/daemon/fw/ncc-strategy.hpp	27;"	d
NFD_DAEMON_FW_RETX_SUPPRESSION_EXPONENTIAL_HPP	NFD/daemon/fw/retx-suppression-exponential.hpp	27;"	d
NFD_DAEMON_FW_RETX_SUPPRESSION_FIXED_HPP	NFD/daemon/fw/retx-suppression-fixed.hpp	27;"	d
NFD_DAEMON_FW_RETX_SUPPRESSION_HPP	NFD/daemon/fw/retx-suppression.hpp	27;"	d
NFD_DAEMON_FW_RTT_ESTIMATOR_HPP	NFD/daemon/fw/rtt-estimator.hpp	27;"	d
NFD_DAEMON_FW_STRATEGY_HPP	NFD/daemon/fw/strategy.hpp	27;"	d
NFD_DAEMON_FW_STRATEGY_INFO_HPP	NFD/daemon/fw/strategy-info.hpp	27;"	d
NFD_DAEMON_FW_STRATEGY_REGISTRY_HPP	NFD/daemon/fw/strategy-registry.hpp	27;"	d
NFD_DAEMON_MGMT_APP_FACE_HPP	NFD/daemon/mgmt/app-face.hpp	27;"	d
NFD_DAEMON_MGMT_CHANNEL_STATUS_PUBLISHER_HPP	NFD/daemon/mgmt/channel-status-publisher.hpp	27;"	d
NFD_DAEMON_MGMT_COMMAND_VALIDATOR_HPP	NFD/daemon/mgmt/command-validator.hpp	26;"	d
NFD_DAEMON_MGMT_FACE_MANAGER_HPP	NFD/daemon/mgmt/face-manager.hpp	27;"	d
NFD_DAEMON_MGMT_FACE_STATUS_PUBLISHER_HPP	NFD/daemon/mgmt/face-status-publisher.hpp	27;"	d
NFD_DAEMON_MGMT_FIB_ENUMERATION_PUBLISHER_HPP	NFD/daemon/mgmt/fib-enumeration-publisher.hpp	27;"	d
NFD_DAEMON_MGMT_FIB_MANAGER_HPP	NFD/daemon/mgmt/fib-manager.hpp	27;"	d
NFD_DAEMON_MGMT_INTERNAL_FACE_HPP	NFD/daemon/mgmt/internal-face.hpp	27;"	d
NFD_DAEMON_MGMT_MANAGER_BASE_HPP	NFD/daemon/mgmt/manager-base.hpp	27;"	d
NFD_DAEMON_MGMT_QUERIED_FACE_STATUS_PUBLISHER_HPP	NFD/daemon/mgmt/face-query-status-publisher.hpp	27;"	d
NFD_DAEMON_MGMT_STATUS_SERVER_HPP	NFD/daemon/mgmt/status-server.hpp	27;"	d
NFD_DAEMON_MGMT_STRATEGY_CHOICE_MANAGER_HPP	NFD/daemon/mgmt/strategy-choice-manager.hpp	27;"	d
NFD_DAEMON_MGMT_STRATEGY_CHOICE_PUBLISHER_HPP	NFD/daemon/mgmt/strategy-choice-publisher.hpp	27;"	d
NFD_DAEMON_NFD_HPP	NFD/daemon/nfd.hpp	27;"	d
NFD_DAEMON_TABLE_CS_ENTRY_HPP	NFD/daemon/table/cs-entry.hpp	27;"	d
NFD_DAEMON_TABLE_CS_ENTRY_IMPL_HPP	NFD/daemon/table/cs-entry-impl.hpp	27;"	d
NFD_DAEMON_TABLE_CS_HPP	NFD/daemon/table/cs.hpp	49;"	d
NFD_DAEMON_TABLE_CS_INTERNAL_HPP	NFD/daemon/table/cs-internal.hpp	31;"	d
NFD_DAEMON_TABLE_CS_POLICY_FIFO_HPP	NFD/daemon/table/cs-policy-priority-fifo.hpp	27;"	d
NFD_DAEMON_TABLE_CS_POLICY_HPP	NFD/daemon/table/cs-policy.hpp	27;"	d
NFD_DAEMON_TABLE_CS_POLICY_LRU_HPP	NFD/daemon/table/cs-policy-lru.hpp	27;"	d
NFD_DAEMON_TABLE_DEAD_NONCE_LIST_HPP	NFD/daemon/table/dead-nonce-list.hpp	27;"	d
NFD_DAEMON_TABLE_FIB_ENTRY_HPP	NFD/daemon/table/fib-entry.hpp	27;"	d
NFD_DAEMON_TABLE_FIB_HPP	NFD/daemon/table/fib.hpp	27;"	d
NFD_DAEMON_TABLE_FIB_NEXTHOP_HPP	NFD/daemon/table/fib-nexthop.hpp	27;"	d
NFD_DAEMON_TABLE_MEASUREMENTS_ACCESSOR_HPP	NFD/daemon/table/measurements-accessor.hpp	27;"	d
NFD_DAEMON_TABLE_MEASUREMENTS_ENTRY_HPP	NFD/daemon/table/measurements-entry.hpp	27;"	d
NFD_DAEMON_TABLE_MEASUREMENTS_HPP	NFD/daemon/table/measurements.hpp	27;"	d
NFD_DAEMON_TABLE_NAME_TREE_ENTRY_HPP	NFD/daemon/table/name-tree-entry.hpp	27;"	d
NFD_DAEMON_TABLE_NAME_TREE_HPP	NFD/daemon/table/name-tree.hpp	27;"	d
NFD_DAEMON_TABLE_PIT_ENTRY_HPP	NFD/daemon/table/pit-entry.hpp	27;"	d
NFD_DAEMON_TABLE_PIT_FACE_RECORD_HPP	NFD/daemon/table/pit-face-record.hpp	27;"	d
NFD_DAEMON_TABLE_PIT_HPP	NFD/daemon/table/pit.hpp	27;"	d
NFD_DAEMON_TABLE_PIT_IN_RECORD_HPP	NFD/daemon/table/pit-in-record.hpp	27;"	d
NFD_DAEMON_TABLE_PIT_OUT_RECORD_HPP	NFD/daemon/table/pit-out-record.hpp	26;"	d
NFD_DAEMON_TABLE_STRATEGY_CHOICE_ENTRY_HPP	NFD/daemon/table/strategy-choice-entry.hpp	27;"	d
NFD_DAEMON_TABLE_STRATEGY_CHOICE_HPP	NFD/daemon/table/strategy-choice.hpp	27;"	d
NFD_DAEMON_TABLE_STRATEGY_INFO_HOST_HPP	NFD/daemon/table/strategy-info-host.hpp	27;"	d
NFD_LOG_DEBUG	NFD/core/logger.hpp	36;"	d
NFD_LOG_ERROR	NFD/core/logger.hpp	38;"	d
NFD_LOG_FACE	NFD/daemon/face/face.hpp	314;"	d
NFD_LOG_FACE_DEBUG	NFD/daemon/face/face.hpp	324;"	d
NFD_LOG_FACE_ERROR	NFD/daemon/face/face.hpp	333;"	d
NFD_LOG_FACE_INFO	NFD/daemon/face/face.hpp	327;"	d
NFD_LOG_FACE_TRACE	NFD/daemon/face/face.hpp	321;"	d
NFD_LOG_FACE_WARN	NFD/daemon/face/face.hpp	330;"	d
NFD_LOG_FATAL	NFD/core/logger.hpp	40;"	d
NFD_LOG_INFO	NFD/core/logger.hpp	37;"	d
NFD_LOG_INIT	NFD/core/logger.hpp	33;"	d
NFD_LOG_TRACE	NFD/core/logger.hpp	35;"	d
NFD_LOG_WARN	NFD/core/logger.hpp	39;"	d
NFD_MGMT_GENERAL_CONFIG_SECTION_HPP	NFD/daemon/mgmt/general-config-section.hpp	26;"	d
NFD_MGMT_TABLES_CONFIG_SECTION_HPP	NFD/daemon/mgmt/tables-config-section.hpp	27;"	d
NFD_REGISTER_STRATEGY	NFD/daemon/fw/strategy-registry.hpp	65;"	d
NFD_RIB_FIB_UPDATER_HPP	NFD/rib/fib-updater.hpp	27;"	d
NFD_RIB_FIB_UPDATE_HPP	NFD/rib/fib-update.hpp	27;"	d
NFD_RIB_NRD_HPP	NFD/rib/nrd.hpp	27;"	d
NFD_RIB_REMOTE_REGISTRATOR_HPP	NFD/rib/remote-registrator.hpp	27;"	d
NFD_RIB_RIB_ENTRY_HPP	NFD/rib/rib-entry.hpp	27;"	d
NFD_RIB_RIB_HPP	NFD/rib/rib.hpp	27;"	d
NFD_RIB_RIB_MANAGER_HPP	NFD/rib/rib-manager.hpp	27;"	d
NFD_RIB_RIB_STATUS_PUBLISHER_HPP	NFD/rib/rib-status-publisher.hpp	27;"	d
NFD_RIB_RIB_UPDATE_BATCH_HPP	NFD/rib/rib-update-batch.hpp	27;"	d
NFD_RIB_RIB_UPDATE_HPP	NFD/rib/rib-update.hpp	27;"	d
NFD_RIB_ROUTE_HPP	NFD/rib/route.hpp	27;"	d
NFD_TESTS_BOOST_TEST_HPP	NFD/tests/boost-test.hpp	27;"	d
NFD_TESTS_CORE_SIMPLE_NOTIFICATION_HPP	NFD/tests/core/simple-notification.hpp	27;"	d
NFD_TESTS_DAEMON_FACE_DUMMY_FACE_HPP	NFD/tests/daemon/face/dummy-face.hpp	27;"	d
NFD_TESTS_DAEMON_FACE_DUMMY_STREAM_SENDER_HPP	NFD/tests/daemon/face/dummy-stream-sender.hpp	27;"	d
NFD_TESTS_DAEMON_FACE_FACE_HISTORY_HPP	NFD/tests/daemon/face/face-history.hpp	27;"	d
NFD_TESTS_DAEMON_FACE_PACKET_DATASETS_HPP	NFD/tests/daemon/face/packet-datasets.hpp	27;"	d
NFD_TESTS_DAEMON_FW_DUMMY_STRATEGY_HPP	NFD/tests/daemon/fw/dummy-strategy.hpp	27;"	d
NFD_TESTS_LIMITED_IO_HPP	NFD/tests/limited-io.hpp	27;"	d
NFD_TESTS_NFD_FW_STRATEGY_TESTER_HPP	NFD/tests/daemon/fw/strategy-tester.hpp	27;"	d
NFD_TESTS_NFD_FW_TOPOLOGY_TESTER_HPP	NFD/tests/daemon/fw/topology-tester.hpp	31;"	d
NFD_TESTS_NFD_MGMT_CHANNEL_STATUS_COMMON_HPP	NFD/tests/daemon/mgmt/channel-status-common.hpp	27;"	d
NFD_TESTS_NFD_MGMT_FACE_QUERY_STATUS_PUBLISHER_COMMON_HPP	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	27;"	d
NFD_TESTS_NFD_MGMT_FACE_STATUS_PUBLISHER_COMMON_HPP	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	27;"	d
NFD_TESTS_NFD_MGMT_FIB_ENUMERATION_PUBLISHER_COMMON_HPP	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	27;"	d
NFD_TESTS_NFD_MGMT_STRATEGY_CHOICE_PUBLISHER_HPP	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	27;"	d	file:
NFD_TESTS_NFD_MGMT_VALIDATION_COMMON_HPP	NFD/tests/daemon/mgmt/validation-common.hpp	26;"	d
NFD_TESTS_TEST_COMMON_HPP	NFD/tests/test-common.hpp	27;"	d
NFD_TOOLS_NDN_AUTOCONFIG_BASE_DNS_HPP	NFD/tools/ndn-autoconfig/base-dns.hpp	27;"	d
NFD_TOOLS_NDN_AUTOCONFIG_BASE_HPP	NFD/tools/ndn-autoconfig/base.hpp	27;"	d
NFD_TOOLS_NDN_AUTOCONFIG_GUESS_FROM_IDENTITY_NAME_HPP	NFD/tools/ndn-autoconfig/guess-from-identity-name.hpp	27;"	d
NFD_TOOLS_NDN_AUTOCONFIG_GUESS_FROM_SEARCH_DOMAINS_HPP	NFD/tools/ndn-autoconfig/guess-from-search-domains.hpp	27;"	d
NFD_TOOLS_NDN_AUTOCONFIG_MULTICAST_DISCOVERY_HPP	NFD/tools/ndn-autoconfig/multicast-discovery.hpp	27;"	d
NFD_TOOLS_NFDC_HPP	NFD/tools/nfdc.hpp	27;"	d
NFibEntries	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  NFibEntries          = 132,$/;"	e	enum:ndn::tlv::nfd::__anon11
NInBytes	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  NInBytes      = 148,$/;"	e	enum:ndn::tlv::nfd::__anon11
NInDatas	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  NInDatas      = 145,$/;"	e	enum:ndn::tlv::nfd::__anon11
NInInterests	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  NInInterests  = 144,$/;"	e	enum:ndn::tlv::nfd::__anon11
NMeasurementsEntries	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  NMeasurementsEntries = 134,$/;"	e	enum:ndn::tlv::nfd::__anon11
NNameTreeEntries	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  NNameTreeEntries     = 131,$/;"	e	enum:ndn::tlv::nfd::__anon11
NOMINMAX	NFD/websocketpp/websocketpp/common/platforms.hpp	38;"	d
NONE	ndn-cxx/src/lp/cache-policy.hpp	/^  NONE = 0,$/;"	m	class:ndn::lp::CachePolicyType
NONE	ndn-cxx/src/lp/nack-header.hpp	/^  NONE = 0,$/;"	m	class:ndn::lp::NackReason
NOT_AFTER_OFFSET	ndn-cxx/src/security/validity-period.cpp	/^static const size_t NOT_AFTER_OFFSET = 1;$/;"	m	namespace:ndn::security	file:
NOT_BEFORE_OFFSET	ndn-cxx/src/security/validity-period.cpp	/^static const size_t NOT_BEFORE_OFFSET = 0;$/;"	m	namespace:ndn::security	file:
NO_CACHE	ndn-cxx/src/lp/cache-policy.hpp	/^  NO_CACHE = 1$/;"	m	class:ndn::lp::CachePolicyType
NO_ENCODING	ndn-cxx/src/util/io.hpp	/^  NO_ENCODING,$/;"	e	enum:ndn::io::IoEncoding
NO_ROUTE	ndn-cxx/src/lp/nack-header.hpp	/^  NO_ROUTE = 150$/;"	m	class:ndn::lp::NackReason
NO_WORK	NFD/tests/limited-io.hpp	/^    NO_WORK,$/;"	e	enum:nfd::tests::LimitedIo::StopReason
NOutBytes	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  NOutBytes     = 149,$/;"	e	enum:ndn::tlv::nfd::__anon11
NOutDatas	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  NOutDatas     = 147,$/;"	e	enum:ndn::tlv::nfd::__anon11
NOutInterests	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  NOutInterests = 146,$/;"	e	enum:ndn::tlv::nfd::__anon11
NPitEntries	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  NPitEntries          = 133,$/;"	e	enum:ndn::tlv::nfd::__anon11
NS_OBJECT_ENSURE_REGISTERED_TEMPL	model/cs/content-store-impl.cpp	29;"	d	file:
NS_OBJECT_ENSURE_REGISTERED_TEMPL	model/cs/content-store-with-freshness.cpp	27;"	d	file:
NS_OBJECT_ENSURE_REGISTERED_TEMPL	model/cs/content-store-with-probability.cpp	27;"	d	file:
NS_OBJECT_ENSURE_REGISTERED_TEMPL	model/cs/content-store-with-stats.cpp	27;"	d	file:
NULL_PORT	ndn-cxx/src/util/dns.cpp	/^  static const std::string NULL_PORT;$/;"	m	class:ndn::dns::Resolver	file:
NULL_PORT	ndn-cxx/src/util/dns.cpp	/^const std::string Resolver::NULL_PORT = "";$/;"	m	class:ndn::dns::Resolver	file:
N_BUCKETS	NFD/tests/daemon/table/name-tree.t.cpp	/^  static const size_t N_BUCKETS = 16;$/;"	m	class:nfd::tests::EnumerationFixture	file:
N_BUCKETS	NFD/tests/daemon/table/name-tree.t.cpp	/^const size_t EnumerationFixture::N_BUCKETS;$/;"	m	class:nfd::tests::EnumerationFixture	file:
Nack	ndn-cxx/src/lp/nack.cpp	/^Nack::Nack(Interest&& interest)$/;"	f	class:ndn::lp::Nack
Nack	ndn-cxx/src/lp/nack.cpp	/^Nack::Nack(const Interest& interest)$/;"	f	class:ndn::lp::Nack
Nack	ndn-cxx/src/lp/nack.hpp	/^class Nack : public TagHost$/;"	c	namespace:ndn::lp
Nack	ndn-cxx/src/lp/tlv.hpp	/^  Nack = 800,$/;"	e	enum:ndn::lp::tlv::__anon4
NackField	ndn-cxx/src/lp/fields.hpp	/^                          tlv::Nack> NackField;$/;"	t	namespace:ndn::lp
NackHeader	ndn-cxx/src/lp/nack-header.cpp	/^NackHeader::NackHeader()$/;"	f	class:ndn::lp::NackHeader
NackHeader	ndn-cxx/src/lp/nack-header.cpp	/^NackHeader::NackHeader(const Block& block)$/;"	f	class:ndn::lp::NackHeader
NackHeader	ndn-cxx/src/lp/nack-header.hpp	/^class NackHeader$/;"	c	class:ndn::lp::NackReason
NackReason	ndn-cxx/src/lp/nack-header.hpp	/^enum class NackReason {$/;"	c	namespace:ndn::lp
NackReason	ndn-cxx/src/lp/tlv.hpp	/^  NackReason = 801,$/;"	e	enum:ndn::lp::tlv::__anon4
Name	ndn-cxx/src/encoding/tlv.hpp	/^  Name          = 7,$/;"	e	enum:ndn::tlv::__anon8
Name	ndn-cxx/src/name.cpp	/^Name::Name()$/;"	f	class:ndn::Name
Name	ndn-cxx/src/name.cpp	/^Name::Name(const Block& wire)$/;"	f	class:ndn::Name
Name	ndn-cxx/src/name.cpp	/^Name::Name(const char* uri)$/;"	f	class:ndn::Name
Name	ndn-cxx/src/name.cpp	/^Name::Name(const std::string& uri)$/;"	f	class:ndn::Name
Name	ndn-cxx/src/name.hpp	/^class Name : public enable_shared_from_this<Name>$/;"	c	namespace:ndn
Name1	ndn-cxx/tests/unit-tests/name.t.cpp	/^const uint8_t Name1[] = {0x7,  0x7, \/\/ Name$/;"	m	namespace:ndn::tests	file:
Name2	ndn-cxx/tests/unit-tests/name.t.cpp	/^const uint8_t Name2[] = {0x7,  0xc, \/\/ Name$/;"	m	namespace:ndn::tests	file:
NameAndRoute	NFD/rib/rib.hpp	/^  typedef std::pair<const Name&,const Route&> NameAndRoute;$/;"	t	class:nfd::rib::Rib
NameCallback	tests/unit-tests/ndn-cxx/face.t.cpp	/^  typedef std::function<void(const Name&)> NameCallback;$/;"	t	class:ns3::ndn::BaseTesterApp	file:
NameComponent	ndn-cxx/src/encoding/tlv.hpp	/^  NameComponent = 8,$/;"	e	enum:ndn::tlv::__anon8
NameGenerator	NFD/tests/other/cs-benchmark.cpp	/^  typedef std::function<Name(size_t)> NameGenerator;$/;"	t	class:nfd::tests::CsBenchmarkFixture	file:
NameTree	NFD/daemon/table/name-tree.cpp	/^NameTree::NameTree(size_t nBuckets)$/;"	f	class:nfd::NameTree
NameTree	NFD/daemon/table/name-tree.hpp	/^class NameTree : noncopyable$/;"	c	namespace:nfd
NccStrategy	NFD/daemon/fw/ncc-strategy.cpp	/^NccStrategy::NccStrategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::NccStrategy
NccStrategy	NFD/daemon/fw/ncc-strategy.hpp	/^class NccStrategy : public Strategy$/;"	c	namespace:nfd::fw
NdnAutoconfig	NFD/tools/ndn-autoconfig/main.cpp	/^  NdnAutoconfig(bool isDaemonMode)$/;"	f	class:ndn::tools::NdnAutoconfig
NdnAutoconfig	NFD/tools/ndn-autoconfig/main.cpp	/^class NdnAutoconfig : boost::noncopyable$/;"	c	namespace:ndn::tools	file:
NdnAutoconfigServer	NFD/tools/ndn-autoconfig-server.cpp	/^  NdnAutoconfigServer(const std::string& hubFaceUri, const PrefixCollection& routablePrefixes)$/;"	f	class:ndn::NdnAutoconfigServer
NdnAutoconfigServer	NFD/tools/ndn-autoconfig-server.cpp	/^class NdnAutoconfigServer : noncopyable$/;"	c	namespace:ndn	file:
NdnGlobalRouterGraph	helper/boost-graph-ndn-global-routing-helper.hpp	/^  NdnGlobalRouterGraph()$/;"	f	class:boost::NdnGlobalRouterGraph
NdnGlobalRouterGraph	helper/boost-graph-ndn-global-routing-helper.hpp	/^class NdnGlobalRouterGraph {$/;"	c	namespace:boost
NdnTlvPeek	NFD/tools/ndn-tlv-peek.cpp	/^  NdnTlvPeek(char* programName)$/;"	f	class:ndntlvpeek::NdnTlvPeek
NdnTlvPeek	NFD/tools/ndn-tlv-peek.cpp	/^class NdnTlvPeek : boost::noncopyable$/;"	c	namespace:ndntlvpeek	file:
NdnTlvPoke	NFD/tools/ndn-tlv-poke.cpp	/^  NdnTlvPoke(char* programName)$/;"	f	class:ndntlvpoke::NdnTlvPoke
NdnTlvPoke	NFD/tools/ndn-tlv-poke.cpp	/^class NdnTlvPoke : boost::noncopyable$/;"	c	namespace:ndntlvpoke	file:
NdnlpData	NFD/daemon/face/ndnlp-data.hpp	/^class NdnlpData$/;"	c	namespace:nfd::ndnlp
NdnlpData	NFD/daemon/face/ndnlp-tlv.hpp	/^  NdnlpData      = 80,$/;"	e	enum:nfd::tlv::__anon13
NdnlpFragCount	NFD/daemon/face/ndnlp-tlv.hpp	/^  NdnlpFragCount = 83,$/;"	e	enum:nfd::tlv::__anon13
NdnlpFragIndex	NFD/daemon/face/ndnlp-tlv.hpp	/^  NdnlpFragIndex = 82,$/;"	e	enum:nfd::tlv::__anon13
NdnlpPayload	NFD/daemon/face/ndnlp-tlv.hpp	/^  NdnlpPayload   = 84$/;"	e	enum:nfd::tlv::__anon13
NdnlpSequence	NFD/daemon/face/ndnlp-tlv.hpp	/^  NdnlpSequence  = 81,$/;"	e	enum:nfd::tlv::__anon13
NetDeviceCallbackList	helper/ndn-stack-helper.hpp	/^  typedef std::list<std::pair<TypeId, NetDeviceFaceCreateCallback>> NetDeviceCallbackList;$/;"	t	class:ns3::ndn::StackHelper
NetDeviceFace	model/ndn-net-device-face.cpp	/^NetDeviceFace::NetDeviceFace(Ptr<Node> node, const Ptr<NetDevice>& netDevice)$/;"	f	class:ns3::ndn::NetDeviceFace
NetDeviceFace	model/ndn-net-device-face.hpp	/^class NetDeviceFace : public Face {$/;"	c	namespace:ns3::ndn
NetDeviceFaceCreateCallback	helper/ndn-stack-helper.hpp	/^    NetDeviceFaceCreateCallback;$/;"	t	class:ns3::ndn::StackHelper
Network	NFD/core/network.hpp	/^  Network()$/;"	f	class:nfd::Network
Network	NFD/core/network.hpp	/^  Network(const boost::asio::ip::address& minAddress,$/;"	f	class:nfd::Network
Network	NFD/core/network.hpp	/^class Network$/;"	c	namespace:nfd
NetworkConfigurationDetector	ndn-cxx/tests/unit-tests/network-configuration-detector.hpp	/^class NetworkConfigurationDetector$/;"	c	namespace:ndn::tests
NetworkInterfaceInfo	NFD/core/network-interface.hpp	/^class NetworkInterfaceInfo$/;"	c	namespace:nfd
NetworkLayerCounters	NFD/daemon/face/face-counters.hpp	/^class NetworkLayerCounters : noncopyable$/;"	c	namespace:nfd
NetworkMonitor	ndn-cxx/src/util/network-monitor.cpp	/^NetworkMonitor::NetworkMonitor(boost::asio::io_service& io)$/;"	f	class:ndn::util::NetworkMonitor
NetworkMonitor	ndn-cxx/src/util/network-monitor.hpp	/^class NetworkMonitor : boost::noncopyable$/;"	c	namespace:ndn::util
Next	model/cs/content-store-impl.hpp	/^ContentStoreImpl<Policy>::Next(Ptr<Entry> from)$/;"	f	class:ns3::ndn::cs::ContentStoreImpl
Next	model/cs/content-store-nocache.cpp	/^Ptr<cs::Entry> Nocache::Next(Ptr<cs::Entry>)$/;"	f	class:ns3::ndn::cs::Nocache
NextHop	NFD/daemon/table/fib-nexthop.cpp	/^NextHop::NextHop(shared_ptr<Face> face)$/;"	f	class:nfd::fib::NextHop
NextHop	NFD/daemon/table/fib-nexthop.hpp	/^class NextHop$/;"	c	namespace:nfd::fib
NextHopFaceId	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  NextHopFaceId      = 82,$/;"	e	enum:ndn::tlv::nfd::__anon12
NextHopFaceId	ndn-cxx/src/lp/tlv.hpp	/^  NextHopFaceId = 816,$/;"	e	enum:ndn::lp::tlv::__anon4
NextHopFaceIdField	ndn-cxx/src/lp/fields.hpp	/^                          tlv::NextHopFaceId> NextHopFaceIdField;$/;"	t	namespace:ndn::lp
NextHopList	NFD/daemon/table/fib-entry.hpp	/^typedef std::vector<fib::NextHop> NextHopList;$/;"	t	namespace:nfd::fib
NextHopRecord	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  NextHopRecord = 129,$/;"	e	enum:ndn::tlv::nfd::__anon11
NextHopRecord	ndn-cxx/src/management/nfd-fib-entry.cpp	/^NextHopRecord::NextHopRecord()$/;"	f	class:ndn::nfd::NextHopRecord
NextHopRecord	ndn-cxx/src/management/nfd-fib-entry.cpp	/^NextHopRecord::NextHopRecord(const Block& block)$/;"	f	class:ndn::nfd::NextHopRecord
NextHopRecord	ndn-cxx/src/management/nfd-fib-entry.hpp	/^class NextHopRecord$/;"	c	namespace:ndn::nfd
NextStageCallback	NFD/tools/ndn-autoconfig/base.hpp	/^  typedef std::function<void(const std::string&)> NextStageCallback;$/;"	t	class:ndn::tools::autoconfig::Base
Nfd	NFD/daemon/nfd.cpp	/^Nfd::Nfd(const ConfigSection& config, ndn::KeyChain& keyChain)$/;"	f	class:nfd::Nfd
Nfd	NFD/daemon/nfd.cpp	/^Nfd::Nfd(const std::string& configFile, ndn::KeyChain& keyChain)$/;"	f	class:nfd::Nfd
Nfd	NFD/daemon/nfd.hpp	/^class Nfd : noncopyable$/;"	c	namespace:nfd
NfdFace	ndn-cxx/src/detail/face-impl.hpp	/^    NfdFace(Impl& face, const ::nfd::FaceUri& localUri, const ::nfd::FaceUri& remoteUri)$/;"	f	class:ndn::Face::Impl::NfdFace
NfdFace	ndn-cxx/src/detail/face-impl.hpp	/^  class NfdFace : public ::nfd::LocalFace$/;"	c	class:ndn::Face::Impl
NfdRunner	NFD/daemon/main.cpp	/^  NfdRunner(const std::string& configFile)$/;"	f	class:nfd::NfdRunner
NfdRunner	NFD/daemon/main.cpp	/^class NfdRunner : noncopyable$/;"	c	namespace:nfd	file:
NfdStatus	NFD/tools/nfd-status.cpp	/^  NfdStatus(char* toolName)$/;"	f	class:ndn::NfdStatus
NfdStatus	NFD/tools/nfd-status.cpp	/^class NfdStatus$/;"	c	namespace:ndn	file:
NfdVersion	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  NfdVersion           = 128,$/;"	e	enum:ndn::tlv::nfd::__anon11
Nfdc	NFD/tools/nfdc.cpp	/^Nfdc::Nfdc(ndn::Face& face)$/;"	f	class:nfdc::Nfdc
Nfdc	NFD/tools/nfdc.hpp	/^class Nfdc : boost::noncopyable$/;"	c	namespace:nfdc
NndCxxFaceFixture	tests/unit-tests/ndn-cxx/face.t.cpp	/^  NndCxxFaceFixture()$/;"	f	class:ns3::ndn::NndCxxFaceFixture
NndCxxFaceFixture	tests/unit-tests/ndn-cxx/face.t.cpp	/^class NndCxxFaceFixture : public ScenarioHelperWithCleanupFixture$/;"	c	namespace:ns3::ndn	file:
NoCache	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  NoCache            = 96$/;"	e	enum:ndn::tlv::nfd::__anon12
Nocache	model/cs/content-store-nocache.cpp	/^Nocache::Nocache()$/;"	f	class:ns3::ndn::cs::Nocache
Nocache	model/cs/content-store-nocache.hpp	/^class Nocache : public ContentStore {$/;"	c	namespace:ns3::ndn::cs
Node	NFD/daemon/table/name-tree-entry.cpp	/^Node::Node()$/;"	f	class:nfd::name_tree::Node
Node	NFD/daemon/table/name-tree-entry.hpp	/^class Node$/;"	c	namespace:nfd::name_tree
Nonce	ndn-cxx/src/encoding/tlv.hpp	/^  Nonce         = 10,$/;"	e	enum:ndn::tlv::__anon8
NotAfter	ndn-cxx/src/encoding/tlv.hpp	/^  NotAfter = 255,$/;"	e	enum:ndn::tlv::__anon9
NotBefore	ndn-cxx/src/encoding/tlv.hpp	/^  NotBefore = 254,$/;"	e	enum:ndn::tlv::__anon9
NotificationStream	NFD/core/notification-stream.hpp	/^  NotificationStream(FaceBase& face, const Name& prefix, ndn::KeyChain& keyChain)$/;"	f	class:nfd::NotificationStream
NotificationStream	NFD/core/notification-stream.hpp	/^class NotificationStream : noncopyable$/;"	c	namespace:nfd
NotificationStream	ndn-cxx/src/util/notification-stream.hpp	/^  NotificationStream(Face& face, const Name& prefix, KeyChain& keyChain)$/;"	f	class:ndn::util::NotificationStream
NotificationStream	ndn-cxx/src/util/notification-stream.hpp	/^class NotificationStream : noncopyable$/;"	c	namespace:ndn::util
NotificationSubscriber	ndn-cxx/src/util/notification-subscriber.hpp	/^  NotificationSubscriber(Face& face, const Name& prefix,$/;"	f	class:ndn::util::NotificationSubscriber
NotificationSubscriber	ndn-cxx/src/util/notification-subscriber.hpp	/^class NotificationSubscriber : noncopyable$/;"	c	namespace:ndn::util
NotifyNewAggregate	model/ndn-global-router.cpp	/^GlobalRouter::NotifyNewAggregate()$/;"	f	class:ns3::ndn::GlobalRouter
NotifyNewAggregate	model/ndn-l3-protocol.cpp	/^L3Protocol::NotifyNewAggregate()$/;"	f	class:ns3::ndn::L3Protocol
Nrd	NFD/rib/nrd.cpp	/^Nrd::Nrd(const ConfigSection& config, ndn::KeyChain& keyChain)$/;"	f	class:nfd::rib::Nrd
Nrd	NFD/rib/nrd.cpp	/^Nrd::Nrd(const std::string& configFile, ndn::KeyChain& keyChain)$/;"	f	class:nfd::rib::Nrd
Nrd	NFD/rib/nrd.hpp	/^class Nrd : noncopyable$/;"	c	namespace:nfd::rib
Ns3BufferIteratorSource	model/ndn-header.cpp	/^  Ns3BufferIteratorSource(ns3::Buffer::Iterator& is)$/;"	f	class:ns3::ndn::Ns3BufferIteratorSource
Ns3BufferIteratorSource	model/ndn-header.cpp	/^class Ns3BufferIteratorSource : public io::source {$/;"	c	namespace:ns3::ndn	file:
Ns3PacketTag	utils/ndn-ns3-packet-tag.hpp	/^  Ns3PacketTag(Ptr<const Packet> packet)$/;"	f	class:ns3::ndn::Ns3PacketTag
Ns3PacketTag	utils/ndn-ns3-packet-tag.hpp	/^class Ns3PacketTag : public ::ndn::Tag {$/;"	c	namespace:ns3::ndn
NullFace	NFD/daemon/face/null-face.cpp	/^NullFace::NullFace(const FaceUri& uri)$/;"	f	class:nfd::NullFace
NullFace	NFD/daemon/face/null-face.hpp	/^class NullFace : public Face$/;"	c	namespace:nfd
NullStrategy	tests/unit-tests/helper/ndn-strategy-choice-helper.t.cpp	/^  NullStrategy(nfd::Forwarder& forwarder)$/;"	f	class:ns3::ndn::NullStrategy
NullStrategy	tests/unit-tests/helper/ndn-strategy-choice-helper.t.cpp	/^class NullStrategy : public nfd::fw::Strategy {$/;"	c	namespace:ns3::ndn	file:
Numeric	ndn-cxx/tests/unit-tests/name.t.cpp	/^  Numeric()$/;"	f	class:ndn::tests::Numeric
Numeric	ndn-cxx/tests/unit-tests/name.t.cpp	/^class Numeric$/;"	c	namespace:ndn::tests	file:
OBufferStream	ndn-cxx/src/encoding/buffer-stream.hpp	/^  OBufferStream()$/;"	f	class:ndn::OBufferStream
OBufferStream	ndn-cxx/src/encoding/buffer-stream.hpp	/^class OBufferStream : public boost::iostreams::stream<iostreams::buffer_append_device>$/;"	c	namespace:ndn
OID	ndn-cxx/src/encoding/oid.cpp	/^OID::OID(const char* oid)$/;"	f	class:ndn::OID
OID	ndn-cxx/src/encoding/oid.cpp	/^OID::OID(const string& oid)$/;"	f	class:ndn::OID
OID	ndn-cxx/src/encoding/oid.hpp	/^  OID()$/;"	f	class:ndn::OID
OID	ndn-cxx/src/encoding/oid.hpp	/^  OID(const std::vector<int>& oid)$/;"	f	class:ndn::OID
OID	ndn-cxx/src/encoding/oid.hpp	/^class OID$/;"	c	namespace:ndn
OID_MAGIC_NUMBER	ndn-cxx/src/encoding/oid.cpp	/^static const int OID_MAGIC_NUMBER = 40;$/;"	m	namespace:ndn	file:
OnData	apps/ndn-app.cpp	/^App::OnData(shared_ptr<const Data> data)$/;"	f	class:ns3::ndn::App
OnData	apps/ndn-consumer-window.cpp	/^ConsumerWindow::OnData(shared_ptr<const Data> contentObject)$/;"	f	class:ns3::ndn::ConsumerWindow
OnData	apps/ndn-consumer.cpp	/^Consumer::OnData(shared_ptr<const Data> data)$/;"	f	class:ns3::ndn::Consumer
OnData	examples/ndn-custom-apps/custom-app.cpp	/^CustomApp::OnData(std::shared_ptr<const ndn::Data> data)$/;"	f	class:ns3::CustomApp
OnData	examples/ndn-simple-with-content-freshness/one-interest-requester.cpp	/^OneInterestRequester::OnData(std::shared_ptr<const ndn::Data> data)$/;"	f	class:ns3::OneInterestRequester
OnData	ndn-cxx/src/detail/pending-interest.hpp	/^  typedef function<void(const Interest&, Data&)> OnData;$/;"	t	class:ndn::PendingInterest
OnData	ndn-cxx/src/face.hpp	/^typedef function<void(const Interest&, Data&)> OnData;$/;"	t	namespace:ndn
OnDataCheckFailed	ndn-cxx/src/security/conf/checker.hpp	/^  typedef function<void(const shared_ptr<const Data>&, const std::string&)> OnDataCheckFailed;$/;"	t	class:ndn::security::conf::Checker
OnDataChecked	ndn-cxx/src/security/conf/checker.hpp	/^  typedef function<void(const shared_ptr<const Data>&)> OnDataChecked;$/;"	t	class:ndn::security::conf::Checker
OnDataValidated	ndn-cxx/src/security/validation-request.hpp	/^typedef function<void(const shared_ptr<const Data>&)> OnDataValidated;$/;"	t	namespace:ndn
OnDataValidationFailed	ndn-cxx/src/security/validation-request.hpp	/^                      const std::string&)> OnDataValidationFailed;$/;"	t	namespace:ndn
OnFailure	ndn-cxx/src/security/validator.hpp	/^  typedef function<void(const std::string&)> OnFailure;$/;"	t	class:ndn::Validator
OnInterest	NFD/daemon/mgmt/app-face.hpp	/^typedef function<void(const Name&, const Interest&)> OnInterest;$/;"	t	namespace:nfd
OnInterest	apps/ndn-app.cpp	/^App::OnInterest(shared_ptr<const Interest> interest)$/;"	f	class:ns3::ndn::App
OnInterest	apps/ndn-producer.cpp	/^Producer::OnInterest(shared_ptr<const Interest> interest)$/;"	f	class:ns3::ndn::Producer
OnInterest	examples/ndn-custom-apps/custom-app.cpp	/^CustomApp::OnInterest(std::shared_ptr<const ndn::Interest> interest)$/;"	f	class:ns3::CustomApp
OnInterest	examples/ndn-custom-apps/hijacker.cpp	/^Hijacker::OnInterest(std::shared_ptr<const ndn::Interest> interest)$/;"	f	class:ns3::Hijacker
OnInterest	ndn-cxx/src/face.hpp	/^typedef function<void (const InterestFilter&, const Interest&)> OnInterest;$/;"	t	namespace:ndn
OnInterestCheckFailed	ndn-cxx/src/security/conf/checker.hpp	/^                        const std::string&)> OnInterestCheckFailed;$/;"	t	class:ndn::security::conf::Checker
OnInterestChecked	ndn-cxx/src/security/conf/checker.hpp	/^  typedef function<void(const shared_ptr<const Interest>&)> OnInterestChecked;$/;"	t	class:ndn::security::conf::Checker
OnInterestValidated	ndn-cxx/src/security/validation-request.hpp	/^typedef function<void(const shared_ptr<const Interest>&)> OnInterestValidated;$/;"	t	namespace:ndn
OnInterestValidationFailed	ndn-cxx/src/security/validation-request.hpp	/^                      const std::string&)> OnInterestValidationFailed;$/;"	t	namespace:ndn
OnTimeout	apps/ndn-consumer-window.cpp	/^ConsumerWindow::OnTimeout(uint32_t sequenceNumber)$/;"	f	class:ns3::ndn::ConsumerWindow
OnTimeout	apps/ndn-consumer.cpp	/^Consumer::OnTimeout(uint32_t sequenceNumber)$/;"	f	class:ns3::ndn::Consumer
OnTimeout	ndn-cxx/src/detail/pending-interest.hpp	/^  typedef function<void(const Interest&)> OnTimeout;$/;"	t	class:ndn::PendingInterest
OnTimeout	ndn-cxx/src/face.hpp	/^typedef function<void(const Interest&)> OnTimeout;$/;"	t	namespace:ndn
OneInterestRequester	examples/ndn-simple-with-content-freshness/one-interest-requester.cpp	/^OneInterestRequester::OneInterestRequester()$/;"	f	class:ns3::OneInterestRequester
OneInterestRequester	examples/ndn-simple-with-content-freshness/one-interest-requester.hpp	/^class OneInterestRequester : public ndn::App {$/;"	c	namespace:ns3
Options	ndn-cxx/src/util/dummy-client-face.hpp	/^  struct Options$/;"	s	class:ndn::util::DummyClientFace
Origin	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  Origin              = 111,$/;"	e	enum:ndn::tlv::nfd::__anon11
OsxKeyChainTestFixture	ndn-cxx/tests/unit-tests/security/sec-tpm-osx.t.cpp	/^  OsxKeyChainTestFixture()$/;"	f	class:ndn::tests::OsxKeyChainTestFixture
OsxKeyChainTestFixture	ndn-cxx/tests/unit-tests/security/sec-tpm-osx.t.cpp	/^class OsxKeyChainTestFixture$/;"	c	namespace:ndn::tests	file:
OutData	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::OutData(const Data& data, const Face& face)$/;"	f	class:ns3::ndn::L3RateTracer
OutInterests	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::OutInterests(const Interest& interest, const Face& face)$/;"	f	class:ns3::ndn::L3RateTracer
OutRecord	NFD/daemon/table/pit-out-record.cpp	/^OutRecord::OutRecord(shared_ptr<Face> face)$/;"	f	class:nfd::pit::OutRecord
OutRecord	NFD/daemon/table/pit-out-record.hpp	/^class OutRecord : public FaceRecord$/;"	c	namespace:nfd::pit
OutRecordCollection	NFD/daemon/table/pit-entry.hpp	/^typedef std::list<OutRecord> OutRecordCollection;$/;"	t	namespace:nfd::pit
PARTIAL_ENUMERATE_TYPE	NFD/daemon/table/name-tree.hpp	/^    PARTIAL_ENUMERATE_TYPE,$/;"	e	enum:nfd::NameTree::IteratorType
PAYLOAD	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^        PAYLOAD = 1,$/;"	e	enum:websocketpp::processor::hybi00::state
PAYLOAD_POLICY_H_	utils/trie/payload-policy.hpp	21;"	d
PAYLOAD_VIOLATION	NFD/websocketpp/websocketpp/processors/base.hpp	/^    PAYLOAD_VIOLATION = 4 \/\/ Error was due to receiving invalid payload data$/;"	e	enum:websocketpp::processor::error_cat::value
PAYLOAD_WITH_INDEX_H_	utils/trie/payload-with-policy.hpp	21;"	d
PCAP_NETMASK_UNKNOWN	NFD/daemon/face/ethernet-face.cpp	56;"	d	file:
PERMUTE3	NFD/core/city-hash.cpp	138;"	d	file:
PERMUTE3	NFD/core/city-hash.cpp	139;"	d	file:
PERSISTENT_POLICY_H_	utils/trie/persistent-policy.hpp	21;"	d
PING	NFD/websocketpp/websocketpp/frame.hpp	/^        PING = 0x9,$/;"	e	enum:websocketpp::frame::opcode::value
POLICY_NAME	NFD/daemon/table/cs-policy-lru.cpp	/^const std::string LruPolicy::POLICY_NAME = "lru";$/;"	m	class:nfd::cs::lru::LruPolicy	file:
POLICY_NAME	NFD/daemon/table/cs-policy-lru.hpp	/^  static const std::string POLICY_NAME;$/;"	m	class:nfd::cs::lru::LruPolicy
POLICY_NAME	NFD/daemon/table/cs-policy-priority-fifo.cpp	/^const std::string PriorityFifoPolicy::POLICY_NAME = "fifo";$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy	file:
POLICY_NAME	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^  static const std::string POLICY_NAME;$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy
PONG	NFD/websocketpp/websocketpp/frame.hpp	/^        PONG = 0xA,$/;"	e	enum:websocketpp::frame::opcode::value
POSITIONS	utils/topology/rocketfuel-weights-reader.hpp	/^  enum { LINKS, WEIGHTS, LATENCIES, POSITIONS };$/;"	e	enum:ns3::RocketfuelWeightsReader::__anon1
POS_RANDOM_VAL	ndn-cxx/src/security/security-common.hpp	/^  POS_RANDOM_VAL = -3,$/;"	e	enum:ndn::signed_interest::__anon3
POS_RANDOM_VAL	ndn-cxx/src/util/command-interest-validator.hpp	/^    POS_RANDOM_VAL = -3,$/;"	e	enum:ndn::CommandInterestValidator::__anon6
POS_SIG_INFO	ndn-cxx/src/security/security-common.hpp	/^  POS_SIG_INFO = -2,$/;"	e	enum:ndn::signed_interest::__anon3
POS_SIG_INFO	ndn-cxx/src/util/command-interest-validator.hpp	/^    POS_SIG_INFO = -2,$/;"	e	enum:ndn::CommandInterestValidator::__anon6
POS_SIG_VALUE	ndn-cxx/src/security/security-common.hpp	/^  POS_SIG_VALUE = -1,$/;"	e	enum:ndn::signed_interest::__anon3
POS_SIG_VALUE	ndn-cxx/src/util/command-interest-validator.hpp	/^    POS_SIG_VALUE = -1,$/;"	e	enum:ndn::CommandInterestValidator::__anon6
POS_TIMESTAMP	ndn-cxx/src/security/security-common.hpp	/^  POS_TIMESTAMP = -4,$/;"	e	enum:ndn::signed_interest::__anon3
POS_TIMESTAMP	ndn-cxx/src/util/command-interest-validator.hpp	/^    POS_TIMESTAMP = -4,$/;"	e	enum:ndn::CommandInterestValidator::__anon6
PRINTER	utils/tracers/l2-rate-tracer.cpp	147;"	d	file:
PRINTER	utils/tracers/ndn-cs-tracer.cpp	248;"	d	file:
PRINTER	utils/tracers/ndn-l3-rate-tracer.cpp	242;"	d	file:
PROBABILITY_POLICY_H_	model/cs/custom-policies/probability-policy.hpp	21;"	d
PROCESS_CONNECTION	NFD/websocketpp/websocketpp/connection.hpp	/^        PROCESS_CONNECTION = 7$/;"	e	enum:websocketpp::session::internal_state::value
PROCESS_HTTP_REQUEST	NFD/websocketpp/websocketpp/connection.hpp	/^        PROCESS_HTTP_REQUEST = 6,$/;"	e	enum:websocketpp::session::internal_state::value
PROTECTED_WITH_TESTS_ELSE_PRIVATE	NFD/common.hpp	35;"	d
PROTECTED_WITH_TESTS_ELSE_PRIVATE	NFD/common.hpp	40;"	d
PROTOCOL_VIOLATION	NFD/websocketpp/websocketpp/processors/base.hpp	/^    PROTOCOL_VIOLATION = 2,$/;"	e	enum:websocketpp::processor::error_cat::value
PStrategyInfo	NFD/tests/daemon/table/strategy-choice.t.cpp	/^class PStrategyInfo : public fw::StrategyInfo$/;"	c	namespace:nfd::tests	file:
PUBLIC_KEY	ndn-cxx/tests/unit-tests/security/certificate.t.cpp	/^const uint8_t PUBLIC_KEY[] = {$/;"	m	namespace:ndn	file:
PUBLIC_WITH_TESTS_ELSE_PRIVATE	NFD/common.hpp	34;"	d
PUBLIC_WITH_TESTS_ELSE_PRIVATE	NFD/common.hpp	39;"	d
PUBLIC_WITH_TESTS_ELSE_PROTECTED	NFD/common.hpp	33;"	d
PUBLIC_WITH_TESTS_ELSE_PROTECTED	NFD/common.hpp	38;"	d
Packet	ndn-cxx/src/lp/packet.cpp	/^Packet::Packet()$/;"	f	class:ndn::lp::Packet
Packet	ndn-cxx/src/lp/packet.cpp	/^Packet::Packet(const Block& wire)$/;"	f	class:ndn::lp::Packet
Packet	ndn-cxx/src/lp/packet.hpp	/^class Packet$/;"	c	namespace:ndn::lp
PacketArray	NFD/daemon/face/ndnlp-slicer.hpp	/^typedef shared_ptr<std::vector<Block>> PacketArray;$/;"	t	namespace:nfd::ndnlp
PacketCounter	NFD/daemon/face/face-counters.hpp	/^  PacketCounter()$/;"	f	class:nfd::PacketCounter
PacketCounter	NFD/daemon/face/face-counters.hpp	/^class PacketCounter : noncopyable$/;"	c	namespace:nfd
PacketHeader	model/ndn-header.cpp	/^PacketHeader<Pkt>::PacketHeader()$/;"	f	class:ns3::ndn::PacketHeader
PacketHeader	model/ndn-header.cpp	/^PacketHeader<Pkt>::PacketHeader(const Pkt& packet)$/;"	f	class:ns3::ndn::PacketHeader
PacketHeader	model/ndn-header.hpp	/^class PacketHeader : public Header {$/;"	c	namespace:ns3::ndn
Parsed	ndn-cxx/src/util/config-file.hpp	/^  typedef boost::property_tree::ptree Parsed;$/;"	t	class:ndn::ConfigFile
PartialMessage	NFD/daemon/face/ndnlp-partial-message-store.cpp	/^PartialMessage::PartialMessage()$/;"	f	class:nfd::ndnlp::PartialMessage
PartialMessage	NFD/daemon/face/ndnlp-partial-message-store.hpp	/^class PartialMessage$/;"	c	namespace:nfd::ndnlp
PartialMessageStore	NFD/daemon/face/ndnlp-partial-message-store.cpp	/^PartialMessageStore::PartialMessageStore(const time::nanoseconds& idleDuration)$/;"	f	class:nfd::ndnlp::PartialMessageStore
PartialMessageStore	NFD/daemon/face/ndnlp-partial-message-store.hpp	/^class PartialMessageStore : noncopyable$/;"	c	namespace:nfd::ndnlp
PartialName	ndn-cxx/src/name.hpp	/^typedef Name PartialName;$/;"	t	namespace:ndn
PcapWriter	examples/ndn-simple-with-pcap.cpp	/^  PcapWriter(const std::string& file)$/;"	f	class:ns3::PcapWriter
PcapWriter	examples/ndn-simple-with-pcap.cpp	/^class PcapWriter {$/;"	c	namespace:ns3	file:
PendingInterest	ndn-cxx/src/detail/pending-interest.hpp	/^  PendingInterest(shared_ptr<const Interest> interest, const OnData& onData,$/;"	f	class:ndn::PendingInterest
PendingInterest	ndn-cxx/src/detail/pending-interest.hpp	/^class PendingInterest : noncopyable$/;"	c	namespace:ndn
PendingInterestTable	ndn-cxx/src/detail/face-impl.hpp	/^  typedef ContainerWithOnEmptySignal<shared_ptr<PendingInterest>> PendingInterestTable;$/;"	t	class:ndn::Face::Impl
PeriodicPrinter	utils/tracers/l2-rate-tracer.cpp	/^L2RateTracer::PeriodicPrinter()$/;"	f	class:ns3::L2RateTracer
PeriodicPrinter	utils/tracers/ndn-cs-tracer.cpp	/^CsTracer::PeriodicPrinter()$/;"	f	class:ns3::ndn::CsTracer
PeriodicPrinter	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::PeriodicPrinter()$/;"	f	class:ns3::ndn::L3RateTracer
PeriodicalInsertionFixture	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^  PeriodicalInsertionFixture()$/;"	f	class:nfd::tests::PeriodicalInsertionFixture
PeriodicalInsertionFixture	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^class PeriodicalInsertionFixture : public UnitTestTimeFixture$/;"	c	namespace:nfd::tests	file:
Pib	ndn-cxx/src/security/pib.cpp	/^Pib::Pib(const std::string scheme, const std::string& location, shared_ptr<PibImpl> impl)$/;"	f	class:ndn::security::Pib
Pib	ndn-cxx/src/security/pib.hpp	/^class Pib : noncopyable$/;"	c	namespace:ndn::security
PibCreateFunc	ndn-cxx/src/security/key-chain.hpp	/^  typedef function<unique_ptr<SecPublicInfo> (const std::string&)> PibCreateFunc;$/;"	t	class:ndn::security::KeyChain
PibDataFixture	ndn-cxx/tests/unit-tests/security/pib-data-fixture.cpp	/^PibDataFixture::PibDataFixture()$/;"	f	class:ndn::security::PibDataFixture
PibDataFixture	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^class PibDataFixture$/;"	c	namespace:ndn::security
PibFactory	ndn-cxx/src/security/key-chain.cpp	/^typedef Factory<KeyChain::PibCreateFunc> PibFactory;$/;"	t	namespace:ndn::security	file:
PibImpl	ndn-cxx/src/security/pib-impl.hpp	/^class PibImpl$/;"	c	namespace:ndn::security
PibImpls	ndn-cxx/tests/unit-tests/security/pib-impl.t.cpp	/^                         PibSqlite3Wrapper> PibImpls;$/;"	t	namespace:ndn::security::tests	file:
PibMemory	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::PibMemory()$/;"	f	class:ndn::security::PibMemory
PibMemory	ndn-cxx/src/security/pib-memory.hpp	/^class PibMemory : public PibImpl$/;"	c	namespace:ndn::security
PibMemoryWrapper	ndn-cxx/tests/unit-tests/security/pib-impl.t.cpp	/^class PibMemoryWrapper$/;"	c	namespace:ndn::security::tests	file:
PibSqlite3	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::PibSqlite3(const string& dir)$/;"	f	class:ndn::security::PibSqlite3
PibSqlite3	ndn-cxx/src/security/pib-sqlite3.hpp	/^class PibSqlite3 : public PibImpl$/;"	c	namespace:ndn::security
PibSqlite3TestFixture	ndn-cxx/tests/unit-tests/security/pib-sqlite3.t.cpp	/^  PibSqlite3TestFixture()$/;"	f	class:ndn::security::tests::PibSqlite3TestFixture
PibSqlite3TestFixture	ndn-cxx/tests/unit-tests/security/pib-sqlite3.t.cpp	/^class PibSqlite3TestFixture$/;"	c	namespace:ndn::security::tests	file:
PibSqlite3Wrapper	ndn-cxx/tests/unit-tests/security/pib-impl.t.cpp	/^  PibSqlite3Wrapper()$/;"	f	class:ndn::security::tests::PibSqlite3Wrapper
PibSqlite3Wrapper	ndn-cxx/tests/unit-tests/security/pib-impl.t.cpp	/^class PibSqlite3Wrapper$/;"	c	namespace:ndn::security::tests	file:
PibTmpPathFixture	ndn-cxx/tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^  PibTmpPathFixture()$/;"	f	class:ndn::tests::PibTmpPathFixture
PibTmpPathFixture	ndn-cxx/tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^class PibTmpPathFixture$/;"	c	namespace:ndn::tests	file:
Pit	NFD/daemon/table/pit.cpp	/^Pit::Pit(NameTree& nameTree)$/;"	f	class:nfd::Pit
Pit	NFD/daemon/table/pit.hpp	/^class Pit : noncopyable$/;"	c	namespace:nfd
PitEntryInfo	NFD/daemon/fw/ncc-strategy.hpp	/^  class PitEntryInfo : public StrategyInfo$/;"	c	class:nfd::fw::NccStrategy
PitInfo	NFD/daemon/fw/access-strategy.hpp	/^  class PitInfo : public StrategyInfo$/;"	c	class:nfd::fw::AccessStrategy
PitInfo	NFD/daemon/fw/retx-suppression-exponential.cpp	/^  PitInfo(const Duration& initialInterval)$/;"	f	class:nfd::fw::RetxSuppressionExponential::PitInfo
PitInfo	NFD/daemon/fw/retx-suppression-exponential.cpp	/^class RetxSuppressionExponential::PitInfo : public StrategyInfo$/;"	c	class:nfd::fw::RetxSuppressionExponential	file:
PointToPointNetDeviceCallback	helper/ndn-stack-helper.cpp	/^StackHelper::PointToPointNetDeviceCallback(Ptr<Node> node, Ptr<L3Protocol> ndn,$/;"	f	class:ns3::ndn::StackHelper
Policy	NFD/daemon/table/cs-policy.cpp	/^Policy::Policy(const std::string& policyName)$/;"	f	class:nfd::cs::Policy
Policy	NFD/daemon/table/cs-policy.hpp	/^class Policy : noncopyable$/;"	c	namespace:nfd::cs
PostNotification	ndn-cxx/src/mgmt/dispatcher.hpp	/^typedef std::function<void(const Block& notification)> PostNotification;$/;"	t	namespace:ndn::mgmt
PredecessorsMap	helper/boost-graph-ndn-global-routing-helper.hpp	/^struct PredecessorsMap$/;"	s	namespace:boost
PrefixCollection	NFD/tools/ndn-autoconfig-server.cpp	/^class PrefixCollection : noncopyable$/;"	c	namespace:ndn	file:
Print	model/cs/content-store-impl.hpp	/^ContentStoreImpl<Policy>::Print(std::ostream& os) const$/;"	f	class:ns3::ndn::cs::ContentStoreImpl
Print	model/cs/content-store-nocache.cpp	/^Nocache::Print(std::ostream& os) const$/;"	f	class:ns3::ndn::cs::Nocache
Print	model/cs/content-store-with-freshness.hpp	/^ContentStoreWithFreshness<Policy>::Print(std::ostream& os) const$/;"	f	class:ns3::ndn::cs::ContentStoreWithFreshness
Print	model/cs/content-store-with-stats.hpp	/^ContentStoreWithStats<Policy>::Print(std::ostream& os) const$/;"	f	class:ns3::ndn::cs::ContentStoreWithStats
Print	model/ndn-header.cpp	/^PacketHeader<Data>::Print(std::ostream& os) const$/;"	f	class:ns3::ndn::PacketHeader
Print	model/ndn-header.cpp	/^PacketHeader<Interest>::Print(std::ostream& os) const$/;"	f	class:ns3::ndn::PacketHeader
Print	utils/ndn-fw-hop-count-tag.cpp	/^FwHopCountTag::Print(std::ostream& os) const$/;"	f	class:ns3::ndn::FwHopCountTag
Print	utils/tracers/l2-rate-tracer.cpp	/^L2RateTracer::Print(std::ostream& os) const$/;"	f	class:ns3::L2RateTracer
Print	utils/tracers/ndn-cs-tracer.cpp	/^CsTracer::Print(std::ostream& os) const$/;"	f	class:ns3::ndn::CsTracer
Print	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::Print(std::ostream& os) const$/;"	f	class:ns3::ndn::L3RateTracer
PrintHeader	utils/tracers/l2-rate-tracer.cpp	/^L2RateTracer::PrintHeader(std::ostream& os) const$/;"	f	class:ns3::L2RateTracer
PrintHeader	utils/tracers/ndn-app-delay-tracer.cpp	/^AppDelayTracer::PrintHeader(std::ostream& os) const$/;"	f	class:ns3::ndn::AppDelayTracer
PrintHeader	utils/tracers/ndn-cs-tracer.cpp	/^CsTracer::PrintHeader(std::ostream& os) const$/;"	f	class:ns3::ndn::CsTracer
PrintHeader	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::PrintHeader(std::ostream& os) const$/;"	f	class:ns3::ndn::L3RateTracer
PrintStat	utils/trie/trie.hpp	/^trie<FullKey, PayloadTraits, PolicyHook>::PrintStat(std::ostream& os) const$/;"	f	class:ns3::ndn::ndnSIM::trie
PriorityFifoPolicy	NFD/daemon/table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::PriorityFifoPolicy()$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
PriorityFifoPolicy	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^class PriorityFifoPolicy : public Policy$/;"	c	namespace:nfd::cs::priority_fifo
PrivilegeHelper	NFD/core/privilege-helper.hpp	/^class PrivilegeHelper$/;"	c	namespace:nfd
Producer	apps/ndn-producer.cpp	/^Producer::Producer()$/;"	f	class:ns3::ndn::Producer
Producer	apps/ndn-producer.hpp	/^class Producer : public App {$/;"	c	namespace:ns3::ndn
Producer	ndn-cxx/examples/producer.cpp	/^class Producer : noncopyable$/;"	c	namespace:ndn::examples	file:
Producer	ndn-cxx/tools/ndnputchunks3.cpp	/^  Producer(const char* name)$/;"	f	class:ndn::Producer
Producer	ndn-cxx/tools/ndnputchunks3.cpp	/^class Producer$/;"	c	namespace:ndn	file:
ProtocolFactory	NFD/daemon/face/protocol-factory.hpp	/^class ProtocolFactory$/;"	c	namespace:nfd
PseudoRandomWord32	ndn-cxx/tests/unit-tests/util/random.t.cpp	/^class PseudoRandomWord32$/;"	c	namespace:ndn::tests	file:
PseudoRandomWord64	ndn-cxx/tests/unit-tests/util/random.t.cpp	/^class PseudoRandomWord64$/;"	c	namespace:ndn::tests	file:
PublicKey	ndn-cxx/src/security/public-key.cpp	/^PublicKey::PublicKey()$/;"	f	class:ndn::PublicKey
PublicKey	ndn-cxx/src/security/public-key.cpp	/^PublicKey::PublicKey(const uint8_t* keyDerBuf, size_t keyDerSize)$/;"	f	class:ndn::PublicKey
PublicKey	ndn-cxx/src/security/public-key.hpp	/^class PublicKey$/;"	c	namespace:ndn
PublisherPublicKeyLocator	ndn-cxx/src/encoding/tlv.hpp	/^  PublisherPublicKeyLocator = 15,$/;"	e	enum:ndn::tlv::__anon8
QUEUE_FIFO	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^  QUEUE_FIFO,$/;"	e	enum:nfd::cs::priority_fifo::QueueType
QUEUE_MAX	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^  QUEUE_MAX$/;"	e	enum:nfd::cs::priority_fifo::QueueType
QUEUE_STALE	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^  QUEUE_STALE,$/;"	e	enum:nfd::cs::priority_fifo::QueueType
QUEUE_UNSOLICITED	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^  QUEUE_UNSOLICITED,$/;"	e	enum:nfd::cs::priority_fifo::QueueType
QueryAnswer	NFD/tools/ndn-autoconfig/base-dns.cpp	/^union BaseDns::QueryAnswer$/;"	u	class:ndn::tools::autoconfig::BaseDns	file:
Queue	NFD/daemon/table/cs-policy-lru.hpp	/^  > Queue;$/;"	t	namespace:nfd::cs::lru
Queue	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^typedef std::list<iterator> Queue;$/;"	t	namespace:nfd::cs::priority_fifo
Queue	NFD/daemon/table/dead-nonce-list.hpp	/^  typedef Index::nth_index<0>::type Queue;$/;"	t	class:nfd::DeadNonceList
QueueIt	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^typedef Queue::iterator QueueIt;$/;"	t	namespace:nfd::cs::priority_fifo
QueueType	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^enum QueueType {$/;"	g	namespace:nfd::cs::priority_fifo
RANDOM_POLICY_H_	utils/trie/random-policy.hpp	21;"	d
RATE	utils/tracers/l2-rate-tracer.cpp	145;"	d	file:
RATE	utils/tracers/ndn-l3-rate-tracer.cpp	240;"	d	file:
READING	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^        READING = 2$/;"	e	enum:websocketpp::transport::asio::basic_socket::connection::state
READY	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^        READY = 2,$/;"	e	enum:websocketpp::processor::hybi00::state
READY	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^        READY = 4,$/;"	e	enum:websocketpp::processor::hybi13::state
READY	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^        READY = 1,$/;"	e	enum:websocketpp::transport::asio::endpoint::state
READY	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^        READY = 1,$/;"	e	enum:websocketpp::transport::asio::basic_socket::connection::state
READ_HTTP_REQUEST	NFD/websocketpp/websocketpp/connection.hpp	/^        READ_HTTP_REQUEST = 2,$/;"	e	enum:websocketpp::session::internal_state::value
READ_HTTP_RESPONSE	NFD/websocketpp/websocketpp/connection.hpp	/^        READ_HTTP_RESPONSE = 4,$/;"	e	enum:websocketpp::session::internal_state::value
REAL_CERT	ndn-cxx/tests/unit-tests/security/certificate.t.cpp	/^const unsigned char REAL_CERT[] = {$/;"	m	namespace:ndn	file:
REAL_CERT_INFO	ndn-cxx/tests/unit-tests/security/certificate.t.cpp	/^const std::string REAL_CERT_INFO = "Certificate name:\\n"$/;"	m	namespace:ndn	file:
REASSEMBLER_LIFETIME	NFD/daemon/face/ethernet-face.cpp	/^const time::nanoseconds EthernetFace::REASSEMBLER_LIFETIME = time::seconds(60);$/;"	m	class:nfd::EthernetFace	file:
REASSEMBLER_LIFETIME	NFD/daemon/face/ethernet-face.hpp	/^  static const time::nanoseconds REASSEMBLER_LIFETIME;$/;"	m	class:nfd::EthernetFace
REGISTER	NFD/rib/rib-update.hpp	/^    REGISTER     = 0,$/;"	e	enum:nfd::rib::RibUpdate::Action
REGISTER_COMMAND	NFD/tests/rib/rib-manager.t.cpp	/^  const Name REGISTER_COMMAND;$/;"	m	class:nfd::rib::tests::RibManagerFixture	file:
REGISTER_VERB	NFD/tests/rib/remote-registrator.t.cpp	/^  const name::Component REGISTER_VERB;$/;"	m	class:nfd::rib::tests::RemoteRegistratorFixture	file:
REGMATCH_MAX	utils/topology/rocketfuel-map-reader.cpp	84;"	d	file:
RELATION_EQUAL	ndn-cxx/src/security/conf/filter.hpp	/^      RELATION_EQUAL,$/;"	e	enum:ndn::security::conf::RelationNameFilter::Relation
RELATION_EQUAL	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^    RELATION_EQUAL,$/;"	e	enum:ndn::security::conf::KeyLocatorChecker::Relation
RELATION_IS_PREFIX_OF	ndn-cxx/src/security/conf/filter.hpp	/^      RELATION_IS_PREFIX_OF,$/;"	e	enum:ndn::security::conf::RelationNameFilter::Relation
RELATION_IS_PREFIX_OF	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^    RELATION_IS_PREFIX_OF,$/;"	e	enum:ndn::security::conf::KeyLocatorChecker::Relation
RELATION_IS_STRICT_PREFIX_OF	ndn-cxx/src/security/conf/filter.hpp	/^      RELATION_IS_STRICT_PREFIX_OF$/;"	e	enum:ndn::security::conf::RelationNameFilter::Relation
RELATION_IS_STRICT_PREFIX_OF	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^    RELATION_IS_STRICT_PREFIX_OF$/;"	e	enum:ndn::security::conf::KeyLocatorChecker::Relation
REMOTE_COMMAND_PREFIX	NFD/rib/rib-manager.cpp	/^const Name RibManager::REMOTE_COMMAND_PREFIX = "\/localhop\/nfd\/rib";$/;"	m	class:nfd::rib::RibManager	file:
REMOTE_COMMAND_PREFIX	NFD/rib/rib-manager.hpp	/^  static const Name REMOTE_COMMAND_PREFIX; \/\/ \/localhop\/nrd$/;"	m	class:nfd::rib::RibManager
REMOTE_HUB_PREFIX	NFD/rib/remote-registrator.cpp	/^const Name RemoteRegistrator::REMOTE_HUB_PREFIX = "\/localhop\/nfd";$/;"	m	class:nfd::rib::RemoteRegistrator	file:
REMOTE_HUB_PREFIX	NFD/rib/remote-registrator.hpp	/^  static const Name REMOTE_HUB_PREFIX; \/\/ \/localhop\/nfd$/;"	m	class:nfd::rib::RemoteRegistrator
REMOVE_FACE	NFD/rib/rib-update.hpp	/^    REMOVE_FACE = 2$/;"	e	enum:nfd::rib::RibUpdate::Action
REMOVE_NEXTHOP	NFD/rib/fib-update.hpp	/^    REMOVE_NEXTHOP = 1$/;"	e	enum:nfd::rib::FibUpdate::Action
REMOVE_NEXTHOP_VERB	NFD/tests/rib/rib-manager.t.cpp	/^  const Name::Component REMOVE_NEXTHOP_VERB;$/;"	m	class:nfd::rib::tests::RibManagerFixture	file:
RESPONDED	ndn-cxx/src/mgmt/status-dataset-context.hpp	/^    RESPONDED, \/\/\/< .append has been invoked$/;"	m	class:ndn::mgmt::StatusDatasetContext::State
RESPONSE_FRESHNESS	NFD/daemon/mgmt/status-server.cpp	/^const time::milliseconds StatusServer::RESPONSE_FRESHNESS = time::milliseconds(5000);$/;"	m	class:nfd::StatusServer	file:
RESPONSE_FRESHNESS	NFD/daemon/mgmt/status-server.hpp	/^  static const time::milliseconds RESPONSE_FRESHNESS;$/;"	m	class:nfd::StatusServer
RESPONSE_LINE	NFD/websocketpp/websocketpp/http/response.hpp	/^        RESPONSE_LINE = 0,$/;"	e	enum:websocketpp::http::parser::response::state
RIB_TESTS_UNIT_TESTS_RIB_STATUS_PUBLISHER_COMMON_HPP	NFD/tests/rib/rib-status-publisher-common.hpp	27;"	d
ROCKETFUEL_MAPS_LINE	utils/topology/rocketfuel-map-reader.cpp	91;"	d	file:
ROCKETFUEL_MAP_READER_H	utils/topology/rocketfuel-map-reader.hpp	23;"	d
ROCKETFUEL_TOPOLOGY_WEIGHTS_READER_H	utils/topology/rocketfuel-weights-reader.hpp	23;"	d
ROUTE_FLAG_CAPTURE	ndn-cxx/src/encoding/nfd-constants.hpp	/^  ROUTE_FLAG_CAPTURE       = 2$/;"	e	enum:ndn::nfd::RouteFlags
ROUTE_FLAG_CHILD_INHERIT	ndn-cxx/src/encoding/nfd-constants.hpp	/^  ROUTE_FLAG_CHILD_INHERIT = 1,$/;"	e	enum:ndn::nfd::RouteFlags
ROUTE_ORIGIN_APP	ndn-cxx/src/encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_APP      = 0,$/;"	e	enum:ndn::nfd::RouteOrigin
ROUTE_ORIGIN_AUTOCONF	ndn-cxx/src/encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_AUTOCONF = 66,$/;"	e	enum:ndn::nfd::RouteOrigin
ROUTE_ORIGIN_AUTOREG	ndn-cxx/src/encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_AUTOREG  = 64,$/;"	e	enum:ndn::nfd::RouteOrigin
ROUTE_ORIGIN_CLIENT	ndn-cxx/src/encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_CLIENT   = 65,$/;"	e	enum:ndn::nfd::RouteOrigin
ROUTE_ORIGIN_NLSR	ndn-cxx/src/encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_NLSR     = 128,$/;"	e	enum:ndn::nfd::RouteOrigin
ROUTE_ORIGIN_STATIC	ndn-cxx/src/encoding/nfd-constants.hpp	/^  ROUTE_ORIGIN_STATIC   = 255$/;"	e	enum:ndn::nfd::RouteOrigin
RSA_CERT	ndn-cxx/tests/unit-tests/security/certificate.t.cpp	/^const uint8_t RSA_CERT[] = {$/;"	m	namespace:ndn	file:
RSA_CERT_INFO	ndn-cxx/tests/unit-tests/security/certificate.t.cpp	/^const std::string RSA_CERT_INFO =$/;"	m	namespace:ndn	file:
RSA_DER_KEY_DIGEST	ndn-cxx/tests/unit-tests/security/public-key.t.cpp	/^const uint8_t RSA_DER_KEY_DIGEST[] = {$/;"	m	namespace:ndn::tests	file:
RSA_KEY_SIZES	ndn-cxx/src/security/key-params.cpp	/^static const uint32_t RSA_KEY_SIZES[] = {2048, 1024};$/;"	m	namespace:ndn	file:
RSV3	NFD/websocketpp/websocketpp/frame.hpp	/^        RSV3 = 0x3,$/;"	e	enum:websocketpp::frame::opcode::value
RSV4	NFD/websocketpp/websocketpp/frame.hpp	/^        RSV4 = 0x4,$/;"	e	enum:websocketpp::frame::opcode::value
RSV5	NFD/websocketpp/websocketpp/frame.hpp	/^        RSV5 = 0x5,$/;"	e	enum:websocketpp::frame::opcode::value
RSV6	NFD/websocketpp/websocketpp/frame.hpp	/^        RSV6 = 0x6,$/;"	e	enum:websocketpp::frame::opcode::value
RSV7	NFD/websocketpp/websocketpp/frame.hpp	/^        RSV7 = 0x7,$/;"	e	enum:websocketpp::frame::opcode::value
Random	model/cs/content-store-impl.cpp	/^class Random : public ContentStoreImpl<random_policy_traits> {$/;"	c	namespace:ns3::ndn::cs	file:
Random	model/cs/content-store-with-freshness.cpp	/^class Freshness::Random : public ContentStoreWithFreshness<random_policy_traits> {$/;"	c	class:ns3::ndn::cs::Freshness	file:
Random	model/cs/content-store-with-probability.cpp	/^class Probability::Random : public ContentStoreWithProbability<random_policy_traits> {$/;"	c	class:ns3::ndn::cs::Probability	file:
Random	model/cs/content-store-with-stats.cpp	/^class Stats::Random : public ContentStoreWithStats<random_policy_traits> {$/;"	c	class:ns3::ndn::cs::Stats	file:
RandomGenerators	ndn-cxx/tests/unit-tests/util/random.t.cpp	/^                           SecureRandomWord64> RandomGenerators;$/;"	t	namespace:ndn::tests	file:
RandomLoadBalancerStrategy	examples/ndn-load-balancer/random-load-balancer-strategy.cpp	/^RandomLoadBalancerStrategy::RandomLoadBalancerStrategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::RandomLoadBalancerStrategy
RandomLoadBalancerStrategy	examples/ndn-load-balancer/random-load-balancer-strategy.hpp	/^class RandomLoadBalancerStrategy : public Strategy {$/;"	c	namespace:nfd::fw
RandomWithCountsTraits	model/cs/content-store-impl.cpp	/^  RandomWithCountsTraits;$/;"	t	namespace:ns3::ndn::cs	file:
Read	utils/topology/annotated-topology-reader.cpp	/^AnnotatedTopologyReader::Read(void)$/;"	f	class:ns3::AnnotatedTopologyReader
Read	utils/topology/rocketfuel-map-reader.cpp	/^RocketfuelMapReader::Read()$/;"	f	class:ns3::RocketfuelMapReader
Read	utils/topology/rocketfuel-map-reader.cpp	/^RocketfuelMapReader::Read(RocketfuelParams params, bool keepOneComponent \/*=true*\/,$/;"	f	class:ns3::RocketfuelMapReader
Read	utils/topology/rocketfuel-weights-reader.cpp	/^RocketfuelWeightsReader::Read()$/;"	f	class:ns3::RocketfuelWeightsReader
RealApp	examples/ndn-cxx-simple/real-app.hpp	/^  RealApp(ndn::KeyChain& keyChain)$/;"	f	class:app::RealApp
RealApp	examples/ndn-cxx-simple/real-app.hpp	/^class RealApp$/;"	c	namespace:app
RealAppStarter	examples/ndn-cxx-simple/real-app-starter.hpp	/^class RealAppStarter : public Application$/;"	c	namespace:ns3
ReassembleFixture	NFD/tests/daemon/face/ndnlp.t.cpp	/^  ReassembleFixture()$/;"	f	class:nfd::ndnlp::tests::ReassembleFixture
ReassembleFixture	NFD/tests/daemon/face/ndnlp.t.cpp	/^class ReassembleFixture : protected UnitTestTimeFixture$/;"	c	namespace:nfd::ndnlp::tests	file:
Reassembler	NFD/daemon/face/ethernet-face.hpp	/^  struct Reassembler$/;"	s	class:nfd::EthernetFace
ReceiveCallback	ndn-cxx/src/transport/transport.hpp	/^  typedef function<void (const Block& wire)> ReceiveCallback;$/;"	t	class:ndn::Transport
RefObject	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^  RefObject()$/;"	f	class:ndn::util::signal::tests::RefObject
RefObject	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^  RefObject(const RefObject& other)$/;"	f	class:ndn::util::signal::tests::RefObject
RefObject	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^class RefObject$/;"	c	namespace:ndn::util::signal::tests	file:
Regex	ndn-cxx/src/util/regex.hpp	/^typedef RegexTopMatcher Regex;$/;"	t	namespace:ndn
RegexBackrefManager	ndn-cxx/src/util/regex/regex-backref-manager.hpp	/^  RegexBackrefManager()$/;"	f	class:ndn::RegexBackrefManager
RegexBackrefManager	ndn-cxx/src/util/regex/regex-backref-manager.hpp	/^class RegexBackrefManager$/;"	c	namespace:ndn
RegexBackrefMatcher	ndn-cxx/src/util/regex/regex-backref-matcher.hpp	/^RegexBackrefMatcher::RegexBackrefMatcher(const std::string& expr,$/;"	f	class:ndn::RegexBackrefMatcher
RegexBackrefMatcher	ndn-cxx/src/util/regex/regex-backref-matcher.hpp	/^class RegexBackrefMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexComponentMatcher	ndn-cxx/src/util/regex/regex-component-matcher.hpp	/^RegexComponentMatcher::RegexComponentMatcher(const std::string& expr,$/;"	f	class:ndn::RegexComponentMatcher
RegexComponentMatcher	ndn-cxx/src/util/regex/regex-component-matcher.hpp	/^class RegexComponentMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexComponentSetMatcher	ndn-cxx/src/util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::RegexComponentSetMatcher(const std::string& expr,$/;"	f	class:ndn::RegexComponentSetMatcher
RegexComponentSetMatcher	ndn-cxx/src/util/regex/regex-component-set-matcher.hpp	/^class RegexComponentSetMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexExprType	ndn-cxx/src/util/regex/regex-matcher.hpp	/^  enum RegexExprType {$/;"	g	class:ndn::RegexMatcher
RegexKeyLocatorNameChecker	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  RegexKeyLocatorNameChecker(const Regex& regex)$/;"	f	class:ndn::security::conf::RegexKeyLocatorNameChecker
RegexKeyLocatorNameChecker	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^class RegexKeyLocatorNameChecker : public KeyLocatorChecker$/;"	c	namespace:ndn::security::conf
RegexList	ndn-cxx/src/security/validator-regex.hpp	/^  typedef std::vector< shared_ptr<Regex> > RegexList;$/;"	t	class:ndn::ValidatorRegex
RegexMatcher	ndn-cxx/src/util/regex/regex-matcher.hpp	/^RegexMatcher::RegexMatcher(const std::string& expr,$/;"	f	class:ndn::RegexMatcher
RegexMatcher	ndn-cxx/src/util/regex/regex-matcher.hpp	/^class RegexMatcher$/;"	c	namespace:ndn
RegexNameFilter	ndn-cxx/src/security/conf/filter.hpp	/^  RegexNameFilter(const Regex& regex)$/;"	f	class:ndn::security::conf::RegexNameFilter
RegexNameFilter	ndn-cxx/src/security/conf/filter.hpp	/^class RegexNameFilter : public Filter$/;"	c	namespace:ndn::security::conf
RegexPatternListMatcher	ndn-cxx/src/util/regex/regex-pattern-list-matcher.hpp	/^RegexPatternListMatcher::RegexPatternListMatcher(const std::string& expr,$/;"	f	class:ndn::RegexPatternListMatcher
RegexPatternListMatcher	ndn-cxx/src/util/regex/regex-pattern-list-matcher.hpp	/^class RegexPatternListMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexPseudoMatcher	ndn-cxx/src/util/regex/regex-pseudo-matcher.hpp	/^RegexPseudoMatcher::RegexPseudoMatcher()$/;"	f	class:ndn::RegexPseudoMatcher
RegexPseudoMatcher	ndn-cxx/src/util/regex/regex-pseudo-matcher.hpp	/^class RegexPseudoMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexRepeatMatcher	ndn-cxx/src/util/regex/regex-repeat-matcher.hpp	/^RegexRepeatMatcher::RegexRepeatMatcher(const std::string& expr,$/;"	f	class:ndn::RegexRepeatMatcher
RegexRepeatMatcher	ndn-cxx/src/util/regex/regex-repeat-matcher.hpp	/^class RegexRepeatMatcher : public RegexMatcher$/;"	c	namespace:ndn
RegexTopMatcher	ndn-cxx/src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::RegexTopMatcher(const std::string& expr, const std::string& expand)$/;"	f	class:ndn::RegexTopMatcher
RegexTopMatcher	ndn-cxx/src/util/regex/regex-top-matcher.hpp	/^class RegexTopMatcher: public RegexMatcher$/;"	c	namespace:ndn
RegisterPrefixFailureCallback	ndn-cxx/src/face.hpp	/^typedef function<void(const Name&, const std::string&)> RegisterPrefixFailureCallback;$/;"	t	namespace:ndn
RegisterPrefixSuccessCallback	ndn-cxx/src/face.hpp	/^typedef function<void(const Name&)> RegisterPrefixSuccessCallback;$/;"	t	namespace:ndn
RegisteredEntry	NFD/rib/remote-registrator.hpp	/^  typedef RegisteredList::value_type RegisteredEntry;$/;"	t	class:nfd::rib::RemoteRegistrator
RegisteredEntryIt	NFD/rib/remote-registrator.hpp	/^  typedef RegisteredList::iterator RegisteredEntryIt;$/;"	t	class:nfd::rib::RemoteRegistrator
RegisteredList	NFD/rib/remote-registrator.hpp	/^  typedef std::unordered_map<Name, scheduler::EventId> RegisteredList;$/;"	t	class:nfd::rib::RemoteRegistrator
RegisteredPrefix	ndn-cxx/src/detail/registered-prefix.hpp	/^  RegisteredPrefix(const Name& prefix,$/;"	f	class:ndn::RegisteredPrefix
RegisteredPrefix	ndn-cxx/src/detail/registered-prefix.hpp	/^class RegisteredPrefix : noncopyable$/;"	c	namespace:ndn
RegisteredPrefixTable	ndn-cxx/src/detail/face-impl.hpp	/^  typedef ContainerWithOnEmptySignal<shared_ptr<RegisteredPrefix>> RegisteredPrefixTable;$/;"	t	class:ndn::Face::Impl
RejectContinuation	ndn-cxx/src/mgmt/dispatcher.hpp	/^typedef std::function<void(RejectReply act)> RejectContinuation;$/;"	t	namespace:ndn::mgmt
RejectPendingInterestArgs	NFD/tests/daemon/fw/strategy-tester.hpp	/^  typedef boost::tuple<shared_ptr<pit::Entry>> RejectPendingInterestArgs;$/;"	t	class:nfd::fw::tests::StrategyTester
RejectReply	ndn-cxx/src/mgmt/dispatcher.hpp	/^enum class RejectReply {$/;"	c	namespace:ndn::mgmt
Relation	ndn-cxx/src/security/conf/filter.hpp	/^  enum Relation$/;"	g	class:ndn::security::conf::RelationNameFilter
Relation	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  enum Relation {$/;"	g	class:ndn::security::conf::KeyLocatorChecker
RelationKeyLocatorNameChecker	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  RelationKeyLocatorNameChecker(const Name& name,$/;"	f	class:ndn::security::conf::RelationKeyLocatorNameChecker
RelationKeyLocatorNameChecker	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^class RelationKeyLocatorNameChecker : public KeyLocatorChecker$/;"	c	namespace:ndn::security::conf
RelationNameFilter	ndn-cxx/src/security/conf/filter.hpp	/^  RelationNameFilter(const Name& name, Relation relation)$/;"	f	class:ndn::security::conf::RelationNameFilter
RelationNameFilter	ndn-cxx/src/security/conf/filter.hpp	/^class RelationNameFilter : public Filter$/;"	c	namespace:ndn::security::conf
RemoteRegistrator	NFD/rib/remote-registrator.cpp	/^RemoteRegistrator::RemoteRegistrator(ndn::nfd::Controller& controller,$/;"	f	class:nfd::rib::RemoteRegistrator
RemoteRegistrator	NFD/rib/remote-registrator.hpp	/^class RemoteRegistrator : noncopyable$/;"	c	namespace:nfd::rib
RemoteRegistratorFixture	NFD/tests/rib/remote-registrator.t.cpp	/^  RemoteRegistratorFixture()$/;"	f	class:nfd::rib::tests::RemoteRegistratorFixture
RemoteRegistratorFixture	NFD/tests/rib/remote-registrator.t.cpp	/^class RemoteRegistratorFixture : public nfd::tests::IdentityManagementFixture$/;"	c	namespace:nfd::rib::tests	file:
RemoveCsEntryCallback	model/cs/content-store-with-stats.hpp	/^  typedef void (*RemoveCsEntryCallback)(Ptr<const Entry>, Time);$/;"	t	class:ns3::ndn::cs::ContentStoreWithStats
RemoveNetDeviceFaceCreateCallback	helper/ndn-stack-helper.cpp	/^StackHelper::RemoveNetDeviceFaceCreateCallback(TypeId netDeviceType,$/;"	f	class:ns3::ndn::StackHelper
RemoveNextHop	helper/ndn-fib-helper.cpp	/^FibHelper::RemoveNextHop(const ControlParameters& parameters, Ptr<Node> node)$/;"	f	class:ns3::ndn::FibHelper
RemoveRoute	helper/ndn-fib-helper.cpp	/^FibHelper::RemoveRoute(Ptr<Node> node, const Name& prefix, Ptr<Node> otherNode)$/;"	f	class:ns3::ndn::FibHelper
RemoveRoute	helper/ndn-fib-helper.cpp	/^FibHelper::RemoveRoute(Ptr<Node> node, const Name& prefix, shared_ptr<Face> face)$/;"	f	class:ns3::ndn::FibHelper
RemoveRoute	helper/ndn-fib-helper.cpp	/^FibHelper::RemoveRoute(Ptr<Node> node, const Name& prefix, uint32_t faceId)$/;"	f	class:ns3::ndn::FibHelper
RemoveRoute	helper/ndn-fib-helper.cpp	/^FibHelper::RemoveRoute(const std::string& nodeName, const Name& prefix, uint32_t faceId)$/;"	f	class:ns3::ndn::FibHelper
RemoveRoute	helper/ndn-fib-helper.cpp	/^FibHelper::RemoveRoute(const std::string& nodeName, const Name& prefix,$/;"	f	class:ns3::ndn::FibHelper
RescheduleCleaning	model/cs/content-store-with-freshness.hpp	/^ContentStoreWithFreshness<Policy>::RescheduleCleaning()$/;"	f	class:ns3::ndn::cs::ContentStoreWithFreshness
Reset	utils/ndn-rtt-estimator.cpp	/^RttEstimator::Reset()$/;"	f	class:ns3::ndn::RttEstimator
Reset	utils/ndn-rtt-mean-deviation.cpp	/^RttMeanDeviation::Reset()$/;"	f	class:ns3::ndn::RttMeanDeviation
Reset	utils/tracers/l2-rate-tracer.cpp	/^L2RateTracer::Reset()$/;"	f	class:ns3::L2RateTracer
Reset	utils/tracers/l2-tracer.hpp	/^    Reset()$/;"	f	struct:ns3::L2Tracer::Stats
Reset	utils/tracers/ndn-cs-tracer.cpp	/^CsTracer::Reset()$/;"	f	class:ns3::ndn::CsTracer
Reset	utils/tracers/ndn-cs-tracer.hpp	/^  Reset()$/;"	f	struct:ns3::ndn::cs::Stats
Reset	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::Reset()$/;"	f	class:ns3::ndn::L3RateTracer
Reset	utils/tracers/ndn-l3-tracer.hpp	/^    Reset()$/;"	f	struct:ns3::ndn::L3Tracer::Stats
ResetMultiplier	utils/ndn-rtt-estimator.cpp	/^RttEstimator::ResetMultiplier()$/;"	f	class:ns3::ndn::RttEstimator
ResetStats	utils/trie/aggregate-stats-policy.hpp	/^      ResetStats()$/;"	f	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
Resolver	ndn-cxx/src/util/dns.cpp	/^  Resolver(const SuccessCallback& onSuccess,$/;"	f	class:ndn::dns::Resolver
Resolver	ndn-cxx/src/util/dns.cpp	/^class Resolver : noncopyable$/;"	c	namespace:ndn::dns	file:
Result	NFD/daemon/fw/retx-suppression.hpp	/^  enum Result {$/;"	g	class:nfd::fw::RetxSuppression
RetransmitTimeout	utils/ndn-rtt-mean-deviation.cpp	/^RttMeanDeviation::RetransmitTimeout()$/;"	f	class:ns3::ndn::RttMeanDeviation
RetxSeqsContainer	apps/ndn-consumer.hpp	/^  struct RetxSeqsContainer : public std::set<uint32_t> {$/;"	s	class:ns3::ndn::Consumer
RetxSuppression	NFD/daemon/fw/retx-suppression.hpp	/^class RetxSuppression : noncopyable$/;"	c	namespace:nfd::fw
RetxSuppressionExponential	NFD/daemon/fw/retx-suppression-exponential.cpp	/^RetxSuppressionExponential::RetxSuppressionExponential(const Duration& initialInterval,$/;"	f	class:nfd::fw::RetxSuppressionExponential
RetxSuppressionExponential	NFD/daemon/fw/retx-suppression-exponential.hpp	/^class RetxSuppressionExponential : public RetxSuppression$/;"	c	namespace:nfd::fw
RetxSuppressionFixed	NFD/daemon/fw/retx-suppression-fixed.cpp	/^RetxSuppressionFixed::RetxSuppressionFixed(const time::milliseconds& minRetxInterval)$/;"	f	class:nfd::fw::RetxSuppressionFixed
RetxSuppressionFixed	NFD/daemon/fw/retx-suppression-fixed.hpp	/^class RetxSuppressionFixed : public RetxSuppression$/;"	c	namespace:nfd::fw
Rib	NFD/rib/rib.cpp	/^Rib::Rib()$/;"	f	class:nfd::rib::Rib
Rib	NFD/rib/rib.hpp	/^class Rib : noncopyable$/;"	c	namespace:nfd::rib
RibEntry	NFD/rib/rib-entry.hpp	/^  RibEntry()$/;"	f	class:nfd::rib::RibEntry
RibEntry	NFD/rib/rib-entry.hpp	/^class RibEntry : public enable_shared_from_this<RibEntry>$/;"	c	namespace:nfd::rib
RibEntry	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  RibEntry = 128,$/;"	e	enum:ndn::tlv::nfd::__anon11
RibEntry	ndn-cxx/src/management/nfd-rib-entry.cpp	/^RibEntry::RibEntry()$/;"	f	class:ndn::nfd::RibEntry
RibEntry	ndn-cxx/src/management/nfd-rib-entry.cpp	/^RibEntry::RibEntry(const Block& block)$/;"	f	class:ndn::nfd::RibEntry
RibEntry	ndn-cxx/src/management/nfd-rib-entry.hpp	/^class RibEntry$/;"	c	namespace:ndn::nfd
RibEntryData	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^const uint8_t RibEntryData[] =$/;"	m	namespace:ndn::nfd::tests	file:
RibEntryInfiniteExpirationPeriod	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^const uint8_t RibEntryInfiniteExpirationPeriod[] =$/;"	m	namespace:ndn::nfd::tests	file:
RibEntryList	NFD/rib/rib.hpp	/^  typedef std::list<shared_ptr<RibEntry>> RibEntryList;$/;"	t	class:nfd::rib::Rib
RibFlagsTraits	ndn-cxx/src/management/nfd-rib-flags.hpp	/^class RibFlagsTraits$/;"	c	namespace:ndn::nfd
RibManager	NFD/rib/rib-manager.cpp	/^RibManager::RibManager(ndn::Face& face, ndn::KeyChain& keyChain)$/;"	f	class:nfd::rib::RibManager
RibManager	NFD/rib/rib-manager.hpp	/^class RibManager : noncopyable$/;"	c	namespace:nfd::rib
RibManagerFixture	NFD/tests/rib/rib-manager.t.cpp	/^  RibManagerFixture()$/;"	f	class:nfd::rib::tests::RibManagerFixture
RibManagerFixture	NFD/tests/rib/rib-manager.t.cpp	/^class RibManagerFixture : public nfd::tests::BaseFixture$/;"	c	namespace:nfd::rib::tests	file:
RibRegisterCommand	ndn-cxx/src/management/nfd-control-command.cpp	/^RibRegisterCommand::RibRegisterCommand()$/;"	f	class:ndn::nfd::RibRegisterCommand
RibRegisterCommand	ndn-cxx/src/management/nfd-control-command.hpp	/^class RibRegisterCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
RibStatusPublisher	NFD/rib/rib-status-publisher.cpp	/^RibStatusPublisher::RibStatusPublisher(const Rib& rib,$/;"	f	class:nfd::rib::RibStatusPublisher
RibStatusPublisher	NFD/rib/rib-status-publisher.hpp	/^class RibStatusPublisher : public SegmentPublisher<ndn::Face>$/;"	c	namespace:nfd::rib
RibStatusPublisherFixture	NFD/tests/rib/rib-status-publisher-common.hpp	/^class RibStatusPublisherFixture : public nfd::tests::BaseFixture$/;"	c	namespace:nfd::rib::tests
RibTable	NFD/rib/rib.hpp	/^  typedef std::map<Name, shared_ptr<RibEntry>> RibTable;$/;"	t	class:nfd::rib::Rib
RibUnregisterCommand	ndn-cxx/src/management/nfd-control-command.cpp	/^RibUnregisterCommand::RibUnregisterCommand()$/;"	f	class:ndn::nfd::RibUnregisterCommand
RibUnregisterCommand	ndn-cxx/src/management/nfd-control-command.hpp	/^class RibUnregisterCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
RibUpdate	NFD/rib/rib-update.cpp	/^RibUpdate::RibUpdate()$/;"	f	class:nfd::rib::RibUpdate
RibUpdate	NFD/rib/rib-update.hpp	/^class RibUpdate$/;"	c	namespace:nfd::rib
RibUpdateBatch	NFD/rib/rib-update-batch.cpp	/^RibUpdateBatch::RibUpdateBatch(uint64_t faceId)$/;"	f	class:nfd::rib::RibUpdateBatch
RibUpdateBatch	NFD/rib/rib-update-batch.hpp	/^class RibUpdateBatch$/;"	c	namespace:nfd::rib
RibUpdateList	NFD/rib/rib-update-batch.hpp	/^typedef std::list<RibUpdate> RibUpdateList;$/;"	t	namespace:nfd::rib
RocketfuelMapReader	utils/topology/rocketfuel-map-reader.cpp	/^RocketfuelMapReader::RocketfuelMapReader(const std::string& path \/*=""*\/, double scale \/*=1.0*\/,$/;"	f	class:ns3::RocketfuelMapReader
RocketfuelMapReader	utils/topology/rocketfuel-map-reader.hpp	/^class RocketfuelMapReader : public AnnotatedTopologyReader {$/;"	c	namespace:ns3
RocketfuelParams	utils/topology/rocketfuel-map-reader.hpp	/^struct RocketfuelParams {$/;"	s	namespace:ns3
RocketfuelWeightsReader	utils/topology/rocketfuel-weights-reader.cpp	/^RocketfuelWeightsReader::RocketfuelWeightsReader(const std::string& path \/*=""*\/,$/;"	f	class:ns3::RocketfuelWeightsReader
RocketfuelWeightsReader	utils/topology/rocketfuel-weights-reader.hpp	/^class RocketfuelWeightsReader : public AnnotatedTopologyReader {$/;"	c	namespace:ns3
Rotate	NFD/core/city-hash.cpp	/^static uint64 Rotate(uint64 val, int shift) {$/;"	f	file:
Rotate32	NFD/core/city-hash.cpp	/^static uint32 Rotate32(uint32 val, int shift) {$/;"	f	file:
Route	NFD/rib/route.hpp	/^  Route()$/;"	f	class:nfd::rib::Route
Route	NFD/rib/route.hpp	/^class Route$/;"	c	namespace:nfd::rib
Route	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  Route    = 129$/;"	e	enum:ndn::tlv::nfd::__anon11
Route	ndn-cxx/src/management/nfd-rib-entry.cpp	/^Route::Route()$/;"	f	class:ndn::nfd::Route
Route	ndn-cxx/src/management/nfd-rib-entry.cpp	/^Route::Route(const Block& block)$/;"	f	class:ndn::nfd::Route
Route	ndn-cxx/src/management/nfd-rib-entry.hpp	/^class Route : public RibFlagsTraits<Route>$/;"	c	namespace:ndn::nfd
RouteComparePredicate	NFD/rib/rib.hpp	/^  typedef bool (*RouteComparePredicate)(const Route&, const Route&);$/;"	t	class:nfd::rib::Rib
RouteData	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^const uint8_t RouteData[] =$/;"	m	namespace:ndn::nfd::tests	file:
RouteFlags	ndn-cxx/src/encoding/nfd-constants.hpp	/^enum RouteFlags {$/;"	g	namespace:ndn::nfd
RouteInfiniteExpirationPeriod	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^const uint8_t RouteInfiniteExpirationPeriod[] =$/;"	m	namespace:ndn::nfd::tests	file:
RouteInfo	helper/ndn-scenario-helper.hpp	/^  struct RouteInfo$/;"	s	class:ns3::ndn::ScenarioHelper
RouteList	NFD/rib/rib-entry.hpp	/^  typedef std::list<Route> RouteList;$/;"	t	class:nfd::rib::RibEntry
RouteList	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  typedef std::list<Route> RouteList;$/;"	t	class:ndn::nfd::RibEntry
RouteOrigin	ndn-cxx/src/encoding/nfd-constants.hpp	/^enum RouteOrigin {$/;"	g	namespace:ndn::nfd
RouteSet	NFD/rib/rib.hpp	/^  typedef std::set<Route, RouteComparePredicate> RouteSet;$/;"	t	class:nfd::rib::Rib
RsaKeyParams	ndn-cxx/src/security/key-params.hpp	/^typedef SimplePublicKeyParams<RsaKeyParamsInfo> RsaKeyParams;$/;"	t	namespace:ndn
RsaKeyParamsInfo	ndn-cxx/src/security/key-params.hpp	/^class RsaKeyParamsInfo$/;"	c	namespace:ndn
RttEstimator	NFD/daemon/fw/rtt-estimator.cpp	/^RttEstimator::RttEstimator(uint16_t maxMultiplier, Duration minRto, double gain)$/;"	f	class:nfd::RttEstimator
RttEstimator	NFD/daemon/fw/rtt-estimator.hpp	/^class RttEstimator$/;"	c	namespace:nfd
RttEstimator	utils/ndn-rtt-estimator.cpp	/^RttEstimator::RttEstimator()$/;"	f	class:ns3::ndn::RttEstimator
RttEstimator	utils/ndn-rtt-estimator.cpp	/^RttEstimator::RttEstimator(const RttEstimator& c)$/;"	f	class:ns3::ndn::RttEstimator
RttEstimator	utils/ndn-rtt-estimator.hpp	/^class RttEstimator : public Object {$/;"	c	namespace:ns3::ndn
RttHistory	utils/ndn-rtt-estimator.cpp	/^RttHistory::RttHistory(SequenceNumber32 s, uint32_t c, Time t)$/;"	f	class:ns3::ndn::RttHistory
RttHistory	utils/ndn-rtt-estimator.cpp	/^RttHistory::RttHistory(const RttHistory& h)$/;"	f	class:ns3::ndn::RttHistory
RttHistory	utils/ndn-rtt-estimator.hpp	/^class RttHistory {$/;"	c	namespace:ns3::ndn
RttHistory_t	utils/ndn-rtt-estimator.hpp	/^typedef std::deque<RttHistory> RttHistory_t;$/;"	t	namespace:ns3::ndn
RttMeanDeviation	utils/ndn-rtt-mean-deviation.cpp	/^RttMeanDeviation::RttMeanDeviation()$/;"	f	class:ns3::ndn::RttMeanDeviation
RttMeanDeviation	utils/ndn-rtt-mean-deviation.cpp	/^RttMeanDeviation::RttMeanDeviation(const RttMeanDeviation& c)$/;"	f	class:ns3::ndn::RttMeanDeviation
RttMeanDeviation	utils/ndn-rtt-mean-deviation.hpp	/^class RttMeanDeviation : public RttEstimator {$/;"	c	namespace:ns3::ndn
Rule	ndn-cxx/src/security/conf/rule.hpp	/^  Rule(const std::string& id)$/;"	f	class:ndn::security::conf::Rule
Rule	ndn-cxx/src/security/conf/rule.hpp	/^class Rule$/;"	c	namespace:ndn::security::conf
RuleList	ndn-cxx/src/security/validator-regex.hpp	/^  typedef std::vector< shared_ptr<SecRuleRelative> > RuleList;$/;"	t	class:ndn::ValidatorRegex
SCHEME	ndn-cxx/src/security/sec-public-info-sqlite3.hpp	/^  static const std::string SCHEME;$/;"	m	class:ndn::SecPublicInfoSqlite3
SCHEME	ndn-cxx/src/security/sec-tpm-file.hpp	/^  static const std::string SCHEME;$/;"	m	class:ndn::SecTpmFile
SCHEME	ndn-cxx/src/security/sec-tpm-osx.hpp	/^  static const std::string SCHEME;$/;"	m	class:ndn::SecTpmOsx
SCHEME	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^const std::string DummyPublicInfo::SCHEME = "pib-dummy";$/;"	m	class:ndn::security::DummyPublicInfo	file:
SCHEME	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^const std::string DummyTpm::SCHEME = "tpm-dummy";$/;"	m	class:ndn::security::DummyTpm	file:
SCHEME	ndn-cxx/tests/unit-tests/security/dummy-keychain.hpp	/^  static const std::string SCHEME;$/;"	m	class:ndn::security::DummyPublicInfo
SCHEME	ndn-cxx/tests/unit-tests/security/dummy-keychain.hpp	/^  static const std::string SCHEME;$/;"	m	class:ndn::security::DummyTpm
SCHEME	utils/dummy-keychain.cpp	/^const std::string DummyPublicInfo::SCHEME = "pib-dummy";$/;"	m	class:ndn::security::DummyPublicInfo	file:
SCHEME	utils/dummy-keychain.cpp	/^const std::string DummyTpm::SCHEME = "tpm-dummy";$/;"	m	class:ndn::security::DummyTpm	file:
SCHEME	utils/dummy-keychain.hpp	/^  static const std::string SCHEME;$/;"	m	class:ndn::security::DummyPublicInfo
SCHEME	utils/dummy-keychain.hpp	/^  static const std::string SCHEME;$/;"	m	class:ndn::security::DummyTpm
SEGMENT_MARKER	ndn-cxx/src/name-component.hpp	/^static const uint8_t SEGMENT_MARKER = 0x00;$/;"	m	namespace:ndn::name
SEGMENT_OFFSET_MARKER	ndn-cxx/src/name-component.hpp	/^static const uint8_t SEGMENT_OFFSET_MARKER = 0xFB;$/;"	m	namespace:ndn::name
SEGMENT_VERIFICATION_FAIL	ndn-cxx/src/util/segment-fetcher.hpp	/^    SEGMENT_VERIFICATION_FAIL = 3$/;"	e	enum:ndn::util::SegmentFetcher::ErrorCode
SELF_SIGNED_ECDSA_CERT	ndn-cxx/tests/unit-tests/security/certificate.t.cpp	/^const uint8_t SELF_SIGNED_ECDSA_CERT[] = {$/;"	m	namespace:ndn	file:
SELF_SIGNED_ECDSA_CERT	ndn-cxx/tests/unit-tests/security/pib-sqlite3.t.cpp	/^const uint8_t SELF_SIGNED_ECDSA_CERT[] = {$/;"	m	namespace:ndn::security::tests	file:
SELF_SIGNED_ECDSA_CERT_INFO	ndn-cxx/tests/unit-tests/security/certificate.t.cpp	/^const std::string SELF_SIGNED_ECDSA_CERT_INFO =$/;"	m	namespace:ndn	file:
SEQUENCE_NUMBER_MARKER	ndn-cxx/src/name-component.hpp	/^static const uint8_t SEQUENCE_NUMBER_MARKER = 0xFE;$/;"	m	namespace:ndn::name
SET	NFD/websocketpp/websocketpp/common/md5.hpp	240;"	d
SET	NFD/websocketpp/websocketpp/common/md5.hpp	260;"	d
SET	NFD/websocketpp/websocketpp/common/md5.hpp	266;"	d
SET	NFD/websocketpp/websocketpp/common/md5.hpp	286;"	d
SET	NFD/websocketpp/websocketpp/common/md5.hpp	292;"	d
SET	NFD/websocketpp/websocketpp/common/md5.hpp	312;"	d
SET	NFD/websocketpp/websocketpp/common/md5.hpp	318;"	d
SET	NFD/websocketpp/websocketpp/common/md5.hpp	338;"	d
SHA1_DEFINED	NFD/websocketpp/websocketpp/sha1/sha1.hpp	37;"	d
SHA256_DIGEST_SIZE	ndn-cxx/src/util/crypto.hpp	/^static const size_t SHA256_DIGEST_SIZE = 32;$/;"	m	namespace:ndn::crypto
SIGNED_COMMAND_VERBS	NFD/daemon/mgmt/face-manager.cpp	/^const FaceManager::SignedVerbAndProcessor FaceManager::SIGNED_COMMAND_VERBS[] =$/;"	m	class:nfd::FaceManager	file:
SIGNED_COMMAND_VERBS	NFD/daemon/mgmt/face-manager.hpp	/^  static const SignedVerbAndProcessor SIGNED_COMMAND_VERBS[];$/;"	m	class:nfd::FaceManager
SIGNED_COMMAND_VERBS	NFD/daemon/mgmt/fib-manager.cpp	/^const FibManager::SignedVerbAndProcessor FibManager::SIGNED_COMMAND_VERBS[] =$/;"	m	class:nfd::FibManager	file:
SIGNED_COMMAND_VERBS	NFD/daemon/mgmt/fib-manager.hpp	/^  static const SignedVerbAndProcessor SIGNED_COMMAND_VERBS[];$/;"	m	class:nfd::FibManager
SIGNED_COMMAND_VERBS	NFD/rib/rib-manager.cpp	/^const RibManager::SignedVerbAndProcessor RibManager::SIGNED_COMMAND_VERBS[] =$/;"	m	class:nfd::rib::RibManager	file:
SIGNED_COMMAND_VERBS	NFD/rib/rib-manager.hpp	/^  static const SignedVerbAndProcessor SIGNED_COMMAND_VERBS[];$/;"	m	class:nfd::rib::RibManager
SIGNER_TYPE_CERT	ndn-cxx/src/security/signing-info.hpp	/^    SIGNER_TYPE_CERT = 3,$/;"	e	enum:ndn::security::SigningInfo::SignerType
SIGNER_TYPE_ID	ndn-cxx/src/security/signing-info.hpp	/^    SIGNER_TYPE_ID = 1,$/;"	e	enum:ndn::security::SigningInfo::SignerType
SIGNER_TYPE_KEY	ndn-cxx/src/security/signing-info.hpp	/^    SIGNER_TYPE_KEY = 2,$/;"	e	enum:ndn::security::SigningInfo::SignerType
SIGNER_TYPE_NULL	ndn-cxx/src/security/signing-info.hpp	/^    SIGNER_TYPE_NULL = 0,$/;"	e	enum:ndn::security::SigningInfo::SignerType
SIGNER_TYPE_SHA256	ndn-cxx/src/security/signing-info.hpp	/^    SIGNER_TYPE_SHA256 = 4$/;"	e	enum:ndn::security::SigningInfo::SignerType
SIGNING_PARAMS_CERTIFICATE	ndn-cxx/src/management/nfd-command-options.hpp	/^    SIGNING_PARAMS_CERTIFICATE$/;"	e	enum:ndn::nfd::CommandOptions::SigningParamsKind
SIGNING_PARAMS_DEFAULT	ndn-cxx/src/management/nfd-command-options.hpp	/^    SIGNING_PARAMS_DEFAULT,$/;"	e	enum:ndn::nfd::CommandOptions::SigningParamsKind
SIGNING_PARAMS_IDENTITY	ndn-cxx/src/management/nfd-command-options.hpp	/^    SIGNING_PARAMS_IDENTITY,$/;"	e	enum:ndn::nfd::CommandOptions::SigningParamsKind
SILENT	ndn-cxx/src/mgmt/dispatcher.hpp	/^  SILENT,$/;"	m	class:ndn::mgmt::RejectReply
SPACE	utils/topology/rocketfuel-map-reader.cpp	88;"	d	file:
START	utils/topology/rocketfuel-map-reader.cpp	86;"	d	file:
STATS	utils/tracers/l2-rate-tracer.cpp	144;"	d	file:
STATS	utils/tracers/ndn-l3-rate-tracer.cpp	239;"	d	file:
STRATEGY_A	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^  shared_ptr<DummyStrategy> STRATEGY_A;$/;"	m	class:nfd::tests::StrategyChoicePublisherFixture	file:
STRATEGY_B	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^  shared_ptr<DummyStrategy> STRATEGY_B;$/;"	m	class:nfd::tests::StrategyChoicePublisherFixture	file:
STRATEGY_CHOICE_PRIVILEGE	NFD/daemon/mgmt/strategy-choice-manager.hpp	/^const std::string STRATEGY_CHOICE_PRIVILEGE = "strategy-choice";$/;"	m	namespace:nfd
STRATEGY_NAME	NFD/daemon/fw/access-strategy.hpp	/^  static const Name STRATEGY_NAME;$/;"	m	class:nfd::fw::AccessStrategy
STRATEGY_NAME	NFD/daemon/fw/best-route-strategy.hpp	/^  static const Name STRATEGY_NAME;$/;"	m	class:nfd::fw::BestRouteStrategy
STRATEGY_NAME	NFD/daemon/fw/best-route-strategy2.hpp	/^  static const Name STRATEGY_NAME;$/;"	m	class:nfd::fw::BestRouteStrategy2
STRATEGY_NAME	NFD/daemon/fw/broadcast-strategy.hpp	/^  static const Name STRATEGY_NAME;$/;"	m	class:nfd::fw::BroadcastStrategy
STRATEGY_NAME	NFD/daemon/fw/client-control-strategy.hpp	/^  static const Name STRATEGY_NAME;$/;"	m	class:nfd::fw::ClientControlStrategy
STRATEGY_NAME	NFD/daemon/fw/multicast-strategy.hpp	/^  static const Name STRATEGY_NAME;$/;"	m	class:nfd::fw::MulticastStrategy
STRATEGY_NAME	NFD/daemon/fw/ncc-strategy.hpp	/^  static const Name STRATEGY_NAME;$/;"	m	class:nfd::fw::NccStrategy
STRATEGY_NAME	examples/ndn-load-balancer/random-load-balancer-strategy.hpp	/^  static const Name STRATEGY_NAME;$/;"	m	class:nfd::fw::RandomLoadBalancerStrategy
STRATEGY_NAME	tests/unit-tests/helper/ndn-strategy-choice-helper.t.cpp	/^  static const Name STRATEGY_NAME;$/;"	m	class:ns3::ndn::NullStrategy	file:
STRATEGY_NAME	tests/unit-tests/helper/ndn-strategy-choice-helper.t.cpp	/^const Name NullStrategy::STRATEGY_NAME = "ndn:\/localhost\/nfd\/strategy\/unit-tests\/null-strategy";$/;"	m	class:ns3::ndn::NullStrategy	file:
SUBSCRIBE	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    SUBSCRIBE,$/;"	e	enum:action_type	file:
SUPPRESS	NFD/daemon/fw/retx-suppression.hpp	/^    SUPPRESS$/;"	e	enum:nfd::fw::RetxSuppression::Result
SYSTEM	NFD/websocketpp/websocketpp/connection.hpp	/^        SYSTEM = 1,         \/\/ system call returned error, check that code$/;"	e	enum:websocketpp::session::fail::status::value
SatisfiedInterests	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::SatisfiedInterests(const nfd::pit::Entry& entry, const Face&, const Data&)$/;"	f	class:ns3::ndn::L3RateTracer
SatisfiedInterestsCallback	model/ndn-l3-protocol.hpp	/^  typedef void (*SatisfiedInterestsCallback)(const nfd::pit::Entry& pitEntry, const Face& inFace, const Data& data);$/;"	t	class:ns3::ndn::L3Protocol
SaveGraphviz	utils/topology/annotated-topology-reader.cpp	/^AnnotatedTopologyReader::SaveGraphviz(const std::string& file)$/;"	f	class:ns3::AnnotatedTopologyReader
SaveGraphviz	utils/topology/rocketfuel-map-reader.cpp	/^RocketfuelMapReader::SaveGraphviz(const std::string& file)$/;"	f	class:ns3::RocketfuelMapReader
SaveTopology	utils/topology/annotated-topology-reader.cpp	/^AnnotatedTopologyReader::SaveTopology(const std::string& file)$/;"	f	class:ns3::AnnotatedTopologyReader
SaveTopology	utils/topology/rocketfuel-map-reader.cpp	/^RocketfuelMapReader::SaveTopology(const std::string& file)$/;"	f	class:ns3::RocketfuelMapReader
ScenarioHelper	helper/ndn-scenario-helper.cpp	/^ScenarioHelper::ScenarioHelper()$/;"	f	class:ns3::ndn::ScenarioHelper
ScenarioHelper	helper/ndn-scenario-helper.hpp	/^class ScenarioHelper$/;"	c	namespace:ns3::ndn
ScenarioHelperWithCleanupFixture	tests/unit-tests/tests-common.hpp	/^class ScenarioHelperWithCleanupFixture : public ScenarioHelper, public CleanupFixture$/;"	c	namespace:ns3::ndn
ScheduleNextPacket	apps/ndn-consumer-batches.cpp	/^ConsumerBatches::ScheduleNextPacket()$/;"	f	class:ns3::ndn::ConsumerBatches
ScheduleNextPacket	apps/ndn-consumer-cbr.cpp	/^ConsumerCbr::ScheduleNextPacket()$/;"	f	class:ns3::ndn::ConsumerCbr
ScheduleNextPacket	apps/ndn-consumer-window.cpp	/^ConsumerWindow::ScheduleNextPacket()$/;"	f	class:ns3::ndn::ConsumerWindow
ScheduleNextPacket	apps/ndn-consumer-zipf-mandelbrot.cpp	/^ConsumerZipfMandelbrot::ScheduleNextPacket()$/;"	f	class:ns3::ndn::ConsumerZipfMandelbrot
Scheduler	ndn-cxx/src/util/scheduler.cpp	/^Scheduler::Scheduler(boost::asio::io_service& ioService)$/;"	f	class:ndn::util::scheduler::Scheduler
Scheduler	ndn-cxx/src/util/scheduler.hpp	/^class Scheduler$/;"	c	namespace:ndn::util::scheduler
SchedulerFixture	NFD/tests/core/scheduler.t.cpp	/^  SchedulerFixture()$/;"	f	class:nfd::tests::SchedulerFixture
SchedulerFixture	NFD/tests/core/scheduler.t.cpp	/^class SchedulerFixture : protected BaseFixture$/;"	c	namespace:nfd::tests	file:
ScopeLocalhostIncomingTestForwarder	NFD/tests/daemon/fw/forwarder.t.cpp	/^  ScopeLocalhostIncomingTestForwarder()$/;"	f	class:nfd::tests::ScopeLocalhostIncomingTestForwarder
ScopeLocalhostIncomingTestForwarder	NFD/tests/daemon/fw/forwarder.t.cpp	/^class ScopeLocalhostIncomingTestForwarder : public Forwarder$/;"	c	namespace:nfd::tests	file:
ScopedConnection	ndn-cxx/src/util/signal-scoped-connection.cpp	/^ScopedConnection::ScopedConnection()$/;"	f	class:ndn::util::signal::ScopedConnection
ScopedConnection	ndn-cxx/src/util/signal-scoped-connection.cpp	/^ScopedConnection::ScopedConnection(const Connection& connection)$/;"	f	class:ndn::util::signal::ScopedConnection
ScopedConnection	ndn-cxx/src/util/signal-scoped-connection.hpp	/^class ScopedConnection : noncopyable$/;"	c	namespace:ndn::util::signal
ScopedEventFixture	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^  ScopedEventFixture()$/;"	f	class:ndn::util::scheduler::tests::ScopedEventFixture
ScopedEventFixture	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^class ScopedEventFixture : public UnitTestTimeFixture$/;"	c	namespace:ndn::util::scheduler::tests	file:
ScopedEventId	NFD/core/scheduler.cpp	/^ScopedEventId::ScopedEventId()$/;"	f	class:nfd::scheduler::ScopedEventId
ScopedEventId	NFD/core/scheduler.cpp	/^ScopedEventId::ScopedEventId(ScopedEventId&& other)$/;"	f	class:nfd::scheduler::ScopedEventId
ScopedEventId	NFD/core/scheduler.cpp	/^ScopedEventId::ScopedEventId(const EventId& event)$/;"	f	class:nfd::scheduler::ScopedEventId
ScopedEventId	NFD/core/scheduler.hpp	/^class ScopedEventId : noncopyable$/;"	c	namespace:nfd::scheduler
ScopedEventId	ndn-cxx/src/util/scheduler-scoped-event-id.cpp	/^ScopedEventId::ScopedEventId(Scheduler& scheduler)$/;"	f	class:ndn::util::scheduler::ScopedEventId
ScopedEventId	ndn-cxx/src/util/scheduler-scoped-event-id.hpp	/^class ScopedEventId : noncopyable$/;"	c	namespace:ndn::util::scheduler
SecPublicInfo	ndn-cxx/src/security/sec-public-info.cpp	/^SecPublicInfo::SecPublicInfo(const std::string& location)$/;"	f	class:ndn::SecPublicInfo
SecPublicInfo	ndn-cxx/src/security/sec-public-info.hpp	/^class SecPublicInfo : noncopyable$/;"	c	namespace:ndn
SecPublicInfoSqlite3	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::SecPublicInfoSqlite3(const std::string& dir)$/;"	f	class:ndn::SecPublicInfoSqlite3
SecPublicInfoSqlite3	ndn-cxx/src/security/sec-public-info-sqlite3.hpp	/^class SecPublicInfoSqlite3 : public SecPublicInfo$/;"	c	namespace:ndn
SecRule	ndn-cxx/src/security/sec-rule.hpp	/^  SecRule(bool isPositive)$/;"	f	class:ndn::SecRule
SecRule	ndn-cxx/src/security/sec-rule.hpp	/^class SecRule$/;"	c	namespace:ndn
SecRuleRelative	ndn-cxx/src/security/sec-rule-relative.cpp	/^SecRuleRelative::SecRuleRelative(const string& dataRegex, const string& signerRegex,$/;"	f	class:ndn::SecRuleRelative
SecRuleRelative	ndn-cxx/src/security/sec-rule-relative.hpp	/^class SecRuleRelative : public SecRule$/;"	c	namespace:ndn
SecRuleSpecific	ndn-cxx/src/security/sec-rule-specific.cpp	/^SecRuleSpecific::SecRuleSpecific(const SecRuleSpecific& rule)$/;"	f	class:ndn::SecRuleSpecific
SecRuleSpecific	ndn-cxx/src/security/sec-rule-specific.cpp	/^SecRuleSpecific::SecRuleSpecific(shared_ptr<Regex> dataRegex)$/;"	f	class:ndn::SecRuleSpecific
SecRuleSpecific	ndn-cxx/src/security/sec-rule-specific.cpp	/^SecRuleSpecific::SecRuleSpecific(shared_ptr<Regex> dataRegex,$/;"	f	class:ndn::SecRuleSpecific
SecRuleSpecific	ndn-cxx/src/security/sec-rule-specific.hpp	/^class SecRuleSpecific : public SecRule$/;"	c	namespace:ndn
SecTpm	ndn-cxx/src/security/sec-tpm.cpp	/^SecTpm::SecTpm(const string& location)$/;"	f	class:ndn::SecTpm
SecTpm	ndn-cxx/src/security/sec-tpm.hpp	/^class SecTpm : noncopyable$/;"	c	namespace:ndn
SecTpmFile	ndn-cxx/src/security/sec-tpm-file.cpp	/^SecTpmFile::SecTpmFile(const string& location)$/;"	f	class:ndn::SecTpmFile
SecTpmFile	ndn-cxx/src/security/sec-tpm-file.hpp	/^class SecTpmFile : public SecTpm$/;"	c	namespace:ndn
SecTpmOsx	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::SecTpmOsx(const std::string& location)$/;"	f	class:ndn::SecTpmOsx
SecTpmOsx	ndn-cxx/src/security/sec-tpm-osx.hpp	/^class SecTpmOsx : public SecTpm$/;"	c	namespace:ndn
SecureRandomWord32	ndn-cxx/tests/unit-tests/util/random.t.cpp	/^class SecureRandomWord32$/;"	c	namespace:ndn::tests	file:
SecureRandomWord64	ndn-cxx/tests/unit-tests/util/random.t.cpp	/^class SecureRandomWord64$/;"	c	namespace:ndn::tests	file:
SecuredBag	ndn-cxx/src/security/secured-bag.cpp	/^SecuredBag::SecuredBag()$/;"	f	class:ndn::SecuredBag
SecuredBag	ndn-cxx/src/security/secured-bag.cpp	/^SecuredBag::SecuredBag(const Block& wire)$/;"	f	class:ndn::SecuredBag
SecuredBag	ndn-cxx/src/security/secured-bag.cpp	/^SecuredBag::SecuredBag(const IdentityCertificate& cert, ConstBufferPtr key)$/;"	f	class:ndn::SecuredBag
SecuredBag	ndn-cxx/src/security/secured-bag.hpp	/^class SecuredBag$/;"	c	namespace:ndn
SegmentFetcher	ndn-cxx/src/util/segment-fetcher.cpp	/^SegmentFetcher::SegmentFetcher(Face& face,$/;"	f	class:ndn::util::SegmentFetcher
SegmentFetcher	ndn-cxx/src/util/segment-fetcher.hpp	/^class SegmentFetcher : noncopyable$/;"	c	namespace:ndn::util
SegmentPublisher	NFD/core/segment-publisher.hpp	/^  SegmentPublisher(FaceBase& face,$/;"	f	class:nfd::SegmentPublisher
SegmentPublisher	NFD/core/segment-publisher.hpp	/^class SegmentPublisher : noncopyable$/;"	c	namespace:nfd
SegmentPublisherFixture	NFD/tests/core/segment-publisher.t.cpp	/^  SegmentPublisherFixture()$/;"	f	class:nfd::tests::SegmentPublisherFixture
SegmentPublisherFixture	NFD/tests/core/segment-publisher.t.cpp	/^class SegmentPublisherFixture : public BaseFixture$/;"	c	namespace:nfd::tests	file:
SegmentPublisherTester	NFD/tests/core/segment-publisher.t.cpp	/^  SegmentPublisherTester(ndn::util::DummyClientFace& face,$/;"	f	class:nfd::tests::SegmentPublisherTester
SegmentPublisherTester	NFD/tests/core/segment-publisher.t.cpp	/^class SegmentPublisherTester : public SegmentPublisher<ndn::util::DummyClientFace>$/;"	c	namespace:nfd::tests	file:
SelectedDelegation	ndn-cxx/src/encoding/tlv.hpp	/^  SelectedDelegation = 32,$/;"	e	enum:ndn::tlv::__anon8
Selectors	ndn-cxx/src/encoding/tlv.hpp	/^  Selectors     = 9,$/;"	e	enum:ndn::tlv::__anon8
Selectors	ndn-cxx/src/selectors.cpp	/^Selectors::Selectors()$/;"	f	class:ndn::Selectors
Selectors	ndn-cxx/src/selectors.cpp	/^Selectors::Selectors(const Block& wire)$/;"	f	class:ndn::Selectors
Selectors	ndn-cxx/src/selectors.hpp	/^class Selectors$/;"	c	namespace:ndn
Self	ndn-cxx/src/util/signal-signal.hpp	/^  typedef Signal<Owner, TArgs...> Self;$/;"	t	class:ndn::util::signal::Signal
SelfCancelFixture	NFD/tests/core/scheduler.t.cpp	/^class SelfCancelFixture : protected BaseFixture$/;"	c	namespace:nfd::tests	file:
SelfRescheduleFixture	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^  SelfRescheduleFixture()$/;"	f	class:ndn::util::scheduler::tests::SelfRescheduleFixture
SelfRescheduleFixture	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^class SelfRescheduleFixture : public UnitTestTimeFixture$/;"	c	namespace:ndn::util::scheduler::tests	file:
SendInterest	examples/ndn-custom-apps/custom-app.cpp	/^CustomApp::SendInterest()$/;"	f	class:ns3::CustomApp
SendInterest	examples/ndn-simple-with-content-freshness/one-interest-requester.cpp	/^OneInterestRequester::SendInterest()$/;"	f	class:ns3::OneInterestRequester
SendInterestArgs	NFD/tests/daemon/fw/strategy-tester.hpp	/^  typedef boost::tuple<shared_ptr<pit::Entry>, shared_ptr<Face>> SendInterestArgs;$/;"	t	class:nfd::fw::tests::StrategyTester
SendPacket	apps/ndn-consumer-zipf-mandelbrot.cpp	/^ConsumerZipfMandelbrot::SendPacket()$/;"	f	class:ns3::ndn::ConsumerZipfMandelbrot
SendPacket	apps/ndn-consumer.cpp	/^Consumer::SendPacket()$/;"	f	class:ns3::ndn::Consumer
SentSeq	utils/ndn-rtt-estimator.cpp	/^RttEstimator::SentSeq(SequenceNumber32 seq, uint32_t size)$/;"	f	class:ns3::ndn::RttEstimator
SentSeq	utils/ndn-rtt-mean-deviation.cpp	/^RttMeanDeviation::SentSeq(SequenceNumber32 seq, uint32_t size)$/;"	f	class:ns3::ndn::RttMeanDeviation
SeqTimeout	apps/ndn-consumer.hpp	/^    SeqTimeout(uint32_t _seq, Time _time)$/;"	f	struct:ns3::ndn::Consumer::SeqTimeout
SeqTimeout	apps/ndn-consumer.hpp	/^  struct SeqTimeout {$/;"	s	class:ns3::ndn::Consumer
SeqTimeoutsContainer	apps/ndn-consumer.hpp	/^  struct SeqTimeoutsContainer$/;"	s	class:ns3::ndn::Consumer
Sequence	ndn-cxx/src/lp/sequence.hpp	/^typedef uint64_t Sequence;$/;"	t	namespace:ndn::lp
Sequence	ndn-cxx/src/lp/tlv.hpp	/^  Sequence = 81,$/;"	e	enum:ndn::lp::tlv::__anon4
SequenceBlock	NFD/daemon/face/ndnlp-sequence-generator.cpp	/^SequenceBlock::SequenceBlock(uint64_t start, size_t count)$/;"	f	class:nfd::ndnlp::SequenceBlock
SequenceBlock	NFD/daemon/face/ndnlp-sequence-generator.hpp	/^class SequenceBlock$/;"	c	namespace:nfd::ndnlp
SequenceField	ndn-cxx/src/lp/fields.hpp	/^                          tlv::Sequence> SequenceField;$/;"	t	namespace:ndn::lp
SequenceGenerator	NFD/daemon/face/ndnlp-sequence-generator.cpp	/^SequenceGenerator::SequenceGenerator()$/;"	f	class:nfd::ndnlp::SequenceGenerator
SequenceGenerator	NFD/daemon/face/ndnlp-sequence-generator.hpp	/^class SequenceGenerator : noncopyable$/;"	c	namespace:nfd::ndnlp
Serialize	model/ndn-header.cpp	/^PacketHeader<Pkt>::Serialize(ns3::Buffer::Iterator start) const$/;"	f	class:ns3::ndn::PacketHeader
Serialize	utils/ndn-fw-hop-count-tag.cpp	/^FwHopCountTag::Serialize(TagBuffer i) const$/;"	f	class:ns3::ndn::FwHopCountTag
Server	NFD/daemon/face/websocket-face.hpp	/^typedef websocketpp::server<websocketpp::config::asio> Server;$/;"	t	namespace:nfd::websocket
SetAttribute	helper/ndn-app-helper.cpp	/^AppHelper::SetAttribute(std::string name, const AttributeValue& value)$/;"	f	class:ns3::ndn::AppHelper
SetAveragingPeriod	utils/tracers/l2-rate-tracer.cpp	/^L2RateTracer::SetAveragingPeriod(const Time& period)$/;"	f	class:ns3::L2RateTracer
SetAveragingPeriod	utils/tracers/ndn-cs-tracer.cpp	/^CsTracer::SetAveragingPeriod(const Time& period)$/;"	f	class:ns3::ndn::CsTracer
SetAveragingPeriod	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::SetAveragingPeriod(const Time& period)$/;"	f	class:ns3::ndn::L3RateTracer
SetBoundingBox	utils/topology/annotated-topology-reader.cpp	/^AnnotatedTopologyReader::SetBoundingBox(double ulx, double uly, double lrx, double lry)$/;"	f	class:ns3::AnnotatedTopologyReader
SetCacheProbability	model/cs/content-store-with-probability.hpp	/^  SetCacheProbability(double probability)$/;"	f	class:ns3::ndn::cs::ContentStoreWithProbability
SetCurrentEstimate	utils/ndn-rtt-estimator.cpp	/^RttEstimator::SetCurrentEstimate(Time estimate)$/;"	f	class:ns3::ndn::RttEstimator
SetDefaultBandwidth	utils/topology/rocketfuel-weights-reader.hpp	/^RocketfuelWeightsReader::SetDefaultBandwidth(const std::string& bw)$/;"	f	class:ns3::RocketfuelWeightsReader
SetDefaultQueue	utils/topology/rocketfuel-weights-reader.hpp	/^RocketfuelWeightsReader::SetDefaultQueue(const std::string& queue)$/;"	f	class:ns3::RocketfuelWeightsReader
SetDefaultRoutes	helper/ndn-stack-helper.cpp	/^StackHelper::SetDefaultRoutes(bool needSet)$/;"	f	class:ns3::ndn::StackHelper
SetFileType	utils/topology/rocketfuel-weights-reader.cpp	/^RocketfuelWeightsReader::SetFileType(uint8_t inputType)$/;"	f	class:ns3::RocketfuelWeightsReader
SetMaxRto	utils/ndn-rtt-estimator.cpp	/^RttEstimator::SetMaxRto(Time maxRto)$/;"	f	class:ns3::ndn::RttEstimator
SetMaxSize	apps/ndn-consumer-window.cpp	/^ConsumerWindow::SetMaxSize(double size)$/;"	f	class:ns3::ndn::ConsumerWindow
SetMaxSize	model/cs/content-store-impl.hpp	/^ContentStoreImpl<Policy>::SetMaxSize(uint32_t maxSize)$/;"	f	class:ns3::ndn::cs::ContentStoreImpl
SetMinRto	utils/ndn-rtt-estimator.cpp	/^RttEstimator::SetMinRto(Time minRto)$/;"	f	class:ns3::ndn::RttEstimator
SetMobilityModel	utils/topology/annotated-topology-reader.cpp	/^AnnotatedTopologyReader::SetMobilityModel(const std::string& model)$/;"	f	class:ns3::AnnotatedTopologyReader
SetNumberOfContents	apps/ndn-consumer-zipf-mandelbrot.cpp	/^ConsumerZipfMandelbrot::SetNumberOfContents(uint32_t numOfContents)$/;"	f	class:ns3::ndn::ConsumerZipfMandelbrot
SetOldContentStore	helper/ndn-stack-helper.cpp	/^StackHelper::SetOldContentStore(const std::string& contentStore, const std::string& attr1,$/;"	f	class:ns3::ndn::StackHelper
SetPayloadSize	apps/ndn-consumer-window.cpp	/^ConsumerWindow::SetPayloadSize(uint32_t payload)$/;"	f	class:ns3::ndn::ConsumerWindow
SetPrefix	helper/ndn-app-helper.cpp	/^AppHelper::SetPrefix(const std::string& prefix)$/;"	f	class:ns3::ndn::AppHelper
SetQ	apps/ndn-consumer-zipf-mandelbrot.cpp	/^ConsumerZipfMandelbrot::SetQ(double q)$/;"	f	class:ns3::ndn::ConsumerZipfMandelbrot
SetRandomize	apps/ndn-consumer-cbr.cpp	/^ConsumerCbr::SetRandomize(const std::string& value)$/;"	f	class:ns3::ndn::ConsumerCbr
SetRetxTimer	apps/ndn-consumer.cpp	/^Consumer::SetRetxTimer(Time retxTimer)$/;"	f	class:ns3::ndn::Consumer
SetS	apps/ndn-consumer-zipf-mandelbrot.cpp	/^ConsumerZipfMandelbrot::SetS(double s)$/;"	f	class:ns3::ndn::ConsumerZipfMandelbrot
SetSeqMax	apps/ndn-consumer-window.cpp	/^ConsumerWindow::SetSeqMax(uint32_t seqMax)$/;"	f	class:ns3::ndn::ConsumerWindow
SetStackAttributes	helper/ndn-stack-helper.cpp	/^StackHelper::SetStackAttributes(const std::string& attr1, const std::string& value1,$/;"	f	class:ns3::ndn::StackHelper
SetTrie	model/cs/content-store-impl.hpp	/^  SetTrie(typename CS::super::iterator item)$/;"	f	class:ns3::ndn::cs::EntryImpl
SetWindow	apps/ndn-consumer-window.cpp	/^ConsumerWindow::SetWindow(uint32_t window)$/;"	f	class:ns3::ndn::ConsumerWindow
Sha256	ndn-cxx/src/signature.hpp	/^    Sha256 = tlv::DigestSha256,$/;"	e	enum:ndn::Signature::__anon7
Sha256	ndn-cxx/src/util/digest.hpp	/^typedef Digest<CryptoPP::SHA256> Sha256;$/;"	t	namespace:ndn::util
Sha256WithEcdsa	ndn-cxx/src/signature.hpp	/^    Sha256WithEcdsa = tlv::SignatureSha256WithEcdsa$/;"	e	enum:ndn::Signature::__anon7
Sha256WithRsa	ndn-cxx/src/signature.hpp	/^    Sha256WithRsa = tlv::SignatureSha256WithRsa,$/;"	e	enum:ndn::Signature::__anon7
ShiftMix	NFD/core/city-hash.cpp	/^static uint64 ShiftMix(uint64 val) {$/;"	f	file:
SignParams	ndn-cxx/src/security/key-chain.hpp	/^  typedef std::map<std::string, Block> SignParams;$/;"	t	class:ndn::security::KeyChain
Signal	ndn-cxx/src/util/signal-signal.hpp	/^Signal<Owner, TArgs...>::Signal()$/;"	f	class:ndn::util::signal::Signal
Signal	ndn-cxx/src/util/signal-signal.hpp	/^class Signal : noncopyable$/;"	c	namespace:ndn::util::signal
SignalEmitter1	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^class SignalEmitter1 : public SignalOwner1$/;"	c	namespace:ndn::util::signal::tests	file:
SignalOwner0	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^class SignalOwner0$/;"	c	namespace:ndn::util::signal::tests	file:
SignalOwner1	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^class SignalOwner1$/;"	c	namespace:ndn::util::signal::tests	file:
Signature	ndn-cxx/src/signature.cpp	/^Signature::Signature(const Block& info, const Block& value)$/;"	f	class:ndn::Signature
Signature	ndn-cxx/src/signature.cpp	/^Signature::Signature(const SignatureInfo& info, const Block& value)$/;"	f	class:ndn::Signature
Signature	ndn-cxx/src/signature.hpp	/^class Signature$/;"	c	namespace:ndn
SignatureInfo	ndn-cxx/src/encoding/tlv.hpp	/^  SignatureInfo = 22,$/;"	e	enum:ndn::tlv::__anon8
SignatureInfo	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::SignatureInfo()$/;"	f	class:ndn::SignatureInfo
SignatureInfo	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::SignatureInfo(const Block& block)$/;"	f	class:ndn::SignatureInfo
SignatureInfo	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::SignatureInfo(tlv::SignatureTypeValue type)$/;"	f	class:ndn::SignatureInfo
SignatureInfo	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::SignatureInfo(tlv::SignatureTypeValue type, const KeyLocator& keyLocator)$/;"	f	class:ndn::SignatureInfo
SignatureInfo	ndn-cxx/src/signature-info.hpp	/^class SignatureInfo$/;"	c	namespace:ndn
SignatureSha256EcdsaTimeFixture	ndn-cxx/tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^  SignatureSha256EcdsaTimeFixture()$/;"	f	class:ndn::tests::SignatureSha256EcdsaTimeFixture
SignatureSha256EcdsaTimeFixture	ndn-cxx/tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^class SignatureSha256EcdsaTimeFixture : public UnitTestTimeFixture$/;"	c	namespace:ndn::tests	file:
SignatureSha256RsaTimeFixture	ndn-cxx/tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^  SignatureSha256RsaTimeFixture()$/;"	f	class:ndn::tests::SignatureSha256RsaTimeFixture
SignatureSha256RsaTimeFixture	ndn-cxx/tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^class SignatureSha256RsaTimeFixture : public UnitTestTimeFixture$/;"	c	namespace:ndn::tests	file:
SignatureSha256WithEcdsa	ndn-cxx/src/encoding/tlv.hpp	/^  SignatureSha256WithEcdsa = 3$/;"	e	enum:ndn::tlv::SignatureTypeValue
SignatureSha256WithEcdsa	ndn-cxx/src/security/signature-sha256-with-ecdsa.cpp	/^SignatureSha256WithEcdsa::SignatureSha256WithEcdsa(const KeyLocator& keyLocator)$/;"	f	class:ndn::SignatureSha256WithEcdsa
SignatureSha256WithEcdsa	ndn-cxx/src/security/signature-sha256-with-ecdsa.cpp	/^SignatureSha256WithEcdsa::SignatureSha256WithEcdsa(const Signature& signature)$/;"	f	class:ndn::SignatureSha256WithEcdsa
SignatureSha256WithEcdsa	ndn-cxx/src/security/signature-sha256-with-ecdsa.hpp	/^class SignatureSha256WithEcdsa : public Signature$/;"	c	namespace:ndn
SignatureSha256WithRsa	ndn-cxx/src/encoding/tlv.hpp	/^  SignatureSha256WithRsa = 1,$/;"	e	enum:ndn::tlv::SignatureTypeValue
SignatureSha256WithRsa	ndn-cxx/src/security/signature-sha256-with-rsa.cpp	/^SignatureSha256WithRsa::SignatureSha256WithRsa(const KeyLocator& keyLocator)$/;"	f	class:ndn::SignatureSha256WithRsa
SignatureSha256WithRsa	ndn-cxx/src/security/signature-sha256-with-rsa.cpp	/^SignatureSha256WithRsa::SignatureSha256WithRsa(const Signature& signature)$/;"	f	class:ndn::SignatureSha256WithRsa
SignatureSha256WithRsa	ndn-cxx/src/security/signature-sha256-with-rsa.hpp	/^class SignatureSha256WithRsa : public Signature$/;"	c	namespace:ndn
SignatureType	ndn-cxx/src/encoding/tlv.hpp	/^  SignatureType = 27,$/;"	e	enum:ndn::tlv::__anon8
SignatureTypeValue	ndn-cxx/src/encoding/tlv.hpp	/^enum SignatureTypeValue {$/;"	g	namespace:ndn::tlv
SignatureValue	ndn-cxx/src/encoding/tlv.hpp	/^  SignatureValue  = 23,$/;"	e	enum:ndn::tlv::__anon8
SignedVerbAndProcessor	NFD/daemon/mgmt/face-manager.hpp	/^  typedef std::pair<Name::Component, SignedVerbProcessor> SignedVerbAndProcessor;$/;"	t	class:nfd::FaceManager
SignedVerbAndProcessor	NFD/daemon/mgmt/fib-manager.hpp	/^  typedef std::pair<Name::Component, SignedVerbProcessor> SignedVerbAndProcessor;$/;"	t	class:nfd::FibManager
SignedVerbAndProcessor	NFD/rib/rib-manager.hpp	/^  typedef std::pair<name::Component, SignedVerbProcessor> SignedVerbAndProcessor;$/;"	t	class:nfd::rib::RibManager
SignedVerbDispatchTable	NFD/daemon/mgmt/face-manager.hpp	/^  typedef std::map<Name::Component, SignedVerbProcessor> SignedVerbDispatchTable;$/;"	t	class:nfd::FaceManager
SignedVerbDispatchTable	NFD/daemon/mgmt/fib-manager.hpp	/^  typedef std::map<Name::Component, SignedVerbProcessor> SignedVerbDispatchTable;$/;"	t	class:nfd::FibManager
SignedVerbDispatchTable	NFD/rib/rib-manager.hpp	/^  typedef std::map<name::Component, SignedVerbProcessor> SignedVerbDispatchTable;$/;"	t	class:nfd::rib::RibManager
SignedVerbProcessor	NFD/daemon/mgmt/face-manager.hpp	/^                        ControlParameters&)> SignedVerbProcessor;$/;"	t	class:nfd::FaceManager
SignedVerbProcessor	NFD/daemon/mgmt/fib-manager.hpp	/^                        ControlResponse&)> SignedVerbProcessor;$/;"	t	class:nfd::FibManager
SignedVerbProcessor	NFD/rib/rib-manager.hpp	/^                        ControlParameters& parameters)> SignedVerbProcessor;$/;"	t	class:nfd::rib::RibManager
SignerList	ndn-cxx/src/security/conf/checker.hpp	/^  typedef std::map<Name, shared_ptr<IdentityCertificate> > SignerList;$/;"	t	class:ndn::security::conf::FixedSignerChecker
SignerType	ndn-cxx/src/security/signing-info.hpp	/^  enum SignerType {$/;"	g	class:ndn::security::SigningInfo
SigningInfo	ndn-cxx/src/security/signing-info.cpp	/^SigningInfo::SigningInfo(SignerType signerType,$/;"	f	class:ndn::security::SigningInfo
SigningInfo	ndn-cxx/src/security/signing-info.hpp	/^class SigningInfo$/;"	c	namespace:ndn::security
SigningParamsKind	ndn-cxx/src/management/nfd-command-options.hpp	/^  enum SigningParamsKind {$/;"	g	class:ndn::nfd::CommandOptions
SimpleEndToEndFixture	NFD/tests/daemon/face/tcp.t.cpp	/^class SimpleEndToEndFixture : protected BaseFixture$/;"	c	namespace:nfd::tests	file:
SimpleEndToEndFixture	NFD/tests/daemon/face/unix-stream.t.cpp	/^class SimpleEndToEndFixture : protected BaseFixture$/;"	c	namespace:nfd::tests	file:
SimpleNameGenerator	NFD/tests/other/cs-benchmark.cpp	/^    SimpleNameGenerator(const Name& prefix = "\/cs\/benchmark")$/;"	f	class:nfd::tests::CsBenchmarkFixture::SimpleNameGenerator
SimpleNameGenerator	NFD/tests/other/cs-benchmark.cpp	/^  class SimpleNameGenerator$/;"	c	class:nfd::tests::CsBenchmarkFixture	file:
SimpleNotification	NFD/tests/core/simple-notification.hpp	/^  SimpleNotification()$/;"	f	class:nfd::tests::SimpleNotification
SimpleNotification	NFD/tests/core/simple-notification.hpp	/^  SimpleNotification(const std::string& message)$/;"	f	class:nfd::tests::SimpleNotification
SimpleNotification	NFD/tests/core/simple-notification.hpp	/^class SimpleNotification$/;"	c	namespace:nfd::tests
SimpleNotification	ndn-cxx/tests/unit-tests/util/simple-notification.hpp	/^  SimpleNotification()$/;"	f	class:ndn::util::tests::SimpleNotification
SimpleNotification	ndn-cxx/tests/unit-tests/util/simple-notification.hpp	/^  SimpleNotification(const Block& block)$/;"	f	class:ndn::util::tests::SimpleNotification
SimpleNotification	ndn-cxx/tests/unit-tests/util/simple-notification.hpp	/^  SimpleNotification(const std::string& message)$/;"	f	class:ndn::util::tests::SimpleNotification
SimpleNotification	ndn-cxx/tests/unit-tests/util/simple-notification.hpp	/^class SimpleNotification$/;"	c	namespace:ndn::util::tests
SimplePublicKeyParams	ndn-cxx/src/security/key-params.hpp	/^  SimplePublicKeyParams(const KeyParams& params)$/;"	f	class:ndn::SimplePublicKeyParams
SimplePublicKeyParams	ndn-cxx/src/security/key-params.hpp	/^  SimplePublicKeyParams(const SimplePublicKeyParams& params)$/;"	f	class:ndn::SimplePublicKeyParams
SimplePublicKeyParams	ndn-cxx/src/security/key-params.hpp	/^  SimplePublicKeyParams(uint32_t size = KeyParamsInfo::getDefaultSize())$/;"	f	class:ndn::SimplePublicKeyParams
SimplePublicKeyParams	ndn-cxx/src/security/key-params.hpp	/^class SimplePublicKeyParams : public KeyParams$/;"	c	namespace:ndn
SimpleSymmetricKeyParams	ndn-cxx/src/security/key-params.hpp	/^  SimpleSymmetricKeyParams(const KeyParams& params)$/;"	f	class:ndn::SimpleSymmetricKeyParams
SimpleSymmetricKeyParams	ndn-cxx/src/security/key-params.hpp	/^  SimpleSymmetricKeyParams(const SimpleSymmetricKeyParams& params)$/;"	f	class:ndn::SimpleSymmetricKeyParams
SimpleSymmetricKeyParams	ndn-cxx/src/security/key-params.hpp	/^  SimpleSymmetricKeyParams(uint32_t size = KeyParamsInfo::getDefaultSize())$/;"	f	class:ndn::SimpleSymmetricKeyParams
SimpleSymmetricKeyParams	ndn-cxx/src/security/key-params.hpp	/^class SimpleSymmetricKeyParams : public KeyParams$/;"	c	namespace:ndn
SingleInterest	tests/unit-tests/ndn-cxx/face.t.cpp	/^  SingleInterest(const Name& name, const NameCallback& onData, const VoidCallback& onTimeout)$/;"	f	class:ns3::ndn::SingleInterest
SingleInterest	tests/unit-tests/ndn-cxx/face.t.cpp	/^class SingleInterest : public BaseTesterApp$/;"	c	namespace:ns3::ndn	file:
SingleInterestWithFaceShutdown	tests/unit-tests/ndn-cxx/face.t.cpp	/^  SingleInterestWithFaceShutdown()$/;"	f	class:ns3::ndn::SingleInterestWithFaceShutdown
SingleInterestWithFaceShutdown	tests/unit-tests/ndn-cxx/face.t.cpp	/^class SingleInterestWithFaceShutdown : public BaseTesterApp$/;"	c	namespace:ns3::ndn	file:
Slicer	NFD/daemon/face/ndnlp-slicer.cpp	/^Slicer::Slicer(size_t mtu)$/;"	f	class:nfd::ndnlp::Slicer
Slicer	NFD/daemon/face/ndnlp-slicer.hpp	/^class Slicer : noncopyable$/;"	c	namespace:nfd::ndnlp
Slot	ndn-cxx/src/util/signal-signal.hpp	/^  struct Slot$/;"	s	class:ndn::util::signal::Signal
SlotList	ndn-cxx/src/util/signal-signal.hpp	/^  typedef std::list<Slot> SlotList;$/;"	t	class:ndn::util::signal::Signal
Socket	NFD/tests/daemon/face/dummy-stream-sender.hpp	/^  typedef typename Protocol::socket Socket;$/;"	t	class:nfd::tests::DummyStreamSender
Sqlite3Statement	ndn-cxx/src/util/sqlite3-statement.cpp	/^Sqlite3Statement::Sqlite3Statement(sqlite3* database, const std::string& statement)$/;"	f	class:ndn::util::Sqlite3Statement
Sqlite3Statement	ndn-cxx/src/util/sqlite3-statement.hpp	/^class Sqlite3Statement : noncopyable$/;"	c	namespace:ndn::util
Sqlite3StatementTestFixture	ndn-cxx/tests/unit-tests/util/sqlite3-statement.t.cpp	/^  Sqlite3StatementTestFixture()$/;"	f	class:ndn::util::tests::Sqlite3StatementTestFixture
Sqlite3StatementTestFixture	ndn-cxx/tests/unit-tests/util/sqlite3-statement.t.cpp	/^class Sqlite3StatementTestFixture$/;"	c	namespace:ndn::util::tests	file:
StackHelper	helper/ndn-stack-helper.cpp	/^StackHelper::StackHelper()$/;"	f	class:ns3::ndn::StackHelper
StackHelper	helper/ndn-stack-helper.hpp	/^class StackHelper : boost::noncopyable {$/;"	c	namespace:ns3::ndn
StartApplication	apps/ndn-app.cpp	/^App::StartApplication() \/\/ Called at time specified by Start$/;"	f	class:ns3::ndn::App
StartApplication	apps/ndn-consumer-batches.cpp	/^ConsumerBatches::StartApplication()$/;"	f	class:ns3::ndn::ConsumerBatches
StartApplication	apps/ndn-consumer.cpp	/^Consumer::StartApplication() \/\/ Called at time specified by Start$/;"	f	class:ns3::ndn::Consumer
StartApplication	apps/ndn-producer.cpp	/^Producer::StartApplication()$/;"	f	class:ns3::ndn::Producer
StartApplication	examples/ndn-custom-apps/custom-app.cpp	/^CustomApp::StartApplication()$/;"	f	class:ns3::CustomApp
StartApplication	examples/ndn-custom-apps/hijacker.cpp	/^Hijacker::StartApplication()$/;"	f	class:ns3::Hijacker
StartApplication	examples/ndn-cxx-simple/real-app-starter.hpp	/^  StartApplication()$/;"	f	class:ns3::RealAppStarter
StartApplication	examples/ndn-simple-with-content-freshness/one-interest-requester.cpp	/^OneInterestRequester::StartApplication()$/;"	f	class:ns3::OneInterestRequester
StartApplication	helper/ndn-app-helper.cpp	/^FactoryCallbackApp::StartApplication()$/;"	f	class:ns3::ndn::FactoryCallbackApp
StartTimestamp	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  StartTimestamp       = 129,$/;"	e	enum:ndn::tlv::nfd::__anon11
State	ndn-cxx/src/mgmt/status-dataset-context.hpp	/^  enum class State {$/;"	c	class:ndn::mgmt::StatusDatasetContext
Stats	utils/tracers/l2-tracer.hpp	/^  struct Stats {$/;"	s	class:ns3::L2Tracer
Stats	utils/tracers/ndn-cs-tracer.hpp	/^struct Stats {$/;"	s	namespace:ns3::ndn::cs
Stats	utils/tracers/ndn-l3-tracer.hpp	/^  struct Stats {$/;"	s	class:ns3::ndn::L3Tracer
StatusCode	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  StatusCode      = 102,$/;"	e	enum:ndn::tlv::nfd::__anon11
StatusDatasetContext	ndn-cxx/src/mgmt/status-dataset-context.cpp	/^StatusDatasetContext::StatusDatasetContext(const Interest& interest,$/;"	f	class:ndn::mgmt::StatusDatasetContext
StatusDatasetContext	ndn-cxx/src/mgmt/status-dataset-context.hpp	/^class StatusDatasetContext$/;"	c	namespace:ndn::mgmt
StatusDatasetContextFixture	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^  StatusDatasetContextFixture()$/;"	f	class:ndn::mgmt::tests::StatusDatasetContextFixture
StatusDatasetContextFixture	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^class StatusDatasetContextFixture$/;"	c	namespace:ndn::mgmt::tests	file:
StatusDatasetHandler	ndn-cxx/src/mgmt/dispatcher.hpp	/^                           StatusDatasetContext& context)> StatusDatasetHandler;$/;"	t	namespace:ndn::mgmt
StatusServer	NFD/daemon/mgmt/status-server.cpp	/^StatusServer::StatusServer(shared_ptr<AppFace> face, Forwarder& forwarder, ndn::KeyChain& keyChain)$/;"	f	class:nfd::StatusServer
StatusServer	NFD/daemon/mgmt/status-server.hpp	/^class StatusServer : noncopyable$/;"	c	namespace:nfd
StatusText	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  StatusText      = 103,$/;"	e	enum:ndn::tlv::nfd::__anon11
StopApplication	apps/ndn-app.cpp	/^App::StopApplication() \/\/ Called at time specified by Stop$/;"	f	class:ns3::ndn::App
StopApplication	apps/ndn-consumer.cpp	/^Consumer::StopApplication() \/\/ Called at time specified by Stop$/;"	f	class:ns3::ndn::Consumer
StopApplication	apps/ndn-producer.cpp	/^Producer::StopApplication()$/;"	f	class:ns3::ndn::Producer
StopApplication	examples/ndn-custom-apps/custom-app.cpp	/^CustomApp::StopApplication()$/;"	f	class:ns3::CustomApp
StopApplication	examples/ndn-custom-apps/hijacker.cpp	/^Hijacker::StopApplication()$/;"	f	class:ns3::Hijacker
StopApplication	examples/ndn-cxx-simple/real-app-starter.hpp	/^  StopApplication()$/;"	f	class:ns3::RealAppStarter
StopApplication	examples/ndn-simple-with-content-freshness/one-interest-requester.cpp	/^OneInterestRequester::StopApplication()$/;"	f	class:ns3::OneInterestRequester
StopApplication	helper/ndn-app-helper.cpp	/^FactoryCallbackApp::StopApplication()$/;"	f	class:ns3::ndn::FactoryCallbackApp
StopException	NFD/tests/limited-io.hpp	/^  class StopException : public std::exception$/;"	c	class:nfd::tests::LimitedIo
StopReason	NFD/tests/limited-io.hpp	/^  enum StopReason$/;"	g	class:nfd::tests::LimitedIo
Strategy	NFD/daemon/fw/strategy.cpp	/^Strategy::Strategy(Forwarder& forwarder, const Name& name)$/;"	f	class:nfd::fw::Strategy
Strategy	NFD/daemon/fw/strategy.hpp	/^class Strategy : public enable_shared_from_this<Strategy>, noncopyable$/;"	c	namespace:nfd::fw
Strategy	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  Strategy            = 107,$/;"	e	enum:ndn::tlv::nfd::__anon11
StrategyChoice	NFD/daemon/table/strategy-choice.cpp	/^StrategyChoice::StrategyChoice(NameTree& nameTree, shared_ptr<Strategy> defaultStrategy)$/;"	f	class:nfd::StrategyChoice
StrategyChoice	NFD/daemon/table/strategy-choice.hpp	/^class StrategyChoice : noncopyable$/;"	c	namespace:nfd
StrategyChoice	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  StrategyChoice = 128,$/;"	e	enum:ndn::tlv::nfd::__anon11
StrategyChoice	ndn-cxx/src/management/nfd-strategy-choice.cpp	/^StrategyChoice::StrategyChoice()$/;"	f	class:ndn::nfd::StrategyChoice
StrategyChoice	ndn-cxx/src/management/nfd-strategy-choice.cpp	/^StrategyChoice::StrategyChoice(const Block& payload)$/;"	f	class:ndn::nfd::StrategyChoice
StrategyChoice	ndn-cxx/src/management/nfd-strategy-choice.hpp	/^class StrategyChoice$/;"	c	namespace:ndn::nfd
StrategyChoiceHelper	helper/ndn-strategy-choice-helper.hpp	/^class StrategyChoiceHelper$/;"	c	namespace:ns3::ndn
StrategyChoiceHelperFixture	tests/unit-tests/helper/ndn-strategy-choice-helper.t.cpp	/^  StrategyChoiceHelperFixture()$/;"	f	class:ns3::ndn::StrategyChoiceHelperFixture
StrategyChoiceHelperFixture	tests/unit-tests/helper/ndn-strategy-choice-helper.t.cpp	/^class StrategyChoiceHelperFixture : public ScenarioHelperWithCleanupFixture$/;"	c	namespace:ns3::ndn	file:
StrategyChoiceManager	NFD/daemon/mgmt/strategy-choice-manager.cpp	/^StrategyChoiceManager::StrategyChoiceManager(StrategyChoice& strategyChoice,$/;"	f	class:nfd::StrategyChoiceManager
StrategyChoiceManager	NFD/daemon/mgmt/strategy-choice-manager.hpp	/^class StrategyChoiceManager : public ManagerBase$/;"	c	namespace:nfd
StrategyChoiceManagerFixture	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  StrategyChoiceManagerFixture()$/;"	f	class:nfd::tests::StrategyChoiceManagerFixture
StrategyChoiceManagerFixture	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^class StrategyChoiceManagerFixture : protected BaseFixture$/;"	c	namespace:nfd::tests	file:
StrategyChoicePublisher	NFD/daemon/mgmt/strategy-choice-publisher.cpp	/^StrategyChoicePublisher::StrategyChoicePublisher(const StrategyChoice& strategyChoice,$/;"	f	class:nfd::StrategyChoicePublisher
StrategyChoicePublisher	NFD/daemon/mgmt/strategy-choice-publisher.hpp	/^class StrategyChoicePublisher : public SegmentPublisher<AppFace>$/;"	c	namespace:nfd
StrategyChoicePublisherFixture	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^  StrategyChoicePublisherFixture()$/;"	f	class:nfd::tests::StrategyChoicePublisherFixture
StrategyChoicePublisherFixture	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^class StrategyChoicePublisherFixture : BaseFixture$/;"	c	namespace:nfd::tests	file:
StrategyChoiceSetCommand	ndn-cxx/src/management/nfd-control-command.cpp	/^StrategyChoiceSetCommand::StrategyChoiceSetCommand()$/;"	f	class:ndn::nfd::StrategyChoiceSetCommand
StrategyChoiceSetCommand	ndn-cxx/src/management/nfd-control-command.hpp	/^class StrategyChoiceSetCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
StrategyChoiceUnsetCommand	ndn-cxx/src/management/nfd-control-command.cpp	/^StrategyChoiceUnsetCommand::StrategyChoiceUnsetCommand()$/;"	f	class:ndn::nfd::StrategyChoiceUnsetCommand
StrategyChoiceUnsetCommand	ndn-cxx/src/management/nfd-control-command.hpp	/^class StrategyChoiceUnsetCommand : public ControlCommand$/;"	c	namespace:ndn::nfd
StrategyCreateFunc	NFD/daemon/fw/strategy-registry.hpp	/^typedef std::function<shared_ptr<Strategy>(Forwarder&)> StrategyCreateFunc;$/;"	t	namespace:nfd::fw
StrategyInfo	NFD/daemon/fw/strategy-info.hpp	/^class StrategyInfo$/;"	c	namespace:nfd::fw
StrategyInfoHost	NFD/daemon/table/strategy-info-host.hpp	/^class StrategyInfoHost$/;"	c	namespace:nfd
StrategyInstanceTable	NFD/daemon/table/strategy-choice.hpp	/^  typedef std::map<Name, shared_ptr<fw::Strategy> > StrategyInstanceTable;$/;"	t	class:nfd::StrategyChoice
StrategyTester	NFD/tests/daemon/fw/strategy-tester.hpp	/^  StrategyTester(Forwarder& forwarder)$/;"	f	class:nfd::fw::tests::StrategyTester
StrategyTester	NFD/tests/daemon/fw/strategy-tester.hpp	/^class StrategyTester : public S$/;"	c	namespace:nfd::fw::tests
StreamBuf	ndn-cxx/src/util/indented-stream.cpp	/^IndentedStream::StreamBuf::StreamBuf(std::ostream& os, const std::string& indent)$/;"	f	class:ndn::util::IndentedStream::StreamBuf
StreamBuf	ndn-cxx/src/util/indented-stream.hpp	/^  class StreamBuf : public std::stringbuf$/;"	c	class:ndn::util::IndentedStream
StreamFace	NFD/daemon/face/stream-face.hpp	/^StreamFace<T, FaceBase>::StreamFace(const FaceUri& remoteUri, const FaceUri& localUri,$/;"	f	class:nfd::StreamFace
StreamFace	NFD/daemon/face/stream-face.hpp	/^class StreamFace : public FaceBase$/;"	c	namespace:nfd
StreamFaceSenderImpl	NFD/daemon/face/stream-face.hpp	/^struct StreamFaceSenderImpl$/;"	s	namespace:nfd
StreamFaceSenderImpl	NFD/daemon/face/stream-face.hpp	/^struct StreamFaceSenderImpl<Protocol, LocalFace, Packet>$/;"	s	namespace:nfd
StreamFaceValidator	NFD/daemon/face/stream-face.hpp	/^struct StreamFaceValidator$/;"	s	namespace:nfd
StreamFaceValidator	NFD/daemon/face/tcp-face.hpp	/^struct StreamFaceValidator<TcpLocalFace::protocol, LocalFace>$/;"	s	namespace:nfd
StreamTransportImpl	ndn-cxx/src/transport/stream-transport.hpp	/^  StreamTransportImpl(BaseTransport& transport, boost::asio::io_service& ioService)$/;"	f	class:ndn::StreamTransportImpl
StreamTransportImpl	ndn-cxx/src/transport/stream-transport.hpp	/^class StreamTransportImpl$/;"	c	namespace:ndn
StreamTransportWithResolverImpl	ndn-cxx/src/transport/stream-transport.hpp	/^  StreamTransportWithResolverImpl(BaseTransport& transport, boost::asio::io_service& ioService)$/;"	f	class:ndn::StreamTransportWithResolverImpl
StreamTransportWithResolverImpl	ndn-cxx/src/transport/stream-transport.hpp	/^class StreamTransportWithResolverImpl : public StreamTransportImpl<BaseTransport, Protocol>$/;"	c	namespace:ndn
StringHelperError	ndn-cxx/src/util/string-helper.hpp	/^  StringHelperError(const std::string& what)$/;"	f	class:ndn::StringHelperError
StringHelperError	ndn-cxx/src/util/string-helper.hpp	/^class StringHelperError : public std::invalid_argument$/;"	c	namespace:ndn
SubjectDescriptionList	ndn-cxx/src/security/certificate.hpp	/^  typedef std::vector<CertificateSubjectDescription> SubjectDescriptionList;$/;"	t	class:ndn::Certificate
SubscriptionTable	NFD/core/config-file.hpp	/^  typedef std::map<std::string, ConfigSectionHandler> SubscriptionTable;$/;"	t	class:nfd::ConfigFile
SuccessCallback	NFD/tools/nfdc.hpp	/^    typedef std::function<void(uint32_t)> SuccessCallback;$/;"	t	class:nfdc::Nfdc::FaceIdFetcher
SuccessCallback	ndn-cxx/src/detail/registered-prefix.hpp	/^  typedef function<void(const nfd::ControlParameters&)> SuccessCallback;$/;"	t	class:ndn::RegisteredPrefix
SuccessCallback	ndn-cxx/src/util/dns.hpp	/^typedef function<void (const IpAddress& address)> SuccessCallback;$/;"	t	namespace:ndn::dns
T	NFD/core/scheduler.cpp	/^  typedef std::function<void()> T;$/;"	t	struct:ns3::EventMemberImplObjTraits	file:
T	ndn-cxx/src/util/scheduler.cpp	/^  typedef std::function<void()> T;$/;"	t	struct:ns3::EventMemberImplObjTraits	file:
TAG_LEN	ndn-cxx/src/util/ethernet.hpp	/^const size_t TAG_LEN      = 4;      \/\/\/< Octets in 802.1Q tag (TPID + priority + VLAN)$/;"	m	namespace:ndn::util::ethernet
TEST_TOPO_TXT	tests/unit-tests/helper/ndn-global-routing-helper.t.cpp	/^const boost::filesystem::path TEST_TOPO_TXT = boost::filesystem::path(TEST_CONFIG_PATH) \/ "topo.txt";$/;"	m	namespace:ns3::ndn	file:
TEST_TRACE	tests/unit-tests/utils/tracers/ndn-app-delay-tracer.t.cpp	/^const boost::filesystem::path TEST_TRACE = boost::filesystem::path(TEST_CONFIG_PATH) \/ "trace.txt";$/;"	m	namespace:ns3::ndn	file:
TEXT	NFD/websocketpp/websocketpp/frame.hpp	/^        TEXT = 0x1,$/;"	e	enum:websocketpp::frame::opcode::value
TIMEOUT_TLS	NFD/websocketpp/websocketpp/connection.hpp	/^        TIMEOUT_TLS = 4,    \/\/ TLS handshake timed out$/;"	e	enum:websocketpp::session::fail::status::value
TIMEOUT_WS	NFD/websocketpp/websocketpp/connection.hpp	/^        TIMEOUT_WS = 5      \/\/ WS handshake timed out$/;"	e	enum:websocketpp::session::fail::status::value
TIMESTAMP_MARKER	ndn-cxx/src/name-component.hpp	/^static const uint8_t TIMESTAMP_MARKER = 0xFC;$/;"	m	namespace:ndn::name
TLV_DICT	ndn-cxx/tools/tlvdump.cpp	/^std::map<uint32_t, std::string> TLV_DICT = {$/;"	m	namespace:ndn	file:
TRANSPORT_INIT	NFD/websocketpp/websocketpp/connection.hpp	/^        TRANSPORT_INIT = 1,$/;"	e	enum:websocketpp::session::internal_state::value
TRIE_H_	utils/trie/trie.hpp	21;"	d
TRIE_WITH_POLICY_H_	utils/trie/trie-with-policy.hpp	21;"	d
TYPE_LEN	ndn-cxx/src/util/ethernet.hpp	/^const size_t TYPE_LEN     = 2;      \/\/\/< Octets in Ethertype field$/;"	m	namespace:ndn::util::ethernet
TYP_BIGE	NFD/websocketpp/websocketpp/common/network.hpp	51;"	d
TYP_INIT	NFD/websocketpp/websocketpp/common/network.hpp	49;"	d
TYP_SMLE	NFD/websocketpp/websocketpp/common/network.hpp	50;"	d
Table	NFD/daemon/table/cs-internal.hpp	/^typedef std::set<EntryImpl> Table;$/;"	t	namespace:nfd::cs
TablesConfigSection	NFD/daemon/mgmt/tables-config-section.cpp	/^TablesConfigSection::TablesConfigSection(Cs& cs,$/;"	f	class:nfd::TablesConfigSection
TablesConfigSection	NFD/daemon/mgmt/tables-config-section.hpp	/^class TablesConfigSection$/;"	c	namespace:nfd
TablesConfigSectionFixture	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^  TablesConfigSectionFixture()$/;"	f	class:nfd::tests::TablesConfigSectionFixture
TablesConfigSectionFixture	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^class TablesConfigSectionFixture : protected BaseFixture$/;"	c	namespace:nfd::tests	file:
Tag	ndn-cxx/src/encoding/encoding-buffer-fwd.hpp	/^typedef bool Tag;$/;"	t	namespace:ndn::encoding
Tag	ndn-cxx/src/tag.hpp	/^class Tag$/;"	c	namespace:ndn
TagHost	ndn-cxx/src/tag-host.hpp	/^class TagHost$/;"	c	namespace:ndn
TcpCanonizeProvider	ndn-cxx/src/util/face-uri.cpp	/^  TcpCanonizeProvider()$/;"	f	class:ndn::util::TcpCanonizeProvider
TcpCanonizeProvider	ndn-cxx/src/util/face-uri.cpp	/^class TcpCanonizeProvider : public IpHostCanonizeProvider<boost::asio::ip::tcp>$/;"	c	namespace:ndn::util	file:
TcpChannel	NFD/daemon/face/tcp-channel.cpp	/^TcpChannel::TcpChannel(const tcp::Endpoint& localEndpoint)$/;"	f	class:nfd::TcpChannel
TcpChannel	NFD/daemon/face/tcp-channel.hpp	/^class TcpChannel : public Channel$/;"	c	namespace:nfd
TcpFace	NFD/daemon/face/tcp-face.cpp	/^TcpFace::TcpFace(const FaceUri& remoteUri, const FaceUri& localUri,$/;"	f	class:nfd::TcpFace
TcpFace	NFD/daemon/face/tcp-face.hpp	/^class TcpFace : public StreamFace<boost::asio::ip::tcp>$/;"	c	namespace:nfd
TcpFactory	NFD/daemon/face/tcp-factory.cpp	/^TcpFactory::TcpFactory(const std::string& defaultPort\/* = "6363"*\/)$/;"	f	class:nfd::TcpFactory
TcpFactory	NFD/daemon/face/tcp-factory.hpp	/^class TcpFactory : public ProtocolFactory$/;"	c	namespace:nfd
TcpLocalFace	NFD/daemon/face/tcp-face.cpp	/^TcpLocalFace::TcpLocalFace(const FaceUri& remoteUri, const FaceUri& localUri,$/;"	f	class:nfd::TcpLocalFace
TcpLocalFace	NFD/daemon/face/tcp-face.hpp	/^class TcpLocalFace : public StreamFace<boost::asio::ip::tcp, LocalFace>$/;"	c	namespace:nfd
TcpTransport	ndn-cxx/src/transport/tcp-transport.cpp	/^TcpTransport::TcpTransport(const std::string& host, const std::string& port\/* = "6363"*\/)$/;"	f	class:ndn::TcpTransport
TcpTransport	ndn-cxx/src/transport/tcp-transport.hpp	/^class TcpTransport : public Transport$/;"	c	namespace:ndn
TestControlResponse	ndn-cxx/tests/unit-tests/management/nfd-control-response.t.cpp	/^const uint8_t TestControlResponse[] = {0x65, 0x17,$/;"	m	namespace:ndn::nfd::tests	file:
TestCountersFace	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^  TestCountersFace()$/;"	f	class:nfd::tests::TestCountersFace
TestCountersFace	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^class TestCountersFace : public DummyFace$/;"	c	namespace:nfd::tests
TestDataFixture	ndn-cxx/tests/unit-tests/data.t.cpp	/^  TestDataFixture()$/;"	f	class:ndn::tests::TestDataFixture
TestDataFixture	ndn-cxx/tests/unit-tests/data.t.cpp	/^class TestDataFixture$/;"	c	namespace:ndn::tests	file:
TestDigestComponent	ndn-cxx/tests/unit-tests/name.t.cpp	/^static const uint8_t TestDigestComponent[] = {$/;"	m	namespace:ndn::tests	file:
TestFaceManagerCommon	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  TestFaceManagerCommon()$/;"	f	class:nfd::tests::TestFaceManagerCommon
TestFaceManagerCommon	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^class TestFaceManagerCommon$/;"	c	namespace:nfd::tests	file:
TestFaceTable	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  TestFaceTable(Forwarder& forwarder)$/;"	f	class:nfd::tests::TestFaceTable
TestFaceTable	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^class TestFaceTable : public FaceTable$/;"	c	namespace:nfd::tests	file:
TestFaceTableFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  TestFaceTableFixture()$/;"	f	class:nfd::tests::TestFaceTableFixture
TestFaceTableFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^class TestFaceTableFixture : public BaseFixture$/;"	c	namespace:nfd::tests	file:
TestFibEntry	ndn-cxx/tests/unit-tests/management/nfd-fib-entry.t.cpp	/^const uint8_t TestFibEntry[] =$/;"	m	namespace:ndn::nfd::tests	file:
TestFibEntryNoNextHops	ndn-cxx/tests/unit-tests/management/nfd-fib-entry.t.cpp	/^const uint8_t TestFibEntryNoNextHops[] =$/;"	m	namespace:ndn::nfd::tests	file:
TestHomeEnvironmentFixture	ndn-cxx/tests/unit-tests/util/test-home-environment-fixture.hpp	/^  TestHomeEnvironmentFixture()$/;"	f	class:ndn::util::TestHomeEnvironmentFixture
TestHomeEnvironmentFixture	ndn-cxx/tests/unit-tests/util/test-home-environment-fixture.hpp	/^class TestHomeEnvironmentFixture$/;"	c	namespace:ndn::util
TestName	ndn-cxx/tests/unit-tests/name.t.cpp	/^static const uint8_t TestName[] = {$/;"	m	namespace:ndn::tests	file:
TestNameComponent	ndn-cxx/tests/unit-tests/name.t.cpp	/^static const uint8_t TestNameComponent[] = {$/;"	m	namespace:ndn::tests	file:
TestNextHopRecord	ndn-cxx/tests/unit-tests/management/nfd-fib-entry.t.cpp	/^const uint8_t TestNextHopRecord[] =$/;"	m	namespace:ndn::nfd::tests	file:
TestTag	ndn-cxx/tests/unit-tests/tag-host.t.cpp	/^class TestTag : public Tag$/;"	c	namespace:ndn::tests	file:
TestTag2	ndn-cxx/tests/unit-tests/tag-host.t.cpp	/^class TestTag2 : public Tag$/;"	c	namespace:ndn::tests	file:
Tester	tests/other/ndn-test.cpp	/^  Tester()$/;"	f	class:ns3::Tester
Tester	tests/other/ndn-test.cpp	/^class Tester {$/;"	c	namespace:ns3	file:
TesterApp	tests/unit-tests/model/ndn-l3-protocol.t.cpp	/^  TesterApp(const std::function<void(::ndn::Face& face)>& func)$/;"	f	class:ns3::ndn::TesterApp
TesterApp	tests/unit-tests/model/ndn-l3-protocol.t.cpp	/^class TesterApp$/;"	c	namespace:ns3::ndn	file:
TimePoint	ndn-cxx/src/security/validity-period.hpp	/^  typedef boost::chrono::time_point<time::system_clock, time::seconds> TimePoint;$/;"	t	class:ndn::security::ValidityPeriod
TimePoint	ndn-cxx/src/util/time.hpp	/^  typedef time_point TimePoint;$/;"	t	class:ndn::time::steady_clock
TimePoint	ndn-cxx/src/util/time.hpp	/^  typedef time_point TimePoint;$/;"	t	class:ndn::time::system_clock
TimedOutInterests	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::TimedOutInterests(const nfd::pit::Entry& entry)$/;"	f	class:ns3::ndn::L3RateTracer
TimedOutInterestsCallback	model/ndn-l3-protocol.hpp	/^  typedef void (*TimedOutInterestsCallback)(const nfd::pit::Entry& pitEntry);$/;"	t	class:ns3::ndn::L3Protocol
Timestamp	ndn-cxx/tests/unit-tests/name.t.cpp	/^  Timestamp()$/;"	f	class:ndn::tests::Timestamp
Timestamp	ndn-cxx/tests/unit-tests/name.t.cpp	/^class Timestamp$/;"	c	namespace:ndn::tests	file:
TlvType	ndn-cxx/src/lp/detail/field-decl.hpp	/^  typedef std::integral_constant<uint64_t, TYPE> TlvType;$/;"	t	class:ndn::lp::detail::FieldDecl
ToPacket	model/ndn-ns3.cpp	/^Convert::ToPacket(const T& pkt)$/;"	f	class:ns3::ndn::Convert
TopPrefixEntry	ndn-cxx/src/mgmt/dispatcher.hpp	/^  struct TopPrefixEntry$/;"	s	class:ndn::mgmt::Dispatcher
TopologyAppLink	NFD/tests/daemon/fw/topology-tester.hpp	/^  TopologyAppLink(shared_ptr<DummyLocalFace> face)$/;"	f	class:nfd::fw::tests::TopologyAppLink
TopologyAppLink	NFD/tests/daemon/fw/topology-tester.hpp	/^class TopologyAppLink : public TopologyLinkBase$/;"	c	namespace:nfd::fw::tests
TopologyLink	NFD/tests/daemon/fw/topology-tester.hpp	/^  TopologyLink(const time::nanoseconds& delay)$/;"	f	class:nfd::fw::tests::TopologyLink
TopologyLink	NFD/tests/daemon/fw/topology-tester.hpp	/^class TopologyLink : public TopologyLinkBase$/;"	c	namespace:nfd::fw::tests
TopologyLinkBase	NFD/tests/daemon/fw/topology-tester.hpp	/^  TopologyLinkBase()$/;"	f	class:nfd::fw::tests::TopologyLinkBase
TopologyLinkBase	NFD/tests/daemon/fw/topology-tester.hpp	/^class TopologyLinkBase : noncopyable$/;"	c	namespace:nfd::fw::tests
TopologyNode	NFD/tests/daemon/fw/topology-tester.hpp	/^typedef size_t TopologyNode;$/;"	t	namespace:nfd::fw::tests
TopologyTester	NFD/tests/daemon/fw/topology-tester.hpp	/^class TopologyTester : noncopyable$/;"	c	namespace:nfd::fw::tests
TpmCreateFunc	ndn-cxx/src/security/key-chain.hpp	/^  typedef function<unique_ptr<SecTpm>(const std::string&)> TpmCreateFunc;$/;"	t	class:ndn::security::KeyChain
TpmFactory	ndn-cxx/src/security/key-chain.cpp	/^typedef Factory<KeyChain::TpmCreateFunc> TpmFactory;$/;"	t	namespace:ndn::security	file:
TracePacket	examples/ndn-simple-with-pcap.cpp	/^  TracePacket(Ptr<const Packet> packet)$/;"	f	class:ns3::PcapWriter
Traits	utils/topology/rocketfuel-map-reader.hpp	/^  typedef boost::adjacency_list_traits<boost::setS, boost::setS, boost::undirectedS> Traits;$/;"	t	class:ns3::RocketfuelMapReader
TransmissionQueue	ndn-cxx/src/transport/stream-transport.hpp	/^  typedef std::list<BlockSequence> TransmissionQueue;$/;"	t	class:ndn::StreamTransportImpl
Transport	ndn-cxx/src/transport/transport.hpp	/^Transport::Transport()$/;"	f	class:ndn::Transport
Transport	ndn-cxx/src/transport/transport.hpp	/^class Transport : noncopyable$/;"	c	namespace:ndn
Transport	ndn-cxx/src/util/dummy-client-face.cpp	/^class DummyClientFace::Transport : public ndn::Transport$/;"	c	class:ndn::util::DummyClientFace	file:
TransportFixture	ndn-cxx/tests/unit-tests/transport/transport-fixture.hpp	/^class TransportFixture : public util::TestHomeEnvironmentFixture$/;"	c	namespace:ndn
TrustAnchorContainer	ndn-cxx/src/security/validator-config.hpp	/^    TrustAnchorContainer()$/;"	f	class:ndn::ValidatorConfig::TrustAnchorContainer
TrustAnchorContainer	ndn-cxx/src/security/validator-config.hpp	/^  class TrustAnchorContainer$/;"	c	class:ndn::ValidatorConfig
TwoLaptopsFixture	NFD/tests/daemon/fw/access-strategy.t.cpp	/^  TwoLaptopsFixture()$/;"	f	class:nfd::fw::tests::TwoLaptopsFixture
TwoLaptopsFixture	NFD/tests/daemon/fw/access-strategy.t.cpp	/^class TwoLaptopsFixture : public UnitTestTimeFixture$/;"	c	namespace:nfd::fw::tests	file:
TwoValidatorFixture	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  TwoValidatorFixture()$/;"	f	class:nfd::tests::TwoValidatorFixture
TwoValidatorFixture	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^class TwoValidatorFixture : public BaseFixture$/;"	c	namespace:nfd::tests	file:
Type	ndn-cxx/src/key-locator.hpp	/^  enum Type {$/;"	g	class:ndn::KeyLocator
Type	ndn-cxx/src/util/signal-signal.hpp	/^    typedef T Type;$/;"	t	struct:ndn::util::signal::Signal::TypeWrapper
TypeWrapper	ndn-cxx/src/util/signal-signal.hpp	/^  struct TypeWrapper$/;"	s	class:ndn::util::signal::Signal
UNALIGNED_LOAD32	NFD/core/city-hash.cpp	/^static uint32 UNALIGNED_LOAD32(const char *p) {$/;"	f	file:
UNALIGNED_LOAD64	NFD/core/city-hash.cpp	/^static uint64 UNALIGNED_LOAD64(const char *p) {$/;"	f	file:
UNINITIALIZED	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^        UNINITIALIZED = 0,$/;"	e	enum:websocketpp::transport::asio::endpoint::state
UNINITIALIZED	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^        UNINITIALIZED = 0,$/;"	e	enum:websocketpp::transport::asio::basic_socket::connection::state
UNKNOWN	NFD/websocketpp/websocketpp/connection.hpp	/^        UNKNOWN = 3,        \/\/ No failure information is available$/;"	e	enum:websocketpp::session::fail::status::value
UNKNOWN	utils/topology/rocketfuel-map-reader.hpp	/^  enum node_type_t { UNKNOWN = 0, CLIENT = 1, GATEWAY = 2, BACKBONE = 3 };$/;"	e	enum:ns3::RocketfuelMapReader::node_type_t
UNLIMITED_OPS	NFD/tests/limited-io.cpp	/^const int LimitedIo::UNLIMITED_OPS = std::numeric_limits<int>::max();$/;"	m	class:nfd::tests::LimitedIo	file:
UNLIMITED_OPS	NFD/tests/limited-io.hpp	/^  static const int UNLIMITED_OPS;$/;"	m	class:nfd::tests::LimitedIo
UNLIMITED_TIME	NFD/tests/limited-io.cpp	/^const time::nanoseconds LimitedIo::UNLIMITED_TIME = time::nanoseconds::min();$/;"	m	class:nfd::tests::LimitedIo	file:
UNLIMITED_TIME	NFD/tests/limited-io.hpp	/^  static const time::nanoseconds UNLIMITED_TIME;$/;"	m	class:nfd::tests::LimitedIo
UNREGISTER	NFD/rib/rib-update.hpp	/^    UNREGISTER   = 1,$/;"	e	enum:nfd::rib::RibUpdate::Action
UNREGISTER_COMMAND	NFD/tests/rib/rib-manager.t.cpp	/^  const Name UNREGISTER_COMMAND;$/;"	m	class:nfd::rib::tests::RibManagerFixture	file:
UNREGISTER_VERB	NFD/tests/rib/remote-registrator.t.cpp	/^  const name::Component UNREGISTER_VERB;$/;"	m	class:nfd::rib::tests::RemoteRegistratorFixture	file:
UNSIGNED_COMMAND_VERBS	NFD/daemon/mgmt/face-manager.cpp	/^const FaceManager::UnsignedVerbAndProcessor FaceManager::UNSIGNED_COMMAND_VERBS[] =$/;"	m	class:nfd::FaceManager	file:
UNSIGNED_COMMAND_VERBS	NFD/daemon/mgmt/face-manager.hpp	/^  static const UnsignedVerbAndProcessor UNSIGNED_COMMAND_VERBS[];$/;"	m	class:nfd::FaceManager
UNSIGNED_COMMAND_VERBS	NFD/daemon/mgmt/fib-manager.cpp	/^const FibManager::UnsignedVerbAndProcessor FibManager::UNSIGNED_COMMAND_VERBS[] =$/;"	m	class:nfd::FibManager	file:
UNSIGNED_COMMAND_VERBS	NFD/daemon/mgmt/fib-manager.hpp	/^  static const UnsignedVerbAndProcessor UNSIGNED_COMMAND_VERBS[];$/;"	m	class:nfd::FibManager
UNSIGNED_COMMAND_VERBS	NFD/rib/rib-manager.cpp	/^const RibManager::UnsignedVerbAndProcessor RibManager::UNSIGNED_COMMAND_VERBS[] =$/;"	m	class:nfd::rib::RibManager	file:
UNSIGNED_COMMAND_VERBS	NFD/rib/rib-manager.hpp	/^  static const UnsignedVerbAndProcessor UNSIGNED_COMMAND_VERBS[];$/;"	m	class:nfd::rib::RibManager
UNSUBSCRIBE	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    UNSUBSCRIBE,$/;"	e	enum:action_type	file:
UPDATE_MEASUREMENTS_N_LEVELS	NFD/daemon/fw/ncc-strategy.hpp	/^  static const int UPDATE_MEASUREMENTS_N_LEVELS = 2;$/;"	m	class:nfd::fw::NccStrategy
USER_INIT	NFD/websocketpp/websocketpp/connection.hpp	/^        USER_INIT = 0,$/;"	e	enum:websocketpp::session::internal_state::value
UTF8_VALIDATOR_HPP	NFD/websocketpp/websocketpp/utf8_validator.hpp	30;"	d
UdpCanonizeProvider	ndn-cxx/src/util/face-uri.cpp	/^  UdpCanonizeProvider()$/;"	f	class:ndn::util::UdpCanonizeProvider
UdpCanonizeProvider	ndn-cxx/src/util/face-uri.cpp	/^class UdpCanonizeProvider : public IpHostCanonizeProvider<boost::asio::ip::udp>$/;"	c	namespace:ndn::util	file:
UdpChannel	NFD/daemon/face/udp-channel.cpp	/^UdpChannel::UdpChannel(const udp::Endpoint& localEndpoint,$/;"	f	class:nfd::UdpChannel
UdpChannel	NFD/daemon/face/udp-channel.hpp	/^class UdpChannel : public Channel$/;"	c	namespace:nfd
UdpFace	NFD/daemon/face/udp-face.cpp	/^UdpFace::UdpFace(const FaceUri& remoteUri, const FaceUri& localUri,$/;"	f	class:nfd::UdpFace
UdpFace	NFD/daemon/face/udp-face.hpp	/^class UdpFace : public DatagramFace<boost::asio::ip::udp>$/;"	c	namespace:nfd
UdpFactory	NFD/daemon/face/udp-factory.cpp	/^UdpFactory::UdpFactory(const std::string& defaultPort\/* = "6363"*\/)$/;"	f	class:nfd::UdpFactory
UdpFactory	NFD/daemon/face/udp-factory.hpp	/^class UdpFactory : public ProtocolFactory$/;"	c	namespace:nfd
Uint128High64	NFD/core/city-hash.hpp	/^inline uint64 Uint128High64(const uint128& x) { return x.second; }$/;"	f
Uint128Low64	NFD/core/city-hash.hpp	/^inline uint64 Uint128Low64(const uint128& x) { return x.first; }$/;"	f
UnauthorizedCommandFixture	NFD/tests/daemon/mgmt/validation-common.hpp	/^  UnauthorizedCommandFixture()$/;"	f	class:nfd::tests::UnauthorizedCommandFixture
UnauthorizedCommandFixture	NFD/tests/daemon/mgmt/validation-common.hpp	/^class UnauthorizedCommandFixture : public CommandFixture<T>$/;"	c	namespace:nfd::tests
UnauthorizedRibManager	NFD/tests/rib/rib-manager.t.cpp	/^typedef RibManagerFixture UnauthorizedRibManager;$/;"	t	namespace:nfd::rib::tests	file:
Unicast	NFD/daemon/face/datagram-face.hpp	/^struct Unicast {};$/;"	s	namespace:nfd
UnitTestClock	ndn-cxx/src/util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::UnitTestClock(const nanoseconds& startTime)$/;"	f	class:ndn::time::UnitTestClock
UnitTestClock	ndn-cxx/src/util/time-unit-test-clock.hpp	/^class UnitTestClock : public CustomClock<BaseClock>$/;"	c	namespace:ndn::time
UnitTestClockTraits	ndn-cxx/src/util/time-unit-test-clock.hpp	/^class UnitTestClockTraits$/;"	c	namespace:ndn::time
UnitTestClockTraits	ndn-cxx/src/util/time-unit-test-clock.hpp	/^class UnitTestClockTraits<system_clock>$/;"	c	namespace:ndn::time
UnitTestSteadyClock	ndn-cxx/src/util/time-unit-test-clock.hpp	/^typedef UnitTestClock<steady_clock> UnitTestSteadyClock;$/;"	t	namespace:ndn::time
UnitTestSystemClock	ndn-cxx/src/util/time-unit-test-clock.hpp	/^typedef UnitTestClock<system_clock> UnitTestSystemClock;$/;"	t	namespace:ndn::time
UnitTestTimeFixture	NFD/tests/test-common.hpp	/^  UnitTestTimeFixture()$/;"	f	class:nfd::tests::UnitTestTimeFixture
UnitTestTimeFixture	NFD/tests/test-common.hpp	/^class UnitTestTimeFixture : public BaseFixture$/;"	c	namespace:nfd::tests
UnitTestTimeFixture	ndn-cxx/tests/unit-tests/unit-test-time-fixture.hpp	/^  UnitTestTimeFixture()$/;"	f	class:ndn::tests::UnitTestTimeFixture
UnitTestTimeFixture	ndn-cxx/tests/unit-tests/unit-test-time-fixture.hpp	/^class UnitTestTimeFixture$/;"	c	namespace:ndn::tests
UnitTestTimeFixture	ndn-cxx/tests/unit-tests/util/time-unit-test-clock.t.cpp	/^  UnitTestTimeFixture()$/;"	f	class:ndn::tests::UnitTestTimeFixture
UnitTestTimeFixture	ndn-cxx/tests/unit-tests/util/time-unit-test-clock.t.cpp	/^class UnitTestTimeFixture$/;"	c	namespace:ndn::tests	file:
UnixStreamChannel	NFD/daemon/face/unix-stream-channel.cpp	/^UnixStreamChannel::UnixStreamChannel(const unix_stream::Endpoint& endpoint)$/;"	f	class:nfd::UnixStreamChannel
UnixStreamChannel	NFD/daemon/face/unix-stream-channel.hpp	/^class UnixStreamChannel : public Channel$/;"	c	namespace:nfd
UnixStreamFace	NFD/daemon/face/unix-stream-face.cpp	/^UnixStreamFace::UnixStreamFace(const FaceUri& remoteUri, const FaceUri& localUri,$/;"	f	class:nfd::UnixStreamFace
UnixStreamFace	NFD/daemon/face/unix-stream-face.hpp	/^class UnixStreamFace : public StreamFace<boost::asio::local::stream_protocol, LocalFace>$/;"	c	namespace:nfd
UnixStreamFactory	NFD/daemon/face/unix-stream-factory.hpp	/^class UnixStreamFactory : public ProtocolFactory$/;"	c	namespace:nfd
UnixTransport	ndn-cxx/src/transport/unix-transport.cpp	/^UnixTransport::UnixTransport(const std::string& unixSocket)$/;"	f	class:ndn::UnixTransport
UnixTransport	ndn-cxx/src/transport/unix-transport.hpp	/^class UnixTransport : public Transport$/;"	c	namespace:ndn
UnknownConfigSectionHandler	NFD/core/config-file.hpp	/^                      bool \/*isDryRun*\/)> UnknownConfigSectionHandler;$/;"	t	namespace:nfd
UnregisterPrefixFailureCallback	ndn-cxx/src/face.hpp	/^typedef function<void(const std::string&)> UnregisterPrefixFailureCallback;$/;"	t	namespace:ndn
UnregisterPrefixSuccessCallback	ndn-cxx/src/face.hpp	/^typedef function<void()> UnregisterPrefixSuccessCallback;$/;"	t	namespace:ndn
UnsignedVerbAndProcessor	NFD/daemon/mgmt/face-manager.hpp	/^  typedef std::pair<Name::Component, UnsignedVerbProcessor> UnsignedVerbAndProcessor;$/;"	t	class:nfd::FaceManager
UnsignedVerbAndProcessor	NFD/daemon/mgmt/fib-manager.hpp	/^  typedef std::pair<Name::Component, UnsignedVerbProcessor> UnsignedVerbAndProcessor;$/;"	t	class:nfd::FibManager
UnsignedVerbAndProcessor	NFD/rib/rib-manager.hpp	/^  typedef std::pair<Name::Component, UnsignedVerbProcessor> UnsignedVerbAndProcessor;$/;"	t	class:nfd::rib::RibManager
UnsignedVerbDispatchTable	NFD/daemon/mgmt/face-manager.hpp	/^  typedef std::map<Name::Component, UnsignedVerbProcessor> UnsignedVerbDispatchTable;$/;"	t	class:nfd::FaceManager
UnsignedVerbDispatchTable	NFD/daemon/mgmt/fib-manager.hpp	/^  typedef std::map<Name::Component, UnsignedVerbProcessor> UnsignedVerbDispatchTable;$/;"	t	class:nfd::FibManager
UnsignedVerbDispatchTable	NFD/rib/rib-manager.hpp	/^  typedef std::map<Name::Component, UnsignedVerbProcessor> UnsignedVerbDispatchTable;$/;"	t	class:nfd::rib::RibManager
UnsignedVerbProcessor	NFD/daemon/mgmt/face-manager.hpp	/^  typedef function<void(FaceManager*, const Interest&)> UnsignedVerbProcessor;$/;"	t	class:nfd::FaceManager
UnsignedVerbProcessor	NFD/daemon/mgmt/fib-manager.hpp	/^  typedef function<void(FibManager*, const Interest&)> UnsignedVerbProcessor;$/;"	t	class:nfd::FibManager
UnsignedVerbProcessor	NFD/rib/rib-manager.hpp	/^  typedef function<void(RibManager*, const Interest&)> UnsignedVerbProcessor;$/;"	t	class:nfd::rib::RibManager
UpLink	helper/ndn-link-control-helper.cpp	/^LinkControlHelper::UpLink(Ptr<Node> node1, Ptr<Node> node2)$/;"	f	class:ns3::ndn::LinkControlHelper
UpLinkByName	helper/ndn-link-control-helper.cpp	/^LinkControlHelper::UpLinkByName(const std::string& node1, const std::string& node2)$/;"	f	class:ns3::ndn::LinkControlHelper
Update	helper/ndn-stack-helper.cpp	/^StackHelper::Update(Ptr<Node> node)$/;"	f	class:ns3::ndn::StackHelper
Update	helper/ndn-stack-helper.cpp	/^StackHelper::Update(const NodeContainer& c)$/;"	f	class:ns3::ndn::StackHelper
Update	helper/ndn-stack-helper.cpp	/^StackHelper::Update(const std::string& nodeName)$/;"	f	class:ns3::ndn::StackHelper
UpdateAll	helper/ndn-stack-helper.cpp	/^StackHelper::UpdateAll()$/;"	f	class:ns3::ndn::StackHelper
UpdateFailureCallback	NFD/rib/rib.hpp	/^  typedef function<void(uint32_t code, const std::string& error)> UpdateFailureCallback;$/;"	t	class:nfd::rib::Rib
UpdateNetDeviceFaceCreateCallback	helper/ndn-stack-helper.cpp	/^StackHelper::UpdateNetDeviceFaceCreateCallback(TypeId netDeviceType,$/;"	f	class:ns3::ndn::StackHelper
UpdateQueue	NFD/rib/rib.hpp	/^  typedef std::list<UpdateQueueItem> UpdateQueue;$/;"	t	class:nfd::rib::Rib
UpdateQueueItem	NFD/rib/rib.hpp	/^  struct UpdateQueueItem$/;"	s	class:nfd::rib::Rib
UpdateSuccessCallback	NFD/rib/rib.hpp	/^  typedef function<void()> UpdateSuccessCallback;$/;"	t	class:nfd::rib::Rib
Uri	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  Uri                 = 114,$/;"	e	enum:ndn::tlv::nfd::__anon11
UriScheme	ndn-cxx/src/encoding/tlv-nfd.hpp	/^  UriScheme             = 131,$/;"	e	enum:ndn::tlv::nfd::__anon11
VALUE_OFFSET	ndn-cxx/src/security/additional-description.cpp	/^static const size_t VALUE_OFFSET = 1;$/;"	m	namespace:ndn::security	file:
VERSION_MARKER	ndn-cxx/src/name-component.hpp	/^static const uint8_t VERSION_MARKER = 0xFD;$/;"	m	namespace:ndn::name
VIRTUAL_WITH_TESTS	NFD/common.hpp	32;"	d
VIRTUAL_WITH_TESTS	NFD/common.hpp	37;"	d
VP1	ndn-cxx/tests/unit-tests/security/validity-period.t.cpp	/^const uint8_t VP1[] = {$/;"	m	namespace:ndn::security::test	file:
VP_E1	ndn-cxx/tests/unit-tests/security/validity-period.t.cpp	/^const uint8_t VP_E1[] = {$/;"	m	namespace:ndn::security::test	file:
VP_E2	ndn-cxx/tests/unit-tests/security/validity-period.t.cpp	/^const uint8_t VP_E2[] = {$/;"	m	namespace:ndn::security::test	file:
VP_E3	ndn-cxx/tests/unit-tests/security/validity-period.t.cpp	/^const uint8_t VP_E3[] = {$/;"	m	namespace:ndn::security::test	file:
VP_E4	ndn-cxx/tests/unit-tests/security/validity-period.t.cpp	/^const uint8_t VP_E4[] = {$/;"	m	namespace:ndn::security::test	file:
VP_E5	ndn-cxx/tests/unit-tests/security/validity-period.t.cpp	/^const uint8_t VP_E5[] = {$/;"	m	namespace:ndn::security::test	file:
VP_E6	ndn-cxx/tests/unit-tests/security/validity-period.t.cpp	/^const uint8_t VP_E6[] = {$/;"	m	namespace:ndn::security::test	file:
ValidateParameters	ndn-cxx/src/mgmt/dispatcher.hpp	/^typedef std::function<bool(const ControlParameters& params)> ValidateParameters;$/;"	t	namespace:ndn::mgmt
ValidatedFaceRequestFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  ValidatedFaceRequestFixture()$/;"	f	class:nfd::tests::ValidatedFaceRequestFixture
ValidatedFaceRequestFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^class ValidatedFaceRequestFixture : public TestFaceTableFixture,$/;"	c	namespace:nfd::tests	file:
ValidationRequest	ndn-cxx/src/security/validation-request.hpp	/^  ValidationRequest(const Interest& interest,$/;"	f	class:ndn::ValidationRequest
ValidationRequest	ndn-cxx/src/security/validation-request.hpp	/^class ValidationRequest$/;"	c	namespace:ndn
Validator	ndn-cxx/src/security/validator.cpp	/^Validator::Validator(Face& face)$/;"	f	class:ndn::Validator
Validator	ndn-cxx/src/security/validator.cpp	/^Validator::Validator(Face* face)$/;"	f	class:ndn::Validator
Validator	ndn-cxx/src/security/validator.hpp	/^class Validator$/;"	c	namespace:ndn
ValidatorConfig	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::ValidatorConfig(Face& face,$/;"	f	class:ndn::ValidatorConfig
ValidatorConfig	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::ValidatorConfig(Face* face,$/;"	f	class:ndn::ValidatorConfig
ValidatorConfig	ndn-cxx/src/security/validator-config.hpp	/^class ValidatorConfig : public Validator$/;"	c	namespace:ndn
ValidatorNull	ndn-cxx/src/security/validator-null.hpp	/^class ValidatorNull : public Validator$/;"	c	namespace:ndn
ValidatorRegex	ndn-cxx/src/security/validator-regex.cpp	/^ValidatorRegex::ValidatorRegex(Face& face,$/;"	f	class:ndn::ValidatorRegex
ValidatorRegex	ndn-cxx/src/security/validator-regex.cpp	/^ValidatorRegex::ValidatorRegex(Face* face,$/;"	f	class:ndn::ValidatorRegex
ValidatorRegex	ndn-cxx/src/security/validator-regex.hpp	/^class ValidatorRegex : public Validator$/;"	c	namespace:ndn
ValidityPeriod	ndn-cxx/src/encoding/tlv.hpp	/^  ValidityPeriod = 253,$/;"	e	enum:ndn::tlv::__anon9
ValidityPeriod	ndn-cxx/src/security/validity-period.cpp	/^ValidityPeriod::ValidityPeriod(const Block& block)$/;"	f	class:ndn::security::ValidityPeriod
ValidityPeriod	ndn-cxx/src/security/validity-period.cpp	/^ValidityPeriod::ValidityPeriod(const time::system_clock::TimePoint& notBefore,$/;"	f	class:ndn::security::ValidityPeriod
ValidityPeriod	ndn-cxx/src/security/validity-period.hpp	/^class ValidityPeriod$/;"	c	namespace:ndn::security
ValueType	ndn-cxx/src/lp/detail/field-decl.hpp	/^  typedef VALUE ValueType;$/;"	t	class:ndn::lp::detail::FieldDecl
VerifySegment	ndn-cxx/src/util/segment-fetcher.hpp	/^  typedef function<bool (const Data& data)> VerifySegment;$/;"	t	class:ndn::util::SegmentFetcher
VertexIds	helper/boost-graph-ndn-global-routing-helper.hpp	/^  VertexIds(const NdnGlobalRouterGraph& graph)$/;"	f	struct:boost::VertexIds
VertexIds	helper/boost-graph-ndn-global-routing-helper.hpp	/^struct VertexIds {$/;"	s	namespace:boost
Vertice	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef ns3::Ptr<ns3::ndn::GlobalRouter> Vertice;$/;"	t	class:boost::NdnGlobalRouterGraph
VoidCallback	tests/unit-tests/ndn-cxx/face.t.cpp	/^  typedef std::function<void()> VoidCallback;$/;"	t	class:ns3::ndn::BaseTesterApp	file:
VoidParameters	ndn-cxx/tests/unit-tests/mgmt/dispatcher.t.cpp	/^  VoidParameters(const Block& wire)$/;"	f	class:ndn::mgmt::tests::VoidParameters
VoidParameters	ndn-cxx/tests/unit-tests/mgmt/dispatcher.t.cpp	/^class VoidParameters : public mgmt::ControlParameters$/;"	c	namespace:ndn::mgmt::tests	file:
WEBSOCKET	NFD/websocketpp/websocketpp/connection.hpp	/^        WEBSOCKET = 2,      \/\/ websocket close codes contain error$/;"	e	enum:websocketpp::session::fail::status::value
WEBSOCKETPP_CLIENT_ENDPOINT_HPP	NFD/websocketpp/websocketpp/roles/client_endpoint.hpp	29;"	d
WEBSOCKETPP_CLIENT_HPP	NFD/websocketpp/websocketpp/client.hpp	29;"	d
WEBSOCKETPP_CLOSE_HPP	NFD/websocketpp/websocketpp/close.hpp	30;"	d
WEBSOCKETPP_COMMON_CHRONO_HPP	NFD/websocketpp/websocketpp/common/chrono.hpp	29;"	d
WEBSOCKETPP_COMMON_CONNECTION_HDL_HPP	NFD/websocketpp/websocketpp/common/connection_hdl.hpp	29;"	d
WEBSOCKETPP_COMMON_CPP11_HPP	NFD/websocketpp/websocketpp/common/cpp11.hpp	29;"	d
WEBSOCKETPP_COMMON_FUNCTIONAL_HPP	NFD/websocketpp/websocketpp/common/functional.hpp	29;"	d
WEBSOCKETPP_COMMON_MD5_HPP	NFD/websocketpp/websocketpp/common/md5.hpp	58;"	d
WEBSOCKETPP_COMMON_MEMORY_HPP	NFD/websocketpp/websocketpp/common/memory.hpp	29;"	d
WEBSOCKETPP_COMMON_NETWORK_HPP	NFD/websocketpp/websocketpp/common/network.hpp	29;"	d
WEBSOCKETPP_COMMON_PLATFORMS_HPP	NFD/websocketpp/websocketpp/common/platforms.hpp	29;"	d
WEBSOCKETPP_COMMON_RANDOM_DEVICE_HPP	NFD/websocketpp/websocketpp/common/random.hpp	29;"	d
WEBSOCKETPP_COMMON_REGEX_HPP	NFD/websocketpp/websocketpp/common/regex.hpp	29;"	d
WEBSOCKETPP_COMMON_STDINT_HPP	NFD/websocketpp/websocketpp/common/stdint.hpp	29;"	d
WEBSOCKETPP_COMMON_SYSTEM_ERROR_HPP	NFD/websocketpp/websocketpp/common/system_error.hpp	29;"	d
WEBSOCKETPP_COMMON_THREAD_HPP	NFD/websocketpp/websocketpp/common/thread.hpp	29;"	d
WEBSOCKETPP_COMMON_TIME_HPP	NFD/websocketpp/websocketpp/common/time.hpp	29;"	d
WEBSOCKETPP_CONCURRENCY_BASIC_HPP	NFD/websocketpp/websocketpp/concurrency/basic.hpp	29;"	d
WEBSOCKETPP_CONCURRENCY_NONE_HPP	NFD/websocketpp/websocketpp/concurrency/none.hpp	29;"	d
WEBSOCKETPP_CONFIG_ASIO_CLIENT_HPP	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	29;"	d
WEBSOCKETPP_CONFIG_ASIO_DEBUG_HPP	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	29;"	d
WEBSOCKETPP_CONFIG_ASIO_HPP	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	29;"	d
WEBSOCKETPP_CONFIG_ASIO_TLS_CLIENT_HPP	NFD/websocketpp/websocketpp/config/asio_client.hpp	29;"	d
WEBSOCKETPP_CONFIG_ASIO_TLS_DEBUG_HPP	NFD/websocketpp/websocketpp/config/debug_asio.hpp	29;"	d
WEBSOCKETPP_CONFIG_ASIO_TLS_HPP	NFD/websocketpp/websocketpp/config/asio.hpp	29;"	d
WEBSOCKETPP_CONFIG_BOOST_CONFIG_HPP	NFD/websocketpp/websocketpp/config/boost_config.hpp	33;"	d
WEBSOCKETPP_CONFIG_CORE_CLIENT_HPP	NFD/websocketpp/websocketpp/config/core_client.hpp	29;"	d
WEBSOCKETPP_CONFIG_CORE_HPP	NFD/websocketpp/websocketpp/config/core.hpp	29;"	d
WEBSOCKETPP_CONFIG_DEBUG_HPP	NFD/websocketpp/websocketpp/config/debug.hpp	29;"	d
WEBSOCKETPP_CONFIG_MINIMAL_CLIENT_HPP	NFD/websocketpp/websocketpp/config/minimal_client.hpp	29;"	d
WEBSOCKETPP_CONFIG_MINIMAL_HPP	NFD/websocketpp/websocketpp/config/minimal_server.hpp	29;"	d
WEBSOCKETPP_CONNECTION_BASE_HPP	NFD/websocketpp/websocketpp/connection_base.hpp	29;"	d
WEBSOCKETPP_CONNECTION_HPP	NFD/websocketpp/websocketpp/connection.hpp	29;"	d
WEBSOCKETPP_CONNECTION_IMPL_HPP	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	29;"	d
WEBSOCKETPP_ECHO_SERVER_HANDLER_HPP	NFD/websocketpp/examples/echo_server/echo_handler.hpp	29;"	d
WEBSOCKETPP_ENDPOINT_BASE_HPP	NFD/websocketpp/websocketpp/endpoint_base.hpp	29;"	d
WEBSOCKETPP_ENDPOINT_HPP	NFD/websocketpp/websocketpp/endpoint.hpp	29;"	d
WEBSOCKETPP_ENDPOINT_IMPL_HPP	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	29;"	d
WEBSOCKETPP_ERROR_HPP	NFD/websocketpp/websocketpp/error.hpp	29;"	d
WEBSOCKETPP_EXTENSION_HPP	NFD/websocketpp/websocketpp/extensions/extension.hpp	29;"	d
WEBSOCKETPP_EXTENSION_PERMESSAGE_DEFLATE_DISABLED_HPP	NFD/websocketpp/websocketpp/extensions/permessage_deflate/disabled.hpp	29;"	d
WEBSOCKETPP_FRAME_HPP	NFD/websocketpp/websocketpp/frame.hpp	29;"	d
WEBSOCKETPP_LOGGER_BASIC_HPP	NFD/websocketpp/websocketpp/logger/basic.hpp	29;"	d
WEBSOCKETPP_LOGGER_LEVELS_HPP	NFD/websocketpp/websocketpp/logger/levels.hpp	29;"	d
WEBSOCKETPP_LOGGER_STUB_HPP	NFD/websocketpp/websocketpp/logger/stub.hpp	29;"	d
WEBSOCKETPP_LOGGER_SYSLOG_HPP	NFD/websocketpp/websocketpp/logger/syslog.hpp	32;"	d
WEBSOCKETPP_MESSAGE_BUFFER_ALLOC_HPP	NFD/websocketpp/websocketpp/message_buffer/alloc.hpp	29;"	d
WEBSOCKETPP_MESSAGE_BUFFER_ALLOC_HPP	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	29;"	d
WEBSOCKETPP_MESSAGE_BUFFER_MESSAGE_HPP	NFD/websocketpp/websocketpp/message_buffer/message.hpp	29;"	d
WEBSOCKETPP_PROCESSOR_BASE_HPP	NFD/websocketpp/websocketpp/processors/base.hpp	29;"	d
WEBSOCKETPP_PROCESSOR_EXTENSION_PERMESSAGEDEFLATE_HPP	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	29;"	d
WEBSOCKETPP_PROCESSOR_HPP	NFD/websocketpp/websocketpp/processors/processor.hpp	29;"	d
WEBSOCKETPP_PROCESSOR_HYBI00_HPP	NFD/websocketpp/websocketpp/processors/hybi00.hpp	29;"	d
WEBSOCKETPP_PROCESSOR_HYBI07_HPP	NFD/websocketpp/websocketpp/processors/hybi07.hpp	29;"	d
WEBSOCKETPP_PROCESSOR_HYBI08_HPP	NFD/websocketpp/websocketpp/processors/hybi08.hpp	29;"	d
WEBSOCKETPP_PROCESSOR_HYBI13_HPP	NFD/websocketpp/websocketpp/processors/hybi13.hpp	29;"	d
WEBSOCKETPP_RANDOM_NONE_HPP	NFD/websocketpp/websocketpp/random/none.hpp	29;"	d
WEBSOCKETPP_RANDOM_RANDOM_DEVICE_HPP	NFD/websocketpp/websocketpp/random/random_device.hpp	29;"	d
WEBSOCKETPP_SERVER_ENDPOINT_HPP	NFD/websocketpp/websocketpp/roles/server_endpoint.hpp	29;"	d
WEBSOCKETPP_SERVER_HPP	NFD/websocketpp/websocketpp/server.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_ASIO_BASE_HPP	NFD/websocketpp/websocketpp/transport/asio/base.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_ASIO_CON_HPP	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_ASIO_HPP	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_ASIO_SOCKET_BASE_HPP	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_BASE_CON_HPP	NFD/websocketpp/websocketpp/transport/base/connection.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_BASE_HPP	NFD/websocketpp/websocketpp/transport/base/endpoint.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_DEBUG_BASE_HPP	NFD/websocketpp/websocketpp/transport/debug/base.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_DEBUG_CON_HPP	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_DEBUG_HPP	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_IOSTREAM_BASE_HPP	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_IOSTREAM_CON_HPP	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_IOSTREAM_HPP	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_SECURITY_NONE_HPP	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_SECURITY_TLS_HPP	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_STUB_BASE_HPP	NFD/websocketpp/websocketpp/transport/stub/base.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_STUB_CON_HPP	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	29;"	d
WEBSOCKETPP_TRANSPORT_STUB_HPP	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	29;"	d
WEBSOCKETPP_URI_HPP	NFD/websocketpp/websocketpp/uri.hpp	29;"	d
WEBSOCKETPP_UTILITIES_HPP	NFD/websocketpp/websocketpp/utilities.hpp	29;"	d
WEBSOCKETPP_UTILITIES_IMPL_HPP	NFD/websocketpp/websocketpp/impl/utilities_impl.hpp	29;"	d
WEBSOCKETPP_VERSION_HPP	NFD/websocketpp/websocketpp/version.hpp	29;"	d
WEIGHTS	utils/topology/rocketfuel-weights-reader.hpp	/^  enum { LINKS, WEIGHTS, LATENCIES, POSITIONS };$/;"	e	enum:ns3::RocketfuelWeightsReader::__anon1
WRITE_HTTP_REQUEST	NFD/websocketpp/websocketpp/connection.hpp	/^        WRITE_HTTP_REQUEST = 3,$/;"	e	enum:websocketpp::session::internal_state::value
WRITE_HTTP_RESPONSE	NFD/websocketpp/websocketpp/connection.hpp	/^        WRITE_HTTP_RESPONSE = 5,$/;"	e	enum:websocketpp::session::internal_state::value
WRONG_CERT	ndn-cxx/tests/unit-tests/security/certificate.t.cpp	/^const uint8_t WRONG_CERT[] = { \/\/ first byte is wrong and an error will be thrown out$/;"	m	namespace:ndn	file:
WeakHashLen32WithSeeds	NFD/core/city-hash.cpp	/^static pair<uint64, uint64> WeakHashLen32WithSeeds($/;"	f	file:
WebSocketChannel	NFD/daemon/face/websocket-channel.cpp	/^WebSocketChannel::WebSocketChannel(const websocket::Endpoint& localEndpoint)$/;"	f	class:nfd::WebSocketChannel
WebSocketChannel	NFD/daemon/face/websocket-channel.hpp	/^class WebSocketChannel : public Channel$/;"	c	namespace:nfd
WebSocketFace	NFD/daemon/face/websocket-face.cpp	/^WebSocketFace::WebSocketFace(const FaceUri& remoteUri, const FaceUri& localUri,$/;"	f	class:nfd::WebSocketFace
WebSocketFace	NFD/daemon/face/websocket-face.hpp	/^class WebSocketFace : public Face$/;"	c	namespace:nfd
WebSocketFactory	NFD/daemon/face/websocket-factory.cpp	/^WebSocketFactory::WebSocketFactory(const std::string& defaultPort)$/;"	f	class:nfd::WebSocketFactory
WebSocketFactory	NFD/daemon/face/websocket-factory.hpp	/^class WebSocketFactory : public ProtocolFactory$/;"	c	namespace:nfd
WeightCombine	helper/boost-graph-ndn-global-routing-helper.hpp	/^struct WeightCombine$/;"	s	namespace:boost
WeightCompare	helper/boost-graph-ndn-global-routing-helper.hpp	/^struct WeightCompare : public std::binary_function<property_traits<EdgeWeights>::reference,$/;"	s	namespace:boost
WillSendOutInterest	apps/ndn-consumer-window.cpp	/^ConsumerWindow::WillSendOutInterest(uint32_t sequenceNumber)$/;"	f	class:ns3::ndn::ConsumerWindow
WillSendOutInterest	apps/ndn-consumer.cpp	/^Consumer::WillSendOutInterest(uint32_t sequenceNumber)$/;"	f	class:ns3::ndn::Consumer
WindowTraceCallback	apps/ndn-consumer-window.hpp	/^  typedef void (*WindowTraceCallback)(uint32_t);$/;"	t	class:ns3::ndn::ConsumerWindow
WireDecodable	ndn-cxx/src/util/concepts.hpp	/^class WireDecodable$/;"	c	namespace:ndn
WireDecodableType	ndn-cxx/tests/unit-tests/util/concepts.t.cpp	/^class WireDecodableType$/;"	c	namespace:ndn::tests	file:
WireEncodable	ndn-cxx/src/util/concepts.hpp	/^class WireEncodable$/;"	c	namespace:ndn
WireEncodableType	ndn-cxx/tests/unit-tests/util/concepts.t.cpp	/^class WireEncodableType$/;"	c	namespace:ndn::tests	file:
WireEncodableType2	ndn-cxx/tests/unit-tests/util/concepts.t.cpp	/^class WireEncodableType2$/;"	c	namespace:ndn::tests	file:
WireEncodableWithEncodingBuffer	ndn-cxx/src/util/concepts.hpp	/^class WireEncodableWithEncodingBuffer$/;"	c	namespace:ndn
ZSW_MD5_BYTE_ORDER	NFD/websocketpp/websocketpp/common/md5.hpp	101;"	d
ZSW_MD5_BYTE_ORDER	NFD/websocketpp/websocketpp/common/md5.hpp	97;"	d
ZSW_MD5_BYTE_ORDER	NFD/websocketpp/websocketpp/common/md5.hpp	99;"	d
ZSW_MD5_F	NFD/websocketpp/websocketpp/common/md5.hpp	239;"	d
ZSW_MD5_G	NFD/websocketpp/websocketpp/common/md5.hpp	265;"	d
ZSW_MD5_H	NFD/websocketpp/websocketpp/common/md5.hpp	291;"	d
ZSW_MD5_I	NFD/websocketpp/websocketpp/common/md5.hpp	317;"	d
ZSW_MD5_ROTATE_LEFT	NFD/websocketpp/websocketpp/common/md5.hpp	234;"	d
ZSW_MD5_T1	NFD/websocketpp/websocketpp/common/md5.hpp	105;"	d
ZSW_MD5_T10	NFD/websocketpp/websocketpp/common/md5.hpp	114;"	d
ZSW_MD5_T11	NFD/websocketpp/websocketpp/common/md5.hpp	115;"	d
ZSW_MD5_T12	NFD/websocketpp/websocketpp/common/md5.hpp	116;"	d
ZSW_MD5_T13	NFD/websocketpp/websocketpp/common/md5.hpp	117;"	d
ZSW_MD5_T14	NFD/websocketpp/websocketpp/common/md5.hpp	118;"	d
ZSW_MD5_T15	NFD/websocketpp/websocketpp/common/md5.hpp	119;"	d
ZSW_MD5_T16	NFD/websocketpp/websocketpp/common/md5.hpp	120;"	d
ZSW_MD5_T17	NFD/websocketpp/websocketpp/common/md5.hpp	121;"	d
ZSW_MD5_T18	NFD/websocketpp/websocketpp/common/md5.hpp	122;"	d
ZSW_MD5_T19	NFD/websocketpp/websocketpp/common/md5.hpp	123;"	d
ZSW_MD5_T2	NFD/websocketpp/websocketpp/common/md5.hpp	106;"	d
ZSW_MD5_T20	NFD/websocketpp/websocketpp/common/md5.hpp	124;"	d
ZSW_MD5_T21	NFD/websocketpp/websocketpp/common/md5.hpp	125;"	d
ZSW_MD5_T22	NFD/websocketpp/websocketpp/common/md5.hpp	126;"	d
ZSW_MD5_T23	NFD/websocketpp/websocketpp/common/md5.hpp	127;"	d
ZSW_MD5_T24	NFD/websocketpp/websocketpp/common/md5.hpp	128;"	d
ZSW_MD5_T25	NFD/websocketpp/websocketpp/common/md5.hpp	129;"	d
ZSW_MD5_T26	NFD/websocketpp/websocketpp/common/md5.hpp	130;"	d
ZSW_MD5_T27	NFD/websocketpp/websocketpp/common/md5.hpp	131;"	d
ZSW_MD5_T28	NFD/websocketpp/websocketpp/common/md5.hpp	132;"	d
ZSW_MD5_T29	NFD/websocketpp/websocketpp/common/md5.hpp	133;"	d
ZSW_MD5_T3	NFD/websocketpp/websocketpp/common/md5.hpp	107;"	d
ZSW_MD5_T30	NFD/websocketpp/websocketpp/common/md5.hpp	134;"	d
ZSW_MD5_T31	NFD/websocketpp/websocketpp/common/md5.hpp	135;"	d
ZSW_MD5_T32	NFD/websocketpp/websocketpp/common/md5.hpp	136;"	d
ZSW_MD5_T33	NFD/websocketpp/websocketpp/common/md5.hpp	137;"	d
ZSW_MD5_T34	NFD/websocketpp/websocketpp/common/md5.hpp	138;"	d
ZSW_MD5_T35	NFD/websocketpp/websocketpp/common/md5.hpp	139;"	d
ZSW_MD5_T36	NFD/websocketpp/websocketpp/common/md5.hpp	140;"	d
ZSW_MD5_T37	NFD/websocketpp/websocketpp/common/md5.hpp	141;"	d
ZSW_MD5_T38	NFD/websocketpp/websocketpp/common/md5.hpp	142;"	d
ZSW_MD5_T39	NFD/websocketpp/websocketpp/common/md5.hpp	143;"	d
ZSW_MD5_T4	NFD/websocketpp/websocketpp/common/md5.hpp	108;"	d
ZSW_MD5_T40	NFD/websocketpp/websocketpp/common/md5.hpp	144;"	d
ZSW_MD5_T41	NFD/websocketpp/websocketpp/common/md5.hpp	145;"	d
ZSW_MD5_T42	NFD/websocketpp/websocketpp/common/md5.hpp	146;"	d
ZSW_MD5_T43	NFD/websocketpp/websocketpp/common/md5.hpp	147;"	d
ZSW_MD5_T44	NFD/websocketpp/websocketpp/common/md5.hpp	148;"	d
ZSW_MD5_T45	NFD/websocketpp/websocketpp/common/md5.hpp	149;"	d
ZSW_MD5_T46	NFD/websocketpp/websocketpp/common/md5.hpp	150;"	d
ZSW_MD5_T47	NFD/websocketpp/websocketpp/common/md5.hpp	151;"	d
ZSW_MD5_T48	NFD/websocketpp/websocketpp/common/md5.hpp	152;"	d
ZSW_MD5_T49	NFD/websocketpp/websocketpp/common/md5.hpp	153;"	d
ZSW_MD5_T5	NFD/websocketpp/websocketpp/common/md5.hpp	109;"	d
ZSW_MD5_T50	NFD/websocketpp/websocketpp/common/md5.hpp	154;"	d
ZSW_MD5_T51	NFD/websocketpp/websocketpp/common/md5.hpp	155;"	d
ZSW_MD5_T52	NFD/websocketpp/websocketpp/common/md5.hpp	156;"	d
ZSW_MD5_T53	NFD/websocketpp/websocketpp/common/md5.hpp	157;"	d
ZSW_MD5_T54	NFD/websocketpp/websocketpp/common/md5.hpp	158;"	d
ZSW_MD5_T55	NFD/websocketpp/websocketpp/common/md5.hpp	159;"	d
ZSW_MD5_T56	NFD/websocketpp/websocketpp/common/md5.hpp	160;"	d
ZSW_MD5_T57	NFD/websocketpp/websocketpp/common/md5.hpp	161;"	d
ZSW_MD5_T58	NFD/websocketpp/websocketpp/common/md5.hpp	162;"	d
ZSW_MD5_T59	NFD/websocketpp/websocketpp/common/md5.hpp	163;"	d
ZSW_MD5_T6	NFD/websocketpp/websocketpp/common/md5.hpp	110;"	d
ZSW_MD5_T60	NFD/websocketpp/websocketpp/common/md5.hpp	164;"	d
ZSW_MD5_T61	NFD/websocketpp/websocketpp/common/md5.hpp	165;"	d
ZSW_MD5_T62	NFD/websocketpp/websocketpp/common/md5.hpp	166;"	d
ZSW_MD5_T63	NFD/websocketpp/websocketpp/common/md5.hpp	167;"	d
ZSW_MD5_T64	NFD/websocketpp/websocketpp/common/md5.hpp	168;"	d
ZSW_MD5_T7	NFD/websocketpp/websocketpp/common/md5.hpp	111;"	d
ZSW_MD5_T8	NFD/websocketpp/websocketpp/common/md5.hpp	112;"	d
ZSW_MD5_T9	NFD/websocketpp/websocketpp/common/md5.hpp	113;"	d
ZSW_MD5_T_MASK	NFD/websocketpp/websocketpp/common/md5.hpp	104;"	d
_BASE64_HPP_	NFD/websocketpp/websocketpp/base64/base64.hpp	37;"	d
_BATCHES_H_	utils/batches.hpp	21;"	d
_VARIADIC_MAX	NFD/websocketpp/websocketpp/common/platforms.hpp	43;"	d
_WEBSOCKETPP_CONSTEXPR_TOKEN_	NFD/websocketpp/websocketpp/common/cpp11.hpp	113;"	d
_WEBSOCKETPP_CONSTEXPR_TOKEN_	NFD/websocketpp/websocketpp/common/cpp11.hpp	117;"	d
_WEBSOCKETPP_CONSTEXPR_TOKEN_	NFD/websocketpp/websocketpp/common/cpp11.hpp	120;"	d
_WEBSOCKETPP_CONSTEXPR_TOKEN_	NFD/websocketpp/websocketpp/common/cpp11.hpp	75;"	d
_WEBSOCKETPP_CONSTEXPR_TOKEN_	NFD/websocketpp/websocketpp/config/boost_config.hpp	69;"	d
_WEBSOCKETPP_CPP11_CHRONO_	NFD/websocketpp/websocketpp/common/chrono.hpp	33;"	d
_WEBSOCKETPP_CPP11_CHRONO_	NFD/websocketpp/websocketpp/config/boost_config.hpp	45;"	d
_WEBSOCKETPP_CPP11_FUNCTIONAL_	NFD/websocketpp/websocketpp/common/functional.hpp	38;"	d
_WEBSOCKETPP_CPP11_FUNCTIONAL_	NFD/websocketpp/websocketpp/common/functional.hpp	46;"	d
_WEBSOCKETPP_CPP11_FUNCTIONAL_	NFD/websocketpp/websocketpp/config/boost_config.hpp	41;"	d
_WEBSOCKETPP_CPP11_INTERNAL_	NFD/websocketpp/websocketpp/common/cpp11.hpp	57;"	d
_WEBSOCKETPP_CPP11_MEMORY_	NFD/websocketpp/websocketpp/common/memory.hpp	38;"	d
_WEBSOCKETPP_CPP11_MEMORY_	NFD/websocketpp/websocketpp/common/memory.hpp	46;"	d
_WEBSOCKETPP_CPP11_MEMORY_	NFD/websocketpp/websocketpp/common/random.hpp	47;"	d
_WEBSOCKETPP_CPP11_MEMORY_	NFD/websocketpp/websocketpp/config/boost_config.hpp	40;"	d
_WEBSOCKETPP_CPP11_RANDOM_DEVICE_	NFD/websocketpp/websocketpp/common/random.hpp	38;"	d
_WEBSOCKETPP_CPP11_RANDOM_DEVICE_	NFD/websocketpp/websocketpp/config/boost_config.hpp	49;"	d
_WEBSOCKETPP_CPP11_REGEX_	NFD/websocketpp/websocketpp/common/regex.hpp	33;"	d
_WEBSOCKETPP_CPP11_REGEX_	NFD/websocketpp/websocketpp/config/boost_config.hpp	53;"	d
_WEBSOCKETPP_CPP11_SYSTEM_ERROR_	NFD/websocketpp/websocketpp/common/system_error.hpp	39;"	d
_WEBSOCKETPP_CPP11_SYSTEM_ERROR_	NFD/websocketpp/websocketpp/common/system_error.hpp	47;"	d
_WEBSOCKETPP_CPP11_SYSTEM_ERROR_	NFD/websocketpp/websocketpp/config/boost_config.hpp	57;"	d
_WEBSOCKETPP_CPP11_THREAD_	NFD/websocketpp/websocketpp/common/thread.hpp	41;"	d
_WEBSOCKETPP_CPP11_THREAD_	NFD/websocketpp/websocketpp/config/boost_config.hpp	61;"	d
_WEBSOCKETPP_ERROR_CODE_ENUM_NS_END_	NFD/websocketpp/websocketpp/common/system_error.hpp	69;"	d
_WEBSOCKETPP_ERROR_CODE_ENUM_NS_START_	NFD/websocketpp/websocketpp/common/system_error.hpp	68;"	d
_WEBSOCKETPP_INITIALIZER_LISTS_	NFD/websocketpp/websocketpp/common/cpp11.hpp	127;"	d
_WEBSOCKETPP_INITIALIZER_LISTS_	NFD/websocketpp/websocketpp/common/cpp11.hpp	78;"	d
_WEBSOCKETPP_INITIALIZER_LISTS_	NFD/websocketpp/websocketpp/config/boost_config.hpp	65;"	d
_WEBSOCKETPP_NOEXCEPT_TOKEN_	NFD/websocketpp/websocketpp/common/cpp11.hpp	101;"	d
_WEBSOCKETPP_NOEXCEPT_TOKEN_	NFD/websocketpp/websocketpp/common/cpp11.hpp	104;"	d
_WEBSOCKETPP_NOEXCEPT_TOKEN_	NFD/websocketpp/websocketpp/common/cpp11.hpp	72;"	d
_WEBSOCKETPP_NOEXCEPT_TOKEN_	NFD/websocketpp/websocketpp/common/cpp11.hpp	97;"	d
_WEBSOCKETPP_NOEXCEPT_TOKEN_	NFD/websocketpp/websocketpp/config/boost_config.hpp	68;"	d
_WEBSOCKETPP_NULLPTR_TOKEN_	NFD/websocketpp/websocketpp/common/cpp11.hpp	134;"	d
_WEBSOCKETPP_NULLPTR_TOKEN_	NFD/websocketpp/websocketpp/common/cpp11.hpp	138;"	d
_WEBSOCKETPP_NULLPTR_TOKEN_	NFD/websocketpp/websocketpp/common/cpp11.hpp	141;"	d
_WEBSOCKETPP_NULLPTR_TOKEN_	NFD/websocketpp/websocketpp/common/cpp11.hpp	144;"	d
_WEBSOCKETPP_NULLPTR_TOKEN_	NFD/websocketpp/websocketpp/common/cpp11.hpp	81;"	d
_WEBSOCKETPP_PUTTIME_	NFD/websocketpp/websocketpp/common/cpp11.hpp	87;"	d
_WEBSOCKETPP_REF	NFD/websocketpp/websocketpp/common/functional.hpp	76;"	d
__ANNOTATED_TOPOLOGY_READER_H__	utils/topology/annotated-topology-reader.hpp	23;"	d
__STDC_LIMIT_MACROS	NFD/websocketpp/websocketpp/common/stdint.hpp	32;"	d
__has_extension	NFD/websocketpp/websocketpp/common/cpp11.hpp	40;"	d
__has_feature	NFD/websocketpp/websocketpp/common/cpp11.hpp	37;"	d
_htonll	NFD/websocketpp/websocketpp/common/network.hpp	/^inline uint64_t _htonll(uint64_t src) {$/;"	f	namespace:websocketpp::lib::net
_ntohll	NFD/websocketpp/websocketpp/common/network.hpp	/^inline uint64_t _ntohll(uint64_t src) {$/;"	f	namespace:websocketpp::lib::net
abcd	NFD/websocketpp/websocketpp/common/md5.hpp	/^    md5_word_t abcd[4];     \/* digest buffer *\/$/;"	m	struct:websocketpp::md5::md5_state_s
abnormal_close	NFD/websocketpp/websocketpp/close.hpp	/^    static value const abnormal_close = 1006;$/;"	m	namespace:websocketpp::close::status
accept	NFD/daemon/face/tcp-channel.cpp	/^TcpChannel::accept(const FaceCreatedCallback& onFaceCreated,$/;"	f	class:nfd::TcpChannel
accept	NFD/daemon/face/unix-stream-channel.cpp	/^UnixStreamChannel::accept(const FaceCreatedCallback& onFaceCreated,$/;"	f	class:nfd::UnixStreamChannel
accept	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    accept = 1,$/;"	e	enum:websocketpp::extensions::permessage_deflate::mode::value
accept_handler	NFD/websocketpp/websocketpp/transport/base/endpoint.hpp	/^typedef lib::function<void(lib::error_code const &)> accept_handler;$/;"	t	namespace:websocketpp::transport
accepted	NFD/websocketpp/websocketpp/http/constants.hpp	/^            accepted = 202,$/;"	e	enum:websocketpp::http::status_code::value
acceptor_ptr	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    typedef lib::shared_ptr<boost::asio::ip::tcp::acceptor> acceptor_ptr;$/;"	t	class:websocketpp::transport::asio::endpoint
access	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static value const access = 1;$/;"	m	struct:websocketpp::log::channel_type_hint
access_core	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const access_core = 0x00003003;$/;"	m	struct:websocketpp::log::alevel
accessor1	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^  MeasurementsAccessor& accessor1;$/;"	m	class:nfd::tests::MeasurementsAccessorFixture	file:
accessor2	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^  MeasurementsAccessor& accessor2;$/;"	m	class:nfd::tests::MeasurementsAccessorFixture	file:
accumulator	ndn-cxx/tools/ndnsec/util.hpp	/^AccumulatorType<T>* accumulator()$/;"	f
accumulator	ndn-cxx/tools/ndnsec/util.hpp	/^AccumulatorType<T>* accumulator(T* store)$/;"	f
action	NFD/rib/fib-update.hpp	/^  Action action;$/;"	m	class:nfd::rib::FibUpdate
action	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    action(action_type t, connection_hdl h) : type(t), hdl(h) {}$/;"	f	struct:action
action	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    action(action_type t, connection_hdl h, server::message_ptr m)$/;"	f	struct:action
action	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^struct action {$/;"	s	file:
action_after_shutdown	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    action_after_shutdown,$/;"	e	enum:websocketpp::transport::error::value
action_type	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^enum action_type {$/;"	g	file:
add	NFD/daemon/face/ndnlp-partial-message-store.cpp	/^PartialMessage::add(uint16_t fragIndex, uint16_t fragCount, const Block& payload)$/;"	f	class:nfd::ndnlp::PartialMessage
add	NFD/daemon/fw/face-table.cpp	/^FaceTable::add(shared_ptr<Face> face)$/;"	f	class:nfd::FaceTable
add	NFD/daemon/table/dead-nonce-list.cpp	/^DeadNonceList::add(const Name& name, uint32_t nonce)$/;"	f	class:nfd::DeadNonceList
add	NFD/rib/rib-update-batch.cpp	/^RibUpdateBatch::add(const RibUpdate& update)$/;"	f	class:nfd::rib::RibUpdateBatch
add	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  add(shared_ptr<Face> face)$/;"	f	class:nfd::tests::TestFaceTable
add	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  add(shared_ptr<Face> face)$/;"	f	class:nfd::tests::FaceQueryStatusPublisherFixture
add	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^  add(shared_ptr<Face> face)$/;"	f	class:nfd::tests::FaceStatusPublisherFixture
add	NFD/tools/ndn-autoconfig-server.cpp	/^  add(const Name& prefix)$/;"	f	class:ndn::PrefixCollection
add	ndn-cxx/src/lp/packet.hpp	/^  add(const typename FIELD::ValueType& value)$/;"	f	class:ndn::lp::Packet
add	ndn-cxx/src/security/validator-config.hpp	/^    add(shared_ptr<IdentityCertificate> certificate)$/;"	f	class:ndn::ValidatorConfig::TrustAnchorContainer
add	ndn-cxx/src/util/monotonic_deadline_timer.hpp	/^  add(const time_type& time, const duration_type& duration)$/;"	f	struct:boost::asio::time_traits
addAppFace	NFD/tests/daemon/fw/topology-tester.hpp	/^  addAppFace(TopologyNode i)$/;"	f	class:nfd::fw::tests::TopologyTester
addAppFace	NFD/tests/daemon/fw/topology-tester.hpp	/^  addAppFace(TopologyNode i, const Name& prefix, uint64_t cost = 0)$/;"	f	class:nfd::fw::tests::TopologyTester
addAppMetaInfo	ndn-cxx/src/meta-info.cpp	/^MetaInfo::addAppMetaInfo(const Block& block)$/;"	f	class:ndn::MetaInfo
addAppToAcl	ndn-cxx/src/security/key-chain.hpp	/^  addAppToAcl(const Name& keyName, KeyClass keyClass, const std::string& appPath, AclType acl)$/;"	f	class:ndn::security::KeyChain
addAppToAcl	ndn-cxx/src/security/sec-tpm-file.hpp	/^  addAppToAcl(const Name& keyName, KeyClass keyClass, const std::string& appPath, AclType acl)$/;"	f	class:ndn::SecTpmFile
addAppToAcl	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::addAppToAcl(const Name& keyName, KeyClass keyClass, const string& appPath, AclType acl)$/;"	f	class:ndn::SecTpmOsx
addAppToAcl	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::addAppToAcl(const Name& keyName, KeyClass keyClass, const std::string& appPath,$/;"	f	class:ndn::security::DummyTpm
addAppToAcl	utils/dummy-keychain.cpp	/^DummyTpm::addAppToAcl(const Name& keyName, KeyClass keyClass, const std::string& appPath,$/;"	f	class:ndn::security::DummyTpm
addApps	helper/ndn-scenario-helper.cpp	/^ScenarioHelper::addApps(std::initializer_list<ScenarioHelper::AppInfo> apps)$/;"	f	class:ns3::ndn::ScenarioHelper
addCertificate	ndn-cxx/src/security/key-chain.hpp	/^  addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::KeyChain
addCertificate	ndn-cxx/src/security/key.cpp	/^Key::addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::Key
addCertificate	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::PibMemory
addCertificate	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::PibSqlite3
addCertificate	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::SecPublicInfoSqlite3
addCertificate	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::DummyPublicInfo
addCertificate	utils/dummy-keychain.cpp	/^DummyPublicInfo::addCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::DummyPublicInfo
addCertificateAsIdentityDefault	ndn-cxx/src/security/key-chain.hpp	/^  addCertificateAsIdentityDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::KeyChain
addCertificateAsIdentityDefault	ndn-cxx/src/security/sec-public-info.cpp	/^SecPublicInfo::addCertificateAsIdentityDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::SecPublicInfo
addCertificateAsKeyDefault	ndn-cxx/src/security/key-chain.hpp	/^  addCertificateAsKeyDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::KeyChain
addCertificateAsKeyDefault	ndn-cxx/src/security/sec-public-info.cpp	/^SecPublicInfo::addCertificateAsKeyDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::SecPublicInfo
addCertificateAsSystemDefault	ndn-cxx/src/security/key-chain.hpp	/^  addCertificateAsSystemDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::KeyChain
addCertificateAsSystemDefault	ndn-cxx/src/security/sec-public-info.cpp	/^SecPublicInfo::addCertificateAsSystemDefault(const IdentityCertificate& certificate)$/;"	f	class:ndn::SecPublicInfo
addChannel	NFD/tests/daemon/mgmt/channel-status-common.hpp	/^  addChannel(const std::string& channelUri)$/;"	f	class:nfd::tests::DummyProtocolFactory
addChecker	ndn-cxx/src/security/conf/rule.hpp	/^  addChecker(const shared_ptr<Checker>& checker)$/;"	f	class:ndn::security::conf::Rule
addChild	NFD/rib/rib-entry.cpp	/^RibEntry::addChild(shared_ptr<RibEntry> child)$/;"	f	class:nfd::rib::RibEntry
addControlCommand	ndn-cxx/src/mgmt/dispatcher.hpp	/^Dispatcher::addControlCommand(const PartialName& relPrefix,$/;"	f	class:ndn::mgmt::Dispatcher
addCreatedFaceToForwarder	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::addCreatedFaceToForwarder(const shared_ptr<Face>& newFace)$/;"	f	class:nfd::FaceManager
addDataVerificationRule	ndn-cxx/src/security/validator-regex.cpp	/^ValidatorRegex::addDataVerificationRule(shared_ptr<SecRuleRelative> rule)$/;"	f	class:ndn::ValidatorRegex
addDelegation	ndn-cxx/src/link.cpp	/^Link::addDelegation(uint32_t preference, const Name& name)$/;"	f	class:ndn::Link
addEchoProducer	NFD/tests/daemon/fw/topology-tester.hpp	/^  addEchoProducer(DummyClientFace& face, const Name& prefix = "\/")$/;"	f	class:nfd::fw::tests::TopologyTester
addExtension	ndn-cxx/src/security/certificate.hpp	/^  addExtension(const CertificateExtension& extension)$/;"	f	class:ndn::Certificate
addFace	NFD/daemon/fw/forwarder.hpp	/^Forwarder::addFace(shared_ptr<Face> face)$/;"	f	class:nfd::Forwarder
addFace	NFD/tests/daemon/fw/topology-tester.hpp	/^  addFace(TopologyNode i, shared_ptr<DummyFace> face)$/;"	f	class:nfd::fw::tests::TopologyLink
addFace	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  addFace(shared_ptr<Face> face)$/;"	f	class:nfd::tests::FibManagerFixture
addFace	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^  addFace(shared_ptr<Face> face)$/;"	f	class:nfd::tests::InternalFaceFixture
addFace	model/ndn-l3-protocol.cpp	/^L3Protocol::addFace(shared_ptr<Face> face)$/;"	f	class:ns3::ndn::L3Protocol
addFibUpdate	NFD/rib/fib-updater.cpp	/^FibUpdater::addFibUpdate(FibUpdate update)$/;"	f	class:nfd::rib::FibUpdater
addFilter	ndn-cxx/src/security/conf/rule.hpp	/^  addFilter(const shared_ptr<Filter>& filter)$/;"	f	class:ndn::security::conf::Rule
addForwarder	NFD/tests/daemon/fw/topology-tester.hpp	/^  addForwarder()$/;"	f	class:nfd::fw::tests::TopologyTester
addIdentity	NFD/tests/identity-management-fixture.cpp	/^IdentityManagementFixture::addIdentity(const ndn::Name& identity, const ndn::KeyParams& params)$/;"	f	class:nfd::tests::IdentityManagementFixture
addIdentity	ndn-cxx/src/security/key-chain.hpp	/^  addIdentity(const Name& identityName)$/;"	f	class:ndn::security::KeyChain
addIdentity	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::addIdentity(const Name& identity)$/;"	f	class:ndn::security::PibMemory
addIdentity	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::addIdentity(const Name& identity)$/;"	f	class:ndn::security::PibSqlite3
addIdentity	ndn-cxx/src/security/pib.cpp	/^Pib::addIdentity(const Name& identity)$/;"	f	class:ndn::security::Pib
addIdentity	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::addIdentity(const Name& identityName)$/;"	f	class:ndn::SecPublicInfoSqlite3
addIdentity	ndn-cxx/tests/identity-management-fixture.cpp	/^IdentityManagementFixture::addIdentity(const Name& identity, const KeyParams& params)$/;"	f	class:ndn::security::IdentityManagementFixture
addIdentity	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::addIdentity(const Name& identityName)$/;"	f	class:ndn::security::DummyPublicInfo
addIdentity	utils/dummy-keychain.cpp	/^DummyPublicInfo::addIdentity(const Name& identityName)$/;"	f	class:ndn::security::DummyPublicInfo
addImpl	NFD/daemon/fw/face-table.cpp	/^FaceTable::addImpl(shared_ptr<Face> face, FaceId faceId)$/;"	f	class:nfd::FaceTable
addInheritedRoute	NFD/rib/fib-updater.cpp	/^FibUpdater::addInheritedRoute(const Name& name, const Route& route)$/;"	f	class:nfd::rib::FibUpdater
addInheritedRoute	NFD/rib/rib-entry.cpp	/^RibEntry::addInheritedRoute(const Route& route)$/;"	f	class:nfd::rib::RibEntry
addInheritedRoutes	NFD/rib/fib-updater.cpp	/^FibUpdater::addInheritedRoutes(const Name& name, const Rib::Rib::RouteSet& routesToAdd,$/;"	f	class:nfd::rib::FibUpdater
addInheritedRoutes	NFD/rib/fib-updater.cpp	/^FibUpdater::addInheritedRoutes(const RibEntry& entry, const Rib::Rib::RouteSet& routesToAdd)$/;"	f	class:nfd::rib::FibUpdater
addInterestBypassRule	ndn-cxx/src/util/command-interest-validator.hpp	/^CommandInterestValidator::addInterestBypassRule(const std::string& regex)$/;"	f	class:ndn::CommandInterestValidator
addInterestRule	NFD/daemon/mgmt/command-validator.hpp	/^CommandValidator::addInterestRule(const std::string& regex,$/;"	f	class:nfd::CommandValidator
addInterestRule	NFD/daemon/mgmt/manager-base.hpp	/^ManagerBase::addInterestRule(const std::string& regex,$/;"	f	class:nfd::ManagerBase
addInterestRule	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  addInterestRule(const std::string& regex,$/;"	f	class:nfd::tests::FaceManagerFixture
addInterestRule	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  addInterestRule(const std::string& regex,$/;"	f	class:nfd::tests::FibManagerFixture
addInterestRule	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  addInterestRule(const std::string& regex,$/;"	f	class:nfd::tests::StrategyChoiceManagerFixture
addInterestRule	ndn-cxx/src/util/command-interest-validator.hpp	/^CommandInterestValidator::addInterestRule(const std::string& regex,$/;"	f	class:ndn::CommandInterestValidator
addIntervalConsumer	NFD/tests/daemon/fw/topology-tester.hpp	/^  addIntervalConsumer(DummyClientFace& face, const Name& prefix,$/;"	f	class:nfd::fw::tests::TopologyTester
addKey	ndn-cxx/src/security/identity.cpp	/^Identity::addKey(const PublicKey& publicKey, const name::Component& keyId)$/;"	f	class:ndn::security::Identity
addKey	ndn-cxx/src/security/key-chain.hpp	/^  addKey(const Name& keyName, const PublicKey& publicKeyDer)$/;"	f	class:ndn::security::KeyChain
addKey	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::addKey(const Name& identity, const name::Component& keyId, const PublicKey& publicKey)$/;"	f	class:ndn::security::PibMemory
addKey	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::addKey(const Name& identity, const name::Component& keyId, const PublicKey& publicKey)$/;"	f	class:ndn::security::PibSqlite3
addKey	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::addKey(const Name& keyName,$/;"	f	class:ndn::SecPublicInfoSqlite3
addKey	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::addKey(const Name& keyName, const PublicKey& publicKey)$/;"	f	class:ndn::security::DummyPublicInfo
addKey	utils/dummy-keychain.cpp	/^DummyPublicInfo::addKey(const Name& keyName, const PublicKey& publicKey)$/;"	f	class:ndn::security::DummyPublicInfo
addLink	NFD/tests/daemon/fw/topology-tester.hpp	/^  addLink(const time::nanoseconds& delay, std::initializer_list<TopologyNode> forwarders)$/;"	f	class:nfd::fw::tests::TopologyTester
addMeasurement	NFD/daemon/fw/rtt-estimator.cpp	/^RttEstimator::addMeasurement(Duration measure)$/;"	f	class:nfd::RttEstimator
addNextHop	NFD/daemon/mgmt/fib-manager.cpp	/^FibManager::addNextHop(ControlParameters& parameters,$/;"	f	class:nfd::FibManager
addNextHop	NFD/daemon/table/fib-entry.cpp	/^Entry::addNextHop(shared_ptr<Face> face, uint64_t cost)$/;"	f	class:nfd::fib::Entry
addNextHopRecord	ndn-cxx/src/management/nfd-fib-entry.cpp	/^FibEntry::addNextHopRecord(const NextHopRecord& nextHopRecord)$/;"	f	class:ndn::nfd::FibEntry
addNonce	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^  addNonce()$/;"	f	class:nfd::tests::PeriodicalInsertionFixture
addNonceBatch	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^  size_t addNonceBatch;$/;"	m	class:nfd::tests::PeriodicalInsertionFixture	file:
addNonceEvent	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^  scheduler::ScopedEventId addNonceEvent;$/;"	m	class:nfd::tests::PeriodicalInsertionFixture	file:
addNonceInterval	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^  time::nanoseconds addNonceInterval;$/;"	m	class:nfd::tests::PeriodicalInsertionFixture	file:
addNotificationStream	ndn-cxx/src/mgmt/dispatcher.cpp	/^Dispatcher::addNotificationStream(const PartialName& relPrefix)$/;"	f	class:ndn::mgmt::Dispatcher
addPrefixMeasurements	NFD/daemon/fw/access-strategy.cpp	/^AccessStrategy::addPrefixMeasurements(const Data& data)$/;"	f	class:nfd::fw::AccessStrategy
addProtocolFactory	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  addProtocolFactory(const std::string& protocol)$/;"	f	class:nfd::tests::ChannelStatusFixture
addPublicKey	ndn-cxx/src/security/key-chain.hpp	/^  addPublicKey(const Name& keyName, KeyType keyType, const PublicKey& publicKeyDer)$/;"	f	class:ndn::security::KeyChain
addPublicKey	ndn-cxx/src/security/sec-public-info.cpp	/^SecPublicInfo::addPublicKey(const Name& keyName, KeyType keyType, const PublicKey& publicKey)$/;"	f	class:ndn::SecPublicInfo
addReserved	NFD/daemon/fw/face-table.cpp	/^FaceTable::addReserved(shared_ptr<Face> face, FaceId faceId)$/;"	f	class:nfd::FaceTable
addRoute	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  addRoute(const Route& route)$/;"	f	class:ndn::nfd::RibEntry
addRoutes	helper/ndn-scenario-helper.cpp	/^ScenarioHelper::addRoutes(std::initializer_list<ScenarioHelper::RouteInfo> routes)$/;"	f	class:ns3::ndn::ScenarioHelper
addSectionHandler	NFD/core/config-file.cpp	/^ConfigFile::addSectionHandler(const std::string& sectionName,$/;"	f	class:nfd::ConfigFile
addStatusDataset	ndn-cxx/src/mgmt/dispatcher.cpp	/^Dispatcher::addStatusDataset(const PartialName& relPrefix,$/;"	f	class:ndn::mgmt::Dispatcher
addSubjectDescription	ndn-cxx/src/security/certificate.hpp	/^  addSubjectDescription(const CertificateSubjectDescription& description)$/;"	f	class:ndn::Certificate
addSupportedPrivilege	NFD/daemon/mgmt/command-validator.cpp	/^CommandValidator::addSupportedPrivilege(const std::string& privilege)$/;"	f	class:nfd::CommandValidator
addTest	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^CanonizeFixture::addTest(const std::string& request,$/;"	f	class:ndn::util::tests::CanonizeFixture
addTopPrefix	ndn-cxx/src/mgmt/dispatcher.cpp	/^Dispatcher::addTopPrefix(const Name& prefix,$/;"	f	class:ndn::mgmt::Dispatcher
addTrustAnchor	ndn-cxx/src/security/validator-regex.cpp	/^ValidatorRegex::addTrustAnchor(shared_ptr<IdentityCertificate> certificate)$/;"	f	class:ndn::ValidatorRegex
addUpdateToQueue	NFD/rib/rib.cpp	/^Rib::addUpdateToQueue(const RibUpdate& update,$/;"	f	class:nfd::rib::Rib
add_subprotocol	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::add_subprotocol(std::string const & value) {$/;"	f	class:websocketpp::connection
add_subprotocol	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::add_subprotocol(std::string const & value,$/;"	f	class:websocketpp::connection
addedFaces	NFD/tests/daemon/fw/strategy.t.cpp	/^  std::vector<FaceId> addedFaces;$/;"	m	class:nfd::fw::tests::FaceTableAccessTestStrategy	file:
addedNextHopWithCost	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^addedNextHopWithCost(const Fib& fib, const Name& prefix, size_t oldSize, uint32_t cost)$/;"	f	namespace:nfd::tests
addedNextHopWithFace	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^addedNextHopWithFace(const Fib& fib, const Name& prefix, size_t oldSize,$/;"	f	namespace:nfd::tests
adjustCapacity	NFD/daemon/table/dead-nonce-list.cpp	/^DeadNonceList::adjustCapacity()$/;"	f	class:nfd::DeadNonceList
adjustPredictDown	NFD/daemon/fw/ncc-strategy.cpp	/^NccStrategy::MeasurementsEntryInfo::adjustPredictDown() {$/;"	f	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
adjustPredictUp	NFD/daemon/fw/ncc-strategy.cpp	/^NccStrategy::MeasurementsEntryInfo::adjustPredictUp() {$/;"	f	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
advance	ndn-cxx/src/util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::advance(const nanoseconds& duration)$/;"	f	class:ndn::time::UnitTestClock
advanceClocks	NFD/tests/test-common.hpp	/^  advanceClocks(const time::nanoseconds& tick, const time::nanoseconds& total)$/;"	f	class:nfd::tests::UnitTestTimeFixture
advanceClocks	NFD/tests/test-common.hpp	/^  advanceClocks(const time::nanoseconds& tick, size_t nTicks = 1)$/;"	f	class:nfd::tests::UnitTestTimeFixture
advanceClocks	ndn-cxx/tests/unit-tests/unit-test-time-fixture.hpp	/^  advanceClocks(const time::nanoseconds& tick, size_t nTicks = 1)$/;"	f	class:ndn::tests::UnitTestTimeFixture
advanceClocksByLifetime	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^  advanceClocksByLifetime(float t)$/;"	f	class:nfd::tests::PeriodicalInsertionFixture
afterAccess	ndn-cxx/src/util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::afterAccess(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLfu
afterAccess	ndn-cxx/src/util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::afterAccess(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLru
afterAccess	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::afterAccess(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorage
afterAddFace	NFD/daemon/fw/strategy.hpp	/^  signal::Signal<FaceTable, shared_ptr<Face>>& afterAddFace;$/;"	m	class:nfd::fw::Strategy
afterAuthorizationRejected	ndn-cxx/src/mgmt/dispatcher.cpp	/^Dispatcher::afterAuthorizationRejected(RejectReply act, const Interest& interest)$/;"	f	class:ndn::mgmt::Dispatcher
afterCheckPolicy	ndn-cxx/src/security/validator.cpp	/^Validator::afterCheckPolicy(const std::vector<shared_ptr<ValidationRequest> >& nextSteps,$/;"	f	class:ndn::Validator
afterDecodeError	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  afterDecodeError(const Data& data)$/;"	f	class:ndn::util::tests::EndToEndFixture
afterEraseEntry	NFD/rib/rib.hpp	/^  ndn::util::signal::Signal<Rib, Name> afterEraseEntry;$/;"	m	class:nfd::rib::Rib
afterFetchedChannelStatusInformation	NFD/tools/nfd-status.cpp	/^  afterFetchedChannelStatusInformation(const ConstBufferPtr& dataset)$/;"	f	class:ndn::NfdStatus
afterFetchedFaceStatusInformation	NFD/tools/nfd-status.cpp	/^  afterFetchedFaceStatusInformation(const ConstBufferPtr& dataset)$/;"	f	class:ndn::NfdStatus
afterFetchedFibEnumerationInformation	NFD/tools/nfd-status.cpp	/^  afterFetchedFibEnumerationInformation(const ConstBufferPtr& dataset)$/;"	f	class:ndn::NfdStatus
afterFetchedRibStatusInformation	NFD/tools/nfd-status.cpp	/^  afterFetchedRibStatusInformation(const ConstBufferPtr& dataset)$/;"	f	class:ndn::NfdStatus
afterFetchedStrategyChoiceInformationInformation	NFD/tools/nfd-status.cpp	/^  afterFetchedStrategyChoiceInformationInformation(const ConstBufferPtr& dataset)$/;"	f	class:ndn::NfdStatus
afterFetchedVersionInformation	NFD/tools/nfd-status.cpp	/^  afterFetchedVersionInformation(const Data& data)$/;"	f	class:ndn::NfdStatus
afterInsert	NFD/daemon/table/cs-policy.cpp	/^Policy::afterInsert(iterator i)$/;"	f	class:nfd::cs::Policy
afterInsert	ndn-cxx/src/util/in-memory-storage-fifo.cpp	/^InMemoryStorageFifo::afterInsert(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageFifo
afterInsert	ndn-cxx/src/util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::afterInsert(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLfu
afterInsert	ndn-cxx/src/util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::afterInsert(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLru
afterInsert	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::afterInsert(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorage
afterInsertEntry	NFD/rib/rib.hpp	/^  ndn::util::signal::Signal<Rib, Name> afterInsertEntry;$/;"	m	class:nfd::rib::Rib
afterNotification	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  afterNotification(const SimpleNotification& notification)$/;"	f	class:ndn::util::tests::EndToEndFixture
afterNotificationCenterEvent	ndn-cxx/src/util/network-monitor.cpp	/^  afterNotificationCenterEvent(CFNotificationCenterRef center, void *observer, CFStringRef name,$/;"	f	class:ndn::util::NetworkMonitor::Impl
afterOp	NFD/tests/daemon/face/face-history.hpp	/^  afterOp()$/;"	f	class:nfd::tests::FaceHistory
afterOp	NFD/tests/limited-io.cpp	/^LimitedIo::afterOp()$/;"	f	class:nfd::tests::LimitedIo
afterPrefixRegistered	ndn-cxx/src/detail/face-impl.hpp	/^  afterPrefixRegistered(const shared_ptr<RegisteredPrefix>& registeredPrefix,$/;"	f	class:ndn::Face::Impl
afterReceiveData	ndn-cxx/src/util/notification-subscriber.hpp	/^  afterReceiveData(const Data& data)$/;"	f	class:ndn::util::NotificationSubscriber
afterReceiveInterest	NFD/daemon/fw/access-strategy.cpp	/^AccessStrategy::afterReceiveInterest(const Face& inFace,$/;"	f	class:nfd::fw::AccessStrategy
afterReceiveInterest	NFD/daemon/fw/best-route-strategy.cpp	/^BestRouteStrategy::afterReceiveInterest(const Face& inFace,$/;"	f	class:nfd::fw::BestRouteStrategy
afterReceiveInterest	NFD/daemon/fw/best-route-strategy2.cpp	/^BestRouteStrategy2::afterReceiveInterest(const Face& inFace,$/;"	f	class:nfd::fw::BestRouteStrategy2
afterReceiveInterest	NFD/daemon/fw/broadcast-strategy.cpp	/^BroadcastStrategy::afterReceiveInterest(const Face& inFace,$/;"	f	class:nfd::fw::BroadcastStrategy
afterReceiveInterest	NFD/daemon/fw/client-control-strategy.cpp	/^ClientControlStrategy::afterReceiveInterest(const Face& inFace,$/;"	f	class:nfd::fw::ClientControlStrategy
afterReceiveInterest	NFD/daemon/fw/multicast-strategy.cpp	/^MulticastStrategy::afterReceiveInterest(const Face& inFace,$/;"	f	class:nfd::fw::MulticastStrategy
afterReceiveInterest	NFD/daemon/fw/ncc-strategy.cpp	/^NccStrategy::afterReceiveInterest(const Face& inFace,$/;"	f	class:nfd::fw::NccStrategy
afterReceiveInterest	examples/ndn-load-balancer/random-load-balancer-strategy.cpp	/^RandomLoadBalancerStrategy::afterReceiveInterest(const Face& inFace, const Interest& interest,$/;"	f	class:nfd::fw::RandomLoadBalancerStrategy
afterReceiveInterest	tests/unit-tests/helper/ndn-strategy-choice-helper.t.cpp	/^  afterReceiveInterest(const Face& inFace, const Interest& interest,$/;"	f	class:ns3::ndn::NullStrategy
afterReceiveNewInterest	NFD/daemon/fw/access-strategy.cpp	/^AccessStrategy::afterReceiveNewInterest(const Face& inFace,$/;"	f	class:nfd::fw::AccessStrategy
afterReceiveRetxInterest	NFD/daemon/fw/access-strategy.cpp	/^AccessStrategy::afterReceiveRetxInterest(const Face& inFace,$/;"	f	class:nfd::fw::AccessStrategy
afterRefresh	NFD/daemon/table/cs-policy.cpp	/^Policy::afterRefresh(iterator i)$/;"	f	class:nfd::cs::Policy
afterRtoTimeout	NFD/daemon/fw/access-strategy.cpp	/^AccessStrategy::afterRtoTimeout(weak_ptr<pit::Entry> pitWeak, weak_ptr<fib::Entry> fibWeak,$/;"	f	class:nfd::fw::AccessStrategy
afterSend	NFD/tests/daemon/face/dummy-face.hpp	/^  signal::Signal<DummyFaceImpl<FaceBase>> afterSend;$/;"	m	class:nfd::tests::DummyFaceImpl
afterTimeout	NFD/tests/limited-io.cpp	/^LimitedIo::afterTimeout()$/;"	f	class:nfd::tests::LimitedIo
afterTimeout	ndn-cxx/src/util/notification-subscriber.hpp	/^  afterTimeout()$/;"	f	class:ndn::util::NotificationSubscriber
afterTimeout	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  afterTimeout()$/;"	f	class:ndn::util::tests::EndToEndFixture
ageBestFace	NFD/daemon/fw/ncc-strategy.cpp	/^NccStrategy::MeasurementsEntryInfo::ageBestFace() {$/;"	f	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
aggregateErrors	NFD/daemon/mgmt/command-validator.cpp	/^aggregateErrors(std::stringstream& ss, const std::string& msg)$/;"	f	namespace:nfd
aggregate_stats_policy_traits	utils/trie/aggregate-stats-policy.hpp	/^struct aggregate_stats_policy_traits {$/;"	s	namespace:ns3::ndn::ndnSIM
alevel	NFD/websocketpp/websocketpp/logger/levels.hpp	/^struct alevel {$/;"	s	namespace:websocketpp::log
all	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const all = 0xffffffff;$/;"	m	struct:websocketpp::log::alevel
all	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const all = 0xffffffff;$/;"	m	struct:websocketpp::log::elevel
allCallbacksFired	NFD/tests/core/config-file.t.cpp	/^  allCallbacksFired() const$/;"	f	class:nfd::tests::DummySubscriber
alloc	NFD/websocketpp/websocketpp/message_buffer/alloc.hpp	/^namespace alloc {$/;"	n	namespace:websocketpp::message_buffer
alloc	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^namespace alloc {$/;"	n	namespace:websocketpp::message_buffer
allocate	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^  void* allocate(std::size_t size)$/;"	f	class:websocketpp::transport::asio::handler_allocator
allocator_	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^  handler_allocator& allocator_;$/;"	m	class:websocketpp::transport::asio::custom_alloc_handler
allocator_type	ndn-cxx/src/name.hpp	/^  typedef void                    allocator_type;$/;"	t	class:ndn::Name
allow_disabling_context_takeover	NFD/websocketpp/websocketpp/config/core.hpp	/^        static const bool allow_disabling_context_takeover = true;$/;"	m	struct:websocketpp::config::core::permessage_deflate_config
allow_disabling_context_takeover	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        static const bool allow_disabling_context_takeover = true;$/;"	m	struct:websocketpp::config::core_client::permessage_deflate_config
allow_disabling_context_takeover	NFD/websocketpp/websocketpp/config/debug.hpp	/^        static const bool allow_disabling_context_takeover = true;$/;"	m	struct:websocketpp::config::debug_core::permessage_deflate_config
allow_disabling_context_takeover	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        static const bool allow_disabling_context_takeover = true;$/;"	m	struct:websocketpp::config::minimal_server::permessage_deflate_config
alog	NFD/websocketpp/test/connection/connection.cpp	/^    stub_config::alog_type alog;$/;"	m	struct:connection_setup	file:
alog	NFD/websocketpp/test/transport/asio/timers.cpp	/^    config::alog_type alog;$/;"	m	struct:mock_endpoint	file:
alog_level	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^    static const websocketpp::log::level alog_level =$/;"	m	struct:testee_config	file:
alog_level	NFD/websocketpp/test/connection/connection.cpp	/^    static const websocketpp::log::level alog_level = websocketpp::log::alevel::none;$/;"	m	struct:debug_config_client	file:
alog_level	NFD/websocketpp/test/roles/client.cpp	/^    static const websocketpp::log::level alog_level = websocketpp::log::alevel::none;$/;"	m	struct:stub_config	file:
alog_level	NFD/websocketpp/websocketpp/config/core.hpp	/^    static const websocketpp::log::level alog_level =$/;"	m	struct:websocketpp::config::core
alog_level	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    static const websocketpp::log::level alog_level =$/;"	m	struct:websocketpp::config::core_client
alog_level	NFD/websocketpp/websocketpp/config/debug.hpp	/^    static const websocketpp::log::level alog_level =$/;"	m	struct:websocketpp::config::debug_core
alog_level	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    static const websocketpp::log::level alog_level =$/;"	m	struct:websocketpp::config::minimal_server
alog_type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^        typedef type::alog_type alog_type;$/;"	t	struct:debug_custom::transport_config	file:
alog_type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^    typedef base::alog_type alog_type;$/;"	t	struct:debug_custom	file:
alog_type	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    typedef core::alog_type alog_type;$/;"	t	struct:custom_config	file:
alog_type	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^        typedef core::alog_type alog_type;$/;"	t	struct:testee_config::transport_config	file:
alog_type	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^    typedef core::alog_type alog_type;$/;"	t	struct:testee_config	file:
alog_type	NFD/websocketpp/test/connection/connection.cpp	/^        typedef type::alog_type alog_type;$/;"	t	struct:debug_config_client::transport_config	file:
alog_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::alog_type alog_type;$/;"	t	struct:debug_config_client	file:
alog_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::alog_type alog_type;$/;"	t	struct:stub_config	file:
alog_type	NFD/websocketpp/test/endpoint/endpoint.cpp	/^    typedef core::alog_type alog_type;$/;"	t	struct:stub_config	file:
alog_type	NFD/websocketpp/test/roles/client.cpp	/^    typedef core::alog_type alog_type;$/;"	t	struct:stub_config	file:
alog_type	NFD/websocketpp/test/transport/asio/timers.cpp	/^    typedef websocketpp::log::stub alog_type;$/;"	t	struct:config	file:
alog_type	NFD/websocketpp/test/transport/integration.cpp	/^        typedef type::alog_type alog_type;$/;"	t	struct:config::transport_config	file:
alog_type	NFD/websocketpp/test/transport/integration.cpp	/^        typedef type::alog_type alog_type;$/;"	t	struct:config_tls::transport_config	file:
alog_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::alog_type alog_type;$/;"	t	struct:config	file:
alog_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::alog_type alog_type;$/;"	t	struct:config_tls	file:
alog_type	NFD/websocketpp/test/transport/iostream/connection.cpp	/^        websocketpp::log::alevel> alog_type;$/;"	t	struct:config	file:
alog_type	NFD/websocketpp/websocketpp/config/asio.hpp	/^        typedef type::alog_type alog_type;$/;"	t	struct:websocketpp::config::asio_tls::transport_config
alog_type	NFD/websocketpp/websocketpp/config/asio.hpp	/^    typedef base::alog_type alog_type;$/;"	t	struct:websocketpp::config::asio_tls
alog_type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^        typedef type::alog_type alog_type;$/;"	t	struct:websocketpp::config::asio_tls_client::transport_config
alog_type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^    typedef base::alog_type alog_type;$/;"	t	struct:websocketpp::config::asio_tls_client
alog_type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^        typedef type::alog_type alog_type;$/;"	t	struct:websocketpp::config::asio::transport_config
alog_type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^    typedef base::alog_type alog_type;$/;"	t	struct:websocketpp::config::asio
alog_type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^        typedef type::alog_type alog_type;$/;"	t	struct:websocketpp::config::asio_client::transport_config
alog_type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^    typedef base::alog_type alog_type;$/;"	t	struct:websocketpp::config::asio_client
alog_type	NFD/websocketpp/websocketpp/config/core.hpp	/^        typedef type::alog_type alog_type;$/;"	t	struct:websocketpp::config::core::transport_config
alog_type	NFD/websocketpp/websocketpp/config/core.hpp	/^        websocketpp::log::alevel> alog_type;$/;"	t	struct:websocketpp::config::core
alog_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        typedef type::alog_type alog_type;$/;"	t	struct:websocketpp::config::core_client::transport_config
alog_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        websocketpp::log::alevel> alog_type;$/;"	t	struct:websocketpp::config::core_client
alog_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^        typedef type::alog_type alog_type;$/;"	t	struct:websocketpp::config::debug_core::transport_config
alog_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^        websocketpp::log::alevel> alog_type;$/;"	t	struct:websocketpp::config::debug_core
alog_type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^        typedef type::alog_type alog_type;$/;"	t	struct:websocketpp::config::debug_asio_tls::transport_config
alog_type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^    typedef base::alog_type alog_type;$/;"	t	struct:websocketpp::config::debug_asio_tls
alog_type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^        typedef type::alog_type alog_type;$/;"	t	struct:websocketpp::config::debug_asio::transport_config
alog_type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^    typedef base::alog_type alog_type;$/;"	t	struct:websocketpp::config::debug_asio
alog_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        typedef type::alog_type alog_type;$/;"	t	struct:websocketpp::config::minimal_server::transport_config
alog_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    typedef websocketpp::log::stub alog_type;$/;"	t	struct:websocketpp::config::minimal_server
alog_type	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef typename config::alog_type alog_type;$/;"	t	class:websocketpp::connection
alog_type	NFD/websocketpp/websocketpp/endpoint.hpp	/^    typedef typename config::alog_type alog_type;$/;"	t	class:websocketpp::endpoint
alog_type	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    typedef typename config::alog_type alog_type;$/;"	t	class:websocketpp::transport::asio::connection
alog_type	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    typedef typename config::alog_type alog_type;$/;"	t	class:websocketpp::transport::asio::endpoint
alog_type	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    typedef typename config::alog_type alog_type;$/;"	t	class:websocketpp::transport::debug::connection
alog_type	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^    typedef typename config::alog_type alog_type;$/;"	t	class:websocketpp::transport::debug::endpoint
alog_type	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    typedef typename config::alog_type alog_type;$/;"	t	class:websocketpp::transport::iostream::connection
alog_type	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    typedef typename config::alog_type alog_type;$/;"	t	class:websocketpp::transport::iostream::endpoint
alog_type	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    typedef typename config::alog_type alog_type;$/;"	t	class:websocketpp::transport::stub::connection
alog_type	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^    typedef typename config::alog_type alog_type;$/;"	t	class:websocketpp::transport::stub::endpoint
alogger	NFD/websocketpp/test/transport/iostream/connection.cpp	/^config::alog_type alogger;$/;"	v
alpha	utils/tracers/l2-rate-tracer.cpp	/^const double alpha = 0.8;$/;"	m	namespace:ns3	file:
alpha	utils/tracers/ndn-l3-rate-tracer.cpp	/^const double alpha = 0.8;$/;"	m	namespace:ns3::ndn	file:
app	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const app = 0x800;$/;"	m	struct:websocketpp::log::alevel
app	examples/ndn-cxx-simple/real-app.hpp	/^namespace app {$/;"	n
append	ndn-cxx/src/mgmt/status-dataset-context.cpp	/^StatusDatasetContext::append(const Block& block)$/;"	f	class:ndn::mgmt::StatusDatasetContext
append	ndn-cxx/src/name.cpp	/^Name::append(const PartialName& name)$/;"	f	class:ndn::Name
append	ndn-cxx/src/name.hpp	/^  append(Iterator first, Iterator last)$/;"	f	class:ndn::Name
append	ndn-cxx/src/name.hpp	/^  append(const Block& value)$/;"	f	class:ndn::Name
append	ndn-cxx/src/name.hpp	/^  append(const Component& value)$/;"	f	class:ndn::Name
append	ndn-cxx/src/name.hpp	/^  append(const char* value)$/;"	f	class:ndn::Name
append	ndn-cxx/src/name.hpp	/^  append(const uint8_t* value, size_t valueLength)$/;"	f	class:ndn::Name
appendBlock	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::appendBlock(const Block& block)$/;"	f	class:ndn::encoding::Encoder
appendBlock	ndn-cxx/src/encoding/estimator.cpp	/^Estimator::appendBlock(const Block& block)$/;"	f	class:ndn::encoding::Estimator
appendByte	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::appendByte(uint8_t value)$/;"	f	class:ndn::encoding::Encoder
appendByte	ndn-cxx/src/encoding/estimator.cpp	/^Estimator::appendByte(uint8_t value)$/;"	f	class:ndn::encoding::Estimator
appendByteArray	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::appendByteArray(const uint8_t* array, size_t length)$/;"	f	class:ndn::encoding::Encoder
appendByteArray	ndn-cxx/src/encoding/estimator.cpp	/^Estimator::appendByteArray(const uint8_t* array, size_t length)$/;"	f	class:ndn::encoding::Estimator
appendByteArrayBlock	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::appendByteArrayBlock(uint32_t type, const uint8_t* array, size_t arraySize)$/;"	f	class:ndn::encoding::Encoder
appendByteArrayBlock	ndn-cxx/src/encoding/estimator.cpp	/^Estimator::appendByteArrayBlock(uint32_t type, const uint8_t* array, size_t arraySize)$/;"	f	class:ndn::encoding::Estimator
appendExclude	ndn-cxx/src/exclude.hpp	/^Exclude::appendExclude(const name::Component& name, bool any)$/;"	f	class:ndn::Exclude
appendImplicitSha256Digest	ndn-cxx/src/name.cpp	/^Name::appendImplicitSha256Digest(const ConstBufferPtr& digest)$/;"	f	class:ndn::Name
appendImplicitSha256Digest	ndn-cxx/src/name.cpp	/^Name::appendImplicitSha256Digest(const uint8_t* digest, size_t digestSize)$/;"	f	class:ndn::Name
appendNonNegativeInteger	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::appendNonNegativeInteger(uint64_t varNumber)$/;"	f	class:ndn::encoding::Encoder
appendNonNegativeInteger	ndn-cxx/src/encoding/estimator.cpp	/^Estimator::appendNonNegativeInteger(uint64_t varNumber)$/;"	f	class:ndn::encoding::Estimator
appendNumber	ndn-cxx/src/name.cpp	/^Name::appendNumber(uint64_t number)$/;"	f	class:ndn::Name
appendNumberWithMarker	ndn-cxx/src/name.cpp	/^Name::appendNumberWithMarker(uint8_t marker, uint64_t number)$/;"	f	class:ndn::Name
appendRange	ndn-cxx/src/encoding/encoder.hpp	/^Encoder::appendRange(Iterator first, Iterator last)$/;"	f	class:ndn::encoding::Encoder
appendRange	ndn-cxx/src/encoding/estimator.hpp	/^Estimator::appendRange(Iterator first, Iterator last)$/;"	f	class:ndn::encoding::Estimator
appendSegment	ndn-cxx/src/name.cpp	/^Name::appendSegment(uint64_t segmentNo)$/;"	f	class:ndn::Name
appendSegmentOffset	ndn-cxx/src/name.cpp	/^Name::appendSegmentOffset(uint64_t offset)$/;"	f	class:ndn::Name
appendSequenceNumber	ndn-cxx/src/name.cpp	/^Name::appendSequenceNumber(uint64_t seqNo)$/;"	f	class:ndn::Name
appendTimestamp	ndn-cxx/src/name.cpp	/^Name::appendTimestamp(const time::system_clock::TimePoint& timePoint)$/;"	f	class:ndn::Name
appendTypeSpecificTlv	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::appendTypeSpecificTlv(const Block& block)$/;"	f	class:ndn::SignatureInfo
appendVarNumber	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::appendVarNumber(uint64_t varNumber)$/;"	f	class:ndn::encoding::Encoder
appendVarNumber	ndn-cxx/src/encoding/estimator.cpp	/^Estimator::appendVarNumber(uint64_t varNumber)$/;"	f	class:ndn::encoding::Estimator
appendVersion	ndn-cxx/src/name.cpp	/^Name::appendVersion()$/;"	f	class:ndn::Name
appendVersion	ndn-cxx/src/name.cpp	/^Name::appendVersion(uint64_t version)$/;"	f	class:ndn::Name
append_header	NFD/websocketpp/websocketpp/http/impl/parser.hpp	/^inline void parser::append_header(std::string const & key, std::string const &$/;"	f	class:websocketpp::http::parser::parser
append_header	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::append_header(std::string const & key,$/;"	f	class:websocketpp::connection
append_payload	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    void append_payload(std::string const & payload) {$/;"	f	class:websocketpp::message_buffer::message
append_payload	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    void append_payload(void const * payload, size_t len) {$/;"	f	class:websocketpp::message_buffer::message
apply	utils/trie/multi-policy.hpp	/^      struct apply {$/;"	s	struct:ns3::ndn::ndnSIM::multi_policy_traits::policy::getPolicy
apply	utils/trie/multi-policy.hpp	/^    struct apply {$/;"	s	struct:ns3::ndn::ndnSIM::multi_policy_traits::getHook
applyDefaultsToRequest	ndn-cxx/src/management/nfd-control-command.cpp	/^ControlCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::ControlCommand
applyDefaultsToRequest	ndn-cxx/src/management/nfd-control-command.cpp	/^FibAddNextHopCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FibAddNextHopCommand
applyDefaultsToRequest	ndn-cxx/src/management/nfd-control-command.cpp	/^FibRemoveNextHopCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FibRemoveNextHopCommand
applyDefaultsToRequest	ndn-cxx/src/management/nfd-control-command.cpp	/^RibRegisterCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::RibRegisterCommand
applyDefaultsToRequest	ndn-cxx/src/management/nfd-control-command.cpp	/^RibUnregisterCommand::applyDefaultsToRequest(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::RibUnregisterCommand
applyDefaultsToResponse	ndn-cxx/src/management/nfd-control-command.cpp	/^ControlCommand::applyDefaultsToResponse(ControlParameters& parameters) const$/;"	f	class:ndn::nfd::ControlCommand
array_disposer	utils/trie/trie.hpp	/^  struct array_disposer {$/;"	s	class:ns3::ndn::ndnSIM::trie
asio	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^struct asio : public core {$/;"	s	namespace:websocketpp::config
asio	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^namespace asio {$/;"	n	namespace:websocketpp::transport
asio	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^namespace asio {$/;"	n	namespace:websocketpp::transport
asio	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^namespace asio {$/;"	n	namespace:websocketpp::transport
asio	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^namespace asio {$/;"	n	namespace:websocketpp::transport
asio	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^namespace asio {$/;"	n	namespace:websocketpp::transport
asio	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^namespace asio {$/;"	n	namespace:websocketpp::transport
asio	ndn-cxx/src/encoding/block.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	ndn-cxx/src/face.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	ndn-cxx/src/transport/tcp-transport.hpp	/^namespace boost { namespace asio { namespace ip { class tcp; } } }$/;"	n	namespace:boost
asio	ndn-cxx/src/transport/unix-transport.hpp	/^namespace boost { namespace asio { namespace local { class stream_protocol; } } }$/;"	n	namespace:boost
asio	ndn-cxx/src/util/monotonic_deadline_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
asio_client	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^struct asio_client : public core_client {$/;"	s	namespace:websocketpp::config
asio_handler_allocate	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^  friend void* asio_handler_allocate(std::size_t size,$/;"	f	class:websocketpp::transport::asio::custom_alloc_handler
asio_handler_deallocate	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^  friend void asio_handler_deallocate(void* pointer, std::size_t \/*size*\/,$/;"	f	class:websocketpp::transport::asio::custom_alloc_handler
asio_tls	NFD/websocketpp/websocketpp/config/asio.hpp	/^struct asio_tls : public core {$/;"	s	namespace:websocketpp::config
asio_tls_client	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^struct asio_tls_client : public core_client {$/;"	s	namespace:websocketpp::config
assignGw	utils/topology/rocketfuel-map-reader.cpp	/^RocketfuelMapReader::assignGw(Traits::vertex_descriptor vertex, uint32_t degree,$/;"	f	class:ns3::RocketfuelMapReader
asyncExpressInterest	ndn-cxx/src/detail/face-impl.hpp	/^  asyncExpressInterest(const shared_ptr<const Interest>& interest,$/;"	f	class:ndn::Face::Impl
asyncPutData	ndn-cxx/src/detail/face-impl.hpp	/^  asyncPutData(const shared_ptr<const Data>& data)$/;"	f	class:ndn::Face::Impl
asyncRemovePendingInterest	ndn-cxx/src/detail/face-impl.hpp	/^  asyncRemovePendingInterest(const PendingInterestId* pendingInterestId)$/;"	f	class:ndn::Face::Impl
asyncResolve	ndn-cxx/src/util/dns.cpp	/^  asyncResolve(const std::string& host,$/;"	f	class:ndn::dns::Resolver
asyncResolve	ndn-cxx/src/util/dns.cpp	/^asyncResolve(const std::string& host,$/;"	f	namespace:ndn::dns
asyncSetInterestFilter	ndn-cxx/src/detail/face-impl.hpp	/^  asyncSetInterestFilter(const shared_ptr<InterestFilterRecord>& interestFilterRecord)$/;"	f	class:ndn::Face::Impl
asyncUnregisterPrefix	ndn-cxx/src/detail/face-impl.hpp	/^  asyncUnregisterPrefix(const RegisteredPrefixId* registeredPrefixId,$/;"	f	class:ndn::Face::Impl
asyncUnsetInterestFilter	ndn-cxx/src/detail/face-impl.hpp	/^  asyncUnsetInterestFilter(const InterestFilterId* interestFilterId)$/;"	f	class:ndn::Face::Impl
async_accept	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void async_accept(transport_con_ptr tcon, accept_handler callback) {$/;"	f	class:websocketpp::transport::asio::endpoint
async_accept	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void async_accept(transport_con_ptr tcon, accept_handler callback,$/;"	f	class:websocketpp::transport::asio::endpoint
async_accept_not_listening	NFD/websocketpp/websocketpp/error.hpp	/^    async_accept_not_listening,$/;"	e	enum:websocketpp::error::value
async_connect	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void async_connect(transport_con_ptr tcon, uri_ptr u, connect_handler cb) {$/;"	f	class:websocketpp::transport::asio::endpoint
async_connect	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^    void async_connect(transport_con_ptr, uri_ptr, connect_handler cb) {$/;"	f	class:websocketpp::transport::debug::endpoint
async_connect	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    void async_connect(transport_con_ptr, uri_ptr, connect_handler cb) {$/;"	f	class:websocketpp::transport::iostream::endpoint
async_connect	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^    void async_connect(transport_con_ptr tcon, uri_ptr u, connect_handler cb) {$/;"	f	class:websocketpp::transport::stub::endpoint
async_read_at_least	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    void async_read_at_least(size_t num_bytes, char *buf, size_t len)$/;"	f	struct:stub_con
async_read_at_least	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void async_read_at_least(size_t num_bytes, char *buf, size_t len,$/;"	f	class:websocketpp::transport::asio::connection
async_read_at_least	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    void async_read_at_least(size_t num_bytes, char * buf, size_t len,$/;"	f	class:websocketpp::transport::debug::connection
async_read_at_least	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    void async_read_at_least(size_t num_bytes, char *buf, size_t len,$/;"	f	class:websocketpp::transport::iostream::connection
async_read_at_least	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    void async_read_at_least(size_t num_bytes, char * buf, size_t len,$/;"	f	class:websocketpp::transport::stub::connection
async_read_handler	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^    size_t bytes_transferred)> async_read_handler;$/;"	t	namespace:websocketpp::transport::asio
async_read_indef	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    void async_read_indef(size_t num_bytes, char *buf, size_t len)$/;"	f	struct:stub_con
async_shutdown	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void async_shutdown(shutdown_handler callback) {$/;"	f	class:websocketpp::transport::asio::connection
async_shutdown	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    void async_shutdown(socket_shutdown_handler h) {$/;"	f	class:websocketpp::transport::asio::basic_socket::connection
async_shutdown	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    void async_shutdown(socket_shutdown_handler callback) {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
async_shutdown	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    void async_shutdown(shutdown_handler handler) {$/;"	f	class:websocketpp::transport::debug::connection
async_shutdown	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    void async_shutdown(transport::shutdown_handler handler) {$/;"	f	class:websocketpp::transport::iostream::connection
async_shutdown	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    void async_shutdown(shutdown_handler handler) {$/;"	f	class:websocketpp::transport::stub::connection
async_write	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void async_write(const char* buf, size_t len, write_handler handler) {$/;"	f	class:websocketpp::transport::asio::connection
async_write	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void async_write(std::vector<buffer> const & bufs, write_handler handler) {$/;"	f	class:websocketpp::transport::asio::connection
async_write	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    void async_write(char const *, size_t, write_handler handler) {$/;"	f	class:websocketpp::transport::debug::connection
async_write	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    void async_write(std::vector<buffer> const &, write_handler handler) {$/;"	f	class:websocketpp::transport::debug::connection
async_write	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    void async_write(char const * buf, size_t len, transport::write_handler $/;"	f	class:websocketpp::transport::iostream::connection
async_write	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    void async_write(std::vector<buffer> const & bufs, transport::write_handler$/;"	f	class:websocketpp::transport::iostream::connection
async_write	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    void async_write(char const * buf, size_t len, write_handler handler) {$/;"	f	class:websocketpp::transport::stub::connection
async_write	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    void async_write(std::vector<buffer> const & bufs, write_handler handler) {$/;"	f	class:websocketpp::transport::stub::connection
async_write_handler	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^    size_t bytes_transferred)> async_write_handler;$/;"	t	namespace:websocketpp::transport::asio
at	ndn-cxx/src/name.hpp	/^  at(ssize_t i) const$/;"	f	class:ndn::Name
attachQueue	NFD/daemon/table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::attachQueue(iterator i)$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
attr	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^    websocketpp::http::attribute_list attr;$/;"	m	struct:ext_vars	file:
attribute_list	NFD/websocketpp/websocketpp/http/constants.hpp	/^    typedef std::map<std::string,std::string> attribute_list;$/;"	t	namespace:websocketpp::http
autoconfig	NFD/tools/ndn-autoconfig/base-dns.cpp	/^namespace autoconfig {$/;"	n	namespace:ndn::tools	file:
autoconfig	NFD/tools/ndn-autoconfig/base-dns.hpp	/^namespace autoconfig {$/;"	n	namespace:ndn::tools
autoconfig	NFD/tools/ndn-autoconfig/base.cpp	/^namespace autoconfig {$/;"	n	namespace:ndn::tools	file:
autoconfig	NFD/tools/ndn-autoconfig/base.hpp	/^namespace autoconfig {$/;"	n	namespace:ndn::tools
autoconfig	NFD/tools/ndn-autoconfig/guess-from-identity-name.cpp	/^namespace autoconfig {$/;"	n	namespace:ndn::tools	file:
autoconfig	NFD/tools/ndn-autoconfig/guess-from-identity-name.hpp	/^namespace autoconfig {$/;"	n	namespace:ndn::tools
autoconfig	NFD/tools/ndn-autoconfig/guess-from-search-domains.cpp	/^namespace autoconfig {$/;"	n	namespace:ndn::tools	file:
autoconfig	NFD/tools/ndn-autoconfig/guess-from-search-domains.hpp	/^namespace autoconfig {$/;"	n	namespace:ndn::tools
autoconfig	NFD/tools/ndn-autoconfig/multicast-discovery.cpp	/^namespace autoconfig {$/;"	n	namespace:ndn::tools	file:
autoconfig	NFD/tools/ndn-autoconfig/multicast-discovery.hpp	/^namespace autoconfig {$/;"	n	namespace:ndn::tools
averageRtt	utils/topology/rocketfuel-map-reader.hpp	/^  double averageRtt;$/;"	m	struct:ns3::RocketfuelParams
b0	NFD/websocketpp/websocketpp/frame.hpp	/^    uint8_t b0;$/;"	m	struct:websocketpp::frame::basic_header
b1	NFD/websocketpp/websocketpp/frame.hpp	/^    uint8_t b1;$/;"	m	struct:websocketpp::frame::basic_header
bad_close_code	NFD/websocketpp/websocketpp/error.hpp	/^    bad_close_code,$/;"	e	enum:websocketpp::error::value
bad_connection	NFD/websocketpp/websocketpp/error.hpp	/^    bad_connection,$/;"	e	enum:websocketpp::error::value
bad_gateway	NFD/websocketpp/websocketpp/http/constants.hpp	/^            bad_gateway = 502,$/;"	e	enum:websocketpp::http::status_code::value
bad_request	NFD/websocketpp/websocketpp/http/constants.hpp	/^            bad_request = 400,$/;"	e	enum:websocketpp::http::status_code::value
bad_request	NFD/websocketpp/websocketpp/processors/base.hpp	/^    bad_request,$/;"	e	enum:websocketpp::processor::error::processor_errors
bad_stream	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^    bad_stream$/;"	e	enum:websocketpp::transport::iostream::error::value
base	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^    typedef debug_asio base;$/;"	t	struct:debug_custom	file:
base	NFD/websocketpp/test/transport/asio/timers.cpp	/^    typedef websocketpp::transport::asio::connection<config> base;$/;"	t	struct:mock_con	file:
base	NFD/websocketpp/test/transport/asio/timers.cpp	/^    typedef websocketpp::transport::asio::endpoint<config> base;$/;"	t	struct:mock_endpoint	file:
base	NFD/websocketpp/test/transport/integration.cpp	/^    typedef websocketpp::config::asio base;$/;"	t	struct:config	file:
base	NFD/websocketpp/test/transport/integration.cpp	/^    typedef websocketpp::config::asio base;$/;"	t	struct:config_tls	file:
base	NFD/websocketpp/websocketpp/config/asio.hpp	/^    typedef core base;$/;"	t	struct:websocketpp::config::asio_tls
base	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^    typedef core_client base;$/;"	t	struct:websocketpp::config::asio_tls_client
base	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^    typedef core base;$/;"	t	struct:websocketpp::config::asio
base	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^    typedef core_client base;$/;"	t	struct:websocketpp::config::asio_client
base	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^    typedef debug_core base;$/;"	t	struct:websocketpp::config::debug_asio_tls
base	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^    typedef debug_core base;$/;"	t	struct:websocketpp::config::debug_asio
base	NFD/websocketpp/websocketpp/logger/syslog.hpp	/^    typedef basic<concurrency, names> base;$/;"	t	class:websocketpp::log::syslog
base	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    typedef processor<config> base;$/;"	t	class:websocketpp::processor::hybi00
base	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    typedef processor<config> base;$/;"	t	class:websocketpp::processor::hybi13
base64_chars	NFD/websocketpp/websocketpp/base64/base64.hpp	/^static std::string const base64_chars =$/;"	m	class:websocketpp::std
base64_decode	NFD/websocketpp/websocketpp/base64/base64.hpp	/^inline std::string base64_decode(std::string const & input) {$/;"	f	namespace:websocketpp
base64_encode	NFD/websocketpp/websocketpp/base64/base64.hpp	/^inline std::string base64_encode(std::string const & input) {$/;"	f	namespace:websocketpp
base64_encode	NFD/websocketpp/websocketpp/base64/base64.hpp	/^inline std::string base64_encode(unsigned char const * input, size_t len) {$/;"	f	namespace:websocketpp
base_	model/cs/custom-policies/freshness-policy.hpp	/^      Base& base_;$/;"	m	class:ns3::ndn::ndnSIM::freshness_policy_traits::policy::type
base_	model/cs/custom-policies/lifetime-stats-policy.hpp	/^      Base& base_;$/;"	m	class:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy::type
base_	model/cs/custom-policies/probability-policy.hpp	/^      Base& base_;$/;"	m	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
base_	utils/trie/aggregate-stats-policy.hpp	/^      Base& base_;$/;"	m	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
base_	utils/trie/counting-policy.hpp	/^      Base& base_;$/;"	m	class:ns3::ndn::ndnSIM::counting_policy_traits::policy::type
base_	utils/trie/fifo-policy.hpp	/^      Base& base_;$/;"	m	class:ns3::ndn::ndnSIM::fifo_policy_traits::policy::type
base_	utils/trie/lfu-policy.hpp	/^      Base& base_;$/;"	m	class:ns3::ndn::ndnSIM::lfu_policy_traits::policy::type
base_	utils/trie/lru-policy.hpp	/^      Base& base_;$/;"	m	class:ns3::ndn::ndnSIM::lru_policy_traits::policy::type
base_	utils/trie/payload-policy.hpp	/^      Base& base_;$/;"	m	class:ns3::ndn::ndnSIM::payload_policy_traits::policy::type
base_	utils/trie/persistent-policy.hpp	/^      Base& base_;$/;"	m	class:ns3::ndn::ndnSIM::persistent_policy_traits::policy::type
base_	utils/trie/random-policy.hpp	/^      Base& base_;$/;"	m	class:ns3::ndn::ndnSIM::random_policy_traits::policy::type
base_steady_clock	ndn-cxx/src/util/time.cpp	/^  typedef boost::chrono::steady_clock base_steady_clock;$/;"	t	namespace:ndn::time	file:
base_steady_clock	ndn-cxx/src/util/time.cpp	/^  typedef boost::chrono::system_clock base_steady_clock;$/;"	t	namespace:ndn::time	file:
base_type	model/cs/content-store-impl.hpp	/^  typedef Entry base_type;$/;"	t	class:ns3::ndn::cs::EntryImpl
base_type	utils/trie/trie.hpp	/^    base_type; \/\/ base type of the entry (when implementation details need to be hidden)$/;"	t	struct:ns3::ndn::ndnSIM::pointer_payload_traits
base_type	utils/trie/trie.hpp	/^  typedef BasePayload& base_type;$/;"	t	struct:ns3::ndn::ndnSIM::non_pointer_traits
base_type	utils/trie/trie.hpp	/^  typedef ns3::Ptr<BasePayload> base_type;$/;"	t	struct:ns3::ndn::ndnSIM::smart_pointer_payload_traits
basic	NFD/websocketpp/websocketpp/concurrency/basic.hpp	/^class basic {$/;"	c	namespace:websocketpp::concurrency
basic	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    basic<concurrency,names>(channel_type_hint::value h =$/;"	f	class:websocketpp::log::basic
basic	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    basic<concurrency,names>(level c, channel_type_hint::value h =$/;"	f	class:websocketpp::log::basic
basic	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    basic<concurrency,names>(level c, std::ostream * out)$/;"	f	class:websocketpp::log::basic
basic	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    basic<concurrency,names>(std::ostream * out)$/;"	f	class:websocketpp::log::basic
basic	NFD/websocketpp/websocketpp/logger/basic.hpp	/^class basic {$/;"	c	namespace:websocketpp::log
basic_header	NFD/websocketpp/websocketpp/frame.hpp	/^    basic_header() : b0(0x00),b1(0x00) {}$/;"	f	struct:websocketpp::frame::basic_header
basic_header	NFD/websocketpp/websocketpp/frame.hpp	/^    basic_header(opcode::value op, uint64_t size, bool fin, bool mask,$/;"	f	struct:websocketpp::frame::basic_header
basic_header	NFD/websocketpp/websocketpp/frame.hpp	/^    basic_header(uint8_t p0, uint8_t p1) : b0(p0), b1(p1) {}$/;"	f	struct:websocketpp::frame::basic_header
basic_header	NFD/websocketpp/websocketpp/frame.hpp	/^struct basic_header {$/;"	s	namespace:websocketpp::frame
basic_header_length	NFD/websocketpp/websocketpp/frame.hpp	/^    static unsigned int const basic_header_length = 2;$/;"	m	namespace:websocketpp::frame::limits
basic_socket	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^namespace basic_socket {$/;"	n	namespace:websocketpp::transport::asio
batch	NFD/rib/rib.hpp	/^    RibUpdateBatch batch;$/;"	m	struct:nfd::rib::Rib::UpdateQueueItem
be16toh	ndn-cxx/src/encoding/endian.hpp	44;"	d
be32toh	ndn-cxx/src/encoding/endian.hpp	48;"	d
be64toh	ndn-cxx/src/encoding/endian.hpp	52;"	d
beforeErase	NFD/daemon/table/cs-policy.cpp	/^Policy::beforeErase(iterator i)$/;"	f	class:nfd::cs::Policy
beforeErase	ndn-cxx/src/util/in-memory-storage-fifo.cpp	/^InMemoryStorageFifo::beforeErase(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageFifo
beforeErase	ndn-cxx/src/util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::beforeErase(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLfu
beforeErase	ndn-cxx/src/util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::beforeErase(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorageLru
beforeErase	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::beforeErase(InMemoryStorageEntry* entry)$/;"	f	class:ndn::util::InMemoryStorage
beforeEvict	NFD/daemon/table/cs-policy.hpp	/^  signal::Signal<Policy, iterator> beforeEvict;$/;"	m	class:nfd::cs::Policy
beforeExpirePendingInterest	NFD/daemon/fw/forwarder.hpp	/^  signal::Signal<Forwarder, pit::Entry> beforeExpirePendingInterest;$/;"	m	class:nfd::Forwarder
beforeExpirePendingInterest	NFD/daemon/fw/strategy.cpp	/^Strategy::beforeExpirePendingInterest(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::fw::Strategy
beforeRemoveFace	NFD/daemon/fw/strategy.hpp	/^  signal::Signal<FaceTable, shared_ptr<Face>>& beforeRemoveFace;$/;"	m	class:nfd::fw::Strategy
beforeSatisfyInterest	NFD/daemon/fw/access-strategy.cpp	/^AccessStrategy::beforeSatisfyInterest(shared_ptr<pit::Entry> pitEntry,$/;"	f	class:nfd::fw::AccessStrategy
beforeSatisfyInterest	NFD/daemon/fw/forwarder.hpp	/^  signal::Signal<Forwarder, pit::Entry, Face, Data> beforeSatisfyInterest;$/;"	m	class:nfd::Forwarder
beforeSatisfyInterest	NFD/daemon/fw/ncc-strategy.cpp	/^NccStrategy::beforeSatisfyInterest(shared_ptr<pit::Entry> pitEntry,$/;"	f	class:nfd::fw::NccStrategy
beforeSatisfyInterest	NFD/daemon/fw/strategy.cpp	/^Strategy::beforeSatisfyInterest(shared_ptr<pit::Entry> pitEntry,$/;"	f	class:nfd::fw::Strategy
beforeUse	NFD/daemon/table/cs-policy.cpp	/^Policy::beforeUse(iterator i)$/;"	f	class:nfd::cs::Policy
begin	NFD/daemon/fw/face-table.cpp	/^FaceTable::begin() const$/;"	f	class:nfd::FaceTable
begin	NFD/daemon/table/cs.hpp	/^  begin() const$/;"	f	class:nfd::cs::Cs
begin	NFD/daemon/table/fib.cpp	/^Fib::begin() const$/;"	f	class:nfd::Fib
begin	NFD/daemon/table/name-tree.hpp	/^NameTree::begin() const$/;"	f	class:nfd::NameTree
begin	NFD/daemon/table/pit.cpp	/^Pit::begin() const$/;"	f	class:nfd::Pit
begin	NFD/daemon/table/strategy-choice.cpp	/^StrategyChoice::begin() const$/;"	f	class:nfd::StrategyChoice
begin	NFD/rib/rib-entry.hpp	/^RibEntry::begin() const$/;"	f	class:nfd::rib::RibEntry
begin	NFD/rib/rib-entry.hpp	/^RibEntry::begin()$/;"	f	class:nfd::rib::RibEntry
begin	NFD/rib/rib-update-batch.cpp	/^RibUpdateBatch::begin() const$/;"	f	class:nfd::rib::RibUpdateBatch
begin	NFD/rib/rib.hpp	/^Rib::begin() const$/;"	f	class:nfd::rib::Rib
begin	ndn-cxx/src/detail/container-with-on-empty-signal.hpp	/^  begin()$/;"	f	class:ndn::ContainerWithOnEmptySignal
begin	ndn-cxx/src/encoding/block.cpp	/^Block::begin() const$/;"	f	class:ndn::Block
begin	ndn-cxx/src/encoding/encoder.hpp	/^Encoder::begin() const$/;"	f	class:ndn::encoding::Encoder
begin	ndn-cxx/src/encoding/encoder.hpp	/^Encoder::begin()$/;"	f	class:ndn::encoding::Encoder
begin	ndn-cxx/src/exclude.hpp	/^Exclude::begin() const$/;"	f	class:ndn::Exclude
begin	ndn-cxx/src/management/nfd-rib-entry.hpp	/^RibEntry::begin() const$/;"	f	class:ndn::nfd::RibEntry
begin	ndn-cxx/src/name.hpp	/^  begin() const$/;"	f	class:ndn::Name
begin	ndn-cxx/src/security/additional-description.cpp	/^AdditionalDescription::begin() const$/;"	f	class:ndn::security::AdditionalDescription
begin	ndn-cxx/src/security/additional-description.cpp	/^AdditionalDescription::begin()$/;"	f	class:ndn::security::AdditionalDescription
begin	ndn-cxx/src/security/certificate-container.cpp	/^CertificateContainer::begin() const$/;"	f	class:ndn::security::CertificateContainer
begin	ndn-cxx/src/security/identity-container.cpp	/^IdentityContainer::begin() const$/;"	f	class:ndn::security::IdentityContainer
begin	ndn-cxx/src/security/key-container.cpp	/^KeyContainer::begin() const$/;"	f	class:ndn::security::KeyContainer
begin	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::begin() const$/;"	f	class:ndn::util::InMemoryStorage
begin	utils/trie/detail/multi-policy-container.hpp	/^  begin() const$/;"	f	struct:ns3::ndn::ndnSIM::detail::multi_policy_container
begin	utils/trie/detail/multi-policy-container.hpp	/^  begin()$/;"	f	struct:ns3::ndn::ndnSIM::detail::multi_policy_container
beginApplyUpdate	NFD/rib/rib.cpp	/^Rib::beginApplyUpdate(const RibUpdate& update,$/;"	f	class:nfd::rib::Rib
beginRemoveFace	NFD/rib/rib.cpp	/^Rib::beginRemoveFace(uint64_t faceId)$/;"	f	class:nfd::rib::Rib
bestFace	NFD/daemon/fw/ncc-strategy.hpp	/^    weak_ptr<Face> bestFace;$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
bestFaceTimeout	NFD/daemon/fw/ncc-strategy.hpp	/^    scheduler::EventId bestFaceTimeout;$/;"	m	class:nfd::fw::NccStrategy::PitEntryInfo
binary	NFD/websocketpp/websocketpp/frame.hpp	/^        binary = 0x2,$/;"	e	enum:websocketpp::frame::opcode::value
bind	ndn-cxx/src/util/sqlite3-statement.cpp	/^Sqlite3Statement::bind(int index, const Block& block, void(*destructor)(void*))$/;"	f	class:ndn::util::Sqlite3Statement
bind	ndn-cxx/src/util/sqlite3-statement.cpp	/^Sqlite3Statement::bind(int index, const char* value, size_t size, void(*destructor)(void*))$/;"	f	class:ndn::util::Sqlite3Statement
bind	ndn-cxx/src/util/sqlite3-statement.cpp	/^Sqlite3Statement::bind(int index, const std::string& value, void(*destructor)(void*))$/;"	f	class:ndn::util::Sqlite3Statement
bind	ndn-cxx/src/util/sqlite3-statement.cpp	/^Sqlite3Statement::bind(int index, const void* buf, size_t size, void(*destructor)(void*))$/;"	f	class:ndn::util::Sqlite3Statement
bind	ndn-cxx/src/util/sqlite3-statement.cpp	/^Sqlite3Statement::bind(int index, int number)$/;"	f	class:ndn::util::Sqlite3Statement
blank	NFD/websocketpp/websocketpp/close.hpp	/^    static value const blank = 0;$/;"	m	namespace:websocketpp::close::status
block	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::block(bool verifyLength\/* = true*\/) const$/;"	f	class:ndn::encoding::Encoder
blockFromValue	ndn-cxx/src/encoding/block.cpp	/^Block::blockFromValue() const$/;"	f	class:ndn::Block
body_encoding	NFD/websocketpp/websocketpp/http/parser.hpp	/^namespace body_encoding {$/;"	n	namespace:websocketpp::http::parser
body_ready	NFD/websocketpp/websocketpp/http/parser.hpp	/^    bool body_ready() const {$/;"	f	class:websocketpp::http::parser::parser
booleanBlock	ndn-cxx/src/encoding/block-helpers.hpp	/^booleanBlock(uint32_t type)$/;"	f	namespace:ndn::encoding
boost	helper/boost-graph-ndn-global-routing-helper.hpp	/^namespace boost {$/;"	n
boost	model/cs/ndn-content-store.hpp	/^namespace boost {$/;"	n
boost	ndn-cxx/src/common.hpp	/^namespace boost {$/;"	n
boost	ndn-cxx/src/encoding/block.hpp	/^namespace boost {$/;"	n
boost	ndn-cxx/src/face.hpp	/^namespace boost {$/;"	n
boost	ndn-cxx/src/transport/tcp-transport.hpp	/^namespace boost { namespace asio { namespace ip { class tcp; } } }$/;"	n
boost	ndn-cxx/src/transport/unix-transport.hpp	/^namespace boost { namespace asio { namespace local { class stream_protocol; } } }$/;"	n
boost	ndn-cxx/src/util/monotonic_deadline_timer.hpp	/^namespace boost {$/;"	n
boost	ndn-cxx/src/util/time.cpp	/^namespace boost {$/;"	n	file:
boost	ndn-cxx/src/util/time.hpp	/^namespace boost {$/;"	n
boost_error	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    typedef boost::system::error_code boost_error;$/;"	t	class:websocketpp::transport::asio::tls_socket::connection
broadcastAddress	NFD/core/network-interface.hpp	/^  boost::asio::ip::address_v4 broadcastAddress;$/;"	m	class:nfd::NetworkInterfaceInfo
broadcast_server	NFD/websocketpp/docs/simple_broadcast_server.cpp	/^    broadcast_server() {$/;"	f	class:broadcast_server
broadcast_server	NFD/websocketpp/docs/simple_broadcast_server.cpp	/^class broadcast_server {$/;"	c	file:
broadcast_server	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    broadcast_server() {$/;"	f	class:broadcast_server
broadcast_server	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^class broadcast_server {$/;"	c	file:
broadcast_server	NFD/websocketpp/examples/simple_broadcast_server/simple_broadcast_server.cpp	/^    broadcast_server() {$/;"	f	class:broadcast_server
broadcast_server	NFD/websocketpp/examples/simple_broadcast_server/simple_broadcast_server.cpp	/^class broadcast_server {$/;"	c	file:
bswap_16	NFD/core/city-hash.cpp	79;"	d	file:
bswap_32	NFD/core/city-hash.cpp	53;"	d	file:
bswap_32	NFD/core/city-hash.cpp	60;"	d	file:
bswap_32	NFD/core/city-hash.cpp	68;"	d	file:
bswap_32	NFD/core/city-hash.cpp	80;"	d	file:
bswap_64	NFD/core/city-hash.cpp	54;"	d	file:
bswap_64	NFD/core/city-hash.cpp	61;"	d	file:
bswap_64	NFD/core/city-hash.cpp	69;"	d	file:
bswap_64	NFD/core/city-hash.cpp	81;"	d	file:
bucketIncrement_	utils/trie/trie.hpp	/^  size_t bucketIncrement_;$/;"	m	class:ns3::ndn::ndnSIM::trie
bucketSize_	utils/trie/trie.hpp	/^  size_t bucketSize_;$/;"	m	class:ns3::ndn::ndnSIM::trie
bucket_traits	utils/trie/trie.hpp	/^  typedef typename unordered_set::bucket_traits bucket_traits;$/;"	t	class:ns3::ndn::ndnSIM::trie
bucket_type	utils/trie/trie.hpp	/^  typedef typename unordered_set::bucket_type bucket_type;$/;"	t	class:ns3::ndn::ndnSIM::trie
buckets_	utils/trie/trie.hpp	/^  buckets_array buckets_;$/;"	m	class:ns3::ndn::ndnSIM::trie
buckets_array	utils/trie/trie.hpp	/^  typedef boost::interprocess::unique_ptr<bucket_type, array_disposer<bucket_type>> buckets_array;$/;"	t	class:ns3::ndn::ndnSIM::trie
buf	NFD/tools/ndn-autoconfig/base-dns.cpp	/^  uint8_t buf[NS_PACKETSZ];$/;"	m	union:ndn::tools::autoconfig::BaseDns::QueryAnswer	file:
buf	NFD/websocketpp/websocketpp/common/md5.hpp	/^    md5_byte_t buf[64];     \/* accumulate block *\/$/;"	m	struct:websocketpp::md5::md5_state_s
buf	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    char const * buf;$/;"	m	struct:websocketpp::transport::buffer
buf	ndn-cxx/src/encoding/buffer-stream.hpp	/^  buf()$/;"	f	class:ndn::OBufferStream
buf	ndn-cxx/src/encoding/buffer.hpp	/^  buf() const$/;"	f	class:ndn::Buffer
buf	ndn-cxx/src/encoding/buffer.hpp	/^  buf()$/;"	f	class:ndn::Buffer
buf	ndn-cxx/src/encoding/encoder.hpp	/^Encoder::buf() const$/;"	f	class:ndn::encoding::Encoder
buf	ndn-cxx/src/encoding/encoder.hpp	/^Encoder::buf()$/;"	f	class:ndn::encoding::Encoder
buffer	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    buffer(char const * b, size_t l) : buf(b),len(l) {}$/;"	f	struct:websocketpp::transport::buffer
buffer	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^struct buffer {$/;"	s	namespace:websocketpp::transport
buffer	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^  EncodingBuffer buffer;$/;"	m	class:ndn::tests::BasicBlockFixture	file:
buffer_append_device	ndn-cxx/src/encoding/buffer-stream.hpp	/^  buffer_append_device(Buffer& container)$/;"	f	class:ndn::iostreams::buffer_append_device
buffer_append_device	ndn-cxx/src/encoding/buffer-stream.hpp	/^class buffer_append_device$/;"	c	namespace:ndn::iostreams
buffered_amount	NFD/websocketpp/websocketpp/connection.hpp	/^    size_t buffered_amount() const {$/;"	f	class:websocketpp::connection
byte_mask	NFD/websocketpp/websocketpp/frame.hpp	/^void byte_mask(input_iter first, input_iter last, output_iter result,$/;"	f	namespace:websocketpp::frame
byte_mask	NFD/websocketpp/websocketpp/frame.hpp	/^void byte_mask(iter_type b, iter_type e, masking_key_type const & key,$/;"	f	namespace:websocketpp::frame
byte_mask_circ	NFD/websocketpp/websocketpp/frame.hpp	/^inline size_t byte_mask_circ(uint8_t * input, uint8_t * output, size_t length,$/;"	f	namespace:websocketpp::frame
byte_mask_circ	NFD/websocketpp/websocketpp/frame.hpp	/^inline size_t byte_mask_circ(uint8_t* data, size_t length, size_t prepared_key){$/;"	f	namespace:websocketpp::frame
bytes	NFD/websocketpp/websocketpp/frame.hpp	/^    uint8_t bytes[MAX_EXTENDED_HEADER_LENGTH];$/;"	m	struct:websocketpp::frame::extended_header
c	NFD/websocketpp/test/connection/connection.cpp	/^    websocketpp::connection<stub_config> c;$/;"	m	struct:connection_setup	file:
c	NFD/websocketpp/websocketpp/close.hpp	/^    char c[2];$/;"	m	union:websocketpp::close::code_converter
c	NFD/websocketpp/websocketpp/frame.hpp	/^    uint8_t  c[2];$/;"	m	union:websocketpp::frame::uint16_converter
c	NFD/websocketpp/websocketpp/frame.hpp	/^    uint8_t  c[8];$/;"	m	union:websocketpp::frame::uint64_converter
c	NFD/websocketpp/websocketpp/frame.hpp	/^    uint8_t c[4];$/;"	m	union:websocketpp::frame::uint32_converter
c1	NFD/core/city-hash.cpp	/^static const uint32_t c1 = 0xcc9e2d51;$/;"	v	file:
c2	NFD/core/city-hash.cpp	/^static const uint32_t c2 = 0x1b873593;$/;"	v	file:
cache	ndn-cxx/tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^  shared_ptr<CertificateCacheTtl> cache;$/;"	m	class:ndn::tests::CertificateCacheFixture	file:
calc	NFD/websocketpp/websocketpp/sha1/sha1.hpp	/^inline void calc(void const * src, size_t bytelength, unsigned char * hash) {$/;"	f	namespace:websocketpp::sha1
callbackDispatch	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  callbackDispatch(const Data& response,$/;"	f	class:nfd::tests::FaceFixture
canCanonize	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::canCanonize(const std::string& scheme)$/;"	f	class:ndn::util::FaceUri
canForwardTo	NFD/daemon/table/pit-entry.cpp	/^Entry::canForwardTo(const Face& face) const$/;"	f	class:nfd::pit::Entry
canForwardToNextHop	examples/ndn-load-balancer/random-load-balancer-strategy.cpp	/^canForwardToNextHop(shared_ptr<pit::Entry> pitEntry, const fib::NextHop& nexthop)$/;"	f	namespace:nfd::fw
canIgnore	ndn-cxx/src/lp/detail/field-info.hpp	/^  bool canIgnore;$/;"	m	class:ndn::lp::detail::FieldInfo
canSatisfy	NFD/daemon/table/cs-entry.cpp	/^Entry::canSatisfy(const Interest& interest) const$/;"	f	class:nfd::cs::Entry
canStale	NFD/daemon/table/cs-entry-impl.cpp	/^EntryImpl::canStale() const$/;"	f	class:nfd::cs::EntryImpl
cancel	NFD/core/scheduler.cpp	/^ScopedEventId::cancel()$/;"	f	class:nfd::scheduler::ScopedEventId
cancel	NFD/core/scheduler.cpp	/^cancel(const EventId& eventId)$/;"	f	namespace:nfd::scheduler
cancel	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    void cancel() {}$/;"	f	struct:websocketpp::transport::debug::timer
cancel	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    void cancel() {}$/;"	f	struct:websocketpp::transport::iostream::timer
cancel	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    void cancel() {}$/;"	f	struct:websocketpp::transport::stub::timer
cancel	ndn-cxx/src/util/scheduler-scoped-event-id.cpp	/^ScopedEventId::cancel()$/;"	f	class:ndn::util::scheduler::ScopedEventId
cancelAllEvents	ndn-cxx/src/util/scheduler.cpp	/^Scheduler::cancelAllEvents()$/;"	f	class:ndn::util::scheduler::Scheduler
cancelEvent	ndn-cxx/src/util/scheduler.cpp	/^Scheduler::cancelEvent(const EventId& eventId)$/;"	f	class:ndn::util::scheduler::Scheduler
cancelSelf	NFD/tests/core/scheduler.t.cpp	/^  cancelSelf()$/;"	f	class:nfd::tests::SelfCancelFixture
cancelUnsatisfyAndStragglerTimer	NFD/daemon/fw/forwarder.cpp	/^Forwarder::cancelUnsatisfyAndStragglerTimer(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::Forwarder
cancel_on_open	NFD/websocketpp/test/transport/integration.cpp	/^void cancel_on_open(server * s, websocketpp::connection_hdl) {$/;"	f
cancel_socket	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    void cancel_socket() {$/;"	f	class:websocketpp::transport::asio::basic_socket::connection
cancel_socket	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    void cancel_socket() {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
canonicalName	ndn-cxx/src/security/key-chain.cpp	/^  std::string canonicalName;$/;"	m	struct:ndn::security::Factory	file:
canonize	ndn-cxx/src/util/face-uri.cpp	/^  canonize(const FaceUri& faceUri,$/;"	f	class:ndn::util::EtherCanonizeProvider
canonize	ndn-cxx/src/util/face-uri.cpp	/^  canonize(const FaceUri& faceUri,$/;"	f	class:ndn::util::IpHostCanonizeProvider
canonize	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::canonize(const CanonizeSuccessCallback& onSuccess,$/;"	f	class:ndn::util::FaceUri
capacity	ndn-cxx/src/encoding/encoder.hpp	/^Encoder::capacity() const$/;"	f	class:ndn::encoding::Encoder
case_count	NFD/websocketpp/examples/testee_client/testee_client.cpp	/^int case_count = 0;$/;"	v
category	NFD/websocketpp/websocketpp/error.hpp	/^    category() {}$/;"	f	class:websocketpp::error::category
category	NFD/websocketpp/websocketpp/error.hpp	/^class category : public lib::error_category {$/;"	c	namespace:websocketpp::error
category	NFD/websocketpp/websocketpp/extensions/extension.hpp	/^    category() {}$/;"	f	class:websocketpp::extensions::error::category
category	NFD/websocketpp/websocketpp/extensions/extension.hpp	/^class category : public lib::error_category {$/;"	c	namespace:websocketpp::extensions::error
category	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    category() {}$/;"	f	class:websocketpp::extensions::permessage_deflate::error::category
category	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^class category : public lib::error_category {$/;"	c	namespace:websocketpp::extensions::permessage_deflate::error
category	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^class category : public lib::error_category {$/;"	c	namespace:websocketpp::transport::asio::error
category	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    category() {}$/;"	f	class:websocketpp::transport::error::category
category	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^class category : public lib::error_category {$/;"	c	namespace:websocketpp::transport::error
category	NFD/websocketpp/websocketpp/transport/debug/base.hpp	/^    category() {}$/;"	f	class:websocketpp::transport::debug::error::category
category	NFD/websocketpp/websocketpp/transport/debug/base.hpp	/^class category : public lib::error_category {$/;"	c	namespace:websocketpp::transport::debug::error
category	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^    category() {}$/;"	f	class:websocketpp::transport::iostream::error::category
category	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^class category : public lib::error_category {$/;"	c	namespace:websocketpp::transport::iostream::error
category	NFD/websocketpp/websocketpp/transport/stub/base.hpp	/^    category() {}$/;"	f	class:websocketpp::transport::stub::error::category
category	NFD/websocketpp/websocketpp/transport/stub/base.hpp	/^class category : public lib::error_category {$/;"	c	namespace:websocketpp::transport::stub::error
category	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef read_write_property_map_tag category;$/;"	t	struct:boost::property_traits
category	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef readable_property_map_tag category;$/;"	t	struct:boost::property_traits
category	ndn-cxx/src/encoding/buffer-stream.hpp	/^  typedef boost::iostreams::sink_tag category;$/;"	t	class:ndn::iostreams::buffer_append_device
cert1	ndn-cxx/tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^  shared_ptr<IdentityCertificate> cert1;$/;"	m	class:ndn::tests::CertificateCacheFixture	file:
cert2	ndn-cxx/tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^  shared_ptr<IdentityCertificate> cert2;$/;"	m	class:ndn::tests::CertificateCacheFixture	file:
certDirPath	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  boost::filesystem::path certDirPath;$/;"	m	struct:ndn::tests::DirTestFixture	file:
certName	ndn-cxx/tests/unit-tests/data.t.cpp	/^  Name certName;$/;"	m	class:ndn::tests::DataIdentityFixture	file:
certificateNameToPublicKeyName	ndn-cxx/src/security/identity-certificate.cpp	/^IdentityCertificate::certificateNameToPublicKeyName(const Name& certificateName)$/;"	f	class:ndn::IdentityCertificate
cfLoopEvent	ndn-cxx/src/util/network-monitor.cpp	/^  scheduler::ScopedEventId cfLoopEvent;$/;"	m	class:ndn::util::NetworkMonitor::Impl	file:
changeStrategy	NFD/daemon/table/strategy-choice.cpp	/^StrategyChoice::changeStrategy(strategy_choice::Entry& entry,$/;"	f	class:nfd::StrategyChoice
channel1_onConnectFailed	NFD/tests/daemon/face/tcp.t.cpp	/^  channel1_onConnectFailed(const std::string& reason)$/;"	f	class:nfd::tests::EndToEndFixture
channel1_onConnectFailed	NFD/tests/daemon/face/unix-stream.t.cpp	/^  channel1_onConnectFailed(const std::string& reason)$/;"	f	class:nfd::tests::EndToEndFixture
channel1_onFaceCreated	NFD/tests/daemon/face/tcp.t.cpp	/^  channel1_onFaceCreated(const shared_ptr<Face>& newFace)$/;"	f	class:nfd::tests::EndToEndFixture
channel1_onFaceCreated	NFD/tests/daemon/face/unix-stream.t.cpp	/^  channel1_onFaceCreated(const shared_ptr<Face>& newFace)$/;"	f	class:nfd::tests::EndToEndFixture
channel1_onFaceCreated	NFD/tests/daemon/face/websocket.t.cpp	/^  channel1_onFaceCreated(const shared_ptr<Face>& newFace)$/;"	f	class:nfd::tests::EndToEndFixture
channel2_onConnectFailed	NFD/tests/daemon/face/tcp.t.cpp	/^  channel2_onConnectFailed(const std::string& reason)$/;"	f	class:nfd::tests::EndToEndFixture
channel2_onFaceCreated	NFD/tests/daemon/face/tcp.t.cpp	/^  channel2_onFaceCreated(const shared_ptr<Face>& newFace)$/;"	f	class:nfd::tests::EndToEndFixture
channel_name	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static char const * channel_name(level channel) {$/;"	f	struct:websocketpp::log::alevel
channel_name	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static char const * channel_name(level channel) {$/;"	f	struct:websocketpp::log::elevel
channel_onConnectFailed	NFD/tests/daemon/face/tcp.t.cpp	/^  channel_onConnectFailed(const std::string& reason)$/;"	f	class:nfd::tests::EndToEndFixture
channel_onConnectFailed	NFD/tests/daemon/face/unix-stream.t.cpp	/^  channel_onConnectFailed(const std::string& reason)$/;"	f	class:nfd::tests::EndToEndFixture
channel_onFaceCreated	NFD/tests/daemon/face/tcp.t.cpp	/^  channel_onFaceCreated(const shared_ptr<Face>& newFace)$/;"	f	class:nfd::tests::EndToEndFixture
channel_onFaceCreated	NFD/tests/daemon/face/unix-stream.t.cpp	/^  channel_onFaceCreated(const shared_ptr<Face>& newFace)$/;"	f	class:nfd::tests::EndToEndFixture
channel_type_hint	NFD/websocketpp/websocketpp/logger/levels.hpp	/^struct channel_type_hint {$/;"	s	namespace:websocketpp::log
char_type	ndn-cxx/src/encoding/buffer-stream.hpp	/^  typedef char char_type;$/;"	t	class:ndn::iostreams::buffer_append_device
check	ndn-cxx/src/security/conf/checker.hpp	/^  check(const Data& data,$/;"	f	class:ndn::security::conf::CustomizedChecker
check	ndn-cxx/src/security/conf/checker.hpp	/^  check(const Data& data,$/;"	f	class:ndn::security::conf::FixedSignerChecker
check	ndn-cxx/src/security/conf/checker.hpp	/^  check(const Interest& interest,$/;"	f	class:ndn::security::conf::CustomizedChecker
check	ndn-cxx/src/security/conf/checker.hpp	/^  check(const Interest& interest,$/;"	f	class:ndn::security::conf::FixedSignerChecker
check	ndn-cxx/src/security/conf/checker.hpp	/^  check(const Packet& packet, const Signature& signature,$/;"	f	class:ndn::security::conf::CustomizedChecker
check	ndn-cxx/src/security/conf/checker.hpp	/^  check(const Packet& packet, const Signature& signature,$/;"	f	class:ndn::security::conf::FixedSignerChecker
check	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  check(const Data& data,$/;"	f	class:ndn::security::conf::KeyLocatorChecker
check	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  check(const Interest& interest,$/;"	f	class:ndn::security::conf::KeyLocatorChecker
check	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  check(const Name& packetName,$/;"	f	class:ndn::security::conf::HyperKeyLocatorNameChecker
check	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  check(const Name& packetName,$/;"	f	class:ndn::security::conf::RegexKeyLocatorNameChecker
check	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  check(const Name& packetName,$/;"	f	class:ndn::security::conf::RelationKeyLocatorNameChecker
check	ndn-cxx/src/security/conf/rule.hpp	/^  check(const Packet& packet,$/;"	f	class:ndn::security::conf::Rule
checkAddress	ndn-cxx/src/util/face-uri.cpp	/^  checkAddress(const dns::IpAddress& ipAddress) const$/;"	f	class:ndn::util::IpHostCanonizeProvider	file:
checkAddress	ndn-cxx/src/util/face-uri.cpp	/^  checkAddress(const dns::IpAddress& ipAddress) const$/;"	f	class:ndn::util::TcpCanonizeProvider
checkError	NFD/tests/core/logger.t.cpp	/^checkError(const LoggerFactory::Error& error, const std::string& expected)$/;"	f	namespace:nfd::tests
checkError	NFD/tests/daemon/face/tcp.t.cpp	/^  checkError(const std::string& errorActual, const std::string& errorExpected)$/;"	f	class:nfd::tests::FaceCreateFixture
checkError	NFD/tests/daemon/face/udp.t.cpp	/^  checkError(const std::string& errorActual, const std::string& errorExpected)$/;"	f	class:nfd::tests::FaceCreateFixture
checkExceptionMessage	NFD/tests/daemon/mgmt/general-config-section.t.cpp	/^checkExceptionMessage(const ConfigFile::Error& error, const std::string& expected)$/;"	f	namespace:nfd::general::tests
checkFace	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  checkFace(std::vector<Packet>& receivedPackets,$/;"	f	struct:ndn::tests::FacesFixture
checkFaceList	NFD/tests/daemon/face/tcp.t.cpp	/^  checkFaceList(size_t shouldBe)$/;"	f	class:nfd::tests::EndToEndFixture
checkKeySize	ndn-cxx/src/security/key-params.cpp	/^AesKeyParamsInfo::checkKeySize(uint32_t size)$/;"	f	class:ndn::AesKeyParamsInfo
checkKeySize	ndn-cxx/src/security/key-params.cpp	/^EcdsaKeyParamsInfo::checkKeySize(uint32_t size)$/;"	f	class:ndn::EcdsaKeyParamsInfo
checkKeySize	ndn-cxx/src/security/key-params.cpp	/^RsaKeyParamsInfo::checkKeySize(uint32_t size)$/;"	f	class:ndn::RsaKeyParamsInfo
checkMissingHandler	NFD/tests/core/config-file.t.cpp	/^  checkMissingHandler(const std::string& filename,$/;"	f	class:nfd::tests::MissingCallbackFixture
checkPolicy	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::checkPolicy(const Data& data,$/;"	f	class:ndn::ValidatorConfig
checkPolicy	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::checkPolicy(const Interest& interest,$/;"	f	class:ndn::ValidatorConfig
checkPolicy	ndn-cxx/src/security/validator-null.hpp	/^  checkPolicy(const Data& data,$/;"	f	class:ndn::ValidatorNull
checkPolicy	ndn-cxx/src/security/validator-null.hpp	/^  checkPolicy(const Interest& interest,$/;"	f	class:ndn::ValidatorNull
checkPolicy	ndn-cxx/src/security/validator-regex.cpp	/^ValidatorRegex::checkPolicy(const Data& data,$/;"	f	class:ndn::ValidatorRegex
checkPolicy	ndn-cxx/src/security/validator-regex.hpp	/^  checkPolicy(const Interest& interest,$/;"	f	class:ndn::ValidatorRegex
checkPolicy	ndn-cxx/src/util/command-interest-validator.hpp	/^  checkPolicy(const Data& data,$/;"	f	class:ndn::CommandInterestValidator
checkPolicy	ndn-cxx/src/util/command-interest-validator.hpp	/^CommandInterestValidator::checkPolicy(const Interest& interest,$/;"	f	class:ndn::CommandInterestValidator
checkPrefix	ndn-cxx/tests/integrated/face.cpp	/^  checkPrefix(bool doesExist)$/;"	f	class:ndn::tests::FacesFixture2
checkRelation	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  checkRelation(const Relation& relation, const Name& name1, const Name& name2)$/;"	f	class:ndn::security::conf::KeyLocatorChecker
checkSignature	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::checkSignature(const Packet& packet,$/;"	f	class:ndn::ValidatorConfig
checkTimestamp	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::checkTimestamp(const shared_ptr<const Interest>& interest,$/;"	f	class:ndn::ValidatorConfig
check_ec	NFD/websocketpp/test/transport/integration.cpp	/^void check_ec(T * c, websocketpp::lib::error_code ec,$/;"	f
check_ec_and_stop	NFD/websocketpp/test/transport/integration.cpp	/^void check_ec_and_stop(T * e, websocketpp::lib::error_code ec,$/;"	f
check_on_fail	NFD/websocketpp/test/connection/connection.cpp	/^void check_on_fail(server* s, websocketpp::lib::error_code ec, bool & called, $/;"	f
checkedReadNonNegativeIntegerType	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^checkedReadNonNegativeIntegerType(Block::element_const_iterator& i,$/;"	f	namespace:nfd::tests
checkedReadNonNegativeIntegerType	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^checkedReadNonNegativeIntegerType(Block::element_const_iterator& i,$/;"	f	namespace:nfd::tests
children_	utils/trie/trie.hpp	/^  unordered_set children_;$/;"	m	class:ns3::ndn::ndnSIM::trie
chrono	ndn-cxx/src/util/time.cpp	/^namespace chrono {$/;"	n	namespace:boost	file:
chrono	ndn-cxx/src/util/time.hpp	/^namespace chrono {$/;"	n	namespace:boost
chunked	NFD/websocketpp/websocketpp/http/parser.hpp	/^        chunked$/;"	e	enum:websocketpp::http::parser::body_encoding::value
ci_find_substr	NFD/websocketpp/websocketpp/utilities.hpp	/^typename T::const_iterator ci_find_substr(T const & haystack, T const & needle,$/;"	f	namespace:websocketpp::utility
ci_find_substr	NFD/websocketpp/websocketpp/utilities.hpp	/^typename T::const_iterator ci_find_substr(T const & haystack,$/;"	f	namespace:websocketpp::utility
ci_less	NFD/websocketpp/websocketpp/utilities.hpp	/^struct ci_less : std::binary_function<std::string, std::string, bool> {$/;"	s	namespace:websocketpp::utility
circshift_prepared_key	NFD/websocketpp/websocketpp/frame.hpp	/^inline size_t circshift_prepared_key(size_t prepared_key, size_t offset) {$/;"	f	namespace:websocketpp::frame
cleanOldKeys	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::cleanOldKeys()$/;"	f	class:ndn::ValidatorConfig
cleanup	NFD/daemon/face/ndnlp-partial-message-store.cpp	/^PartialMessageStore::cleanup(uint64_t messageIdentifier)$/;"	f	class:nfd::ndnlp::PartialMessageStore
cleanup	NFD/daemon/table/measurements.cpp	/^Measurements::cleanup(Entry& entry)$/;"	f	class:nfd::Measurements
clear	model/cs/custom-policies/freshness-policy.hpp	/^      clear()$/;"	f	class:ns3::ndn::ndnSIM::freshness_policy_traits::policy::type
clear	model/cs/custom-policies/lifetime-stats-policy.hpp	/^      clear()$/;"	f	class:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy::type
clear	model/cs/custom-policies/probability-policy.hpp	/^      clear()$/;"	f	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
clear	model/ndn-global-router.cpp	/^GlobalRouter::clear()$/;"	f	class:ns3::ndn::GlobalRouter
clear	ndn-cxx/src/destination-flag.cpp	/^DestinationFlag::clear()$/;"	f	class:ndn::DestinationFlag
clear	ndn-cxx/src/detail/container-with-on-empty-signal.hpp	/^  clear()$/;"	f	class:ndn::ContainerWithOnEmptySignal
clear	ndn-cxx/src/exclude.hpp	/^Exclude::clear()$/;"	f	class:ndn::Exclude
clear	ndn-cxx/src/key-locator.cpp	/^KeyLocator::clear()$/;"	f	class:ndn::KeyLocator
clear	ndn-cxx/src/lp/packet.hpp	/^  clear()$/;"	f	class:ndn::lp::Packet
clear	ndn-cxx/src/name.hpp	/^  clear()$/;"	f	class:ndn::Name
clear	ndn-cxx/src/util/event-emitter.hpp	/^EventEmitter<TArgs...>::clear()$/;"	f	class:ndn::util::EventEmitter
clear	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^EventEmitterTester::clear()$/;"	f	class:ndn::util::tests::EventEmitterTester
clear	utils/trie/aggregate-stats-policy.hpp	/^      clear()$/;"	f	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
clear	utils/trie/counting-policy.hpp	/^      clear()$/;"	f	class:ns3::ndn::ndnSIM::counting_policy_traits::policy::type
clear	utils/trie/detail/multi-policy-container.hpp	/^  clear()$/;"	f	struct:ns3::ndn::ndnSIM::detail::empty_policy_wrap
clear	utils/trie/detail/multi-policy-container.hpp	/^  clear()$/;"	f	struct:ns3::ndn::ndnSIM::detail::inherit_with_base
clear	utils/trie/empty-policy.hpp	/^      clear()$/;"	f	struct:ns3::ndn::ndnSIM::empty_policy_traits::policy::type
clear	utils/trie/fifo-policy.hpp	/^      clear()$/;"	f	class:ns3::ndn::ndnSIM::fifo_policy_traits::policy::type
clear	utils/trie/lfu-policy.hpp	/^      clear()$/;"	f	class:ns3::ndn::ndnSIM::lfu_policy_traits::policy::type
clear	utils/trie/lru-policy.hpp	/^      clear()$/;"	f	class:ns3::ndn::ndnSIM::lru_policy_traits::policy::type
clear	utils/trie/multi-policy.hpp	/^      clear()$/;"	f	class:ns3::ndn::ndnSIM::multi_policy_traits::policy::type
clear	utils/trie/payload-policy.hpp	/^      clear()$/;"	f	class:ns3::ndn::ndnSIM::payload_policy_traits::policy::type
clear	utils/trie/persistent-policy.hpp	/^      clear()$/;"	f	class:ns3::ndn::ndnSIM::persistent_policy_traits::policy::type
clear	utils/trie/random-policy.hpp	/^      clear()$/;"	f	class:ns3::ndn::ndnSIM::random_policy_traits::policy::type
clear	utils/trie/trie-with-policy.hpp	/^  clear()$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
clear	utils/trie/trie.hpp	/^  clear()$/;"	f	class:ns3::ndn::ndnSIM::trie
clearDestinationFlag	NFD/daemon/table/pit-entry.cpp	/^Entry::clearDestinationFlag()$/;"	f	class:nfd::pit::Entry
clearFibUpdates	NFD/tests/rib/fib-updates-common.hpp	/^  clearFibUpdates()$/;"	f	class:nfd::rib::tests::FibUpdatesFixture
clearRefreshEvents	NFD/rib/remote-registrator.cpp	/^RemoteRegistrator::clearRefreshEvents()$/;"	f	class:nfd::rib::RemoteRegistrator
clearRoutes	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  clearRoutes()$/;"	f	class:ndn::nfd::RibEntry
clearStrategyInfo	NFD/daemon/table/strategy-choice.cpp	/^clearStrategyInfo(const name_tree::Entry& nte)$/;"	f	namespace:nfd
clearStrategyInfo	NFD/daemon/table/strategy-info-host.cpp	/^StrategyInfoHost::clearStrategyInfo()$/;"	f	class:nfd::StrategyInfoHost
clearWBuffert	NFD/websocketpp/websocketpp/sha1/sha1.hpp	/^inline void clearWBuffert(unsigned int * buffert)$/;"	f	namespace:websocketpp::sha1::__anon14
clear_access_channels	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void clear_access_channels(log::level channels) {$/;"	f	class:websocketpp::endpoint
clear_channels	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    void clear_channels(level channels) {$/;"	f	class:websocketpp::log::basic
clear_channels	NFD/websocketpp/websocketpp/logger/stub.hpp	/^    void clear_channels(level) {}$/;"	f	class:websocketpp::log::stub
clear_error_channels	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void clear_error_channels(log::level channels) {$/;"	f	class:websocketpp::endpoint
clear_function	NFD/websocketpp/websocketpp/common/functional.hpp	/^    void clear_function(T & x) {$/;"	f	namespace:websocketpp::lib
clear_if	utils/trie/trie.hpp	/^  clear_if(Predicate cond)$/;"	f	class:ns3::ndn::ndnSIM::trie
client	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^typedef websocketpp::client<websocketpp::config::asio_client> client;$/;"	t	file:
client	NFD/websocketpp/examples/sip_client/sip_client.cpp	/^typedef websocketpp::client<websocketpp::config::asio_client> client;$/;"	t	file:
client	NFD/websocketpp/examples/telemetry_client/telemetry_client.cpp	/^    typedef websocketpp::client<websocketpp::config::asio_client> client;$/;"	t	class:telemetry_client	file:
client	NFD/websocketpp/examples/testee_client/testee_client.cpp	/^typedef websocketpp::client<websocketpp::config::asio_client> client;$/;"	t	file:
client	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^typedef websocketpp::client<websocketpp::config::asio_client> client;$/;"	t	file:
client	NFD/websocketpp/test/connection/connection_tu2.hpp	/^typedef websocketpp::client<websocketpp::config::core> client;$/;"	t
client	NFD/websocketpp/test/roles/client.cpp	/^typedef websocketpp::client<stub_config> client;$/;"	t	file:
client	NFD/websocketpp/test/transport/integration.cpp	/^typedef websocketpp::client<config> client;$/;"	t	file:
client	NFD/websocketpp/tutorials/utility_client/step2.cpp	/^typedef websocketpp::client<websocketpp::config::asio_client> client;$/;"	t	file:
client	NFD/websocketpp/tutorials/utility_client/step3.cpp	/^typedef websocketpp::client<websocketpp::config::asio_client> client;$/;"	t	file:
client	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^typedef websocketpp::client<websocketpp::config::asio_client> client;$/;"	t	file:
client	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^typedef websocketpp::client<websocketpp::config::asio_client> client;$/;"	t	file:
client	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^typedef websocketpp::client<websocketpp::config::asio_client> client;$/;"	t	file:
client	NFD/websocketpp/websocketpp/roles/client_endpoint.hpp	/^    explicit client() : endpoint_type(false)$/;"	f	class:websocketpp::client
client	NFD/websocketpp/websocketpp/roles/client_endpoint.hpp	/^class client : public endpoint<connection<config>,config> {$/;"	c	namespace:websocketpp
client1	NFD/tests/daemon/face/websocket.t.cpp	/^  Client client1;$/;"	m	class:nfd::tests::EndToEndFixture	file:
client1_onClose	NFD/tests/daemon/face/websocket.t.cpp	/^  client1_onClose(websocketpp::connection_hdl hdl)$/;"	f	class:nfd::tests::EndToEndFixture
client1_onFail	NFD/tests/daemon/face/websocket.t.cpp	/^  client1_onFail(websocketpp::connection_hdl hdl)$/;"	f	class:nfd::tests::EndToEndFixture
client1_onMessage	NFD/tests/daemon/face/websocket.t.cpp	/^  client1_onMessage(websocketpp::connection_hdl hdl,$/;"	f	class:nfd::tests::EndToEndFixture
client1_onOpen	NFD/tests/daemon/face/websocket.t.cpp	/^  client1_onOpen(websocketpp::connection_hdl hdl)$/;"	f	class:nfd::tests::EndToEndFixture
client1_onPing	NFD/tests/daemon/face/websocket.t.cpp	/^  client1_onPing(websocketpp::connection_hdl hdl, std::string msg)$/;"	f	class:nfd::tests::EndToEndFixture
client1_onReceiveData	NFD/tests/daemon/face/websocket.t.cpp	/^  client1_onReceiveData(const Data& data)$/;"	f	class:nfd::tests::EndToEndFixture
client1_onReceiveInterest	NFD/tests/daemon/face/websocket.t.cpp	/^  client1_onReceiveInterest(const Interest& interest)$/;"	f	class:nfd::tests::EndToEndFixture
client1_receivedDatas	NFD/tests/daemon/face/websocket.t.cpp	/^  std::vector<Data> client1_receivedDatas;$/;"	m	class:nfd::tests::EndToEndFixture	file:
client1_receivedInterests	NFD/tests/daemon/face/websocket.t.cpp	/^  std::vector<Interest> client1_receivedInterests;$/;"	m	class:nfd::tests::EndToEndFixture	file:
client1_sendData	NFD/tests/daemon/face/websocket.t.cpp	/^  client1_sendData(const Data& data)$/;"	f	class:nfd::tests::EndToEndFixture
client1_sendInterest	NFD/tests/daemon/face/websocket.t.cpp	/^  client1_sendInterest(const Interest& interest)$/;"	f	class:nfd::tests::EndToEndFixture
clientNodeDegrees	utils/topology/rocketfuel-map-reader.hpp	/^  int clientNodeDegrees;$/;"	m	struct:ns3::RocketfuelParams
client_handshake_request	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    lib::error_code client_handshake_request(request_type &, uri_ptr,$/;"	f	class:websocketpp::processor::hybi00
client_handshake_request	NFD/websocketpp/websocketpp/processors/hybi07.hpp	/^    lib::error_code client_handshake_request(request_type &, uri_ptr,$/;"	f	class:websocketpp::processor::hybi07
client_handshake_request	NFD/websocketpp/websocketpp/processors/hybi08.hpp	/^    lib::error_code client_handshake_request(request_type &, uri_ptr,$/;"	f	class:websocketpp::processor::hybi08
client_handshake_request	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    lib::error_code client_handshake_request(request_type & req, uri_ptr$/;"	f	class:websocketpp::processor::hybi13
client_onConnect	NFD/tests/daemon/face/unix-stream.t.cpp	/^  client_onConnect(const boost::system::error_code& error)$/;"	f	class:nfd::tests::EndToEndFixture
client_only	NFD/websocketpp/websocketpp/error.hpp	/^    client_only,$/;"	e	enum:websocketpp::error::value
client_tls	NFD/websocketpp/test/transport/integration.cpp	/^typedef websocketpp::client<config_tls> client_tls;$/;"	t	file:
client_version	NFD/websocketpp/websocketpp/config/core.hpp	/^    static const int client_version = 13; \/\/ RFC6455$/;"	m	struct:websocketpp::config::core
client_version	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    static const int client_version = 13; \/\/ RFC6455$/;"	m	struct:websocketpp::config::core_client
client_version	NFD/websocketpp/websocketpp/config/debug.hpp	/^    static const int client_version = 13; \/\/ RFC6455$/;"	m	struct:websocketpp::config::debug_core
client_version	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    static const int client_version = 13; \/\/ RFC6455$/;"	m	struct:websocketpp::config::minimal_server
clock_string	ndn-cxx/src/util/time.hpp	/^struct clock_string<ndn::time::steady_clock, CharT>$/;"	s	namespace:boost::chrono
clock_string	ndn-cxx/src/util/time.hpp	/^struct clock_string<ndn::time::system_clock, CharT>$/;"	s	namespace:boost::chrono
close	NFD/daemon/face/datagram-face.hpp	/^DatagramFace<T, U>::close()$/;"	f	class:nfd::DatagramFace
close	NFD/daemon/face/ethernet-face.cpp	/^EthernetFace::close()$/;"	f	class:nfd::EthernetFace
close	NFD/daemon/face/null-face.cpp	/^NullFace::close()$/;"	f	class:nfd::NullFace
close	NFD/daemon/face/stream-face.hpp	/^StreamFace<T, U>::close()$/;"	f	class:nfd::StreamFace
close	NFD/daemon/face/websocket-face.cpp	/^WebSocketFace::close()$/;"	f	class:nfd::WebSocketFace
close	NFD/daemon/mgmt/internal-face.cpp	/^InternalFace::close()$/;"	f	class:nfd::InternalFace
close	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  close()$/;"	f	class:nfd::tests::FaceManagerTestFace
close	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    void close(int id, websocketpp::close::status::value code, std::string reason) {$/;"	f	class:websocket_endpoint
close	NFD/websocketpp/test/transport/integration.cpp	/^void close(T * e, websocketpp::connection_hdl hdl) {$/;"	f
close	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    void close(int id, websocketpp::close::status::value code, std::string reason) {$/;"	f	class:websocket_endpoint
close	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    void close(int id, websocketpp::close::status::value code, std::string reason) {$/;"	f	class:websocket_endpoint
close	NFD/websocketpp/websocketpp/close.hpp	/^namespace close {$/;"	n	namespace:websocketpp
close	NFD/websocketpp/websocketpp/frame.hpp	/^        close = 0x8,$/;"	e	enum:websocketpp::frame::opcode::value
close	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::close(close::status::value const code,$/;"	f	class:websocketpp::connection
close	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^void endpoint<connection,config>::close(connection_hdl hdl, close::status::value$/;"	f	class:websocketpp::endpoint
close	model/ndn-app-face.cpp	/^AppFace::close()$/;"	f	class:ns3::ndn::AppFace
close	model/ndn-net-device-face.cpp	/^NetDeviceFace::close()$/;"	f	class:ns3::ndn::NetDeviceFace
close	ndn-cxx/src/detail/face-impl.hpp	/^    close()$/;"	f	class:ndn::Face::Impl::NfdFace
close	ndn-cxx/src/transport/stream-transport.hpp	/^  close()$/;"	f	class:ndn::StreamTransportImpl
close	ndn-cxx/src/transport/tcp-transport.cpp	/^TcpTransport::close()$/;"	f	class:ndn::TcpTransport
close	ndn-cxx/src/transport/unix-transport.cpp	/^UnixTransport::close()$/;"	f	class:ndn::UnixTransport
close	ndn-cxx/src/util/config-file.cpp	/^ConfigFile::close()$/;"	f	class:ndn::ConfigFile
close	ndn-cxx/src/util/dummy-client-face.cpp	/^  close()$/;"	f	class:ndn::util::DummyClientFace::Transport
closeIfIdle	NFD/daemon/face/udp-face.cpp	/^UdpFace::closeIfIdle()$/;"	f	class:nfd::UdpFace
closeSocket	NFD/daemon/face/datagram-face.hpp	/^DatagramFace<T, U>::closeSocket()$/;"	f	class:nfd::DatagramFace
close_after_timeout	NFD/websocketpp/test/transport/integration.cpp	/^void close_after_timeout(T & e, websocketpp::connection_hdl hdl, long timeout) {$/;"	f
close_handler	NFD/websocketpp/websocketpp/connection.hpp	/^typedef lib::function<void(connection_hdl)> close_handler;$/;"	t	namespace:websocketpp
close_handshake_timeout	NFD/websocketpp/websocketpp/error.hpp	/^    close_handshake_timeout,$/;"	e	enum:websocketpp::error::value
close_reason_size	NFD/websocketpp/websocketpp/frame.hpp	/^    static uint8_t const close_reason_size = 123;$/;"	m	namespace:websocketpp::frame::limits
closed	NFD/websocketpp/websocketpp/connection.hpp	/^        closed = 3$/;"	e	enum:websocketpp::session::state::value
closed	NFD/websocketpp/websocketpp/connection.hpp	/^        closed,$/;"	e	enum:websocketpp::connection::terminate_status
closing	NFD/websocketpp/websocketpp/connection.hpp	/^        closing = 2,$/;"	e	enum:websocketpp::session::state::value
code	NFD/websocketpp/websocketpp/error.hpp	/^    lib::error_code code() const throw() {$/;"	f	class:websocketpp::exception
code_converter	NFD/websocketpp/websocketpp/close.hpp	/^union code_converter {$/;"	u	namespace:websocketpp::close
collectStatus	NFD/daemon/mgmt/status-server.cpp	/^StatusServer::collectStatus() const$/;"	f	class:nfd::StatusServer
colors	utils/topology/rocketfuel-map-reader.cpp	/^  Colors colors;$/;"	m	class:ns3::name_color_writer	file:
commandFailCallback	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^  Controller::CommandFailCallback commandFailCallback;$/;"	m	class:ndn::nfd::tests::CommandFixture	file:
commandFailHistory	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^  std::vector<CommandFailArgs> commandFailHistory;$/;"	m	class:ndn::nfd::tests::CommandFixture	file:
commandSucceedCallback	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^  Controller::CommandSucceedCallback commandSucceedCallback;$/;"	m	class:ndn::nfd::tests::CommandFixture	file:
commandSucceedHistory	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^  std::vector<CommandSucceedArgs> commandSucceedHistory;$/;"	m	class:ndn::nfd::tests::CommandFixture	file:
commandValidated	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  commandValidated() const$/;"	f	class:nfd::tests::CommandValidatorTester
commandValidationFailed	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  commandValidationFailed() const$/;"	f	class:nfd::tests::CommandValidatorTester
compare	ndn-cxx/src/name-component.cpp	/^Component::compare(const Component& other) const$/;"	f	class:ndn::name::Component
compare	ndn-cxx/src/name.cpp	/^Name::compare(size_t pos1, size_t count1, const Name& other, size_t pos2, size_t count2) const$/;"	f	class:ndn::Name
compare	ndn-cxx/src/name.hpp	/^  compare(const Name& other) const$/;"	f	class:ndn::Name
compare	ndn-cxx/src/security/sec-rule-relative.cpp	/^SecRuleRelative::compare(const Name& dataName, const Name& signerName)$/;"	f	class:ndn::SecRuleRelative
compareDataWithData	NFD/daemon/table/cs-entry-impl.cpp	/^compareDataWithData(const Data& lhs, const Data& rhs)$/;"	f	namespace:nfd::cs
compareDynamicContainer	ndn-cxx/src/security/validator-config.hpp	/^  compareDynamicContainer(const DynamicTrustAnchorContainer& containerA,$/;"	f	class:ndn::ValidatorConfig
compareFaceId	NFD/rib/route.hpp	/^compareFaceId(const Route& route, const uint64_t faceId)$/;"	f	namespace:nfd::rib
compareFaceIdAndOrigin	NFD/rib/route.hpp	/^compareFaceIdAndOrigin(const Route& lhs, const Route& rhs)$/;"	f	namespace:nfd::rib
compareFieldSortOrder	ndn-cxx/src/lp/detail/field-info.hpp	/^compareFieldSortOrder(const FieldInfo& first, const FieldInfo& second)$/;"	f	namespace:ndn::lp::detail
compareNameFaceIdCostAction	NFD/tests/rib/fib-updates-common.hpp	/^compareNameFaceIdCostAction(const FibUpdate& lhs, const FibUpdate& rhs)$/;"	f	namespace:nfd::rib::tests
comparePos	ndn-cxx/src/lp/packet.cpp	/^Packet::comparePos(const Block& first, const uint64_t second)$/;"	f	class:ndn::lp::Packet
compareQueryWithData	NFD/daemon/table/cs-entry-impl.cpp	/^compareQueryWithData(const Name& queryName, const Data& data)$/;"	f	namespace:nfd::cs
compare_InRecord_expiry	NFD/daemon/fw/forwarder.cpp	/^compare_InRecord_expiry(const pit::InRecord& a, const pit::InRecord& b)$/;"	f	namespace:nfd
compare_pickInterest	NFD/daemon/fw/forwarder.cpp	/^compare_pickInterest(const pit::InRecord& a, const pit::InRecord& b, const Face* outFace)$/;"	f	namespace:nfd
compile	ndn-cxx/src/util/regex/regex-backref-matcher.hpp	/^RegexBackrefMatcher::compile()$/;"	f	class:ndn::RegexBackrefMatcher
compile	ndn-cxx/src/util/regex/regex-component-matcher.hpp	/^RegexComponentMatcher::compile()$/;"	f	class:ndn::RegexComponentMatcher
compile	ndn-cxx/src/util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::compile()$/;"	f	class:ndn::RegexComponentSetMatcher
compile	ndn-cxx/src/util/regex/regex-pattern-list-matcher.hpp	/^RegexPatternListMatcher::compile()$/;"	f	class:ndn::RegexPatternListMatcher
compile	ndn-cxx/src/util/regex/regex-pseudo-matcher.hpp	/^  compile()$/;"	f	class:ndn::RegexPseudoMatcher
compile	ndn-cxx/src/util/regex/regex-repeat-matcher.hpp	/^RegexRepeatMatcher::compile()$/;"	f	class:ndn::RegexRepeatMatcher
compile	ndn-cxx/src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::compile()$/;"	f	class:ndn::RegexTopMatcher
compileMultipleComponents	ndn-cxx/src/util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::compileMultipleComponents(size_t start, size_t lastIndex)$/;"	f	class:ndn::RegexComponentSetMatcher
compileSingleComponent	ndn-cxx/src/util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::compileSingleComponent()$/;"	f	class:ndn::RegexComponentSetMatcher
complete	NFD/websocketpp/websocketpp/utf8_validator.hpp	/^    bool complete() {$/;"	f	class:websocketpp::utf8_validator::validator
complete_read	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    void complete_read(lib::error_code const & ec) {$/;"	f	class:websocketpp::transport::debug::connection
complete_read	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    void complete_read(lib::error_code const & ec) {$/;"	f	class:websocketpp::transport::iostream::connection
component_container	ndn-cxx/src/name.hpp	/^  typedef std::vector<Component>  component_container;$/;"	t	class:ndn::Name
compress	NFD/websocketpp/websocketpp/extensions/permessage_deflate/disabled.hpp	/^    lib::error_code compress(std::string const &, std::string &) {$/;"	f	class:websocketpp::extensions::permessage_deflate::disabled
compress	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    lib::error_code compress(std::string const & in, std::string & out) {$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
compressor_type	NFD/websocketpp/test/processors/extension_permessage_compress.cpp	/^    compressor_type;$/;"	t	file:
compute	NFD/daemon/table/name-tree.cpp	/^  compute(const char* buffer, size_t length)$/;"	f	class:nfd::name_tree::Hash32
compute	NFD/daemon/table/name-tree.cpp	/^  compute(const char* buffer, size_t length)$/;"	f	class:nfd::name_tree::Hash64
computeAndSendFibUpdates	NFD/rib/fib-updater.cpp	/^FibUpdater::computeAndSendFibUpdates(const RibUpdateBatch& batch,$/;"	f	class:nfd::rib::FibUpdater
computeDigest	ndn-cxx/src/security/public-key.cpp	/^PublicKey::computeDigest() const$/;"	f	class:ndn::PublicKey
computeDigest	ndn-cxx/src/util/digest.cpp	/^Digest<Hash>::computeDigest()$/;"	f	class:ndn::util::Digest
computeDigest	ndn-cxx/src/util/digest.cpp	/^Digest<Hash>::computeDigest(const uint8_t* buffer, size_t size)$/;"	f	class:ndn::util::Digest
computeHash	NFD/daemon/table/name-tree.cpp	/^computeHash(const Name& prefix)$/;"	f	namespace:nfd::name_tree
computeHashSet	NFD/daemon/table/name-tree.cpp	/^computeHashSet(const Name& prefix)$/;"	f	namespace:nfd::name_tree
computeRto	NFD/daemon/fw/rtt-estimator.cpp	/^RttEstimator::computeRto() const$/;"	f	class:nfd::RttEstimator
computeRtoAsFloatSeconds	NFD/tests/daemon/fw/rtt-estimator.t.cpp	/^computeRtoAsFloatSeconds(RttEstimator& rtt)$/;"	f	namespace:nfd::tests
computeUpdates	NFD/rib/fib-updater.cpp	/^FibUpdater::computeUpdates(const RibUpdateBatch& batch)$/;"	f	class:nfd::rib::FibUpdater
computeUpdatesForRegistration	NFD/rib/fib-updater.cpp	/^FibUpdater::computeUpdatesForRegistration(const RibUpdate& update)$/;"	f	class:nfd::rib::FibUpdater
computeUpdatesForUnregistration	NFD/rib/fib-updater.cpp	/^FibUpdater::computeUpdatesForUnregistration(const RibUpdate& update)$/;"	f	class:nfd::rib::FibUpdater
con_creation_failed	NFD/websocketpp/websocketpp/error.hpp	/^    con_creation_failed,$/;"	e	enum:websocketpp::error::value
con_list	NFD/websocketpp/docs/simple_broadcast_server.cpp	/^    typedef std::set<connection_hdl,std::owner_less<connection_hdl>> con_list;$/;"	t	class:broadcast_server	file:
con_list	NFD/websocketpp/docs/simple_count_server_thread.cpp	/^    typedef std::set<connection_hdl,std::owner_less<connection_hdl>> con_list;$/;"	t	class:count_server	file:
con_list	NFD/websocketpp/examples/associative_storage/associative_storage.cpp	/^    typedef std::map<connection_hdl,connection_data,std::owner_less<connection_hdl>> con_list;$/;"	t	class:print_server	file:
con_list	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    typedef std::set<connection_hdl,std::owner_less<connection_hdl> > con_list;$/;"	t	class:broadcast_server	file:
con_list	NFD/websocketpp/examples/simple_broadcast_server/simple_broadcast_server.cpp	/^    typedef std::set<connection_hdl,std::owner_less<connection_hdl>> con_list;$/;"	t	class:broadcast_server	file:
con_list	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^    typedef std::set<connection_hdl,std::owner_less<connection_hdl>> con_list;$/;"	t	class:telemetry_server	file:
con_list	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    typedef std::map<int,connection_metadata::ptr> con_list;$/;"	t	class:websocket_endpoint	file:
con_list	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    typedef std::map<int,connection_metadata::ptr> con_list;$/;"	t	class:websocket_endpoint	file:
con_list	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    typedef std::map<int,connection_metadata::ptr> con_list;$/;"	t	class:websocket_endpoint	file:
con_list	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    typedef std::map<int,connection_metadata::ptr> con_list;$/;"	t	class:websocket_endpoint	file:
con_msg_man_ptr	NFD/websocketpp/test/message_buffer/alloc.cpp	/^    typedef typename con_msg_man_type::ptr con_msg_man_ptr;$/;"	t	struct:stub	file:
con_msg_man_ptr	NFD/websocketpp/websocketpp/message_buffer/alloc.hpp	/^    typedef typename con_msg_manager::ptr con_msg_man_ptr;$/;"	t	class:websocketpp::message_buffer::alloc::endpoint_msg_manager
con_msg_man_ptr	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    typedef typename con_msg_man_type::ptr con_msg_man_ptr;$/;"	t	class:websocketpp::message_buffer::message
con_msg_man_ptr	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    typedef typename con_msg_manager::ptr con_msg_man_ptr;$/;"	t	class:websocketpp::message_buffer::alloc::endpoint_msg_manager
con_msg_man_ptr	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    typedef typename con_msg_manager::weak_ptr con_msg_man_ptr;$/;"	t	class:websocketpp::message_buffer::message
con_msg_man_type	NFD/websocketpp/test/message_buffer/alloc.cpp	/^    typedef con_msg_manager<stub> con_msg_man_type;$/;"	t	struct:stub	file:
con_msg_man_type	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    typedef con_msg_manager<message> con_msg_man_type;$/;"	t	class:websocketpp::message_buffer::message
con_msg_man_weak_ptr	NFD/websocketpp/test/message_buffer/alloc.cpp	/^    typedef typename con_msg_man_type::weak_ptr con_msg_man_weak_ptr;$/;"	t	struct:stub	file:
con_msg_man_weak_ptr	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    typedef typename con_msg_man_type::weak_ptr con_msg_man_weak_ptr;$/;"	t	class:websocketpp::message_buffer::message
con_msg_manager	NFD/websocketpp/websocketpp/message_buffer/alloc.hpp	/^class con_msg_manager$/;"	c	namespace:websocketpp::message_buffer::alloc
con_msg_manager	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^class con_msg_manager {$/;"	c	namespace:websocketpp::message_buffer::alloc
con_msg_manager	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^class con_msg_manager {$/;"	c	namespace:websocketpp::message_buffer::pool
con_msg_manager_ptr	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef typename con_msg_manager_type::ptr con_msg_manager_ptr;$/;"	t	class:websocketpp::connection
con_msg_manager_type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^    typedef base::con_msg_manager_type con_msg_manager_type;$/;"	t	struct:debug_custom	file:
con_msg_manager_type	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    typedef core::con_msg_manager_type con_msg_manager_type;$/;"	t	struct:custom_config	file:
con_msg_manager_type	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^    typedef core::con_msg_manager_type con_msg_manager_type;$/;"	t	struct:testee_config	file:
con_msg_manager_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::con_msg_manager_type con_msg_manager_type;$/;"	t	struct:debug_config_client	file:
con_msg_manager_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::con_msg_manager_type con_msg_manager_type;$/;"	t	struct:stub_config	file:
con_msg_manager_type	NFD/websocketpp/test/endpoint/endpoint.cpp	/^    typedef core::con_msg_manager_type con_msg_manager_type;$/;"	t	struct:stub_config	file:
con_msg_manager_type	NFD/websocketpp/test/processors/hybi00.cpp	/^        con_msg_manager_type;$/;"	t	struct:stub_config	file:
con_msg_manager_type	NFD/websocketpp/test/processors/hybi07.cpp	/^        con_msg_manager_type;$/;"	t	struct:stub_config	file:
con_msg_manager_type	NFD/websocketpp/test/processors/hybi08.cpp	/^        con_msg_manager_type;$/;"	t	struct:stub_config	file:
con_msg_manager_type	NFD/websocketpp/test/processors/hybi13.cpp	/^        con_msg_manager_type;$/;"	t	struct:stub_config	file:
con_msg_manager_type	NFD/websocketpp/test/processors/hybi13.cpp	/^        con_msg_manager_type;$/;"	t	struct:stub_config_ext	file:
con_msg_manager_type	NFD/websocketpp/test/processors/hybi13.cpp	/^typedef stub_config::con_msg_manager_type con_msg_manager_type;$/;"	t	file:
con_msg_manager_type	NFD/websocketpp/test/roles/client.cpp	/^    typedef core::con_msg_manager_type con_msg_manager_type;$/;"	t	struct:stub_config	file:
con_msg_manager_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::con_msg_manager_type con_msg_manager_type;$/;"	t	struct:config	file:
con_msg_manager_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::con_msg_manager_type con_msg_manager_type;$/;"	t	struct:config_tls	file:
con_msg_manager_type	NFD/websocketpp/websocketpp/config/asio.hpp	/^    typedef base::con_msg_manager_type con_msg_manager_type;$/;"	t	struct:websocketpp::config::asio_tls
con_msg_manager_type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^    typedef base::con_msg_manager_type con_msg_manager_type;$/;"	t	struct:websocketpp::config::asio_tls_client
con_msg_manager_type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^    typedef base::con_msg_manager_type con_msg_manager_type;$/;"	t	struct:websocketpp::config::asio
con_msg_manager_type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^    typedef base::con_msg_manager_type con_msg_manager_type;$/;"	t	struct:websocketpp::config::asio_client
con_msg_manager_type	NFD/websocketpp/websocketpp/config/core.hpp	/^        con_msg_manager_type;$/;"	t	struct:websocketpp::config::core
con_msg_manager_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        con_msg_manager_type;$/;"	t	struct:websocketpp::config::core_client
con_msg_manager_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^        con_msg_manager_type;$/;"	t	struct:websocketpp::config::debug_core
con_msg_manager_type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^    typedef base::con_msg_manager_type con_msg_manager_type;$/;"	t	struct:websocketpp::config::debug_asio_tls
con_msg_manager_type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^    typedef base::con_msg_manager_type con_msg_manager_type;$/;"	t	struct:websocketpp::config::debug_asio
con_msg_manager_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        con_msg_manager_type;$/;"	t	struct:websocketpp::config::minimal_server
con_msg_manager_type	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef typename config::con_msg_manager_type con_msg_manager_type;$/;"	t	class:websocketpp::connection
con_type	NFD/websocketpp/test/transport/asio/timers.cpp	/^typedef websocketpp::transport::asio::connection<config> con_type;$/;"	t	file:
concatenate	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^  concatenate()$/;"	f	class:ndn::mgmt::tests::StatusDatasetContextFixture
concurrency	NFD/websocketpp/websocketpp/concurrency/basic.hpp	/^namespace concurrency {$/;"	n	namespace:websocketpp
concurrency	NFD/websocketpp/websocketpp/concurrency/none.hpp	/^namespace concurrency {$/;"	n	namespace:websocketpp
concurrency_type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^        typedef type::concurrency_type concurrency_type;$/;"	t	struct:debug_custom::transport_config	file:
concurrency_type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^    typedef base::concurrency_type concurrency_type;$/;"	t	struct:debug_custom	file:
concurrency_type	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    typedef core::concurrency_type concurrency_type;$/;"	t	struct:custom_config	file:
concurrency_type	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^        typedef core::concurrency_type concurrency_type;$/;"	t	struct:testee_config::transport_config	file:
concurrency_type	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^    typedef core::concurrency_type concurrency_type;$/;"	t	struct:testee_config	file:
concurrency_type	NFD/websocketpp/test/connection/connection.cpp	/^        typedef type::concurrency_type concurrency_type;$/;"	t	struct:debug_config_client::transport_config	file:
concurrency_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::concurrency_type concurrency_type;$/;"	t	struct:debug_config_client	file:
concurrency_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::concurrency_type concurrency_type;$/;"	t	struct:stub_config	file:
concurrency_type	NFD/websocketpp/test/endpoint/endpoint.cpp	/^    typedef core::concurrency_type concurrency_type;$/;"	t	struct:stub_config	file:
concurrency_type	NFD/websocketpp/test/roles/client.cpp	/^    typedef core::concurrency_type concurrency_type;$/;"	t	struct:stub_config	file:
concurrency_type	NFD/websocketpp/test/transport/asio/timers.cpp	/^    typedef websocketpp::concurrency::none concurrency_type;$/;"	t	struct:config	file:
concurrency_type	NFD/websocketpp/test/transport/integration.cpp	/^        typedef type::concurrency_type concurrency_type;$/;"	t	struct:config::transport_config	file:
concurrency_type	NFD/websocketpp/test/transport/integration.cpp	/^        typedef type::concurrency_type concurrency_type;$/;"	t	struct:config_tls::transport_config	file:
concurrency_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::concurrency_type concurrency_type;$/;"	t	struct:config	file:
concurrency_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::concurrency_type concurrency_type;$/;"	t	struct:config_tls	file:
concurrency_type	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    typedef websocketpp::concurrency::basic concurrency_type;$/;"	t	struct:config	file:
concurrency_type	NFD/websocketpp/websocketpp/config/asio.hpp	/^        typedef type::concurrency_type concurrency_type;$/;"	t	struct:websocketpp::config::asio_tls::transport_config
concurrency_type	NFD/websocketpp/websocketpp/config/asio.hpp	/^    typedef base::concurrency_type concurrency_type;$/;"	t	struct:websocketpp::config::asio_tls
concurrency_type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^        typedef type::concurrency_type concurrency_type;$/;"	t	struct:websocketpp::config::asio_tls_client::transport_config
concurrency_type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^    typedef base::concurrency_type concurrency_type;$/;"	t	struct:websocketpp::config::asio_tls_client
concurrency_type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^        typedef type::concurrency_type concurrency_type;$/;"	t	struct:websocketpp::config::asio::transport_config
concurrency_type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^    typedef base::concurrency_type concurrency_type;$/;"	t	struct:websocketpp::config::asio
concurrency_type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^        typedef type::concurrency_type concurrency_type;$/;"	t	struct:websocketpp::config::asio_client::transport_config
concurrency_type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^    typedef base::concurrency_type concurrency_type;$/;"	t	struct:websocketpp::config::asio_client
concurrency_type	NFD/websocketpp/websocketpp/config/core.hpp	/^        typedef type::concurrency_type concurrency_type;$/;"	t	struct:websocketpp::config::core::transport_config
concurrency_type	NFD/websocketpp/websocketpp/config/core.hpp	/^    typedef websocketpp::concurrency::basic concurrency_type;$/;"	t	struct:websocketpp::config::core
concurrency_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        typedef type::concurrency_type concurrency_type;$/;"	t	struct:websocketpp::config::core_client::transport_config
concurrency_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    typedef websocketpp::concurrency::basic concurrency_type;$/;"	t	struct:websocketpp::config::core_client
concurrency_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    typedef websocketpp::concurrency::none concurrency_type;$/;"	t	struct:websocketpp::config::core_client
concurrency_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^        typedef type::concurrency_type concurrency_type;$/;"	t	struct:websocketpp::config::debug_core::transport_config
concurrency_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^    typedef websocketpp::concurrency::basic concurrency_type;$/;"	t	struct:websocketpp::config::debug_core
concurrency_type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^        typedef type::concurrency_type concurrency_type;$/;"	t	struct:websocketpp::config::debug_asio_tls::transport_config
concurrency_type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^    typedef base::concurrency_type concurrency_type;$/;"	t	struct:websocketpp::config::debug_asio_tls
concurrency_type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^        typedef type::concurrency_type concurrency_type;$/;"	t	struct:websocketpp::config::debug_asio::transport_config
concurrency_type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^    typedef base::concurrency_type concurrency_type;$/;"	t	struct:websocketpp::config::debug_asio
concurrency_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        typedef type::concurrency_type concurrency_type;$/;"	t	struct:websocketpp::config::minimal_server::transport_config
concurrency_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    typedef websocketpp::concurrency::none concurrency_type;$/;"	t	struct:websocketpp::config::minimal_server
concurrency_type	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef typename config::concurrency_type concurrency_type;$/;"	t	class:websocketpp::connection
concurrency_type	NFD/websocketpp/websocketpp/endpoint.hpp	/^    typedef typename config::concurrency_type concurrency_type;$/;"	t	class:websocketpp::endpoint
concurrency_type	NFD/websocketpp/websocketpp/roles/client_endpoint.hpp	/^    typedef typename config::concurrency_type concurrency_type;$/;"	t	class:websocketpp::client
concurrency_type	NFD/websocketpp/websocketpp/roles/server_endpoint.hpp	/^    typedef typename config::concurrency_type concurrency_type;$/;"	t	class:websocketpp::server
concurrency_type	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    typedef typename config::concurrency_type concurrency_type;$/;"	t	class:websocketpp::transport::asio::endpoint
concurrency_type	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    typedef typename config::concurrency_type concurrency_type;$/;"	t	class:websocketpp::transport::debug::connection
concurrency_type	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^    typedef typename config::concurrency_type concurrency_type;$/;"	t	class:websocketpp::transport::debug::endpoint
concurrency_type	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    typedef typename config::concurrency_type concurrency_type;$/;"	t	class:websocketpp::transport::iostream::connection
concurrency_type	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    typedef typename config::concurrency_type concurrency_type;$/;"	t	class:websocketpp::transport::iostream::endpoint
concurrency_type	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    typedef typename config::concurrency_type concurrency_type;$/;"	t	class:websocketpp::transport::stub::connection
concurrency_type	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^    typedef typename config::concurrency_type concurrency_type;$/;"	t	class:websocketpp::transport::stub::endpoint
conf	ndn-cxx/src/security/conf/checker.hpp	/^namespace conf {$/;"	n	namespace:ndn::security
conf	ndn-cxx/src/security/conf/common.hpp	/^namespace conf {$/;"	n	namespace:ndn::security
conf	ndn-cxx/src/security/conf/filter.hpp	/^namespace conf {$/;"	n	namespace:ndn::security
conf	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^namespace conf {$/;"	n	namespace:ndn::security
conf	ndn-cxx/src/security/conf/rule.hpp	/^namespace conf {$/;"	n	namespace:ndn::security
conf	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^namespace conf {$/;"	n	namespace:ndn::security	file:
config	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^class config {};$/;"	c	file:
config	NFD/websocketpp/test/processors/extension_permessage_compress.cpp	/^struct config {$/;"	s	file:
config	NFD/websocketpp/test/transport/asio/timers.cpp	/^struct config {$/;"	s	file:
config	NFD/websocketpp/test/transport/integration.cpp	/^struct config : public websocketpp::config::asio_client {$/;"	s	file:
config	NFD/websocketpp/test/transport/iostream/connection.cpp	/^struct config {$/;"	s	file:
config	NFD/websocketpp/websocketpp/config/asio.hpp	/^namespace config {$/;"	n	namespace:websocketpp
config	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^namespace config {$/;"	n	namespace:websocketpp
config	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^namespace config {$/;"	n	namespace:websocketpp
config	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^namespace config {$/;"	n	namespace:websocketpp
config	NFD/websocketpp/websocketpp/config/core.hpp	/^namespace config {$/;"	n	namespace:websocketpp
config	NFD/websocketpp/websocketpp/config/core_client.hpp	/^namespace config {$/;"	n	namespace:websocketpp
config	NFD/websocketpp/websocketpp/config/debug.hpp	/^namespace config {$/;"	n	namespace:websocketpp
config	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^namespace config {$/;"	n	namespace:websocketpp
config	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^namespace config {$/;"	n	namespace:websocketpp
config	NFD/websocketpp/websocketpp/config/minimal_client.hpp	/^namespace config {$/;"	n	namespace:websocketpp
config	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^namespace config {$/;"	n	namespace:websocketpp
config_tls	NFD/websocketpp/test/transport/integration.cpp	/^struct config_tls : public websocketpp::config::asio_tls_client {$/;"	s	file:
conflict	NFD/websocketpp/websocketpp/http/constants.hpp	/^            conflict = 409,$/;"	e	enum:websocketpp::http::status_code::value
connect	NFD/daemon/face/tcp-channel.cpp	/^TcpChannel::connect(const tcp::Endpoint& remoteEndpoint,$/;"	f	class:nfd::TcpChannel
connect	NFD/daemon/face/udp-channel.cpp	/^UdpChannel::connect(const udp::Endpoint& remoteEndpoint,$/;"	f	class:nfd::UdpChannel
connect	NFD/tests/daemon/face/tcp.t.cpp	/^  connect(const shared_ptr<TcpChannel>& channel,$/;"	f	class:nfd::tests::EndToEndFixture
connect	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    int connect(std::string const & uri) {$/;"	f	class:websocket_endpoint
connect	NFD/websocketpp/test/transport/asio/timers.cpp	/^    void connect(std::string u) {$/;"	f	struct:mock_endpoint
connect	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    int connect(std::string const & uri) {$/;"	f	class:websocket_endpoint
connect	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    int connect(std::string const & uri) {$/;"	f	class:websocket_endpoint
connect	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    int connect(std::string const & uri) {$/;"	f	class:websocket_endpoint
connect	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const connect = 0x1;$/;"	m	struct:websocketpp::log::alevel
connect	NFD/websocketpp/websocketpp/roles/client_endpoint.hpp	/^    connection_ptr connect(connection_ptr con) {$/;"	f	class:websocketpp::client
connect	ndn-cxx/src/transport/stream-transport.hpp	/^  connect(const typename Protocol::endpoint& endpoint)$/;"	f	class:ndn::StreamTransportImpl
connect	ndn-cxx/src/transport/stream-transport.hpp	/^  connect(const typename Protocol::resolver::query& query)$/;"	f	class:ndn::StreamTransportWithResolverImpl
connect	ndn-cxx/src/transport/tcp-transport.cpp	/^TcpTransport::connect(boost::asio::io_service& ioService,$/;"	f	class:ndn::TcpTransport
connect	ndn-cxx/src/transport/transport.hpp	/^Transport::connect(boost::asio::io_service& ioService,$/;"	f	class:ndn::Transport
connect	ndn-cxx/src/transport/unix-transport.cpp	/^UnixTransport::connect(boost::asio::io_service& ioService,$/;"	f	class:ndn::UnixTransport
connect	ndn-cxx/src/util/signal-signal.hpp	/^Signal<Owner, TArgs...>::connect(const Handler& handler)$/;"	f	class:ndn::util::signal::Signal
connectHandler	ndn-cxx/src/transport/stream-transport.hpp	/^  connectHandler(const boost::system::error_code& error)$/;"	f	class:ndn::StreamTransportImpl
connectSingleShot	ndn-cxx/src/util/signal-signal.hpp	/^Signal<Owner, TArgs...>::connectSingleShot(const Handler& handler)$/;"	f	class:ndn::util::signal::Signal
connectTimeoutHandler	ndn-cxx/src/transport/stream-transport.hpp	/^  connectTimeoutHandler(const boost::system::error_code& error)$/;"	f	class:ndn::StreamTransportImpl
connectToHub	NFD/tests/rib/remote-registrator.t.cpp	/^  connectToHub()$/;"	f	class:nfd::rib::tests::RemoteRegistratorFixture
connectToHub	NFD/tools/ndn-autoconfig/base.cpp	/^Base::connectToHub(const std::string& uri)$/;"	f	class:ndn::tools::autoconfig::Base
connect_handler	NFD/websocketpp/websocketpp/transport/base/endpoint.hpp	/^typedef lib::function<void(lib::error_code const &)> connect_handler;$/;"	t	namespace:websocketpp::transport
connecting	NFD/websocketpp/websocketpp/connection.hpp	/^        connecting = 0,$/;"	e	enum:websocketpp::session::state::value
connection	NFD/websocketpp/websocketpp/connection.hpp	/^    explicit connection(bool p_is_server, std::string const & ua, alog_type& alog,$/;"	f	class:websocketpp::connection
connection	NFD/websocketpp/websocketpp/connection.hpp	/^class connection$/;"	c	namespace:websocketpp
connection	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    explicit connection(bool is_server, alog_type& alog, elog_type& elog)$/;"	f	class:websocketpp::transport::asio::connection
connection	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^class connection : public config::socket_type::socket_con_type {$/;"	c	namespace:websocketpp::transport::asio
connection	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    explicit connection() : m_state(UNINITIALIZED) {$/;"	f	class:websocketpp::transport::asio::basic_socket::connection
connection	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^class connection : public lib::enable_shared_from_this<connection> {$/;"	c	namespace:websocketpp::transport::asio::basic_socket
connection	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    explicit connection() {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
connection	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^class connection : public lib::enable_shared_from_this<connection> {$/;"	c	namespace:websocketpp::transport::asio::tls_socket
connection	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    explicit connection(bool is_server, alog_type & alog, elog_type & elog)$/;"	f	class:websocketpp::transport::debug::connection
connection	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^class connection : public lib::enable_shared_from_this< connection<config> > {$/;"	c	namespace:websocketpp::transport::debug
connection	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    explicit connection(bool is_server, alog_type & alog, elog_type & elog)$/;"	f	class:websocketpp::transport::iostream::connection
connection	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^class connection : public lib::enable_shared_from_this< connection<config> > {$/;"	c	namespace:websocketpp::transport::iostream
connection	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    explicit connection(bool is_server, alog_type & alog, elog_type & elog)$/;"	f	class:websocketpp::transport::stub::connection
connection	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^class connection : public lib::enable_shared_from_this< connection<config> > {$/;"	c	namespace:websocketpp::transport::stub
connection_base	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    typedef connection_data connection_base;$/;"	t	struct:custom_config	file:
connection_base	NFD/websocketpp/test/connection/connection.cpp	/^    typedef connection_extension connection_base;$/;"	t	struct:debug_config_client	file:
connection_base	NFD/websocketpp/test/connection/connection.cpp	/^    typedef connection_extension connection_base;$/;"	t	struct:stub_config	file:
connection_base	NFD/websocketpp/websocketpp/config/core.hpp	/^    typedef websocketpp::connection_base connection_base;$/;"	t	struct:websocketpp::config::core
connection_base	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    typedef websocketpp::connection_base connection_base;$/;"	t	struct:websocketpp::config::core_client
connection_base	NFD/websocketpp/websocketpp/config/debug.hpp	/^    typedef websocketpp::connection_base connection_base;$/;"	t	struct:websocketpp::config::debug_core
connection_base	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    typedef websocketpp::connection_base connection_base;$/;"	t	struct:websocketpp::config::minimal_server
connection_base	NFD/websocketpp/websocketpp/connection_base.hpp	/^class connection_base {};$/;"	c	namespace:websocketpp
connection_data	NFD/websocketpp/examples/associative_storage/associative_storage.cpp	/^struct connection_data {$/;"	s	file:
connection_data	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^struct connection_data {$/;"	s	file:
connection_extension	NFD/websocketpp/test/connection/connection.cpp	/^    connection_extension() : extension_value(5) {}$/;"	f	struct:connection_extension
connection_extension	NFD/websocketpp/test/connection/connection.cpp	/^struct connection_extension {$/;"	s	file:
connection_hdl	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^    typedef websocketpp::connection_hdl connection_hdl;$/;"	t	class:telemetry_server	file:
connection_hdl	NFD/websocketpp/websocketpp/common/connection_hdl.hpp	/^typedef lib::weak_ptr<void> connection_hdl;$/;"	t	namespace:websocketpp
connection_metadata	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    connection_metadata(int id, websocketpp::connection_hdl hdl, std::string uri)$/;"	f	class:connection_metadata
connection_metadata	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^class connection_metadata {$/;"	c	file:
connection_metadata	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    connection_metadata(int id, websocketpp::connection_hdl hdl, std::string uri)$/;"	f	class:connection_metadata
connection_metadata	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^class connection_metadata {$/;"	c	file:
connection_metadata	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    connection_metadata(int id, websocketpp::connection_hdl hdl, std::string uri)$/;"	f	class:connection_metadata
connection_metadata	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^class connection_metadata {$/;"	c	file:
connection_metadata	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    connection_metadata(int id, websocketpp::connection_hdl hdl, std::string uri)$/;"	f	class:connection_metadata
connection_metadata	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^class connection_metadata {$/;"	c	file:
connection_ptr	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^typedef client::connection_ptr connection_ptr;$/;"	t	file:
connection_ptr	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^typedef server::connection_ptr connection_ptr;$/;"	t	file:
connection_ptr	NFD/websocketpp/test/roles/client.cpp	/^typedef client::connection_ptr connection_ptr;$/;"	t	file:
connection_ptr	NFD/websocketpp/test/transport/asio/timers.cpp	/^typedef websocketpp::lib::shared_ptr<mock_con> connection_ptr;$/;"	t	file:
connection_ptr	NFD/websocketpp/websocketpp/endpoint.hpp	/^    typedef typename connection_type::ptr connection_ptr;$/;"	t	class:websocketpp::endpoint
connection_ptr	NFD/websocketpp/websocketpp/roles/client_endpoint.hpp	/^    typedef typename connection_type::ptr connection_ptr;$/;"	t	class:websocketpp::client
connection_ptr	NFD/websocketpp/websocketpp/roles/server_endpoint.hpp	/^    typedef typename connection_type::ptr connection_ptr;$/;"	t	class:websocketpp::server
connection_read_buffer_size	NFD/websocketpp/websocketpp/config/core.hpp	/^    static const size_t connection_read_buffer_size = 16384;$/;"	m	struct:websocketpp::config::core
connection_read_buffer_size	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    static const size_t connection_read_buffer_size = 16384;$/;"	m	struct:websocketpp::config::core_client
connection_read_buffer_size	NFD/websocketpp/websocketpp/config/debug.hpp	/^    static const size_t connection_read_buffer_size = 16384;$/;"	m	struct:websocketpp::config::debug_core
connection_read_buffer_size	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    static const size_t connection_read_buffer_size = 16384;$/;"	m	struct:websocketpp::config::minimal_server
connection_setup	NFD/websocketpp/test/connection/connection.cpp	/^    connection_setup(bool p_is_server) : c(p_is_server, "", alog, elog, rng) {}$/;"	f	struct:connection_setup
connection_setup	NFD/websocketpp/test/connection/connection.cpp	/^struct connection_setup {$/;"	s	file:
connection_token	NFD/websocketpp/websocketpp/processors/base.hpp	/^static char const connection_token[] = "upgrade";$/;"	m	namespace:websocketpp::processor::constants
connection_type	NFD/websocketpp/websocketpp/endpoint.hpp	/^    typedef connection connection_type;$/;"	t	class:websocketpp::endpoint
connection_type	NFD/websocketpp/websocketpp/roles/client_endpoint.hpp	/^    typedef connection<config> connection_type;$/;"	t	class:websocketpp::client
connection_type	NFD/websocketpp/websocketpp/roles/server_endpoint.hpp	/^    typedef connection<config> connection_type;$/;"	t	class:websocketpp::server
connection_weak_ptr	NFD/websocketpp/websocketpp/endpoint.hpp	/^    typedef typename connection_type::weak_ptr connection_weak_ptr;$/;"	t	class:websocketpp::endpoint
const_base_type	utils/trie/trie.hpp	/^    const_base_type; \/\/ const base type of the entry (when implementation details need to be hidden)$/;"	t	struct:ns3::ndn::ndnSIM::pointer_payload_traits
const_base_type	utils/trie/trie.hpp	/^  typedef const BasePayload& const_base_type;$/;"	t	struct:ns3::ndn::ndnSIM::non_pointer_traits
const_base_type	utils/trie/trie.hpp	/^  typedef ns3::Ptr<const BasePayload> const_base_type;$/;"	t	struct:ns3::ndn::ndnSIM::smart_pointer_payload_traits
const_hook_ptr	utils/trie/detail/functor-hook.hpp	/^  typedef const hook_type* const_hook_ptr;$/;"	t	struct:ns3::ndn::ndnSIM::detail::FunctorHook
const_iterator	NFD/daemon/fw/face-table.hpp	/^  typedef boost::range_iterator<ForwardRange>::type const_iterator;$/;"	t	class:nfd::FaceTable
const_iterator	NFD/daemon/table/cs.hpp	/^  typedef boost::transform_iterator<EntryFromEntryImpl, iterator, const Entry&> const_iterator;$/;"	t	class:nfd::cs::Cs
const_iterator	NFD/daemon/table/fib.hpp	/^  class const_iterator : public std::iterator<std::forward_iterator_tag, const fib::Entry>$/;"	c	class:nfd::Fib
const_iterator	NFD/daemon/table/fib.hpp	/^Fib::const_iterator::const_iterator(const NameTree::const_iterator& it)$/;"	f	class:nfd::Fib::const_iterator
const_iterator	NFD/daemon/table/name-tree.cpp	/^NameTree::const_iterator::const_iterator()$/;"	f	class:nfd::NameTree::const_iterator
const_iterator	NFD/daemon/table/name-tree.cpp	/^NameTree::const_iterator::const_iterator(NameTree::IteratorType type,$/;"	f	class:nfd::NameTree::const_iterator
const_iterator	NFD/daemon/table/name-tree.hpp	/^  class const_iterator : public std::iterator<std::forward_iterator_tag, const name_tree::Entry>$/;"	c	class:nfd::NameTree
const_iterator	NFD/daemon/table/pit.hpp	/^  class const_iterator : public std::iterator<std::forward_iterator_tag, const pit::Entry>$/;"	c	class:nfd::Pit
const_iterator	NFD/daemon/table/pit.hpp	/^Pit::const_iterator::const_iterator()$/;"	f	class:nfd::Pit::const_iterator
const_iterator	NFD/daemon/table/pit.hpp	/^Pit::const_iterator::const_iterator(const NameTree::const_iterator& it)$/;"	f	class:nfd::Pit::const_iterator
const_iterator	NFD/daemon/table/strategy-choice.hpp	/^  class const_iterator$/;"	c	class:nfd::StrategyChoice
const_iterator	NFD/daemon/table/strategy-choice.hpp	/^StrategyChoice::const_iterator::const_iterator(const NameTree::const_iterator& it)$/;"	f	class:nfd::StrategyChoice::const_iterator
const_iterator	NFD/rib/rib-entry.hpp	/^  typedef RouteList::const_iterator const_iterator;$/;"	t	class:nfd::rib::RibEntry
const_iterator	NFD/rib/rib-update-batch.hpp	/^  typedef RibUpdateList::const_iterator const_iterator;$/;"	t	class:nfd::rib::RibUpdateBatch
const_iterator	NFD/rib/rib.hpp	/^  typedef RibTable::const_iterator const_iterator;$/;"	t	class:nfd::rib::Rib
const_iterator	ndn-cxx/src/encoding/encoder.hpp	/^  typedef Buffer::const_iterator const_iterator;$/;"	t	class:ndn::encoding::Encoder
const_iterator	ndn-cxx/src/exclude.hpp	/^  typedef exclude_type::const_iterator const_iterator;$/;"	t	class:ndn::Exclude
const_iterator	ndn-cxx/src/name.hpp	/^  typedef const Component*        const_iterator;$/;"	t	class:ndn::Name
const_iterator	ndn-cxx/src/security/additional-description.hpp	/^  typedef std::map<std::string, std::string>::const_iterator const_iterator;$/;"	t	class:ndn::security::AdditionalDescription
const_iterator	ndn-cxx/src/security/certificate-container.cpp	/^CertificateContainer::const_iterator::const_iterator(std::set<Name>::const_iterator it,$/;"	f	class:ndn::security::CertificateContainer::const_iterator
const_iterator	ndn-cxx/src/security/certificate-container.hpp	/^  class const_iterator$/;"	c	class:ndn::security::CertificateContainer
const_iterator	ndn-cxx/src/security/identity-container.cpp	/^IdentityContainer::const_iterator::const_iterator(std::set<Name>::const_iterator it,$/;"	f	class:ndn::security::IdentityContainer::const_iterator
const_iterator	ndn-cxx/src/security/identity-container.hpp	/^  class const_iterator$/;"	c	class:ndn::security::IdentityContainer
const_iterator	ndn-cxx/src/security/key-container.cpp	/^KeyContainer::const_iterator::const_iterator(const Name& identity,$/;"	f	class:ndn::security::KeyContainer::const_iterator
const_iterator	ndn-cxx/src/security/key-container.hpp	/^  class const_iterator$/;"	c	class:ndn::security::KeyContainer
const_iterator	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::const_iterator(const Data* ptr, const Cache* cache,$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
const_iterator	ndn-cxx/src/util/in-memory-storage.hpp	/^  class const_iterator : public std::iterator<std::input_iterator_tag, const Data>$/;"	c	class:ndn::util::InMemoryStorage
const_iterator	utils/trie/detail/multi-policy-container.hpp	/^  typedef typename boost::mpl::at_c<Vector, 0>::type::const_iterator const_iterator;$/;"	t	struct:ns3::ndn::ndnSIM::detail::multi_policy_container
const_iterator	utils/trie/trie-with-policy.hpp	/^  typedef typename parent_trie::const_iterator const_iterator;$/;"	t	class:ns3::ndn::ndnSIM::trie_with_policy
const_iterator	utils/trie/trie.hpp	/^  typedef const trie* const_iterator;$/;"	t	class:ns3::ndn::ndnSIM::trie
const_point_iterator	utils/trie/trie.hpp	/^  typedef trie_point_iterator<const trie> const_point_iterator;$/;"	t	class:ns3::ndn::ndnSIM::trie
const_pointer	ndn-cxx/src/name.hpp	/^  typedef const Component*        const_pointer;$/;"	t	class:ndn::Name
const_pointer	utils/trie/detail/functor-hook.hpp	/^  typedef const value_type* const_pointer;$/;"	t	struct:ns3::ndn::ndnSIM::detail::FunctorHook
const_recursive_iterator	utils/trie/trie.hpp	/^  typedef trie_iterator<const trie, trie> const_recursive_iterator;$/;"	t	class:ns3::ndn::ndnSIM::trie
const_reference	ndn-cxx/src/name.hpp	/^  typedef const Component         const_reference;$/;"	t	class:ndn::Name
const_return_type	utils/trie/trie.hpp	/^  typedef const Payload& const_return_type;$/;"	t	struct:ns3::ndn::ndnSIM::non_pointer_traits
const_return_type	utils/trie/trie.hpp	/^  typedef const Payload* const_return_type; \/\/ what is returned on const access$/;"	t	struct:ns3::ndn::ndnSIM::pointer_payload_traits
const_return_type	utils/trie/trie.hpp	/^  typedef ns3::Ptr<const Payload> const_return_type;$/;"	t	struct:ns3::ndn::ndnSIM::smart_pointer_payload_traits
const_reverse_iterator	ndn-cxx/src/exclude.hpp	/^  typedef exclude_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:ndn::Exclude
const_reverse_iterator	ndn-cxx/src/name.hpp	/^  typedef boost::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:ndn::Name
const_type	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef const EdgeWeights const_type;$/;"	t	struct:boost::property_map
const_type	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef const VertexIds const_type;$/;"	t	struct:boost::property_map
constants	NFD/websocketpp/websocketpp/processors/base.hpp	/^namespace constants {$/;"	n	namespace:websocketpp::processor
construct	NFD/tests/daemon/face/face-history.hpp	/^  construct(Face& face)$/;"	f	class:nfd::tests::FaceHistory
construct	ndn-cxx/src/encoding/oid.cpp	/^OID::construct(const std::string& oid)$/;"	f	class:ndn::OID
construct	ndn-cxx/src/face.cpp	/^Face::construct()$/;"	f	class:ndn::Face
construct	ndn-cxx/src/name.cpp	/^Name::construct(const char* uriOrig)$/;"	f	class:ndn::Name
construct	ndn-cxx/src/util/dummy-client-face.cpp	/^DummyClientFace::construct(const Options& options)$/;"	f	class:ndn::util::DummyClientFace
consume	NFD/websocketpp/websocketpp/http/impl/request.hpp	/^inline size_t request::consume(char const * buf, size_t len) {$/;"	f	class:websocketpp::http::parser::request
consume	NFD/websocketpp/websocketpp/http/impl/response.hpp	/^inline size_t response::consume(char const * buf, size_t len) {$/;"	f	class:websocketpp::http::parser::response
consume	NFD/websocketpp/websocketpp/http/impl/response.hpp	/^inline size_t response::consume(std::istream & s) {$/;"	f	class:websocketpp::http::parser::response
consume	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    size_t consume(uint8_t * buf, size_t len, lib::error_code & ec) {$/;"	f	class:websocketpp::processor::hybi00
consume	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    size_t consume(uint8_t * buf, size_t len, lib::error_code & ec) {$/;"	f	class:websocketpp::processor::hybi13
consume	NFD/websocketpp/websocketpp/utf8_validator.hpp	/^    bool consume (uint8_t byte) {$/;"	f	class:websocketpp::utf8_validator::validator
container_hook	model/cs/custom-policies/freshness-policy.hpp	/^  struct container_hook {$/;"	s	struct:ns3::ndn::ndnSIM::freshness_policy_traits
container_hook	model/cs/custom-policies/lifetime-stats-policy.hpp	/^  struct container_hook {$/;"	s	struct:ns3::ndn::ndnSIM::lifetime_stats_policy_traits
container_hook	model/cs/custom-policies/probability-policy.hpp	/^  struct container_hook {$/;"	s	struct:ns3::ndn::ndnSIM::probability_policy_traits
container_hook	utils/trie/aggregate-stats-policy.hpp	/^  struct container_hook {$/;"	s	struct:ns3::ndn::ndnSIM::aggregate_stats_policy_traits
container_hook	utils/trie/counting-policy.hpp	/^  struct container_hook {$/;"	s	struct:ns3::ndn::ndnSIM::counting_policy_traits
container_hook	utils/trie/empty-policy.hpp	/^  struct container_hook {$/;"	s	struct:ns3::ndn::ndnSIM::empty_policy_traits
container_hook	utils/trie/fifo-policy.hpp	/^  struct container_hook {$/;"	s	struct:ns3::ndn::ndnSIM::fifo_policy_traits
container_hook	utils/trie/lfu-policy.hpp	/^  struct container_hook {$/;"	s	struct:ns3::ndn::ndnSIM::lfu_policy_traits
container_hook	utils/trie/lru-policy.hpp	/^  struct container_hook {$/;"	s	struct:ns3::ndn::ndnSIM::lru_policy_traits
container_hook	utils/trie/multi-policy.hpp	/^  struct container_hook {$/;"	s	struct:ns3::ndn::ndnSIM::multi_policy_traits
container_hook	utils/trie/payload-policy.hpp	/^  struct container_hook {$/;"	s	struct:ns3::ndn::ndnSIM::payload_policy_traits
container_hook	utils/trie/persistent-policy.hpp	/^  struct container_hook {$/;"	s	struct:ns3::ndn::ndnSIM::persistent_policy_traits
container_hook	utils/trie/random-policy.hpp	/^  struct container_hook {$/;"	s	struct:ns3::ndn::ndnSIM::random_policy_traits
contentBlock	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^  Block contentBlock;$/;"	m	class:ndn::mgmt::tests::StatusDatasetContextFixture	file:
context	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^  mgmt::StatusDatasetContext context;$/;"	m	class:ndn::mgmt::tests::StatusDatasetContextFixture	file:
context_ptr	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^typedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;$/;"	t	file:
context_ptr	NFD/websocketpp/examples/echo_server_both/echo_server_both.cpp	/^typedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;$/;"	t	file:
context_ptr	NFD/websocketpp/examples/echo_server_tls/echo_server_tls.cpp	/^typedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;$/;"	t	file:
context_ptr	NFD/websocketpp/test/transport/asio/timers.cpp	/^typedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;$/;"	t	file:
context_ptr	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    typedef lib::shared_ptr<boost::asio::ssl::context> context_ptr;$/;"	t	class:websocketpp::transport::asio::tls_socket::connection
continuation	NFD/websocketpp/websocketpp/frame.hpp	/^        continuation = 0x0,$/;"	e	enum:websocketpp::frame::opcode::value
continue_code	NFD/websocketpp/websocketpp/http/constants.hpp	/^            continue_code = 100,$/;"	e	enum:websocketpp::http::status_code::value
control	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const control = 0x4;$/;"	m	struct:websocketpp::log::alevel
control_rsvb	NFD/websocketpp/websocketpp/frame.hpp	/^        control_rsvb = 0xB,$/;"	e	enum:websocketpp::frame::opcode::value
control_rsvc	NFD/websocketpp/websocketpp/frame.hpp	/^        control_rsvc = 0xC,$/;"	e	enum:websocketpp::frame::opcode::value
control_rsvd	NFD/websocketpp/websocketpp/frame.hpp	/^        control_rsvd = 0xD,$/;"	e	enum:websocketpp::frame::opcode::value
control_rsve	NFD/websocketpp/websocketpp/frame.hpp	/^        control_rsve = 0xE,$/;"	e	enum:websocketpp::frame::opcode::value
control_rsvf	NFD/websocketpp/websocketpp/frame.hpp	/^        control_rsvf = 0xF,$/;"	e	enum:websocketpp::frame::opcode::value
control_too_big	NFD/websocketpp/websocketpp/processors/base.hpp	/^    control_too_big,$/;"	e	enum:websocketpp::processor::error::processor_errors
controller	NFD/tests/rib/fib-updates-common.hpp	/^  ndn::nfd::Controller controller;$/;"	m	class:nfd::rib::tests::FibUpdatesFixture
controller	NFD/tests/rib/remote-registrator.t.cpp	/^  shared_ptr<ndn::nfd::Controller> controller;$/;"	m	class:nfd::rib::tests::RemoteRegistratorFixture	file:
controller	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^  Controller controller;$/;"	m	class:ndn::nfd::tests::CommandFixture	file:
convertSpecialChar	ndn-cxx/src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::convertSpecialChar(const std::string& str)$/;"	f	class:ndn::RegexTopMatcher
copyStatusTo	NFD/daemon/face/face.cpp	/^Face::copyStatusTo(FaceTraits& traits) const$/;"	f	class:nfd::Face
copyTo	NFD/daemon/face/face-counters.hpp	/^  copyTo(R& recipient) const$/;"	f	class:nfd::FaceCounters
copyTo	NFD/daemon/face/face-counters.hpp	/^  copyTo(R& recipient) const$/;"	f	class:nfd::LinkLayerCounters
copyTo	NFD/daemon/face/face-counters.hpp	/^  copyTo(R& recipient) const$/;"	f	class:nfd::NetworkLayerCounters
copyTo	NFD/daemon/fw/forwarder-counters.hpp	/^  copyTo(R& recipient) const$/;"	f	class:nfd::ForwarderCounters
copy_basic_header_bytes	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    size_t copy_basic_header_bytes(uint8_t const * buf, size_t len) {$/;"	f	class:websocketpp::processor::hybi13
copy_extended_header_bytes	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    size_t copy_extended_header_bytes(uint8_t const * buf, size_t len) {$/;"	f	class:websocketpp::processor::hybi13
copy_payload	NFD/websocketpp/websocketpp/frame.hpp	/^    int copy_payload(uint64_t payload_size) {$/;"	f	struct:websocketpp::frame::extended_header
core	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    typedef websocketpp::config::asio core;$/;"	t	struct:custom_config	file:
core	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^    typedef websocketpp::config::asio core;$/;"	t	struct:testee_config	file:
core	NFD/websocketpp/websocketpp/config/core.hpp	/^struct core {$/;"	s	namespace:websocketpp::config
core_client	NFD/websocketpp/websocketpp/config/core_client.hpp	/^struct core_client {$/;"	s	namespace:websocketpp::config
cost	NFD/rib/fib-update.hpp	/^  uint64_t cost;$/;"	m	class:nfd::rib::FibUpdate
cost	NFD/rib/route.hpp	/^  uint64_t cost;$/;"	m	class:nfd::rib::Route
count	NFD/daemon/face/ndnlp-sequence-generator.hpp	/^SequenceBlock::count() const$/;"	f	class:nfd::ndnlp::SequenceBlock
count	NFD/websocketpp/docs/simple_count_server_thread.cpp	/^    void count() {$/;"	f	class:count_server
count	NFD/websocketpp/websocketpp/common/md5.hpp	/^    md5_word_t count[2];    \/* message length in bits, lsw first *\/$/;"	m	struct:websocketpp::md5::md5_state_s
count	ndn-cxx/src/lp/packet.hpp	/^  count() const$/;"	f	class:ndn::lp::Packet
count	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^  size_t count;$/;"	m	class:ndn::util::scheduler::tests::SelfRescheduleFixture	file:
count	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^  uint32_t count;$/;"	m	struct:ndn::util::scheduler::tests::CancelAllFixture	file:
count	utils/ndn-rtt-estimator.hpp	/^  uint32_t count;       \/\/ Number of bytes sent$/;"	m	class:ns3::ndn::RttHistory
count1	NFD/tests/core/scheduler.t.cpp	/^  int count1;$/;"	m	class:nfd::tests::SchedulerFixture	file:
count2	NFD/tests/core/scheduler.t.cpp	/^  int count2;$/;"	m	class:nfd::tests::SchedulerFixture	file:
count3	NFD/tests/core/scheduler.t.cpp	/^  int count3;$/;"	m	class:nfd::tests::SchedulerFixture	file:
countDelegationsFromWire	ndn-cxx/src/link.cpp	/^Link::countDelegationsFromWire(const Block& block)$/;"	f	class:ndn::Link
countMarks	NFD/daemon/table/dead-nonce-list.cpp	/^DeadNonceList::countMarks() const$/;"	f	class:nfd::DeadNonceList
count_server	NFD/websocketpp/docs/simple_count_server_thread.cpp	/^    count_server() : m_count(0) {$/;"	f	class:count_server
count_server	NFD/websocketpp/docs/simple_count_server_thread.cpp	/^class count_server {$/;"	c	file:
counting_policy_traits	utils/trie/counting-policy.hpp	/^struct counting_policy_traits {$/;"	s	namespace:ns3::ndn::ndnSIM
create	ndn-cxx/src/security/conf/checker.hpp	/^  create(const ConfigSection& configSection, const std::string& configFilename)$/;"	f	class:ndn::security::conf::CheckerFactory
create	ndn-cxx/src/security/conf/filter.hpp	/^  create(const ConfigSection& configSection)$/;"	f	class:ndn::security::conf::FilterFactory
create	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  create(const ConfigSection& configSection, const std::string& filename)$/;"	f	class:ndn::security::conf::KeyLocatorCheckerFactory
create	ndn-cxx/src/security/key-chain.cpp	/^  T create;$/;"	m	struct:ndn::security::Factory	file:
create	ndn-cxx/src/transport/tcp-transport.cpp	/^TcpTransport::create(const ConfigFile& config)$/;"	f	class:ndn::TcpTransport
create	ndn-cxx/src/transport/unix-transport.cpp	/^UnixTransport::create(const ConfigFile& config)$/;"	f	class:ndn::UnixTransport
createAddUpdate	NFD/rib/fib-update.cpp	/^FibUpdate::createAddUpdate(const Name& name, const uint64_t faceId, const uint64_t cost)$/;"	f	class:nfd::rib::FibUpdate
createAndRegisterFace	helper/ndn-stack-helper.cpp	/^StackHelper::createAndRegisterFace(Ptr<Node> node, Ptr<L3Protocol> ndn, Ptr<NetDevice> device) const$/;"	f	class:ns3::ndn::StackHelper
createChannel	NFD/daemon/face/tcp-factory.cpp	/^TcpFactory::createChannel(const std::string& localIp, const std::string& localPort)$/;"	f	class:nfd::TcpFactory
createChannel	NFD/daemon/face/tcp-factory.cpp	/^TcpFactory::createChannel(const tcp::Endpoint& endpoint)$/;"	f	class:nfd::TcpFactory
createChannel	NFD/daemon/face/udp-factory.cpp	/^UdpFactory::createChannel(const std::string& localIp,$/;"	f	class:nfd::UdpFactory
createChannel	NFD/daemon/face/udp-factory.cpp	/^UdpFactory::createChannel(const udp::Endpoint& endpoint,$/;"	f	class:nfd::UdpFactory
createChannel	NFD/daemon/face/unix-stream-factory.cpp	/^UnixStreamFactory::createChannel(const std::string& unixSocketPath)$/;"	f	class:nfd::UnixStreamFactory
createChannel	NFD/daemon/face/websocket-factory.cpp	/^WebSocketFactory::createChannel(const std::string& localIp, const std::string& port)$/;"	f	class:nfd::WebSocketFactory
createChannel	NFD/daemon/face/websocket-factory.cpp	/^WebSocketFactory::createChannel(const websocket::Endpoint& endpoint)$/;"	f	class:nfd::WebSocketFactory
createCustomizedChecker	ndn-cxx/src/security/conf/checker.hpp	/^  createCustomizedChecker(const ConfigSection& configSection,$/;"	f	class:ndn::security::conf::CheckerFactory
createDataPacket	NFD/tools/ndn-tlv-poke.cpp	/^  createDataPacket()$/;"	f	class:ndntlvpoke::NdnTlvPoke
createFace	NFD/daemon/face/ethernet-factory.cpp	/^EthernetFactory::createFace(const FaceUri& uri,$/;"	f	class:nfd::EthernetFactory
createFace	NFD/daemon/face/tcp-channel.cpp	/^TcpChannel::createFace(ip::tcp::socket socket,$/;"	f	class:nfd::TcpChannel
createFace	NFD/daemon/face/tcp-factory.cpp	/^TcpFactory::createFace(const FaceUri& uri,$/;"	f	class:nfd::TcpFactory
createFace	NFD/daemon/face/udp-channel.cpp	/^UdpChannel::createFace(const udp::Endpoint& remoteEndpoint, ndn::nfd::FacePersistency persistency)$/;"	f	class:nfd::UdpChannel
createFace	NFD/daemon/face/udp-factory.cpp	/^UdpFactory::createFace(const FaceUri& uri,$/;"	f	class:nfd::UdpFactory
createFace	NFD/daemon/face/unix-stream-factory.cpp	/^UnixStreamFactory::createFace(const FaceUri& uri,$/;"	f	class:nfd::UnixStreamFactory
createFace	NFD/daemon/face/websocket-factory.cpp	/^WebSocketFactory::createFace(const FaceUri& uri,$/;"	f	class:nfd::WebSocketFactory
createFace	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::createFace(const Interest& request,$/;"	f	class:nfd::FaceManager
createFace	NFD/tests/daemon/mgmt/channel-status-common.hpp	/^  createFace(const FaceUri& uri,$/;"	f	class:nfd::tests::DummyProtocolFactory
createFace	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  createFace(const Interest& request,$/;"	f	class:nfd::tests::ValidatedFaceRequestFixture
createFibUpdatesForErasedRibEntry	NFD/rib/fib-updater.cpp	/^FibUpdater::createFibUpdatesForErasedRibEntry(const RibEntry& entry)$/;"	f	class:nfd::rib::FibUpdater
createFibUpdatesForErasedRoute	NFD/rib/fib-updater.cpp	/^FibUpdater::createFibUpdatesForErasedRoute(const RibEntry& entry, const Route& route,$/;"	f	class:nfd::rib::FibUpdater
createFibUpdatesForNewRibEntry	NFD/rib/fib-updater.cpp	/^FibUpdater::createFibUpdatesForNewRibEntry(const Name& name, const Route& route,$/;"	f	class:nfd::rib::FibUpdater
createFibUpdatesForNewRoute	NFD/rib/fib-updater.cpp	/^FibUpdater::createFibUpdatesForNewRoute(const RibEntry& entry, const Route& route,$/;"	f	class:nfd::rib::FibUpdater
createFibUpdatesForUpdatedRoute	NFD/rib/fib-updater.cpp	/^FibUpdater::createFibUpdatesForUpdatedRoute(const RibEntry& entry, const Route& route,$/;"	f	class:nfd::rib::FibUpdater
createFixedSignerChecker	ndn-cxx/src/security/conf/checker.hpp	/^  createFixedSignerChecker(const ConfigSection& configSection,$/;"	f	class:ndn::security::conf::CheckerFactory
createHierarchicalChecker	ndn-cxx/src/security/conf/checker.hpp	/^  createHierarchicalChecker(const ConfigSection& configSection,$/;"	f	class:ndn::security::conf::CheckerFactory
createIdentity	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::createIdentity(const Name& identityName, const KeyParams& params)$/;"	f	class:ndn::security::KeyChain
createInterestPacket	NFD/tools/ndn-tlv-peek.cpp	/^  createInterestPacket()$/;"	f	class:ndntlvpeek::NdnTlvPeek
createKeyLocatorNameChecker	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  createKeyLocatorNameChecker(const ConfigSection& configSection,$/;"	f	class:ndn::security::conf::KeyLocatorCheckerFactory
createMulticastFace	NFD/daemon/face/ethernet-factory.cpp	/^EthernetFactory::createMulticastFace(const NetworkInterfaceInfo& interface,$/;"	f	class:nfd::EthernetFactory
createMulticastFace	NFD/daemon/face/udp-factory.cpp	/^UdpFactory::createMulticastFace(const std::string& localIp,$/;"	f	class:nfd::UdpFactory
createMulticastFace	NFD/daemon/face/udp-factory.cpp	/^UdpFactory::createMulticastFace(const udp::Endpoint& localEndpoint,$/;"	f	class:nfd::UdpFactory
createNameFilter	ndn-cxx/src/security/conf/filter.hpp	/^  createNameFilter(const ConfigSection& configSection)$/;"	f	class:ndn::security::conf::FilterFactory
createPib	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::createPib(const std::string& pibLocator)$/;"	f	class:ndn::security::KeyChain
createRemoveUpdate	NFD/rib/fib-update.cpp	/^FibUpdate::createRemoveUpdate(const Name& name, const uint64_t faceId)$/;"	f	class:nfd::rib::FibUpdate
createRoute	NFD/tests/rib/rib-test-common.hpp	/^createRoute(uint64_t faceId, uint64_t origin, uint64_t cost, uint64_t flags)$/;"	f	namespace:nfd::rib::tests
createTopology	helper/ndn-scenario-helper.cpp	/^ScenarioHelper::createTopology(std::initializer_list<std::initializer_list<std::string>\/*node clique*\/> topology)$/;"	f	class:ns3::ndn::ScenarioHelper
createTpm	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::createTpm(const std::string& tpmLocator)$/;"	f	class:ndn::security::KeyChain
create_connection	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^endpoint<connection,config>::create_connection() {$/;"	f	class:websocketpp::endpoint
created	NFD/websocketpp/websocketpp/http/constants.hpp	/^            created = 201,$/;"	e	enum:websocketpp::http::status_code::value
crypto	ndn-cxx/src/util/crypto.cpp	/^namespace crypto {$/;"	n	namespace:ndn	file:
crypto	ndn-cxx/src/util/crypto.hpp	/^namespace crypto {$/;"	n	namespace:ndn
cs	NFD/daemon/table/cs-entry-impl.cpp	/^namespace cs {$/;"	n	namespace:nfd	file:
cs	NFD/daemon/table/cs-entry-impl.hpp	/^namespace cs {$/;"	n	namespace:nfd
cs	NFD/daemon/table/cs-entry.cpp	/^namespace cs {$/;"	n	namespace:nfd	file:
cs	NFD/daemon/table/cs-entry.hpp	/^namespace cs {$/;"	n	namespace:nfd
cs	NFD/daemon/table/cs-internal.hpp	/^namespace cs {$/;"	n	namespace:nfd
cs	NFD/daemon/table/cs-policy-lru.cpp	/^namespace cs {$/;"	n	namespace:nfd	file:
cs	NFD/daemon/table/cs-policy-lru.hpp	/^namespace cs {$/;"	n	namespace:nfd
cs	NFD/daemon/table/cs-policy-priority-fifo.cpp	/^namespace cs {$/;"	n	namespace:nfd	file:
cs	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^namespace cs {$/;"	n	namespace:nfd
cs	NFD/daemon/table/cs-policy.cpp	/^namespace cs {$/;"	n	namespace:nfd	file:
cs	NFD/daemon/table/cs-policy.hpp	/^namespace cs {$/;"	n	namespace:nfd
cs	NFD/daemon/table/cs.cpp	/^namespace cs {$/;"	n	namespace:nfd	file:
cs	NFD/daemon/table/cs.hpp	/^namespace cs {$/;"	n	namespace:nfd
cs	NFD/tests/daemon/table/cs-policy-lru.t.cpp	/^namespace cs {$/;"	n	namespace:nfd	file:
cs	NFD/tests/daemon/table/cs-policy-priority-fifo.t.cpp	/^namespace cs {$/;"	n	namespace:nfd	file:
cs	NFD/tests/daemon/table/cs.t.cpp	/^namespace cs {$/;"	n	namespace:nfd	file:
cs	NFD/tests/other/cs-benchmark.cpp	/^  Cs cs;$/;"	m	class:nfd::tests::CsBenchmarkFixture	file:
cs	model/cs/content-store-impl.cpp	/^namespace cs {$/;"	n	namespace:ns3::ndn	file:
cs	model/cs/content-store-impl.hpp	/^namespace cs {$/;"	n	namespace:ns3::ndn
cs	model/cs/content-store-nocache.cpp	/^namespace cs {$/;"	n	namespace:ns3::ndn	file:
cs	model/cs/content-store-nocache.hpp	/^namespace cs {$/;"	n	namespace:ns3::ndn
cs	model/cs/content-store-with-freshness.cpp	/^namespace cs {$/;"	n	namespace:ns3::ndn	file:
cs	model/cs/content-store-with-freshness.hpp	/^namespace cs {$/;"	n	namespace:ns3::ndn
cs	model/cs/content-store-with-probability.cpp	/^namespace cs {$/;"	n	namespace:ns3::ndn	file:
cs	model/cs/content-store-with-probability.hpp	/^namespace cs {$/;"	n	namespace:ns3::ndn
cs	model/cs/content-store-with-stats.cpp	/^namespace cs {$/;"	n	namespace:ns3::ndn	file:
cs	model/cs/content-store-with-stats.hpp	/^namespace cs {$/;"	n	namespace:ns3::ndn
cs	model/cs/ndn-content-store.cpp	/^namespace cs {$/;"	n	namespace:ns3::ndn	file:
cs	model/cs/ndn-content-store.hpp	/^namespace cs {$/;"	n	namespace:ns3::ndn
cs	utils/tracers/ndn-cs-tracer.hpp	/^namespace cs {$/;"	n	namespace:ns3::ndn
custom_alloc_handler	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^  custom_alloc_handler(handler_allocator& a, Handler h)$/;"	f	class:websocketpp::transport::asio::custom_alloc_handler
custom_alloc_handler	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^class custom_alloc_handler$/;"	c	namespace:websocketpp::transport::asio
custom_config	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^struct custom_config : public websocketpp::config::asio {$/;"	s	file:
custom_on_msg	NFD/websocketpp/examples/handler_switch/handler_switch.cpp	/^void custom_on_msg(server & s, connection_hdl hdl, server::message_ptr msg) {$/;"	f
data	NFD/tests/daemon/face/packet-datasets.hpp	/^  Container data;$/;"	m	class:nfd::tests::CorruptedInterest
data	NFD/tests/daemon/face/packet-datasets.hpp	/^  Container data;$/;"	m	class:nfd::tests::CorruptedInterestWithLocalControlHeader
dataBlock	ndn-cxx/src/encoding/block-helpers.hpp	/^dataBlock(uint32_t type, Iterator first, Iterator last)$/;"	f	namespace:ndn::encoding
dataBlock	ndn-cxx/src/encoding/block-helpers.hpp	/^dataBlock(uint32_t type, const char* data, size_t dataSize)$/;"	f	namespace:ndn::encoding
dataBlock	ndn-cxx/src/encoding/block-helpers.hpp	/^dataBlock(uint32_t type, const uint8_t* data, size_t dataSize)$/;"	f	namespace:ndn::encoding
dataCheckFailed	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^dataCheckFailed(const shared_ptr<const Data>& interest,$/;"	f	namespace:ndn::security::conf::tests
dataCheckFailedFalse	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^dataCheckFailedFalse(const shared_ptr<const Data>& interest,$/;"	f	namespace:ndn::security::conf::tests
dataChecked	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^dataChecked(const shared_ptr<const Data>& interest)$/;"	f	namespace:ndn::security::conf::tests
dataCheckedFalse	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^dataCheckedFalse(const shared_ptr<const Data>& interest)$/;"	f	namespace:ndn::security::conf::tests
dataSize	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^  size_t dataSize;$/;"	m	class:ndn::util::tests::Fixture	file:
dataset	ndn-cxx/tests/unit-tests/name.t.cpp	/^  Dataset dataset;$/;"	m	class:ndn::tests::Numeric	file:
dataset	ndn-cxx/tests/unit-tests/name.t.cpp	/^  Dataset dataset;$/;"	m	class:ndn::tests::Timestamp	file:
days	ndn-cxx/src/util/time.hpp	/^typedef duration<boost::int_least32_t, boost::ratio<86400> > days;$/;"	t	namespace:ndn::time
db	ndn-cxx/tests/unit-tests/util/sqlite3-statement.t.cpp	/^  sqlite3* db;$/;"	m	class:ndn::util::tests::Sqlite3StatementTestFixture	file:
deallocate	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^  void deallocate(void* pointer)$/;"	f	class:websocketpp::transport::asio::handler_allocator
debug	NFD/websocketpp/websocketpp/transport/debug/base.hpp	/^namespace debug {$/;"	n	namespace:websocketpp::transport
debug	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^namespace debug {$/;"	n	namespace:websocketpp::transport
debug	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^namespace debug {$/;"	n	namespace:websocketpp::transport
debug_asio	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^struct debug_asio : public debug_core {$/;"	s	namespace:websocketpp::config
debug_asio_tls	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^struct debug_asio_tls : public debug_core {$/;"	s	namespace:websocketpp::config
debug_client	NFD/websocketpp/test/connection/connection.cpp	/^typedef websocketpp::client<debug_config_client> debug_client;$/;"	t	file:
debug_close	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const debug_close = 0x200;$/;"	m	struct:websocketpp::log::alevel
debug_config_client	NFD/websocketpp/test/connection/connection.cpp	/^struct debug_config_client : public websocketpp::config::core {$/;"	s	file:
debug_core	NFD/websocketpp/websocketpp/config/debug.hpp	/^struct debug_core {$/;"	s	namespace:websocketpp::config
debug_custom	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^struct debug_custom : public websocketpp::config::debug_asio {$/;"	s	file:
debug_handshake	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const debug_handshake = 0x100;$/;"	m	struct:websocketpp::log::alevel
debug_server	NFD/websocketpp/test/connection/connection.cpp	/^typedef websocketpp::server<debug_config_client> debug_server;$/;"	t	file:
decide	NFD/daemon/fw/retx-suppression-exponential.cpp	/^RetxSuppressionExponential::decide(const Face& inFace, const Interest& interest,$/;"	f	class:nfd::fw::RetxSuppressionExponential
decide	NFD/daemon/fw/retx-suppression-fixed.cpp	/^RetxSuppressionFixed::decide(const Face& inFace, const Interest& interest,$/;"	f	class:nfd::fw::RetxSuppressionFixed
decline	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    decline,$/;"	e	enum:websocketpp::extensions::permessage_deflate::mode::value
decode	NFD/websocketpp/websocketpp/utf8_validator.hpp	/^    bool decode (iterator_type begin, iterator_type end) {$/;"	f	class:websocketpp::utf8_validator::validator
decode	NFD/websocketpp/websocketpp/utf8_validator.hpp	/^inline uint32_t decode(uint32_t * state, uint32_t * codep, uint8_t byte) {$/;"	f	namespace:websocketpp::utf8_validator
decode	ndn-cxx/src/encoding/oid.cpp	/^OID::decode(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::OID
decode	ndn-cxx/src/lp/detail/field-decl.hpp	/^  decode(const Block& wire)$/;"	f	class:ndn::lp::detail::FieldDecl
decode	ndn-cxx/src/lp/detail/field-decl.hpp	/^  decode(const Block& wire)$/;"	f	struct:ndn::lp::detail::DecodeHelper
decode	ndn-cxx/src/security/certificate-extension.cpp	/^CertificateExtension::decode(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::CertificateExtension
decode	ndn-cxx/src/security/certificate-subject-description.cpp	/^CertificateSubjectDescription::decode(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::CertificateSubjectDescription
decode	ndn-cxx/src/security/certificate.cpp	/^Certificate::decode()$/;"	f	class:ndn::Certificate
decode	ndn-cxx/src/security/public-key.cpp	/^PublicKey::decode(CryptoPP::BufferedTransformation& in)$/;"	f	class:ndn::PublicKey
decodeAndDispatchInput	NFD/daemon/face/face.cpp	/^Face::decodeAndDispatchInput(const Block& element)$/;"	f	class:nfd::Face
decodeAndDispatchInput	NFD/daemon/face/local-face.hpp	/^LocalFace::decodeAndDispatchInput(const Block& element)$/;"	f	class:nfd::LocalFace
decodeContent	ndn-cxx/src/link.cpp	/^Link::decodeContent()$/;"	f	class:ndn::Link
decodeFaceStatusBlock	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  decodeFaceStatusBlock(const Data& data)$/;"	f	class:nfd::tests::FaceQueryStatusPublisherFixture
decodeFaceStatusBlock	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^  decodeFaceStatusBlock(const Data& data)$/;"	f	class:nfd::tests::FaceStatusPublisherFixture
decodeFibEntryBlock	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^  decodeFibEntryBlock(const Data& data)$/;"	f	class:nfd::tests::FibEnumerationPublisherFixture
decodeNackBlock	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  decodeNackBlock(const Data& data)$/;"	f	class:nfd::tests::FaceQueryStatusPublisherFixture
decodeRibEntryBlock	NFD/tests/rib/rib-status-publisher-common.hpp	/^  decodeRibEntryBlock(const Data& data, const Name& referenceName, const Route& referenceRoute)$/;"	f	class:nfd::rib::tests::RibStatusPublisherFixture
decodeValue	ndn-cxx/src/encoding/oid.cpp	/^decodeValue(CryptoPP::BufferedTransformation& bt, CryptoPP::word32& v)$/;"	f	namespace:ndn
decode_client_key	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    void decode_client_key(std::string const & key, char * result) const {$/;"	f	class:websocketpp::processor::hybi00
decompress	NFD/websocketpp/websocketpp/extensions/permessage_deflate/disabled.hpp	/^    lib::error_code decompress(uint8_t const *, size_t, std::string &) {$/;"	f	class:websocketpp::extensions::permessage_deflate::disabled
decompress	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    lib::error_code decompress(uint8_t const * buf, size_t len, std::string &$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
decryptInTpm	ndn-cxx/src/security/key-chain.hpp	/^  decryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName, bool isSymmetric)$/;"	f	class:ndn::security::KeyChain
decryptInTpm	ndn-cxx/src/security/sec-tpm-file.cpp	/^SecTpmFile::decryptInTpm(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::SecTpmFile
decryptInTpm	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::decryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName, bool sym)$/;"	f	class:ndn::SecTpmOsx
decryptInTpm	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::decryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName,$/;"	f	class:ndn::security::DummyTpm
decryptInTpm	utils/dummy-keychain.cpp	/^DummyTpm::decryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName,$/;"	f	class:ndn::security::DummyTpm
deepest_prefix_match	utils/trie/trie-with-policy.hpp	/^  deepest_prefix_match(const FullKey& key)$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
deepest_prefix_match_if	utils/trie/trie-with-policy.hpp	/^  deepest_prefix_match_if(const FullKey& key, Predicate pred)$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
deepest_prefix_match_if_next_level	utils/trie/trie-with-policy.hpp	/^  deepest_prefix_match_if_next_level(const FullKey& key, Predicate pred)$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
defaultCertificate	ndn-cxx/src/security/sec-public-info.cpp	/^SecPublicInfo::defaultCertificate()$/;"	f	class:ndn::SecPublicInfo
default_c2s_max_window_bits	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^static uint8_t const default_c2s_max_window_bits = 15;$/;"	m	namespace:websocketpp::extensions::permessage_deflate
default_level	NFD/websocketpp/websocketpp/logger/syslog.hpp	/^    static int const default_level = LOG_INFO;$/;"	m	class:websocketpp::log::syslog
default_on_msg	NFD/websocketpp/examples/handler_switch/handler_switch.cpp	/^void default_on_msg(server & s, connection_hdl hdl, server::message_ptr msg) {$/;"	f
default_s2c_max_window_bits	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^static uint8_t const default_s2c_max_window_bits = 15;$/;"	m	namespace:websocketpp::extensions::permessage_deflate
defer	NFD/tests/limited-io.hpp	/^  defer(const time::nanoseconds& d)$/;"	f	class:nfd::tests::LimitedIo
deferredClose	NFD/daemon/face/stream-face.hpp	/^StreamFace<T, U>::deferredClose(const shared_ptr<Face>& face)$/;"	f	class:nfd::StreamFace
degree_size_type	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef size_t degree_size_type;$/;"	t	struct:boost::graph_traits
delay	NFD/websocketpp/test/transport/integration.cpp	/^void delay(websocketpp::connection_hdl, long duration) {$/;"	f
delayedInterest	ndn-cxx/examples/consumer-with-timer.cpp	/^  delayedInterest()$/;"	f	class:ndn::examples::ConsumerWithTimer	file:
deleteCertificate	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::deleteCertificate(const Name& certificateName)$/;"	f	class:ndn::security::KeyChain
deleteCertificateInfo	ndn-cxx/src/security/key-chain.hpp	/^  deleteCertificateInfo(const Name& certificateName)$/;"	f	class:ndn::security::KeyChain
deleteCertificateInfo	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::deleteCertificateInfo(const Name& certName)$/;"	f	class:ndn::SecPublicInfoSqlite3
deleteCertificateInfo	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::deleteCertificateInfo(const Name& certificateName)$/;"	f	class:ndn::security::DummyPublicInfo
deleteCertificateInfo	utils/dummy-keychain.cpp	/^DummyPublicInfo::deleteCertificateInfo(const Name& certificateName)$/;"	f	class:ndn::security::DummyPublicInfo
deleteIdentity	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::deleteIdentity(const Name& identity)$/;"	f	class:ndn::security::KeyChain
deleteIdentityInfo	ndn-cxx/src/security/key-chain.hpp	/^  deleteIdentityInfo(const Name& identity)$/;"	f	class:ndn::security::KeyChain
deleteIdentityInfo	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::deleteIdentityInfo(const Name& identityName)$/;"	f	class:ndn::SecPublicInfoSqlite3
deleteIdentityInfo	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::deleteIdentityInfo(const Name& identity)$/;"	f	class:ndn::security::DummyPublicInfo
deleteIdentityInfo	utils/dummy-keychain.cpp	/^DummyPublicInfo::deleteIdentityInfo(const Name& identity)$/;"	f	class:ndn::security::DummyPublicInfo
deleteInRecords	NFD/daemon/table/pit-entry.cpp	/^Entry::deleteInRecords()$/;"	f	class:nfd::pit::Entry
deleteKey	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::deleteKey(const Name& keyName)$/;"	f	class:ndn::security::KeyChain
deleteKeyPairInTpm	ndn-cxx/src/security/key-chain.hpp	/^  deleteKeyPairInTpm(const Name& keyName)$/;"	f	class:ndn::security::KeyChain
deleteKeyPairInTpm	ndn-cxx/src/security/sec-tpm-file.cpp	/^SecTpmFile::deleteKeyPairInTpm(const Name& keyName)$/;"	f	class:ndn::SecTpmFile
deleteKeyPairInTpm	ndn-cxx/src/security/sec-tpm-osx.hpp	/^  deleteKeyPairInTpm(const Name& keyName)$/;"	f	class:ndn::SecTpmOsx
deleteKeyPairInTpm	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::deleteKeyPairInTpm(const Name& keyName)$/;"	f	class:ndn::security::DummyTpm
deleteKeyPairInTpm	utils/dummy-keychain.cpp	/^DummyTpm::deleteKeyPairInTpm(const Name& keyName)$/;"	f	class:ndn::security::DummyTpm
deleteKeyPairInTpmInternal	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::deleteKeyPairInTpmInternal(const Name& keyName, bool needRetry)$/;"	f	class:ndn::SecTpmOsx
deleteOutRecord	NFD/daemon/table/pit-entry.cpp	/^Entry::deleteOutRecord(const Face& face)$/;"	f	class:nfd::pit::Entry
deletePublicKeyInfo	ndn-cxx/src/security/key-chain.hpp	/^  deletePublicKeyInfo(const Name& keyName)$/;"	f	class:ndn::security::KeyChain
deletePublicKeyInfo	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::deletePublicKeyInfo(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
deletePublicKeyInfo	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::deletePublicKeyInfo(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
deletePublicKeyInfo	utils/dummy-keychain.cpp	/^DummyPublicInfo::deletePublicKeyInfo(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
deleteTable	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::deleteTable(const string& tableName)$/;"	f	class:ndn::SecPublicInfoSqlite3
deliverNotification	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  deliverNotification(const std::string& msg)$/;"	f	class:ndn::util::tests::EndToEndFixture
description	ndn-cxx/tests/unit-tests/security/additional-info.t.cpp	/^static const uint8_t description[] = {$/;"	m	namespace:ndn::security::tests	file:
destroyFace	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::destroyFace(const Interest& request,$/;"	f	class:nfd::FaceManager
destroyFace	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  destroyFace(const Interest& request,$/;"	f	class:nfd::tests::ValidatedFaceRequestFixture
destroyFace	NFD/tests/rib/fib-updates-common.hpp	/^  destroyFace(uint64_t faceId)$/;"	f	class:nfd::rib::tests::FibUpdatesFixture
detachQueue	NFD/daemon/table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::detachQueue(iterator i)$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
detail	ndn-cxx/src/lp/detail/field-decl.hpp	/^namespace detail {$/;"	n	namespace:ndn::lp
detail	ndn-cxx/src/lp/detail/field-info.cpp	/^namespace detail {$/;"	n	namespace:ndn::lp	file:
detail	ndn-cxx/src/lp/detail/field-info.hpp	/^namespace detail {$/;"	n	namespace:ndn::lp
detail	utils/trie/detail/functor-hook.hpp	/^namespace detail {$/;"	n	namespace:ns3::ndn::ndnSIM
detail	utils/trie/detail/multi-policy-container.hpp	/^namespace detail {$/;"	n	namespace:ns3::ndn::ndnSIM
detail	utils/trie/detail/multi-type-container.hpp	/^namespace detail {$/;"	n	namespace:ns3::ndn::ndnSIM
detect	ndn-cxx/tests/unit-tests/network-configuration-detector.cpp	/^NetworkConfigurationDetector::detect()$/;"	f	class:ndn::tests::NetworkConfigurationDetector
devel	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const devel = 0x1;$/;"	m	struct:websocketpp::log::elevel
devel	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const devel = 0x400;$/;"	m	struct:websocketpp::log::alevel
didAddFire	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  didAddFire() const$/;"	f	class:nfd::tests::TestFaceTable
didCallbackFire	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  didCallbackFire() const$/;"	f	class:nfd::tests::TestFaceManagerCommon
didCallbackFire	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  didCallbackFire()$/;"	f	class:nfd::tests::FibManagerFixture
didCallbackFire	NFD/tests/daemon/mgmt/manager-base.t.cpp	/^  didCallbackFire()$/;"	f	class:nfd::tests::ManagerBaseTest
didCallbackFire	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  didCallbackFire()$/;"	f	class:nfd::tests::StrategyChoiceManagerFixture
didCloseFire	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  didCloseFire() const$/;"	f	class:nfd::tests::FaceManagerTestFace
didCreateFaceFire	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  didCreateFaceFire() const$/;"	f	class:nfd::tests::ValidatedFaceRequestFixture
didDestroyFaceFire	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  didDestroyFaceFire() const$/;"	f	class:nfd::tests::ValidatedFaceRequestFixture
didFaceTableAddFire	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  didFaceTableAddFire() const$/;"	f	class:nfd::tests::FaceManagerFixture
didFaceTableGetFire	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  didFaceTableGetFire() const$/;"	f	class:nfd::tests::FaceManagerFixture
didGetFire	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  didGetFire() const$/;"	f	class:nfd::tests::TestFaceTable
didNoOnInterestFire	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^  didNoOnInterestFire()$/;"	f	class:nfd::tests::InternalFaceFixture
didOnInterestFire	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^  didOnInterestFire()$/;"	f	class:nfd::tests::InternalFaceFixture
didReceiveNotication	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  didReceiveNotication() const$/;"	f	class:nfd::tests::FaceFixture
difference_type	ndn-cxx/src/name.hpp	/^  typedef component_container::difference_type difference_type;$/;"	t	class:ndn::Name
directed_category	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef directed_tag directed_category;$/;"	t	struct:boost::graph_traits
disable	NFD/rib/remote-registrator.cpp	/^RemoteRegistrator::disable()$/;"	f	class:nfd::rib::RemoteRegistrator
disableFaceManager	helper/ndn-scenario-helper.cpp	/^ScenarioHelper::disableFaceManager()$/;"	f	class:ns3::ndn::ScenarioHelper
disableFaceManager	helper/ndn-stack-helper.cpp	/^StackHelper::disableFaceManager()$/;"	f	class:ns3::ndn::StackHelper
disableLocalControl	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::disableLocalControl(const Interest& request,$/;"	f	class:nfd::FaceManager
disableRibManager	helper/ndn-scenario-helper.cpp	/^ScenarioHelper::disableRibManager()$/;"	f	class:ns3::ndn::ScenarioHelper
disableRibManager	helper/ndn-stack-helper.cpp	/^StackHelper::disableRibManager()$/;"	f	class:ns3::ndn::StackHelper
disableStatusServer	helper/ndn-scenario-helper.cpp	/^ScenarioHelper::disableStatusServer()$/;"	f	class:ns3::ndn::ScenarioHelper
disableStatusServer	helper/ndn-stack-helper.cpp	/^StackHelper::disableStatusServer()$/;"	f	class:ns3::ndn::StackHelper
disableStrategyChoiceManager	helper/ndn-scenario-helper.cpp	/^ScenarioHelper::disableStrategyChoiceManager()$/;"	f	class:ns3::ndn::ScenarioHelper
disableStrategyChoiceManager	helper/ndn-stack-helper.cpp	/^StackHelper::disableStrategyChoiceManager()$/;"	f	class:ns3::ndn::StackHelper
disabled	NFD/websocketpp/websocketpp/extensions/extension.hpp	/^    disabled$/;"	e	enum:websocketpp::extensions::error::value
disabled	NFD/websocketpp/websocketpp/extensions/permessage_deflate/disabled.hpp	/^class disabled {$/;"	c	namespace:websocketpp::extensions::permessage_deflate
disabled_type	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^typedef websocketpp::extensions::permessage_deflate::disabled<config> disabled_type;$/;"	t	file:
disconnect	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const disconnect = 0x2;$/;"	m	struct:websocketpp::log::alevel
disconnect	ndn-cxx/src/util/signal-connection.cpp	/^Connection::disconnect()$/;"	f	class:ndn::util::signal::Connection
disconnect	ndn-cxx/src/util/signal-scoped-connection.cpp	/^ScopedConnection::disconnect()$/;"	f	class:ndn::util::signal::ScopedConnection
disconnect	ndn-cxx/src/util/signal-signal.hpp	/^    shared_ptr<function<void()>> disconnect;$/;"	m	struct:ndn::util::signal::Signal::Slot
disconnect	ndn-cxx/src/util/signal-signal.hpp	/^Signal<Owner, TArgs...>::disconnect(typename SlotList::iterator it)$/;"	f	class:ndn::util::signal::Signal
disconnectToHub	NFD/tests/rib/remote-registrator.t.cpp	/^  disconnectToHub()$/;"	f	class:nfd::rib::tests::RemoteRegistratorFixture
dispatch	NFD/tools/nfdc.cpp	/^Nfdc::dispatch(const std::string& command)$/;"	f	class:nfdc::Nfdc
dispatch	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    lib::error_code dispatch(dispatch_handler handler) {$/;"	f	class:websocketpp::transport::asio::connection
dispatch	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    lib::error_code dispatch(dispatch_handler handler) {$/;"	f	class:websocketpp::transport::debug::connection
dispatch	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    lib::error_code dispatch(dispatch_handler handler) {$/;"	f	class:websocketpp::transport::iostream::connection
dispatch	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    lib::error_code dispatch(dispatch_handler handler) {$/;"	f	class:websocketpp::transport::stub::connection
dispatchToStrategy	NFD/daemon/fw/forwarder.hpp	/^Forwarder::dispatchToStrategy(shared_ptr<pit::Entry> pitEntry, function<void(fw::Strategy*)> trigger)$/;"	f	class:nfd::Forwarder
dispatchToStrategy	NFD/tests/daemon/fw/forwarder.t.cpp	/^  dispatchToStrategy(shared_ptr<pit::Entry> pitEntry, function<void(fw::Strategy*)> f)$/;"	f	class:nfd::tests::ScopeLocalhostIncomingTestForwarder
dispatch_handler	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^typedef lib::function<void()> dispatch_handler;$/;"	t	namespace:websocketpp::transport
dispatcher	ndn-cxx/tests/unit-tests/mgmt/dispatcher.t.cpp	/^  mgmt::Dispatcher dispatcher;$/;"	m	class:ndn::mgmt::tests::DispatcherFixture	file:
dnl	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^  DeadNonceList dnl;$/;"	m	class:nfd::tests::PeriodicalInsertionFixture	file:
dns	ndn-cxx/src/util/dns.cpp	/^namespace dns {$/;"	n	namespace:ndn	file:
dns	ndn-cxx/src/util/dns.hpp	/^namespace dns {$/;"	n	namespace:ndn
doAfterInsert	NFD/daemon/table/cs-policy-lru.cpp	/^LruPolicy::doAfterInsert(iterator i)$/;"	f	class:nfd::cs::lru::LruPolicy
doAfterInsert	NFD/daemon/table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::doAfterInsert(iterator i)$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
doAfterRefresh	NFD/daemon/table/cs-policy-lru.cpp	/^LruPolicy::doAfterRefresh(iterator i)$/;"	f	class:nfd::cs::lru::LruPolicy
doAfterRefresh	NFD/daemon/table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::doAfterRefresh(iterator i)$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
doBeforeErase	NFD/daemon/table/cs-policy-lru.cpp	/^LruPolicy::doBeforeErase(iterator i)$/;"	f	class:nfd::cs::lru::LruPolicy
doBeforeErase	NFD/daemon/table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::doBeforeErase(iterator i)$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
doBeforeUse	NFD/daemon/table/cs-policy-lru.cpp	/^LruPolicy::doBeforeUse(iterator i)$/;"	f	class:nfd::cs::lru::LruPolicy
doBeforeUse	NFD/daemon/table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::doBeforeUse(iterator i)$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
doPropagate	NFD/daemon/fw/ncc-strategy.cpp	/^NccStrategy::doPropagate(weak_ptr<pit::Entry> pitEntryWeak, weak_ptr<fib::Entry> fibEntryWeak)$/;"	f	class:nfd::fw::NccStrategy
doesCertificateExist	ndn-cxx/src/security/key-chain.hpp	/^  doesCertificateExist(const Name& certificateName) const$/;"	f	class:ndn::security::KeyChain
doesCertificateExist	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::doesCertificateExist(const Name& certificateName)$/;"	f	class:ndn::SecPublicInfoSqlite3
doesCertificateExist	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::doesCertificateExist(const Name& certificateName)$/;"	f	class:ndn::security::DummyPublicInfo
doesCertificateExist	utils/dummy-keychain.cpp	/^DummyPublicInfo::doesCertificateExist(const Name& certificateName)$/;"	f	class:ndn::security::DummyPublicInfo
doesContain	NFD/core/network.hpp	/^  doesContain(const boost::asio::ip::address& address) const$/;"	f	class:nfd::Network
doesIdentityExist	ndn-cxx/src/security/key-chain.hpp	/^  doesIdentityExist(const Name& identityName) const$/;"	f	class:ndn::security::KeyChain
doesIdentityExist	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::doesIdentityExist(const Name& identityName)$/;"	f	class:ndn::SecPublicInfoSqlite3
doesIdentityExist	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::doesIdentityExist(const Name& identityName)$/;"	f	class:ndn::security::DummyPublicInfo
doesIdentityExist	utils/dummy-keychain.cpp	/^DummyPublicInfo::doesIdentityExist(const Name& identityName)$/;"	f	class:ndn::security::DummyPublicInfo
doesKeyExistInTpm	ndn-cxx/src/security/key-chain.hpp	/^  doesKeyExistInTpm(const Name& keyName, KeyClass keyClass) const$/;"	f	class:ndn::security::KeyChain
doesKeyExistInTpm	ndn-cxx/src/security/sec-tpm-file.cpp	/^SecTpmFile::doesKeyExistInTpm(const Name& keyName, KeyClass keyClass)$/;"	f	class:ndn::SecTpmFile
doesKeyExistInTpm	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::doesKeyExistInTpm(const Name& keyName, KeyClass keyClass)$/;"	f	class:ndn::SecTpmOsx
doesKeyExistInTpm	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::doesKeyExistInTpm(const Name& keyName, KeyClass keyClass)$/;"	f	class:ndn::security::DummyTpm
doesKeyExistInTpm	utils/dummy-keychain.cpp	/^DummyTpm::doesKeyExistInTpm(const Name& keyName, KeyClass keyClass)$/;"	f	class:ndn::security::DummyTpm
doesMatch	ndn-cxx/src/detail/interest-filter-record.hpp	/^  doesMatch(const Name& name) const$/;"	f	class:ndn::InterestFilterRecord
doesMatch	ndn-cxx/src/interest-filter.cpp	/^InterestFilter::doesMatch(const Name& name) const$/;"	f	class:ndn::InterestFilter
doesMatchFilter	NFD/daemon/mgmt/face-query-status-publisher.cpp	/^FaceQueryStatusPublisher::doesMatchFilter(const shared_ptr<Face>& face)$/;"	f	class:nfd::FaceQueryStatusPublisher
doesPublicKeyExist	ndn-cxx/src/security/key-chain.hpp	/^  doesPublicKeyExist(const Name& keyName) const$/;"	f	class:ndn::security::KeyChain
doesPublicKeyExist	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::doesPublicKeyExist(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
doesPublicKeyExist	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::doesPublicKeyExist(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
doesPublicKeyExist	utils/dummy-keychain.cpp	/^DummyPublicInfo::doesPublicKeyExist(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
doesTableExist	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::doesTableExist(const string& tableName)$/;"	f	class:ndn::SecPublicInfoSqlite3
doubleMultiplier	NFD/daemon/fw/rtt-estimator.cpp	/^RttEstimator::doubleMultiplier()$/;"	f	class:nfd::RttEstimator
double_read	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    double_read,$/;"	e	enum:websocketpp::transport::error::value
double_read	NFD/websocketpp/websocketpp/transport/debug/base.hpp	/^    double_read$/;"	e	enum:websocketpp::transport::debug::error::value
double_read	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^    double_read,$/;"	e	enum:websocketpp::transport::iostream::error::value
drop	NFD/core/privilege-helper.cpp	/^PrivilegeHelper::drop()$/;"	f	class:nfd::PrivilegeHelper
drop_on_protocol_error	NFD/websocketpp/websocketpp/config/core.hpp	/^    static const bool drop_on_protocol_error = false;$/;"	m	struct:websocketpp::config::core
drop_on_protocol_error	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    static const bool drop_on_protocol_error = false;$/;"	m	struct:websocketpp::config::core_client
drop_on_protocol_error	NFD/websocketpp/websocketpp/config/debug.hpp	/^    static const bool drop_on_protocol_error = false;$/;"	m	struct:websocketpp::config::debug_core
drop_on_protocol_error	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    static const bool drop_on_protocol_error = false;$/;"	m	struct:websocketpp::config::minimal_server
dump	NFD/daemon/table/cs.cpp	/^Cs::dump()$/;"	f	class:nfd::cs::Cs
dump	NFD/daemon/table/name-tree.cpp	/^NameTree::dump(std::ostream& output) const$/;"	f	class:nfd::NameTree
dur_type	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    typedef std::chrono::duration<int,std::micro> dur_type;$/;"	t	class:perftest	file:
duration	ndn-cxx/src/util/time.hpp	/^  typedef BOOST_SYSTEM_CLOCK_DURATION      duration;$/;"	t	class:ndn::time::system_clock
duration	ndn-cxx/src/util/time.hpp	/^  typedef nanoseconds      duration;$/;"	t	class:ndn::time::steady_clock
duration_type	ndn-cxx/src/util/monotonic_deadline_timer.hpp	/^  typedef ndn::time::steady_clock::Duration  duration_type;$/;"	t	struct:boost::asio::time_traits
dynamic_test	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    bool dynamic_test(level channel) {$/;"	f	class:websocketpp::log::basic
dynamic_test	NFD/websocketpp/websocketpp/logger/stub.hpp	/^    bool dynamic_test(level) {$/;"	f	class:websocketpp::log::stub
ec	NFD/websocketpp/test/connection/connection.cpp	/^    websocketpp::lib::error_code ec;$/;"	m	struct:connection_setup	file:
ec	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^    websocketpp::lib::error_code ec;$/;"	m	struct:ext_vars	file:
ec	NFD/websocketpp/test/processors/hybi00.cpp	/^    websocketpp::lib::error_code ec;$/;"	m	struct:processor_setup	file:
ec	NFD/websocketpp/test/processors/hybi13.cpp	/^    websocketpp::lib::error_code ec;$/;"	m	struct:processor_setup	file:
ec	NFD/websocketpp/test/processors/hybi13.cpp	/^    websocketpp::lib::error_code ec;$/;"	m	struct:processor_setup_ext	file:
ec	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    websocketpp::lib::error_code ec;$/;"	m	struct:stub_con	file:
ecdsaSigInfo	ndn-cxx/tests/unit-tests/security/validator.t.cpp	/^const uint8_t ecdsaSigInfo[] = {$/;"	m	namespace:ndn::tests	file:
ecdsaSigValue	ndn-cxx/tests/unit-tests/security/validator.t.cpp	/^const uint8_t ecdsaSigValue[] = {$/;"	m	namespace:ndn::tests	file:
echo_func	NFD/websocketpp/test/connection/connection_tu2.cpp	/^void echo_func(server* s, websocketpp::connection_hdl hdl, message_ptr msg) {$/;"	f
echo_func	NFD/websocketpp/test/roles/server.cpp	/^void echo_func(server* s, websocketpp::connection_hdl hdl, message_ptr msg) {$/;"	f
echo_handler	NFD/websocketpp/examples/echo_server/echo_handler.hpp	/^class echo_handler : public server::handler {$/;"	c
edgeProperty	utils/topology/rocketfuel-map-reader.hpp	/^  typedef boost::no_property edgeProperty;$/;"	t	class:ns3::RocketfuelMapReader
edge_descriptor	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef ns3::ndn::GlobalRouter::Incidency edge_descriptor;$/;"	t	struct:boost::graph_traits
edge_parallel_category	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef disallow_parallel_edge_tag edge_parallel_category;$/;"	t	struct:boost::graph_traits
edge_property_type	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef uint16_t edge_property_type;$/;"	t	class:boost::NdnGlobalRouterGraph
element_const_iterator	ndn-cxx/src/encoding/block.hpp	/^  typedef element_container::const_iterator  element_const_iterator;$/;"	t	class:ndn::Block
element_container	ndn-cxx/src/encoding/block.hpp	/^  typedef std::vector<Block>                 element_container;$/;"	t	class:ndn::Block
element_iterator	ndn-cxx/src/encoding/block.hpp	/^  typedef element_container::iterator        element_iterator;$/;"	t	class:ndn::Block
elements	ndn-cxx/src/encoding/block.hpp	/^Block::elements() const$/;"	f	class:ndn::Block
elements_begin	ndn-cxx/src/encoding/block.cpp	/^Block::elements_begin() const$/;"	f	class:ndn::Block
elements_end	ndn-cxx/src/encoding/block.cpp	/^Block::elements_end() const$/;"	f	class:ndn::Block
elements_size	ndn-cxx/src/encoding/block.cpp	/^Block::elements_size() const$/;"	f	class:ndn::Block
elevel	NFD/websocketpp/websocketpp/logger/levels.hpp	/^struct elevel {$/;"	s	namespace:websocketpp::log
elog	NFD/websocketpp/test/connection/connection.cpp	/^    stub_config::elog_type elog;$/;"	m	struct:connection_setup	file:
elog	NFD/websocketpp/test/transport/asio/timers.cpp	/^    config::elog_type elog;$/;"	m	struct:mock_endpoint	file:
elog_level	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^    static const websocketpp::log::level elog_level =$/;"	m	struct:testee_config	file:
elog_level	NFD/websocketpp/test/connection/connection.cpp	/^    static const websocketpp::log::level elog_level = websocketpp::log::elevel::none;$/;"	m	struct:debug_config_client	file:
elog_level	NFD/websocketpp/test/roles/client.cpp	/^    static const websocketpp::log::level elog_level = websocketpp::log::elevel::none;$/;"	m	struct:stub_config	file:
elog_level	NFD/websocketpp/websocketpp/config/core.hpp	/^    static const websocketpp::log::level elog_level =$/;"	m	struct:websocketpp::config::core
elog_level	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    static const websocketpp::log::level elog_level =$/;"	m	struct:websocketpp::config::core_client
elog_level	NFD/websocketpp/websocketpp/config/debug.hpp	/^    static const websocketpp::log::level elog_level =$/;"	m	struct:websocketpp::config::debug_core
elog_level	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    static const websocketpp::log::level elog_level =$/;"	m	struct:websocketpp::config::minimal_server
elog_type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^        typedef type::elog_type elog_type;$/;"	t	struct:debug_custom::transport_config	file:
elog_type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^    typedef base::elog_type elog_type;$/;"	t	struct:debug_custom	file:
elog_type	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    typedef core::elog_type elog_type;$/;"	t	struct:custom_config	file:
elog_type	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^        typedef core::elog_type elog_type;$/;"	t	struct:testee_config::transport_config	file:
elog_type	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^    typedef core::elog_type elog_type;$/;"	t	struct:testee_config	file:
elog_type	NFD/websocketpp/test/connection/connection.cpp	/^        typedef type::elog_type elog_type;$/;"	t	struct:debug_config_client::transport_config	file:
elog_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::elog_type elog_type;$/;"	t	struct:debug_config_client	file:
elog_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::elog_type elog_type;$/;"	t	struct:stub_config	file:
elog_type	NFD/websocketpp/test/endpoint/endpoint.cpp	/^    typedef core::elog_type elog_type;$/;"	t	struct:stub_config	file:
elog_type	NFD/websocketpp/test/roles/client.cpp	/^    typedef core::elog_type elog_type;$/;"	t	struct:stub_config	file:
elog_type	NFD/websocketpp/test/transport/asio/timers.cpp	/^    typedef websocketpp::log::stub elog_type;$/;"	t	struct:config	file:
elog_type	NFD/websocketpp/test/transport/integration.cpp	/^        typedef type::elog_type elog_type;$/;"	t	struct:config::transport_config	file:
elog_type	NFD/websocketpp/test/transport/integration.cpp	/^        typedef type::elog_type elog_type;$/;"	t	struct:config_tls::transport_config	file:
elog_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::elog_type elog_type;$/;"	t	struct:config	file:
elog_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::elog_type elog_type;$/;"	t	struct:config_tls	file:
elog_type	NFD/websocketpp/test/transport/iostream/connection.cpp	/^        websocketpp::log::elevel> elog_type;$/;"	t	struct:config	file:
elog_type	NFD/websocketpp/websocketpp/config/asio.hpp	/^        typedef type::elog_type elog_type;$/;"	t	struct:websocketpp::config::asio_tls::transport_config
elog_type	NFD/websocketpp/websocketpp/config/asio.hpp	/^    typedef base::elog_type elog_type;$/;"	t	struct:websocketpp::config::asio_tls
elog_type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^        typedef type::elog_type elog_type;$/;"	t	struct:websocketpp::config::asio_tls_client::transport_config
elog_type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^    typedef base::elog_type elog_type;$/;"	t	struct:websocketpp::config::asio_tls_client
elog_type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^        typedef type::elog_type elog_type;$/;"	t	struct:websocketpp::config::asio::transport_config
elog_type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^    typedef base::elog_type elog_type;$/;"	t	struct:websocketpp::config::asio
elog_type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^        typedef type::elog_type elog_type;$/;"	t	struct:websocketpp::config::asio_client::transport_config
elog_type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^    typedef base::elog_type elog_type;$/;"	t	struct:websocketpp::config::asio_client
elog_type	NFD/websocketpp/websocketpp/config/core.hpp	/^        typedef type::elog_type elog_type;$/;"	t	struct:websocketpp::config::core::transport_config
elog_type	NFD/websocketpp/websocketpp/config/core.hpp	/^        websocketpp::log::elevel> elog_type;$/;"	t	struct:websocketpp::config::core
elog_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        typedef type::elog_type elog_type;$/;"	t	struct:websocketpp::config::core_client::transport_config
elog_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        websocketpp::log::elevel> elog_type;$/;"	t	struct:websocketpp::config::core_client
elog_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^        typedef type::elog_type elog_type;$/;"	t	struct:websocketpp::config::debug_core::transport_config
elog_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^        websocketpp::log::elevel> elog_type;$/;"	t	struct:websocketpp::config::debug_core
elog_type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^        typedef type::elog_type elog_type;$/;"	t	struct:websocketpp::config::debug_asio_tls::transport_config
elog_type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^    typedef base::elog_type elog_type;$/;"	t	struct:websocketpp::config::debug_asio_tls
elog_type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^        typedef type::elog_type elog_type;$/;"	t	struct:websocketpp::config::debug_asio::transport_config
elog_type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^    typedef base::elog_type elog_type;$/;"	t	struct:websocketpp::config::debug_asio
elog_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        typedef type::elog_type elog_type;$/;"	t	struct:websocketpp::config::minimal_server::transport_config
elog_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    typedef websocketpp::log::stub elog_type;$/;"	t	struct:websocketpp::config::minimal_server
elog_type	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef typename config::elog_type elog_type;$/;"	t	class:websocketpp::connection
elog_type	NFD/websocketpp/websocketpp/endpoint.hpp	/^    typedef typename config::elog_type elog_type;$/;"	t	class:websocketpp::endpoint
elog_type	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    typedef typename config::elog_type elog_type;$/;"	t	class:websocketpp::transport::asio::connection
elog_type	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    typedef typename config::elog_type elog_type;$/;"	t	class:websocketpp::transport::asio::endpoint
elog_type	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    typedef typename config::elog_type elog_type;$/;"	t	class:websocketpp::transport::debug::connection
elog_type	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^    typedef typename config::elog_type elog_type;$/;"	t	class:websocketpp::transport::debug::endpoint
elog_type	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    typedef typename config::elog_type elog_type;$/;"	t	class:websocketpp::transport::iostream::connection
elog_type	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    typedef typename config::elog_type elog_type;$/;"	t	class:websocketpp::transport::iostream::endpoint
elog_type	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    typedef typename config::elog_type elog_type;$/;"	t	class:websocketpp::transport::stub::connection
elog_type	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^    typedef typename config::elog_type elog_type;$/;"	t	class:websocketpp::transport::stub::endpoint
elogger	NFD/websocketpp/test/transport/iostream/connection.cpp	/^config::elog_type elogger;$/;"	v
emitSignal	ndn-cxx/src/util/signal-emit.hpp	76;"	d
emitTestSignal	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^  emitTestSignal()$/;"	f	class:ndn::util::signal::tests::SignalEmitter1
empty	NFD/rib/rib.hpp	/^Rib::empty() const$/;"	f	class:nfd::rib::Rib
empty	NFD/tools/ndn-autoconfig-server.cpp	/^  empty() const$/;"	f	class:ndn::PrefixCollection
empty	ndn-cxx/src/detail/container-with-on-empty-signal.hpp	/^  empty()$/;"	f	class:ndn::ContainerWithOnEmptySignal
empty	ndn-cxx/src/encoding/block.cpp	/^Block::empty() const$/;"	f	class:ndn::Block
empty	ndn-cxx/src/exclude.hpp	/^Exclude::empty() const$/;"	f	class:ndn::Exclude
empty	ndn-cxx/src/key-locator.hpp	/^  empty() const$/;"	f	class:ndn::KeyLocator
empty	ndn-cxx/src/management/nfd-local-control-header.hpp	/^  empty(uint8_t encodeMask) const$/;"	f	class:ndn::nfd::LocalControlHeader
empty	ndn-cxx/src/name-component.hpp	/^  empty() const$/;"	f	class:ndn::name::Component
empty	ndn-cxx/src/name.hpp	/^  empty() const$/;"	f	class:ndn::Name
empty	ndn-cxx/src/selectors.cpp	/^Selectors::empty() const$/;"	f	class:ndn::Selectors
empty	ndn-cxx/src/util/digest.hpp	/^  empty() const$/;"	f	class:ndn::util::Digest
empty_header	NFD/websocketpp/websocketpp/http/constants.hpp	/^    static std::string const empty_header = "";$/;"	m	class:websocketpp::http::std
empty_payload	utils/trie/trie.hpp	/^  static Payload empty_payload;$/;"	m	struct:ns3::ndn::ndnSIM::non_pointer_traits
empty_payload	utils/trie/trie.hpp	/^  static Payload* empty_payload;$/;"	m	struct:ns3::ndn::ndnSIM::pointer_payload_traits
empty_payload	utils/trie/trie.hpp	/^  static ns3::Ptr<Payload> empty_payload;$/;"	m	struct:ns3::ndn::ndnSIM::smart_pointer_payload_traits
empty_payload	utils/trie/trie.hpp	/^Payload non_pointer_traits<Payload, BasePayload>::empty_payload = Payload();$/;"	m	class:ns3::ndn::ndnSIM::non_pointer_traits
empty_payload	utils/trie/trie.hpp	/^Payload* pointer_payload_traits<Payload, BasePayload>::empty_payload = 0;$/;"	m	class:ns3::ndn::ndnSIM::pointer_payload_traits
empty_payload	utils/trie/trie.hpp	/^ns3::Ptr<Payload> smart_pointer_payload_traits<Payload, BasePayload>::empty_payload = 0;$/;"	m	class:ns3::ndn::ndnSIM::smart_pointer_payload_traits
empty_policy_traits	utils/trie/empty-policy.hpp	/^struct empty_policy_traits {$/;"	s	namespace:ns3::ndn::ndnSIM
empty_policy_wrap	utils/trie/detail/multi-policy-container.hpp	/^  empty_policy_wrap(Base& base)$/;"	f	struct:ns3::ndn::ndnSIM::detail::empty_policy_wrap
empty_policy_wrap	utils/trie/detail/multi-policy-container.hpp	/^struct empty_policy_wrap {$/;"	s	namespace:ns3::ndn::ndnSIM::detail
enable	NFD/rib/remote-registrator.cpp	/^RemoteRegistrator::enable()$/;"	f	class:nfd::rib::RemoteRegistrator
enableChannelStatusRetrieval	NFD/tools/nfd-status.cpp	/^  enableChannelStatusRetrieval()$/;"	f	class:ndn::NfdStatus
enableFaceStatusRetrieval	NFD/tools/nfd-status.cpp	/^  enableFaceStatusRetrieval()$/;"	f	class:ndn::NfdStatus
enableFibEnumerationRetrieval	NFD/tools/nfd-status.cpp	/^  enableFibEnumerationRetrieval()$/;"	f	class:ndn::NfdStatus
enableLocalControl	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::enableLocalControl(const Interest& request,$/;"	f	class:nfd::FaceManager
enableLocalControlHeader	NFD/rib/rib-manager.cpp	/^RibManager::enableLocalControlHeader()$/;"	f	class:nfd::rib::RibManager
enableOutput	ndn-cxx/tools/ndncatchunks3.cpp	/^  enableOutput()$/;"	f	class:ndn::Consumer
enablePacketLogging	ndn-cxx/src/util/dummy-client-face.cpp	/^DummyClientFace::enablePacketLogging()$/;"	f	class:ndn::util::DummyClientFace
enablePacketLogging	ndn-cxx/src/util/dummy-client-face.hpp	/^    bool enablePacketLogging;$/;"	m	struct:ndn::util::DummyClientFace::Options
enableRegistrationReply	ndn-cxx/src/util/dummy-client-face.cpp	/^DummyClientFace::enableRegistrationReply()$/;"	f	class:ndn::util::DummyClientFace
enableRegistrationReply	ndn-cxx/src/util/dummy-client-face.hpp	/^    bool enableRegistrationReply;$/;"	m	struct:ndn::util::DummyClientFace::Options
enableRibStatusRetrieval	NFD/tools/nfd-status.cpp	/^  enableRibStatusRetrieval()$/;"	f	class:ndn::NfdStatus
enableStrategyChoiceRetrieval	NFD/tools/nfd-status.cpp	/^  enableStrategyChoiceRetrieval()$/;"	f	class:ndn::NfdStatus
enableVersionRetrieval	NFD/tools/nfd-status.cpp	/^  enableVersionRetrieval()$/;"	f	class:ndn::NfdStatus
enableXmlOutput	NFD/tools/nfd-status.cpp	/^  enableXmlOutput()$/;"	f	class:ndn::NfdStatus
enable_c2s_no_context_takeover	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    void enable_c2s_no_context_takeover() {$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
enable_extensions	NFD/websocketpp/test/processors/hybi07.cpp	/^    static const bool enable_extensions = false;$/;"	m	struct:stub_config	file:
enable_extensions	NFD/websocketpp/test/processors/hybi08.cpp	/^    static const bool enable_extensions = false;$/;"	m	struct:stub_config	file:
enable_extensions	NFD/websocketpp/test/processors/hybi13.cpp	/^    static const bool enable_extensions = false;$/;"	m	struct:stub_config	file:
enable_extensions	NFD/websocketpp/test/processors/hybi13.cpp	/^    static const bool enable_extensions = true;$/;"	m	struct:stub_config_ext	file:
enable_extensions	NFD/websocketpp/websocketpp/config/core.hpp	/^    static const bool enable_extensions = true;$/;"	m	struct:websocketpp::config::core
enable_extensions	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    static const bool enable_extensions = true;$/;"	m	struct:websocketpp::config::core_client
enable_extensions	NFD/websocketpp/websocketpp/config/debug.hpp	/^    static const bool enable_extensions = true;$/;"	m	struct:websocketpp::config::debug_core
enable_extensions	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    static const bool enable_extensions = true;$/;"	m	struct:websocketpp::config::minimal_server
enable_multithreading	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^        static bool const enable_multithreading = true;$/;"	m	struct:testee_config::transport_config	file:
enable_multithreading	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^    static bool const enable_multithreading = true;$/;"	m	struct:testee_config	file:
enable_multithreading	NFD/websocketpp/test/connection/connection.cpp	/^        static bool const enable_multithreading = true;$/;"	m	struct:debug_config_client::transport_config	file:
enable_multithreading	NFD/websocketpp/test/transport/asio/timers.cpp	/^    static const bool enable_multithreading = true;$/;"	m	struct:config	file:
enable_multithreading	NFD/websocketpp/websocketpp/config/core.hpp	/^        static bool const enable_multithreading = true;$/;"	m	struct:websocketpp::config::core::transport_config
enable_multithreading	NFD/websocketpp/websocketpp/config/core.hpp	/^    static bool const enable_multithreading = true;$/;"	m	struct:websocketpp::config::core
enable_multithreading	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        static bool const enable_multithreading = true;$/;"	m	struct:websocketpp::config::core_client::transport_config
enable_multithreading	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    static bool const enable_multithreading = true;$/;"	m	struct:websocketpp::config::core_client
enable_multithreading	NFD/websocketpp/websocketpp/config/debug.hpp	/^        static bool const enable_multithreading = true;$/;"	m	struct:websocketpp::config::debug_core::transport_config
enable_multithreading	NFD/websocketpp/websocketpp/config/debug.hpp	/^    static bool const enable_multithreading = true;$/;"	m	struct:websocketpp::config::debug_core
enable_multithreading	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        static bool const enable_multithreading = true;$/;"	m	struct:websocketpp::config::minimal_server::transport_config
enable_multithreading	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    static bool const enable_multithreading = true;$/;"	m	struct:websocketpp::config::minimal_server
enable_s2c_no_context_takeover	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    void enable_s2c_no_context_takeover() {$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
enabled	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    enabled()$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
enabled	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^class enabled {$/;"	c	namespace:websocketpp::extensions::permessage_deflate
enabled_type	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^typedef websocketpp::extensions::permessage_deflate::enabled<config> enabled_type;$/;"	t	file:
encode	ndn-cxx/src/encoding/block.cpp	/^Block::encode()$/;"	f	class:ndn::Block
encode	ndn-cxx/src/encoding/oid.cpp	/^OID::encode(CryptoPP::BufferedTransformation& out) const$/;"	f	class:ndn::OID
encode	ndn-cxx/src/lp/detail/field-decl.hpp	/^  encode(EncodingImpl<TAG>& encoder, const T& value)$/;"	f	class:ndn::lp::detail::FieldDecl
encode	ndn-cxx/src/lp/detail/field-decl.hpp	/^  encode(EncodingImpl<TAG>& encoder, const T& value)$/;"	f	struct:ndn::lp::detail::EncodeHelper
encode	ndn-cxx/src/lp/detail/field-decl.hpp	/^  encode(EncodingImpl<TAG>& encoder, const std::pair<Buffer::const_iterator, Buffer::const_iterator>& value)$/;"	f	struct:ndn::lp::detail::EncodeHelper
encode	ndn-cxx/src/lp/detail/field-decl.hpp	/^  encode(EncodingImpl<TAG>& encoder, const uint64_t value)$/;"	f	struct:ndn::lp::detail::EncodeHelper
encode	ndn-cxx/src/security/certificate-extension.cpp	/^CertificateExtension::encode(CryptoPP::BufferedTransformation& out) const$/;"	f	class:ndn::CertificateExtension
encode	ndn-cxx/src/security/certificate-subject-description.cpp	/^CertificateSubjectDescription::encode(CryptoPP::BufferedTransformation& out) const$/;"	f	class:ndn::CertificateSubjectDescription
encode	ndn-cxx/src/security/certificate.cpp	/^Certificate::encode()$/;"	f	class:ndn::Certificate
encode	ndn-cxx/src/security/public-key.cpp	/^PublicKey::encode(CryptoPP::BufferedTransformation& out) const$/;"	f	class:ndn::PublicKey
encodeContent	ndn-cxx/src/link.cpp	/^Link::encodeContent()$/;"	f	class:ndn::Link
encodeContent	ndn-cxx/src/link.cpp	/^Link::encodeContent(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::Link
encodeFragment	NFD/daemon/face/ndnlp-slicer.cpp	/^Slicer::encodeFragment(ndn::EncodingImpl<T>& blk,$/;"	f	class:nfd::ndnlp::Slicer
encodeValue	ndn-cxx/src/encoding/oid.cpp	/^encodeValue(CryptoPP::BufferedTransformation& bt, CryptoPP::word32 v)$/;"	f	namespace:ndn
encoding	ndn-cxx/src/encoding/block-helpers.cpp	/^namespace encoding {$/;"	n	namespace:ndn	file:
encoding	ndn-cxx/src/encoding/block-helpers.hpp	/^namespace encoding {$/;"	n	namespace:ndn
encoding	ndn-cxx/src/encoding/encoder.cpp	/^namespace encoding {$/;"	n	namespace:ndn	file:
encoding	ndn-cxx/src/encoding/encoder.hpp	/^namespace encoding {$/;"	n	namespace:ndn
encoding	ndn-cxx/src/encoding/encoding-buffer-fwd.hpp	/^namespace encoding {$/;"	n	namespace:ndn
encoding	ndn-cxx/src/encoding/encoding-buffer.hpp	/^namespace encoding {$/;"	n	namespace:ndn
encoding	ndn-cxx/src/encoding/estimator.cpp	/^namespace encoding {$/;"	n	namespace:ndn	file:
encoding	ndn-cxx/src/encoding/estimator.hpp	/^namespace encoding {$/;"	n	namespace:ndn
encoding	ndn-cxx/tests/unit-tests/encoding/block-helpers.t.cpp	/^namespace encoding {$/;"	n	namespace:ndn	file:
encoding	ndn-cxx/tests/unit-tests/encoding/encoder.t.cpp	/^namespace encoding {$/;"	n	namespace:ndn	file:
encoding	ndn-cxx/tests/unit-tests/encoding/estimator.t.cpp	/^namespace encoding {$/;"	n	namespace:ndn	file:
encryptInTpm	ndn-cxx/src/security/key-chain.hpp	/^  encryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName, bool isSymmetric)$/;"	f	class:ndn::security::KeyChain
encryptInTpm	ndn-cxx/src/security/sec-tpm-file.cpp	/^SecTpmFile::encryptInTpm(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::SecTpmFile
encryptInTpm	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::encryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName, bool sym)$/;"	f	class:ndn::SecTpmOsx
encryptInTpm	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::encryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName,$/;"	f	class:ndn::security::DummyTpm
encryptInTpm	utils/dummy-keychain.cpp	/^DummyTpm::encryptInTpm(const uint8_t* data, size_t dataLength, const Name& keyName,$/;"	f	class:ndn::security::DummyTpm
end	NFD/daemon/fw/face-table.cpp	/^FaceTable::end() const$/;"	f	class:nfd::FaceTable
end	NFD/daemon/table/cs.hpp	/^  end() const$/;"	f	class:nfd::cs::Cs
end	NFD/daemon/table/fib.hpp	/^Fib::end() const$/;"	f	class:nfd::Fib
end	NFD/daemon/table/name-tree.hpp	/^NameTree::end() const$/;"	f	class:nfd::NameTree
end	NFD/daemon/table/pit.hpp	/^Pit::end() const$/;"	f	class:nfd::Pit
end	NFD/daemon/table/strategy-choice.hpp	/^StrategyChoice::end() const$/;"	f	class:nfd::StrategyChoice
end	NFD/rib/rib-entry.hpp	/^RibEntry::end() const$/;"	f	class:nfd::rib::RibEntry
end	NFD/rib/rib-entry.hpp	/^RibEntry::end()$/;"	f	class:nfd::rib::RibEntry
end	NFD/rib/rib-update-batch.cpp	/^RibUpdateBatch::end() const$/;"	f	class:nfd::rib::RibUpdateBatch
end	NFD/rib/rib.hpp	/^Rib::end() const$/;"	f	class:nfd::rib::Rib
end	NFD/tests/daemon/table/name-tree.t.cpp	/^  end()$/;"	f	class:nfd::tests::EnumerationVerifier
end	helper/ndn-scenario-helper.hpp	/^    std::string end;$/;"	m	struct:ns3::ndn::ScenarioHelper::AppInfo
end	ndn-cxx/src/detail/container-with-on-empty-signal.hpp	/^  end()$/;"	f	class:ndn::ContainerWithOnEmptySignal
end	ndn-cxx/src/encoding/block.cpp	/^Block::end() const$/;"	f	class:ndn::Block
end	ndn-cxx/src/encoding/encoder.hpp	/^Encoder::end() const$/;"	f	class:ndn::encoding::Encoder
end	ndn-cxx/src/encoding/encoder.hpp	/^Encoder::end()$/;"	f	class:ndn::encoding::Encoder
end	ndn-cxx/src/exclude.hpp	/^Exclude::end() const$/;"	f	class:ndn::Exclude
end	ndn-cxx/src/management/nfd-rib-entry.hpp	/^RibEntry::end() const$/;"	f	class:ndn::nfd::RibEntry
end	ndn-cxx/src/mgmt/status-dataset-context.cpp	/^StatusDatasetContext::end()$/;"	f	class:ndn::mgmt::StatusDatasetContext
end	ndn-cxx/src/name.hpp	/^  end() const$/;"	f	class:ndn::Name
end	ndn-cxx/src/security/additional-description.cpp	/^AdditionalDescription::end() const$/;"	f	class:ndn::security::AdditionalDescription
end	ndn-cxx/src/security/additional-description.cpp	/^AdditionalDescription::end()$/;"	f	class:ndn::security::AdditionalDescription
end	ndn-cxx/src/security/certificate-container.cpp	/^CertificateContainer::end() const$/;"	f	class:ndn::security::CertificateContainer
end	ndn-cxx/src/security/identity-container.cpp	/^IdentityContainer::end() const$/;"	f	class:ndn::security::IdentityContainer
end	ndn-cxx/src/security/key-container.cpp	/^KeyContainer::end() const$/;"	f	class:ndn::security::KeyContainer
end	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::end() const$/;"	f	class:ndn::util::InMemoryStorage
end	utils/trie/detail/multi-policy-container.hpp	/^  end() const$/;"	f	struct:ns3::ndn::ndnSIM::detail::multi_policy_container
end	utils/trie/detail/multi-policy-container.hpp	/^  end()$/;"	f	struct:ns3::ndn::ndnSIM::detail::multi_policy_container
end	utils/trie/trie-with-policy.hpp	/^  end() const$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
end	utils/trie/trie.hpp	/^  end() const$/;"	f	class:ns3::ndn::ndnSIM::trie
end	utils/trie/trie.hpp	/^  end()$/;"	f	class:ns3::ndn::ndnSIM::trie
endpoint	NFD/websocketpp/websocketpp/endpoint.hpp	/^    explicit endpoint(bool p_is_server)$/;"	f	class:websocketpp::endpoint
endpoint	NFD/websocketpp/websocketpp/endpoint.hpp	/^class endpoint : public config::transport_type, public config::endpoint_base {$/;"	c	namespace:websocketpp
endpoint	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const endpoint = 0x80;$/;"	m	struct:websocketpp::log::alevel
endpoint	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    endpoint (endpoint&& src)$/;"	f	class:websocketpp::transport::asio::endpoint
endpoint	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    explicit endpoint()$/;"	f	class:websocketpp::transport::asio::endpoint
endpoint	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^class endpoint : public config::socket_type {$/;"	c	namespace:websocketpp::transport::asio
endpoint	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    explicit endpoint() {}$/;"	f	class:websocketpp::transport::asio::basic_socket::endpoint
endpoint	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^class endpoint {$/;"	c	namespace:websocketpp::transport::asio::basic_socket
endpoint	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    explicit endpoint() {}$/;"	f	class:websocketpp::transport::asio::tls_socket::endpoint
endpoint	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^class endpoint {$/;"	c	namespace:websocketpp::transport::asio::tls_socket
endpoint	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^    explicit endpoint()$/;"	f	class:websocketpp::transport::debug::endpoint
endpoint	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^class endpoint {$/;"	c	namespace:websocketpp::transport::debug
endpoint	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    explicit endpoint() : m_output_stream(NULL), m_is_secure(false)$/;"	f	class:websocketpp::transport::iostream::endpoint
endpoint	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^class endpoint {$/;"	c	namespace:websocketpp::transport::iostream
endpoint	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^    explicit endpoint()$/;"	f	class:websocketpp::transport::stub::endpoint
endpoint	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^class endpoint {$/;"	c	namespace:websocketpp::transport::stub
endpoint_base	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    typedef core::endpoint_base endpoint_base;$/;"	t	struct:custom_config	file:
endpoint_base	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^    typedef core::endpoint_base endpoint_base;$/;"	t	struct:testee_config	file:
endpoint_base	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::endpoint_base endpoint_base;$/;"	t	struct:debug_config_client	file:
endpoint_base	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::endpoint_base endpoint_base;$/;"	t	struct:stub_config	file:
endpoint_base	NFD/websocketpp/test/endpoint/endpoint.cpp	/^    typedef endpoint_extension endpoint_base;$/;"	t	struct:stub_config	file:
endpoint_base	NFD/websocketpp/test/roles/client.cpp	/^    typedef core::endpoint_base endpoint_base;$/;"	t	struct:stub_config	file:
endpoint_base	NFD/websocketpp/websocketpp/config/core.hpp	/^    typedef websocketpp::endpoint_base endpoint_base;$/;"	t	struct:websocketpp::config::core
endpoint_base	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    typedef websocketpp::endpoint_base endpoint_base;$/;"	t	struct:websocketpp::config::core_client
endpoint_base	NFD/websocketpp/websocketpp/config/debug.hpp	/^    typedef websocketpp::endpoint_base endpoint_base;$/;"	t	struct:websocketpp::config::debug_core
endpoint_base	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    typedef websocketpp::endpoint_base endpoint_base;$/;"	t	struct:websocketpp::config::minimal_server
endpoint_base	NFD/websocketpp/websocketpp/endpoint_base.hpp	/^class endpoint_base {};$/;"	c	namespace:websocketpp
endpoint_extension	NFD/websocketpp/test/endpoint/endpoint.cpp	/^    endpoint_extension() : extension_value(5) {}$/;"	f	struct:endpoint_extension
endpoint_extension	NFD/websocketpp/test/endpoint/endpoint.cpp	/^struct endpoint_extension {$/;"	s	file:
endpoint_msg_manager	NFD/websocketpp/websocketpp/message_buffer/alloc.hpp	/^class endpoint_msg_manager {$/;"	c	namespace:websocketpp::message_buffer::alloc
endpoint_msg_manager	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^class endpoint_msg_manager {$/;"	c	namespace:websocketpp::message_buffer::alloc
endpoint_msg_manager	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^class endpoint_msg_manager {$/;"	c	namespace:websocketpp::message_buffer::pool
endpoint_msg_manager_type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^    typedef base::endpoint_msg_manager_type endpoint_msg_manager_type;$/;"	t	struct:debug_custom	file:
endpoint_msg_manager_type	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    typedef core::endpoint_msg_manager_type endpoint_msg_manager_type;$/;"	t	struct:custom_config	file:
endpoint_msg_manager_type	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^    typedef core::endpoint_msg_manager_type endpoint_msg_manager_type;$/;"	t	struct:testee_config	file:
endpoint_msg_manager_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::endpoint_msg_manager_type endpoint_msg_manager_type;$/;"	t	struct:debug_config_client	file:
endpoint_msg_manager_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::endpoint_msg_manager_type endpoint_msg_manager_type;$/;"	t	struct:stub_config	file:
endpoint_msg_manager_type	NFD/websocketpp/test/endpoint/endpoint.cpp	/^    typedef core::endpoint_msg_manager_type endpoint_msg_manager_type;$/;"	t	struct:stub_config	file:
endpoint_msg_manager_type	NFD/websocketpp/test/roles/client.cpp	/^    typedef core::endpoint_msg_manager_type endpoint_msg_manager_type;$/;"	t	struct:stub_config	file:
endpoint_msg_manager_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::endpoint_msg_manager_type endpoint_msg_manager_type;$/;"	t	struct:config	file:
endpoint_msg_manager_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::endpoint_msg_manager_type endpoint_msg_manager_type;$/;"	t	struct:config_tls	file:
endpoint_msg_manager_type	NFD/websocketpp/websocketpp/config/asio.hpp	/^    typedef base::endpoint_msg_manager_type endpoint_msg_manager_type;$/;"	t	struct:websocketpp::config::asio_tls
endpoint_msg_manager_type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^    typedef base::endpoint_msg_manager_type endpoint_msg_manager_type;$/;"	t	struct:websocketpp::config::asio_tls_client
endpoint_msg_manager_type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^    typedef base::endpoint_msg_manager_type endpoint_msg_manager_type;$/;"	t	struct:websocketpp::config::asio
endpoint_msg_manager_type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^    typedef base::endpoint_msg_manager_type endpoint_msg_manager_type;$/;"	t	struct:websocketpp::config::asio_client
endpoint_msg_manager_type	NFD/websocketpp/websocketpp/config/core.hpp	/^        endpoint_msg_manager_type;$/;"	t	struct:websocketpp::config::core
endpoint_msg_manager_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        endpoint_msg_manager_type;$/;"	t	struct:websocketpp::config::core_client
endpoint_msg_manager_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^        endpoint_msg_manager_type;$/;"	t	struct:websocketpp::config::debug_core
endpoint_msg_manager_type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^    typedef base::endpoint_msg_manager_type endpoint_msg_manager_type;$/;"	t	struct:websocketpp::config::debug_asio_tls
endpoint_msg_manager_type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^    typedef base::endpoint_msg_manager_type endpoint_msg_manager_type;$/;"	t	struct:websocketpp::config::debug_asio
endpoint_msg_manager_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        endpoint_msg_manager_type;$/;"	t	struct:websocketpp::config::minimal_server
endpoint_not_secure	NFD/websocketpp/websocketpp/error.hpp	/^    endpoint_not_secure,$/;"	e	enum:websocketpp::error::value
endpoint_type	NFD/websocketpp/websocketpp/roles/client_endpoint.hpp	/^    typedef endpoint<connection_type,config> endpoint_type;$/;"	t	class:websocketpp::client
endpoint_type	NFD/websocketpp/websocketpp/roles/server_endpoint.hpp	/^    typedef endpoint<connection_type,config> endpoint_type;$/;"	t	class:websocketpp::server
endpoint_unavailable	NFD/websocketpp/websocketpp/error.hpp	/^    endpoint_unavailable,$/;"	e	enum:websocketpp::error::value
ensureTablesAreConfigured	NFD/daemon/mgmt/tables-config-section.cpp	/^TablesConfigSection::ensureTablesAreConfigured()$/;"	f	class:nfd::TablesConfigSection
entry	model/cs/content-store-impl.hpp	/^  typedef EntryImpl<ContentStoreImpl<Policy>> entry;$/;"	t	class:ns3::ndn::cs::ContentStoreImpl
entry	ndn-cxx/src/util/in-memory-storage-lfu.hpp	/^    InMemoryStorageEntry* entry;$/;"	m	struct:ndn::util::InMemoryStorageLfu::CleanupEntry
entryHasPrefix	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^  entryHasPrefix(const shared_ptr<fib::Entry> entry, const Name& prefix)$/;"	f	class:nfd::tests::FibEnumerationPublisherFixture
eof	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    eof,$/;"	e	enum:websocketpp::transport::error::value
eof	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    void eof() {$/;"	f	class:websocketpp::transport::iostream::connection
equal	ndn-cxx/src/encoding/oid.cpp	/^OID::equal(const OID& oid) const$/;"	f	class:ndn::OID
equals	ndn-cxx/src/name-component.hpp	/^  equals(const Component& other) const$/;"	f	class:ndn::name::Component
equals	ndn-cxx/src/name.cpp	/^Name::equals(const Name& name) const$/;"	f	class:ndn::Name
erase	NFD/daemon/table/cs.hpp	/^  erase(const Name& exactName)$/;"	f	class:nfd::cs::Cs
erase	NFD/daemon/table/fib.cpp	/^Fib::erase(const Name& prefix)$/;"	f	class:nfd::Fib
erase	NFD/daemon/table/fib.cpp	/^Fib::erase(const fib::Entry& entry)$/;"	f	class:nfd::Fib
erase	NFD/daemon/table/fib.cpp	/^Fib::erase(shared_ptr<name_tree::Entry> nameTreeEntry)$/;"	f	class:nfd::Fib
erase	NFD/daemon/table/pit.cpp	/^Pit::erase(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::Pit
erase	NFD/daemon/table/strategy-choice.cpp	/^StrategyChoice::erase(const Name& prefix)$/;"	f	class:nfd::StrategyChoice
erase	NFD/rib/rib.cpp	/^Rib::erase(const Name& prefix, const Route& route)$/;"	f	class:nfd::rib::Rib
erase	model/cs/custom-policies/freshness-policy.hpp	/^      erase(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::freshness_policy_traits::policy::type
erase	model/cs/custom-policies/lifetime-stats-policy.hpp	/^      erase(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy::type
erase	model/cs/custom-policies/probability-policy.hpp	/^      erase(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
erase	ndn-cxx/src/detail/container-with-on-empty-signal.hpp	/^  erase(iterator item)$/;"	f	class:ndn::ContainerWithOnEmptySignal
erase	ndn-cxx/src/encoding/block.cpp	/^Block::erase(Block::element_const_iterator first, Block::element_const_iterator last)$/;"	f	class:ndn::Block
erase	ndn-cxx/src/encoding/block.cpp	/^Block::erase(Block::element_const_iterator position)$/;"	f	class:ndn::Block
erase	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::erase(const Name& prefix, const bool isPrefix)$/;"	f	class:ndn::util::InMemoryStorage
erase	utils/trie/aggregate-stats-policy.hpp	/^      erase(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
erase	utils/trie/counting-policy.hpp	/^      erase(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::counting_policy_traits::policy::type
erase	utils/trie/detail/multi-policy-container.hpp	/^  erase(typename Base::iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::detail::empty_policy_wrap
erase	utils/trie/detail/multi-policy-container.hpp	/^  erase(typename Base::iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::detail::inherit_with_base
erase	utils/trie/empty-policy.hpp	/^      erase(typename Container::iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::empty_policy_traits::policy::type
erase	utils/trie/fifo-policy.hpp	/^      erase(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::fifo_policy_traits::policy::type
erase	utils/trie/lfu-policy.hpp	/^      erase(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::lfu_policy_traits::policy::type
erase	utils/trie/lru-policy.hpp	/^      erase(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::lru_policy_traits::policy::type
erase	utils/trie/multi-policy.hpp	/^      erase(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::multi_policy_traits::policy::type
erase	utils/trie/payload-policy.hpp	/^      erase(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::payload_policy_traits::policy::type
erase	utils/trie/persistent-policy.hpp	/^      erase(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::persistent_policy_traits::policy::type
erase	utils/trie/random-policy.hpp	/^      erase(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::random_policy_traits::policy::type
erase	utils/trie/trie-with-policy.hpp	/^  erase(const FullKey& key)$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
erase	utils/trie/trie-with-policy.hpp	/^  erase(iterator node)$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
erase	utils/trie/trie.hpp	/^  erase()$/;"	f	class:ns3::ndn::ndnSIM::trie
eraseEntry	NFD/rib/rib.cpp	/^Rib::eraseEntry(RibTable::iterator it)$/;"	f	class:nfd::rib::Rib
eraseEntryIfEmpty	NFD/daemon/table/name-tree.cpp	/^NameTree::eraseEntryIfEmpty(shared_ptr<name_tree::Entry> entry)$/;"	f	class:nfd::NameTree
eraseEntryWithIdentity	NFD/tests/rib/remote-registrator.t.cpp	/^  eraseEntryWithIdentity(Name identity,$/;"	f	class:nfd::rib::tests::RemoteRegistratorFixture
eraseEntryWithoutIdentity	NFD/tests/rib/remote-registrator.t.cpp	/^  eraseEntryWithoutIdentity(Name identity,$/;"	f	class:nfd::rib::tests::RemoteRegistratorFixture
eraseFace	NFD/tests/rib/remote-registrator.t.cpp	/^  eraseFace(uint64_t faceId)$/;"	f	class:nfd::rib::tests::RemoteRegistratorFixture
eraseImpl	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::eraseImpl(const Name& name)$/;"	f	class:ndn::util::InMemoryStorage
erasePitEntry	NFD/daemon/table/name-tree-entry.cpp	/^Entry::erasePitEntry(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::name_tree::Entry
eraseRoute	NFD/rib/rib-entry.cpp	/^RibEntry::eraseRoute(RouteList::iterator route)$/;"	f	class:nfd::rib::RibEntry
eraseRoute	NFD/rib/rib-entry.cpp	/^RibEntry::eraseRoute(const Route& route)$/;"	f	class:nfd::rib::RibEntry
eraseRoute	NFD/tests/rib/fib-updates-common.hpp	/^  eraseRoute(const Name& name, uint64_t faceId, uint64_t origin)$/;"	f	class:nfd::rib::tests::FibUpdatesFixture
err_str_pair	NFD/websocketpp/websocketpp/error.hpp	/^typedef std::pair<lib::error_code,std::string> err_str_pair;$/;"	t	namespace:websocketpp
err_str_pair	NFD/websocketpp/websocketpp/extensions/permessage_deflate/disabled.hpp	/^    typedef std::pair<lib::error_code,std::string> err_str_pair;$/;"	t	class:websocketpp::extensions::permessage_deflate::disabled
err_str_pair	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    typedef std::pair<lib::error_code,std::string> err_str_pair;$/;"	t	class:websocketpp::processor::hybi13
err_str_pair	NFD/websocketpp/websocketpp/processors/processor.hpp	/^    typedef std::pair<lib::error_code,std::string> err_str_pair;$/;"	t	class:websocketpp::processor::processor
error	NFD/websocketpp/websocketpp/error.hpp	/^namespace error {$/;"	n	namespace:websocketpp
error	NFD/websocketpp/websocketpp/extensions/extension.hpp	/^namespace error {$/;"	n	namespace:websocketpp::extensions
error	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^namespace error {$/;"	n	namespace:websocketpp::extensions::permessage_deflate
error	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static value const error = 2;$/;"	m	struct:websocketpp::log::channel_type_hint
error	NFD/websocketpp/websocketpp/processors/base.hpp	/^namespace error {$/;"	n	namespace:websocketpp::processor
error	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^namespace error {$/;"	n	namespace:websocketpp::transport::asio
error	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^namespace error {$/;"	n	namespace:websocketpp::transport::asio::socket
error	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^namespace error {$/;"	n	namespace:websocketpp::transport
error	NFD/websocketpp/websocketpp/transport/debug/base.hpp	/^namespace error {$/;"	n	namespace:websocketpp::transport::debug
error	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^namespace error {$/;"	n	namespace:websocketpp::transport::iostream
error	NFD/websocketpp/websocketpp/transport/stub/base.hpp	/^namespace error {$/;"	n	namespace:websocketpp::transport::stub
error_cat	NFD/websocketpp/websocketpp/processors/base.hpp	/^namespace error_cat {$/;"	n	namespace:websocketpp::processor
escapeSpecialCharacters	NFD/tools/nfd-status.cpp	/^  escapeSpecialCharacters(std::string *data)$/;"	f	class:ndn::NfdStatus
esp	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^    websocketpp::err_str_pair esp;$/;"	m	struct:ext_vars	file:
estimateOverhead	NFD/daemon/face/ndnlp-slicer.cpp	/^Slicer::estimateOverhead()$/;"	f	class:nfd::ndnlp::Slicer
estimator	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^  EncodingEstimator estimator;$/;"	m	class:ndn::tests::BasicBlockFixture	file:
etherAddress	NFD/core/network-interface.hpp	/^  ethernet::Address etherAddress;$/;"	m	class:nfd::NetworkInterfaceInfo
ethernet	ndn-cxx/src/util/ethernet.cpp	/^namespace ethernet {$/;"	n	namespace:ndn::util	file:
ethernet	ndn-cxx/src/util/ethernet.hpp	/^namespace ethernet {$/;"	n	namespace:ndn::util
event	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^  event()$/;"	f	struct:ndn::util::scheduler::tests::CancelAllFixture
event1	NFD/tests/core/scheduler.t.cpp	/^  event1()$/;"	f	class:nfd::tests::SchedulerFixture
event2	NFD/tests/core/scheduler.t.cpp	/^  event2()$/;"	f	class:nfd::tests::SchedulerFixture
event3	NFD/tests/core/scheduler.t.cpp	/^  event3()$/;"	f	class:nfd::tests::SchedulerFixture
evictEntries	NFD/daemon/table/cs-policy-lru.cpp	/^LruPolicy::evictEntries()$/;"	f	class:nfd::cs::lru::LruPolicy
evictEntries	NFD/daemon/table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::evictEntries()$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
evictEntries	NFD/daemon/table/dead-nonce-list.cpp	/^DeadNonceList::evictEntries()$/;"	f	class:nfd::DeadNonceList
evictItem	ndn-cxx/src/util/in-memory-storage-fifo.cpp	/^InMemoryStorageFifo::evictItem()$/;"	f	class:ndn::util::InMemoryStorageFifo
evictItem	ndn-cxx/src/util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::evictItem()$/;"	f	class:ndn::util::InMemoryStorageLfu
evictItem	ndn-cxx/src/util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::evictItem()$/;"	f	class:ndn::util::InMemoryStorageLru
evictItem	ndn-cxx/src/util/in-memory-storage-persistent.cpp	/^InMemoryStoragePersistent::evictItem()$/;"	f	class:ndn::util::InMemoryStoragePersistent
evictOne	NFD/daemon/table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::evictOne()$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
examples	ndn-cxx/examples/consumer-with-timer.cpp	/^namespace examples {$/;"	n	namespace:ndn	file:
examples	ndn-cxx/examples/consumer.cpp	/^namespace examples {$/;"	n	namespace:ndn	file:
examples	ndn-cxx/examples/producer.cpp	/^namespace examples {$/;"	n	namespace:ndn	file:
exception	NFD/websocketpp/websocketpp/error.hpp	/^    exception(std::string const & msg, lib::error_code ec = make_error_code(error::general))$/;"	f	class:websocketpp::exception
exception	NFD/websocketpp/websocketpp/error.hpp	/^    explicit exception(lib::error_code ec)$/;"	f	class:websocketpp::exception
exception	NFD/websocketpp/websocketpp/error.hpp	/^class exception : public std::exception {$/;"	c	namespace:websocketpp
exception	NFD/websocketpp/websocketpp/http/constants.hpp	/^        exception(const std::string& log_msg,$/;"	f	class:websocketpp::http::exception
exception	NFD/websocketpp/websocketpp/http/constants.hpp	/^    class exception : public std::exception {$/;"	c	namespace:websocketpp::http
excludeAfter	ndn-cxx/src/exclude.cpp	/^Exclude::excludeAfter(const name::Component& from)$/;"	f	class:ndn::Exclude
excludeBefore	ndn-cxx/src/exclude.hpp	/^Exclude::excludeBefore(const name::Component& to)$/;"	f	class:ndn::Exclude
excludeOne	ndn-cxx/src/exclude.cpp	/^Exclude::excludeOne(const name::Component& comp)$/;"	f	class:ndn::Exclude
excludeRange	ndn-cxx/src/exclude.cpp	/^Exclude::excludeRange(const name::Component& from, const name::Component& to)$/;"	f	class:ndn::Exclude
exclude_type	ndn-cxx/src/exclude.hpp	/^  typedef std::map< name::Component, bool \/*any*\/, std::greater<name::Component> > exclude_type;$/;"	t	class:ndn::Exclude
expand	ndn-cxx/src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::expand(const std::string& expandStr)$/;"	f	class:ndn::RegexTopMatcher
expect	NFD/tests/daemon/table/name-tree.t.cpp	/^  expect(const Name& name)$/;"	f	class:nfd::tests::EnumerationVerifier
expectation_failed	NFD/websocketpp/websocketpp/http/constants.hpp	/^            expectation_failed = 417,$/;"	e	enum:websocketpp::http::status_code::value
expireEvent	NFD/daemon/face/ethernet-face.hpp	/^    scheduler::EventId expireEvent;$/;"	m	struct:nfd::EthernetFace::Reassembler
expire_timer	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    void expire_timer(lib::error_code const & ec) {$/;"	f	class:websocketpp::transport::debug::connection
expires	NFD/rib/route.hpp	/^  time::steady_clock::TimePoint expires;$/;"	m	class:nfd::rib::Route
expiresFromNow	ndn-cxx/src/util/scheduler.cpp	/^Scheduler::EventInfo::expiresFromNow() const$/;"	f	class:ndn::util::scheduler::Scheduler::EventInfo
expiry	NFD/daemon/face/ndnlp-partial-message-store.hpp	/^  scheduler::ScopedEventId expiry;$/;"	m	class:nfd::ndnlp::PartialMessage
exportIdentity	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::exportIdentity(const Name& identity, const std::string& passwordStr)$/;"	f	class:ndn::security::KeyChain
exportPrivateKeyPkcs5FromTpm	ndn-cxx/src/security/key-chain.hpp	/^  exportPrivateKeyPkcs5FromTpm(const Name& keyName, const std::string& password)$/;"	f	class:ndn::security::KeyChain
exportPrivateKeyPkcs5FromTpm	ndn-cxx/src/security/sec-tpm.cpp	/^SecTpm::exportPrivateKeyPkcs5FromTpm(const Name& keyName, const string& passwordStr)$/;"	f	class:ndn::SecTpm
exportPrivateKeyPkcs8FromTpm	ndn-cxx/src/security/sec-tpm-file.cpp	/^SecTpmFile::exportPrivateKeyPkcs8FromTpm(const Name& keyName)$/;"	f	class:ndn::SecTpmFile
exportPrivateKeyPkcs8FromTpm	ndn-cxx/src/security/sec-tpm-osx.hpp	/^  exportPrivateKeyPkcs8FromTpm(const Name& keyName)$/;"	f	class:ndn::SecTpmOsx
exportPrivateKeyPkcs8FromTpm	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::exportPrivateKeyPkcs8FromTpm(const Name& keyName)$/;"	f	class:ndn::security::DummyTpm
exportPrivateKeyPkcs8FromTpm	utils/dummy-keychain.cpp	/^DummyTpm::exportPrivateKeyPkcs8FromTpm(const Name& keyName)$/;"	f	class:ndn::security::DummyTpm
exportPrivateKeyPkcs8FromTpmInternal	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::exportPrivateKeyPkcs8FromTpmInternal(const Name& keyName, bool needRetry)$/;"	f	class:ndn::SecTpmOsx
expressInterest	ndn-cxx/src/face.cpp	/^Face::expressInterest(const Interest& interest, const OnData& onData, const OnTimeout& onTimeout)$/;"	f	class:ndn::Face
expressInterest	ndn-cxx/src/face.cpp	/^Face::expressInterest(const Name& name,$/;"	f	class:ndn::Face
expressInterest	ndn-cxx/tests/integrated/face.cpp	/^  expressInterest(Face& face, const Name& name)$/;"	f	class:ndn::tests::FacesFixture
expressNextInterest	tests/unit-tests/ndn-cxx/face.t.cpp	/^  expressNextInterest(const Name& name, uint32_t seqNo, const NameCallback& onData, const VoidCallback& onTimeout)$/;"	f	class:ns3::ndn::MultipleInterest	file:
ext_vars	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^struct ext_vars {$/;"	s	file:
extc	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^    enabled_type extc;$/;"	m	struct:ext_vars	file:
extendLifetime	NFD/daemon/table/measurements-accessor.hpp	/^MeasurementsAccessor::extendLifetime(measurements::Entry& entry,$/;"	f	class:nfd::MeasurementsAccessor
extendLifetime	NFD/daemon/table/measurements.cpp	/^Measurements::extendLifetime(Entry& entry,$/;"	f	class:nfd::Measurements
extended_header	NFD/websocketpp/websocketpp/frame.hpp	/^    extended_header() {$/;"	f	struct:websocketpp::frame::extended_header
extended_header	NFD/websocketpp/websocketpp/frame.hpp	/^    extended_header(uint64_t payload_size) {$/;"	f	struct:websocketpp::frame::extended_header
extended_header	NFD/websocketpp/websocketpp/frame.hpp	/^    extended_header(uint64_t payload_size, uint32_t masking_key) {$/;"	f	struct:websocketpp::frame::extended_header
extended_header	NFD/websocketpp/websocketpp/frame.hpp	/^struct extended_header {$/;"	s	namespace:websocketpp::frame
extension_method	NFD/websocketpp/test/connection/connection.cpp	/^    int extension_method() {$/;"	f	struct:connection_extension
extension_method	NFD/websocketpp/test/endpoint/endpoint.cpp	/^    int extension_method() {$/;"	f	struct:endpoint_extension
extension_parse_error	NFD/websocketpp/websocketpp/processors/base.hpp	/^    extension_parse_error,$/;"	e	enum:websocketpp::processor::error::processor_errors
extension_required	NFD/websocketpp/websocketpp/close.hpp	/^    static value const extension_required = 1010;$/;"	m	namespace:websocketpp::close::status
extension_value	NFD/websocketpp/test/connection/connection.cpp	/^    int extension_value;$/;"	m	struct:connection_extension	file:
extension_value	NFD/websocketpp/test/endpoint/endpoint.cpp	/^    int extension_value;$/;"	m	struct:endpoint_extension	file:
extensions	NFD/websocketpp/websocketpp/extensions/extension.hpp	/^namespace extensions {$/;"	n	namespace:websocketpp
extensions	NFD/websocketpp/websocketpp/extensions/permessage_deflate/disabled.hpp	/^namespace extensions {$/;"	n	namespace:websocketpp
extensions	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^namespace extensions {$/;"	n	namespace:websocketpp
extensions_disabled	NFD/websocketpp/websocketpp/processors/base.hpp	/^    extensions_disabled,$/;"	e	enum:websocketpp::processor::error::processor_errors
extractComponent	ndn-cxx/src/util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::extractComponent(size_t index)$/;"	f	class:ndn::RegexComponentSetMatcher
extractLocalControlParameters	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::extractLocalControlParameters(const Interest& request,$/;"	f	class:nfd::FaceManager
extractParameters	NFD/daemon/mgmt/manager-base.cpp	/^ManagerBase::extractParameters(const Name::Component& parameterComponent,$/;"	f	class:nfd::ManagerBase
extractParameters	NFD/rib/rib-manager.cpp	/^RibManager::extractParameters(const Name::Component& parameterComponent,$/;"	f	class:nfd::rib::RibManager
extractParameters	NFD/tests/rib/remote-registrator.t.cpp	/^  extractParameters(Interest& interest, Name::Component& verb,$/;"	f	class:nfd::rib::tests::RemoteRegistratorFixture
extractParameters	NFD/tests/rib/rib-manager.t.cpp	/^  extractParameters(Interest& interest, Name::Component& verb,$/;"	f	class:nfd::rib::tests::RibManagerFixture
extractPattern	ndn-cxx/src/util/regex/regex-pattern-list-matcher.hpp	/^RegexPatternListMatcher::extractPattern(size_t index, size_t* next)$/;"	f	class:ndn::RegexPatternListMatcher
extractRepetition	ndn-cxx/src/util/regex/regex-pattern-list-matcher.hpp	/^RegexPatternListMatcher::extractRepetition(size_t index)$/;"	f	class:ndn::RegexPatternListMatcher
extractSubPattern	ndn-cxx/src/util/regex/regex-pattern-list-matcher.hpp	/^RegexPatternListMatcher::extractSubPattern(const char left, const char right, size_t index)$/;"	f	class:ndn::RegexPatternListMatcher
extract_all_lws	NFD/websocketpp/websocketpp/http/parser.hpp	/^InputIterator extract_all_lws(InputIterator begin, InputIterator end) {$/;"	f	namespace:websocketpp::http::parser
extract_attributes	NFD/websocketpp/websocketpp/http/parser.hpp	/^InputIterator extract_attributes(InputIterator begin, InputIterator end,$/;"	f	namespace:websocketpp::http::parser
extract_code	NFD/websocketpp/websocketpp/close.hpp	/^inline status::value extract_code(std::string const & payload, lib::error_code$/;"	f	namespace:websocketpp::close
extract_lws	NFD/websocketpp/websocketpp/http/parser.hpp	/^InputIterator extract_lws(InputIterator begin, InputIterator end) {$/;"	f	namespace:websocketpp::http::parser
extract_parameters	NFD/websocketpp/websocketpp/http/parser.hpp	/^InputIterator extract_parameters(InputIterator begin, InputIterator end,$/;"	f	namespace:websocketpp::http::parser
extract_quoted_string	NFD/websocketpp/websocketpp/http/parser.hpp	/^std::pair<std::string,InputIterator> extract_quoted_string(InputIterator begin,$/;"	f	namespace:websocketpp::http::parser
extract_reason	NFD/websocketpp/websocketpp/close.hpp	/^inline std::string extract_reason(std::string const & payload, lib::error_code$/;"	f	namespace:websocketpp::close
extract_subprotocols	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    lib::error_code extract_subprotocols(request_type const &, $/;"	f	class:websocketpp::processor::hybi00
extract_subprotocols	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    lib::error_code extract_subprotocols(request_type const & req,$/;"	f	class:websocketpp::processor::hybi13
extract_token	NFD/websocketpp/websocketpp/http/parser.hpp	/^std::pair<std::string,InputIterator> extract_token(InputIterator begin,$/;"	f	namespace:websocketpp::http::parser
exts	NFD/websocketpp/test/extension/permessage_deflate.cpp	/^    enabled_type exts;$/;"	m	struct:ext_vars	file:
f0	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^EventEmitterTester::f0()$/;"	f	class:ndn::util::tests::EventEmitterTester
f1	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^EventEmitterTester::f1(int a1)$/;"	f	class:ndn::util::tests::EventEmitterTester
f2	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^EventEmitterTester::f2(int a1, int a2)$/;"	f	class:ndn::util::tests::EventEmitterTester
f3	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^EventEmitterTester::f3(int a1, int a2, int a3)$/;"	f	class:ndn::util::tests::EventEmitterTester
f4	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^EventEmitterTester::f4(int a1, int a2, int a3, int a4)$/;"	f	class:ndn::util::tests::EventEmitterTester
face	NFD/tests/daemon/fw/topology-tester.hpp	/^    shared_ptr<DummyFace> face;$/;"	m	struct:nfd::fw::tests::TopologyLink::LinkFace
face	NFD/tests/rib/fib-updates-common.hpp	/^  shared_ptr<ndn::util::DummyClientFace> face;$/;"	m	class:nfd::rib::tests::FibUpdatesFixture
face	NFD/tests/rib/remote-registrator.t.cpp	/^  shared_ptr<ndn::util::DummyClientFace> face;$/;"	m	class:nfd::rib::tests::RemoteRegistratorFixture	file:
face	NFD/tests/rib/rib-manager.t.cpp	/^  shared_ptr<ndn::util::DummyClientFace> face;$/;"	m	class:nfd::rib::tests::RibManagerFixture	file:
face	ndn-cxx/tests/unit-tests/face.t.cpp	/^  shared_ptr<DummyClientFace> face;$/;"	m	class:ndn::tests::FaceFixture	file:
face	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^  shared_ptr<DummyClientFace> face;$/;"	m	class:ndn::nfd::tests::CommandFixture	file:
face	ndn-cxx/tests/unit-tests/mgmt/dispatcher.t.cpp	/^  shared_ptr<util::DummyClientFace> face;$/;"	m	class:ndn::mgmt::tests::DispatcherFixture	file:
face	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  shared_ptr<util::DummyClientFace> face;$/;"	m	struct:ndn::tests::DirTestFixture	file:
face	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^  shared_ptr<DummyClientFace> face;$/;"	m	class:ndn::util::tests::Fixture	file:
face1	NFD/tests/daemon/face/tcp.t.cpp	/^  shared_ptr<Face> face1;$/;"	m	class:nfd::tests::EndToEndFixture	file:
face1	NFD/tests/daemon/face/tcp.t.cpp	/^  shared_ptr<Face> face1;$/;"	m	class:nfd::tests::FaceCreateTimeoutFixture	file:
face1	NFD/tests/daemon/face/unix-stream.t.cpp	/^  shared_ptr<UnixStreamFace> face1;$/;"	m	class:nfd::tests::EndToEndFixture	file:
face1	NFD/tests/daemon/face/websocket.t.cpp	/^  shared_ptr<Face> face1;$/;"	m	class:nfd::tests::EndToEndFixture	file:
face1	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  shared_ptr<util::DummyClientFace> face1;$/;"	m	struct:ndn::tests::FacesFixture	file:
face1_onFail	NFD/tests/daemon/face/tcp.t.cpp	/^  face1_onFail()$/;"	f	class:nfd::tests::EndToEndFixture
face1_onFail	NFD/tests/daemon/face/websocket.t.cpp	/^  face1_onFail()$/;"	f	class:nfd::tests::EndToEndFixture
face1_onReceiveData	NFD/tests/daemon/face/tcp.t.cpp	/^  face1_onReceiveData(const Data& data)$/;"	f	class:nfd::tests::EndToEndFixture
face1_onReceiveData	NFD/tests/daemon/face/unix-stream.t.cpp	/^  face1_onReceiveData(const Data& data)$/;"	f	class:nfd::tests::EndToEndFixture
face1_onReceiveData	NFD/tests/daemon/face/websocket.t.cpp	/^  face1_onReceiveData(const Data& data)$/;"	f	class:nfd::tests::EndToEndFixture
face1_onReceiveInterest	NFD/tests/daemon/face/tcp.t.cpp	/^  face1_onReceiveInterest(const Interest& interest)$/;"	f	class:nfd::tests::EndToEndFixture
face1_onReceiveInterest	NFD/tests/daemon/face/unix-stream.t.cpp	/^  face1_onReceiveInterest(const Interest& interest)$/;"	f	class:nfd::tests::EndToEndFixture
face1_onReceiveInterest	NFD/tests/daemon/face/websocket.t.cpp	/^  face1_onReceiveInterest(const Interest& interest)$/;"	f	class:nfd::tests::EndToEndFixture
face1_receivedDatas	NFD/tests/daemon/face/tcp.t.cpp	/^  std::vector<Data> face1_receivedDatas;$/;"	m	class:nfd::tests::EndToEndFixture	file:
face1_receivedDatas	NFD/tests/daemon/face/unix-stream.t.cpp	/^  std::vector<Data> face1_receivedDatas;$/;"	m	class:nfd::tests::EndToEndFixture	file:
face1_receivedDatas	NFD/tests/daemon/face/websocket.t.cpp	/^  std::vector<Data> face1_receivedDatas;$/;"	m	class:nfd::tests::EndToEndFixture	file:
face1_receivedInterests	NFD/tests/daemon/face/tcp.t.cpp	/^  std::vector<Interest> face1_receivedInterests;$/;"	m	class:nfd::tests::EndToEndFixture	file:
face1_receivedInterests	NFD/tests/daemon/face/unix-stream.t.cpp	/^  std::vector<Interest> face1_receivedInterests;$/;"	m	class:nfd::tests::EndToEndFixture	file:
face1_receivedInterests	NFD/tests/daemon/face/websocket.t.cpp	/^  std::vector<Interest> face1_receivedInterests;$/;"	m	class:nfd::tests::EndToEndFixture	file:
face2	NFD/tests/daemon/face/tcp.t.cpp	/^  shared_ptr<Face> face2;$/;"	m	class:nfd::tests::EndToEndFixture	file:
face2	NFD/tests/daemon/face/unix-stream.t.cpp	/^  shared_ptr<UnixStreamFace> face2;$/;"	m	class:nfd::tests::EndToEndFixture	file:
face2	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  shared_ptr<util::DummyClientFace> face2;$/;"	m	struct:ndn::tests::FacesFixture	file:
face2_onFail	NFD/tests/daemon/face/tcp.t.cpp	/^  face2_onFail()$/;"	f	class:nfd::tests::EndToEndFixture
face2_onReceiveData	NFD/tests/daemon/face/tcp.t.cpp	/^  face2_onReceiveData(const Data& data)$/;"	f	class:nfd::tests::EndToEndFixture
face2_onReceiveData	NFD/tests/daemon/face/unix-stream.t.cpp	/^  face2_onReceiveData(const Data& data)$/;"	f	class:nfd::tests::EndToEndFixture
face2_onReceiveInterest	NFD/tests/daemon/face/tcp.t.cpp	/^  face2_onReceiveInterest(const Interest& interest)$/;"	f	class:nfd::tests::EndToEndFixture
face2_onReceiveInterest	NFD/tests/daemon/face/unix-stream.t.cpp	/^  face2_onReceiveInterest(const Interest& interest)$/;"	f	class:nfd::tests::EndToEndFixture
face2_receivedDatas	NFD/tests/daemon/face/tcp.t.cpp	/^  std::vector<Data> face2_receivedDatas;$/;"	m	class:nfd::tests::EndToEndFixture	file:
face2_receivedDatas	NFD/tests/daemon/face/unix-stream.t.cpp	/^  std::vector<Data> face2_receivedDatas;$/;"	m	class:nfd::tests::EndToEndFixture	file:
face2_receivedInterests	NFD/tests/daemon/face/tcp.t.cpp	/^  std::vector<Interest> face2_receivedInterests;$/;"	m	class:nfd::tests::EndToEndFixture	file:
face2_receivedInterests	NFD/tests/daemon/face/unix-stream.t.cpp	/^  std::vector<Interest> face2_receivedInterests;$/;"	m	class:nfd::tests::EndToEndFixture	file:
faceCreate	NFD/tools/nfdc.cpp	/^Nfdc::faceCreate()$/;"	f	class:nfdc::Nfdc
faceDestroy	NFD/tools/nfdc.cpp	/^Nfdc::faceDestroy()$/;"	f	class:nfdc::Nfdc
faceId	NFD/rib/fib-update.hpp	/^  uint64_t faceId;$/;"	m	class:nfd::rib::FibUpdate
faceId	NFD/rib/route.hpp	/^  uint64_t faceId;$/;"	m	class:nfd::rib::Route
faces	NFD/tests/daemon/face/tcp.t.cpp	/^  std::list<shared_ptr<Face>> faces;$/;"	m	class:nfd::tests::EndToEndFixture	file:
faces	NFD/tests/daemon/face/unix-stream.t.cpp	/^  std::list<shared_ptr<UnixStreamFace>> faces;$/;"	m	class:nfd::tests::EndToEndFixture	file:
fail	NFD/daemon/face/face.cpp	/^Face::fail(const std::string& reason)$/;"	f	class:nfd::Face
fail	NFD/tests/daemon/fw/topology-tester.hpp	/^  fail()$/;"	f	class:nfd::fw::tests::TopologyLinkBase
fail	NFD/tools/nfdc.cpp	/^Nfdc::FaceIdFetcher::fail(const std::string& reason)$/;"	f	class:nfdc::Nfdc::FaceIdFetcher
fail	NFD/websocketpp/websocketpp/connection.hpp	/^namespace fail {$/;"	n	namespace:websocketpp::session
fail	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const fail = 0x2000;$/;"	m	struct:websocketpp::log::alevel
failCount	NFD/tests/daemon/face/face.t.cpp	/^  int failCount;$/;"	m	class:nfd::tests::FaceFailTestFace	file:
failHandler	NFD/tests/daemon/face/face.t.cpp	/^  failHandler(const std::string& reason)$/;"	f	class:nfd::tests::FaceFailTestFace	file:
failIfError	NFD/tests/daemon/face/tcp.t.cpp	/^  failIfError(const std::string& errorActual)$/;"	f	class:nfd::tests::FaceCreateFixture
failIfError	NFD/tests/daemon/face/udp.t.cpp	/^  failIfError(const std::string& errorActual)$/;"	f	class:nfd::tests::FaceCreateFixture
failOnce	NFD/tests/daemon/face/face.t.cpp	/^  failOnce()$/;"	f	class:nfd::tests::FaceFailTestFace
failValidation	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^failValidation(const Data& data)$/;"	f	namespace:ndn::util::tests
fail_handler	NFD/websocketpp/websocketpp/connection.hpp	/^typedef lib::function<void(connection_hdl)> fail_handler;$/;"	t	namespace:websocketpp
fail_on_http	NFD/websocketpp/test/connection/connection.cpp	/^void fail_on_http(websocketpp::connection_hdl) {$/;"	f
fail_on_open	NFD/websocketpp/test/connection/connection.cpp	/^void fail_on_open(websocketpp::connection_hdl) {$/;"	f
fail_on_open	NFD/websocketpp/test/transport/integration.cpp	/^void fail_on_open(websocketpp::connection_hdl) {$/;"	f
fail_on_pong	NFD/websocketpp/test/transport/integration.cpp	/^void fail_on_pong(websocketpp::connection_hdl, std::string) {$/;"	f
fail_on_pong_timeout	NFD/websocketpp/test/transport/integration.cpp	/^void fail_on_pong_timeout(websocketpp::connection_hdl, std::string) {$/;"	f
failed	NFD/websocketpp/websocketpp/connection.hpp	/^        failed = 1,$/;"	e	enum:websocketpp::connection::terminate_status
failures	NFD/tests/daemon/face/face-history.hpp	/^  std::vector<std::string> failures;$/;"	m	class:nfd::tests::FaceHistory
fake_lock_guard	NFD/websocketpp/websocketpp/concurrency/none.hpp	/^    explicit fake_lock_guard(fake_mutex) {}$/;"	f	class:websocketpp::concurrency::none_impl::fake_lock_guard
fake_lock_guard	NFD/websocketpp/websocketpp/concurrency/none.hpp	/^class fake_lock_guard {$/;"	c	namespace:websocketpp::concurrency::none_impl
fake_mutex	NFD/websocketpp/websocketpp/concurrency/none.hpp	/^    fake_mutex() {}$/;"	f	class:websocketpp::concurrency::none_impl::fake_mutex
fake_mutex	NFD/websocketpp/websocketpp/concurrency/none.hpp	/^class fake_mutex {$/;"	c	namespace:websocketpp::concurrency::none_impl
fatal	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const fatal = 0x20;$/;"	m	struct:websocketpp::log::elevel
fatal_error	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    void fatal_error() {$/;"	f	class:websocketpp::transport::iostream::connection
fetch	ndn-cxx/src/util/segment-fetcher.cpp	/^SegmentFetcher::fetch(Face& face,$/;"	f	class:ndn::util::SegmentFetcher
fetchActiveFaces	NFD/rib/rib-manager.cpp	/^RibManager::fetchActiveFaces()$/;"	f	class:nfd::rib::RibManager
fetchChannelStatusInformation	NFD/tools/nfd-status.cpp	/^  fetchChannelStatusInformation()$/;"	f	class:ndn::NfdStatus
fetchFaceStatusInformation	NFD/tools/nfd-status.cpp	/^  fetchFaceStatusInformation()$/;"	f	class:ndn::NfdStatus
fetchFaceStatusSegments	NFD/tools/nfd-autoreg.cpp	/^  fetchFaceStatusSegments(const Data& data, const shared_ptr<ndn::OBufferStream>& buffer)$/;"	f	class:ndn::nfd_autoreg::AutoregServer
fetchFibEnumerationInformation	NFD/tools/nfd-status.cpp	/^  fetchFibEnumerationInformation()$/;"	f	class:ndn::NfdStatus
fetchFirstSegment	ndn-cxx/src/util/segment-fetcher.cpp	/^SegmentFetcher::fetchFirstSegment(const Interest& baseInterest,$/;"	f	class:ndn::util::SegmentFetcher
fetchInformation	NFD/tools/nfd-status.cpp	/^  fetchInformation()$/;"	f	class:ndn::NfdStatus
fetchNextSegment	ndn-cxx/src/util/segment-fetcher.cpp	/^SegmentFetcher::fetchNextSegment(const Interest& origInterest, const Name& dataName,$/;"	f	class:ndn::util::SegmentFetcher
fetchRibStatusInformation	NFD/tools/nfd-status.cpp	/^  fetchRibStatusInformation()$/;"	f	class:ndn::NfdStatus
fetchSegments	NFD/rib/rib-manager.cpp	/^RibManager::fetchSegments(const Data& data, shared_ptr<ndn::OBufferStream> buffer)$/;"	f	class:nfd::rib::RibManager
fetchStrategyChoiceInformation	NFD/tools/nfd-status.cpp	/^  fetchStrategyChoiceInformation()$/;"	f	class:ndn::NfdStatus
fetchVersionInformation	NFD/tools/nfd-status.cpp	/^  fetchVersionInformation()$/;"	f	class:ndn::NfdStatus
fib	NFD/daemon/table/fib-entry.cpp	/^namespace fib {$/;"	n	namespace:nfd	file:
fib	NFD/daemon/table/fib-entry.hpp	/^namespace fib {$/;"	n	namespace:nfd
fib	NFD/daemon/table/fib-nexthop.cpp	/^namespace fib {$/;"	n	namespace:nfd	file:
fib	NFD/daemon/table/fib-nexthop.hpp	/^namespace fib {$/;"	n	namespace:nfd
fib	NFD/daemon/table/measurements.hpp	/^namespace fib {$/;"	n	namespace:nfd
fibAddNextHop	NFD/tools/nfdc.cpp	/^Nfdc::fibAddNextHop()$/;"	f	class:nfdc::Nfdc
fibRemoveNextHop	NFD/tools/nfdc.cpp	/^Nfdc::fibRemoveNextHop()$/;"	f	class:nfdc::Nfdc
fibUpdater	NFD/tests/rib/fib-updates-common.hpp	/^  rib::FibUpdater fibUpdater;$/;"	m	class:nfd::rib::tests::FibUpdatesFixture
fibUpdates	NFD/tests/rib/fib-updates-common.hpp	/^  FibUpdater::FibUpdateList fibUpdates;$/;"	m	class:nfd::rib::tests::FibUpdatesFixture
field_location_tags	ndn-cxx/src/lp/field.hpp	/^namespace field_location_tags {$/;"	n	namespace:ndn::lp
fifo_policy_traits	utils/trie/fifo-policy.hpp	/^struct fifo_policy_traits {$/;"	s	namespace:ns3::ndn::ndnSIM
filter	NFD/daemon/table/measurements-accessor.cpp	/^MeasurementsAccessor::filter(const shared_ptr<measurements::Entry>& entry) const$/;"	f	class:nfd::MeasurementsAccessor
filterAndEncodeLocalControlHeader	NFD/daemon/face/local-face.hpp	/^LocalFace::filterAndEncodeLocalControlHeader(const Packet& packet)$/;"	f	class:nfd::LocalFace
finalize	ndn-cxx/src/util/digest.cpp	/^Digest<Hash>::finalize()$/;"	f	class:ndn::util::Digest
finalizeUnregisterPrefix	ndn-cxx/src/detail/face-impl.hpp	/^  finalizeUnregisterPrefix(RegisteredPrefixTable::iterator item,$/;"	f	class:ndn::Face::Impl
find	NFD/daemon/table/cs.cpp	/^Cs::find(const Interest& interest,$/;"	f	class:nfd::cs::Cs
find	NFD/rib/rib.cpp	/^Rib::find(const Name& prefix) const$/;"	f	class:nfd::rib::Rib
find	NFD/rib/rib.cpp	/^Rib::find(const Name& prefix, const Route& route) const$/;"	f	class:nfd::rib::Rib
find	NFD/tests/daemon/table/cs.t.cpp	/^  find(const std::function<void(uint32_t)>& check)$/;"	f	class:nfd::cs::tests::FindFixture
find	NFD/tests/other/cs-benchmark.cpp	/^  find(const Interest& interest)$/;"	f	class:nfd::tests::CsBenchmarkFixture
find	ndn-cxx/src/encoding/block.cpp	/^Block::find(uint32_t type) const$/;"	f	class:ndn::Block
find	ndn-cxx/src/security/certificate-container.cpp	/^CertificateContainer::find(const Name& certName) const$/;"	f	class:ndn::security::CertificateContainer
find	ndn-cxx/src/security/identity-container.cpp	/^IdentityContainer::find(const Name& identity) const$/;"	f	class:ndn::security::IdentityContainer
find	ndn-cxx/src/security/key-container.cpp	/^KeyContainer::find(const name::Component& keyId) const$/;"	f	class:ndn::security::KeyContainer
find	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::find(const Interest& interest)$/;"	f	class:ndn::util::InMemoryStorage
find	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::find(const Name& name)$/;"	f	class:ndn::util::InMemoryStorage
find	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^  find()$/;"	f	class:ndn::util::FindFixture
find	utils/trie/trie.hpp	/^  find()$/;"	f	class:ns3::ndn::ndnSIM::trie
find	utils/trie/trie.hpp	/^  find(const FullKey& key)$/;"	f	class:ns3::ndn::ndnSIM::trie
findAllDataMatches	NFD/daemon/table/pit.cpp	/^Pit::findAllDataMatches(const Data& data) const$/;"	f	class:nfd::Pit
findAllMatches	NFD/daemon/table/name-tree.cpp	/^NameTree::findAllMatches(const Name& prefix,$/;"	f	class:nfd::NameTree
findAppMetaInfo	ndn-cxx/src/meta-info.cpp	/^MetaInfo::findAppMetaInfo(uint32_t tlvType) const$/;"	f	class:ndn::MetaInfo
findChannel	NFD/daemon/face/tcp-factory.cpp	/^TcpFactory::findChannel(const tcp::Endpoint& localEndpoint)$/;"	f	class:nfd::TcpFactory
findChannel	NFD/daemon/face/udp-factory.cpp	/^UdpFactory::findChannel(const udp::Endpoint& localEndpoint)$/;"	f	class:nfd::UdpFactory
findChannel	NFD/daemon/face/unix-stream-factory.cpp	/^UnixStreamFactory::findChannel(const unix_stream::Endpoint& endpoint)$/;"	f	class:nfd::UnixStreamFactory
findChannel	NFD/daemon/face/websocket-factory.cpp	/^WebSocketFactory::findChannel(const websocket::Endpoint& localEndpoint)$/;"	f	class:nfd::WebSocketFactory
findConfigFile	ndn-cxx/src/util/config-file.cpp	/^ConfigFile::findConfigFile()$/;"	f	class:ndn::ConfigFile
findDelegationFromWire	ndn-cxx/src/link.cpp	/^Link::findDelegationFromWire(const Block& block, const Name& delegationName)$/;"	f	class:ndn::Link
findDescendants	NFD/rib/rib.cpp	/^Rib::findDescendants(const Name& prefix) const$/;"	f	class:nfd::rib::Rib
findDescendantsForNonInsertedName	NFD/rib/rib.cpp	/^Rib::findDescendantsForNonInsertedName(const Name& prefix) const$/;"	f	class:nfd::rib::Rib
findEffectiveStrategy	NFD/daemon/table/strategy-choice.cpp	/^StrategyChoice::findEffectiveStrategy(const Name& prefix) const$/;"	f	class:nfd::StrategyChoice
findEffectiveStrategy	NFD/daemon/table/strategy-choice.cpp	/^StrategyChoice::findEffectiveStrategy(const measurements::Entry& measurementsEntry) const$/;"	f	class:nfd::StrategyChoice
findEffectiveStrategy	NFD/daemon/table/strategy-choice.cpp	/^StrategyChoice::findEffectiveStrategy(const pit::Entry& pitEntry) const$/;"	f	class:nfd::StrategyChoice
findEffectiveStrategy	NFD/daemon/table/strategy-choice.cpp	/^StrategyChoice::findEffectiveStrategy(shared_ptr<name_tree::Entry> nte) const$/;"	f	class:nfd::StrategyChoice
findEligibleNextHopWithEarliestOutRecord	NFD/daemon/fw/best-route-strategy2.cpp	/^findEligibleNextHopWithEarliestOutRecord(const shared_ptr<pit::Entry>& pitEntry,$/;"	f	namespace:nfd::fw
findExactMatch	NFD/daemon/table/fib.cpp	/^Fib::findExactMatch(const Name& prefix) const$/;"	f	class:nfd::Fib
findExactMatch	NFD/daemon/table/measurements-accessor.hpp	/^MeasurementsAccessor::findExactMatch(const Name& name) const$/;"	f	class:nfd::MeasurementsAccessor
findExactMatch	NFD/daemon/table/measurements.cpp	/^Measurements::findExactMatch(const Name& name) const$/;"	f	class:nfd::Measurements
findExactMatch	NFD/daemon/table/name-tree.cpp	/^NameTree::findExactMatch(const Name& prefix) const$/;"	f	class:nfd::NameTree
findFactory	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::findFactory(const std::string& protocol)$/;"	f	class:nfd::FaceManager
findIdentityForRegistration	NFD/rib/remote-registrator.cpp	/^RemoteRegistrator::findIdentityForRegistration(const Name& prefix)$/;"	f	class:nfd::rib::RemoteRegistrator
findInheritedRoute	NFD/rib/rib-entry.cpp	/^RibEntry::findInheritedRoute(const Route& route) const$/;"	f	class:nfd::rib::RibEntry
findLeftmost	NFD/daemon/table/cs.cpp	/^Cs::findLeftmost(const Interest& interest, iterator first, iterator last) const$/;"	f	class:nfd::cs::Cs
findLongestPrefixMatch	NFD/daemon/table/fib.cpp	/^Fib::findLongestPrefixMatch(const Name& prefix) const$/;"	f	class:nfd::Fib
findLongestPrefixMatch	NFD/daemon/table/fib.cpp	/^Fib::findLongestPrefixMatch(const measurements::Entry& measurementsEntry) const$/;"	f	class:nfd::Fib
findLongestPrefixMatch	NFD/daemon/table/fib.cpp	/^Fib::findLongestPrefixMatch(const pit::Entry& pitEntry) const$/;"	f	class:nfd::Fib
findLongestPrefixMatch	NFD/daemon/table/fib.cpp	/^Fib::findLongestPrefixMatch(shared_ptr<name_tree::Entry> nameTreeEntry) const$/;"	f	class:nfd::Fib
findLongestPrefixMatch	NFD/daemon/table/measurements-accessor.hpp	/^MeasurementsAccessor::findLongestPrefixMatch(const Name& name,$/;"	f	class:nfd::MeasurementsAccessor
findLongestPrefixMatch	NFD/daemon/table/measurements-accessor.hpp	/^MeasurementsAccessor::findLongestPrefixMatch(const pit::Entry& pitEntry,$/;"	f	class:nfd::MeasurementsAccessor
findLongestPrefixMatch	NFD/daemon/table/measurements.cpp	/^Measurements::findLongestPrefixMatch(const Name& name,$/;"	f	class:nfd::Measurements
findLongestPrefixMatch	NFD/daemon/table/measurements.cpp	/^Measurements::findLongestPrefixMatch(const pit::Entry& pitEntry,$/;"	f	class:nfd::Measurements
findLongestPrefixMatch	NFD/daemon/table/name-tree.cpp	/^NameTree::findLongestPrefixMatch(const Name& prefix, const name_tree::EntrySelector& entrySelector) const$/;"	f	class:nfd::NameTree
findLongestPrefixMatch	NFD/daemon/table/name-tree.cpp	/^NameTree::findLongestPrefixMatch(shared_ptr<name_tree::Entry> entry,$/;"	f	class:nfd::NameTree
findLongestPrefixMatchImpl	NFD/daemon/table/measurements.cpp	/^Measurements::findLongestPrefixMatchImpl(const K& key,$/;"	f	class:nfd::Measurements
findMulticastFace	NFD/daemon/face/ethernet-factory.cpp	/^EthernetFactory::findMulticastFace(const std::string& interfaceName,$/;"	f	class:nfd::EthernetFactory
findMulticastFace	NFD/daemon/face/udp-factory.cpp	/^UdpFactory::findMulticastFace(const udp::Endpoint& localEndpoint)$/;"	f	class:nfd::UdpFactory
findNextHop	NFD/daemon/table/fib-entry.cpp	/^Entry::findNextHop(Face& face)$/;"	f	class:nfd::fib::Entry
findNonce	NFD/daemon/table/pit-entry.cpp	/^Entry::findNonce(uint32_t nonce, const Face& face) const$/;"	f	class:nfd::pit::Entry
findParent	NFD/rib/rib.cpp	/^Rib::findParent(const Name& prefix) const$/;"	f	class:nfd::rib::Rib
findPrefixMeasurements	NFD/daemon/fw/access-strategy.cpp	/^AccessStrategy::findPrefixMeasurements(const pit::Entry& pitEntry)$/;"	f	class:nfd::fw::AccessStrategy
findRightmost	NFD/daemon/table/cs.cpp	/^Cs::findRightmost(const Interest& interest, iterator first, iterator last) const$/;"	f	class:nfd::cs::Cs
findRightmostAmongExact	NFD/daemon/table/cs.cpp	/^Cs::findRightmostAmongExact(const Interest& interest, iterator first, iterator last) const$/;"	f	class:nfd::cs::Cs
findRoute	NFD/rib/rib-entry.cpp	/^RibEntry::findRoute(const Route& route) const$/;"	f	class:nfd::rib::RibEntry
findRoute	NFD/rib/rib-entry.cpp	/^RibEntry::findRoute(const Route& route)$/;"	f	class:nfd::rib::RibEntry
findRoutesWithFaceId	NFD/rib/rib.cpp	/^Rib::findRoutesWithFaceId(uint64_t faceId)$/;"	f	class:nfd::rib::Rib
find_exact	utils/trie/trie-with-policy.hpp	/^  find_exact(const FullKey& key)$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
find_if	utils/trie/trie.hpp	/^  find_if(Predicate pred)$/;"	f	class:ns3::ndn::ndnSIM::trie
find_if	utils/trie/trie.hpp	/^  find_if(const FullKey& key, Predicate pred)$/;"	f	class:ns3::ndn::ndnSIM::trie
find_if_next_level	utils/trie/trie.hpp	/^  find_if_next_level(Predicate pred)$/;"	f	class:ns3::ndn::ndnSIM::trie
find_last_if	NFD/core/algorithm.hpp	/^find_last_if(It first, It last, Pred p)$/;"	f	namespace:nfd
firstCert	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  shared_ptr<IdentityCertificate> firstCert;$/;"	m	struct:ndn::tests::DirTestFixture	file:
firstCertPath	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  boost::filesystem::path firstCertPath;$/;"	m	struct:ndn::tests::DirTestFixture	file:
firstIdentity	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  Name firstIdentity;$/;"	m	struct:ndn::tests::DirTestFixture	file:
flags	NFD/core/network-interface.hpp	/^  unsigned int flags;$/;"	m	class:nfd::NetworkInterfaceInfo
flags	NFD/rib/route.hpp	/^  uint64_t flags;$/;"	m	class:nfd::rib::Route
fmix	NFD/core/city-hash.cpp	/^static uint32 fmix(uint32 h)$/;"	f	file:
forbidden	NFD/websocketpp/websocketpp/http/constants.hpp	/^            forbidden = 403,$/;"	e	enum:websocketpp::http::status_code::value
force_tcp_drop	NFD/websocketpp/websocketpp/close.hpp	/^    static value const force_tcp_drop = 2;$/;"	m	namespace:websocketpp::close::status
forwarder	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^  Forwarder forwarder;$/;"	m	class:nfd::tests::MeasurementsAccessorFixture	file:
found	NFD/websocketpp/websocketpp/http/constants.hpp	/^            found = 302,$/;"	e	enum:websocketpp::http::status_code::value
foundNextHop	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^foundNextHop(FaceId id, uint32_t cost, const fib::NextHop& next)$/;"	f	namespace:nfd::tests
foundNextHopWithFace	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^foundNextHopWithFace(FaceId id, uint32_t cost,$/;"	f	namespace:nfd::tests
fragCount	NFD/daemon/face/ndnlp-data.hpp	/^  uint16_t fragCount;$/;"	m	class:nfd::ndnlp::NdnlpData
fragIndex	NFD/daemon/face/ndnlp-data.hpp	/^  uint16_t fragIndex;$/;"	m	class:nfd::ndnlp::NdnlpData
fragmented_control	NFD/websocketpp/websocketpp/processors/base.hpp	/^    fragmented_control,$/;"	e	enum:websocketpp::processor::error::processor_errors
frame	NFD/websocketpp/websocketpp/frame.hpp	/^namespace frame {$/;"	n	namespace:websocketpp
frame_header	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const frame_header = 0x8;$/;"	m	struct:websocketpp::log::alevel
frame_payload	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const frame_payload = 0x10;$/;"	m	struct:websocketpp::log::alevel
freeEntry	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::freeEntry(Cache::iterator it)$/;"	f	class:ndn::util::InMemoryStorage
frequency	ndn-cxx/src/util/in-memory-storage-lfu.hpp	/^    uint64_t frequency;\/\/could potentially be overflowed$/;"	m	struct:ndn::util::InMemoryStorageLfu::CleanupEntry
frequency	utils/trie/lfu-policy.hpp	/^    double frequency;$/;"	m	struct:ns3::ndn::ndnSIM::lfu_policy_traits::policy_hook_type
freshness_policy_container	model/cs/content-store-with-freshness.hpp	/^  typedef typename super::policy_container::template index<1>::type freshness_policy_container;$/;"	t	class:ns3::ndn::cs::ContentStoreWithFreshness
freshness_policy_traits	model/cs/custom-policies/freshness-policy.hpp	/^struct freshness_policy_traits {$/;"	s	namespace:ns3::ndn::ndnSIM
fromBlock	NFD/daemon/face/ndnlp-data.cpp	/^NdnlpData::fromBlock(const Block& wire)$/;"	f	class:nfd::ndnlp::NdnlpData
fromBuffer	ndn-cxx/src/encoding/block.cpp	/^Block::fromBuffer(ConstBufferPtr buffer, size_t offset)$/;"	f	class:ndn::Block
fromBuffer	ndn-cxx/src/encoding/block.cpp	/^Block::fromBuffer(const uint8_t* buffer, size_t maxSize)$/;"	f	class:ndn::Block
fromDev	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::fromDev(const std::string& ifname)$/;"	f	class:ndn::util::FaceUri
fromEscapedString	ndn-cxx/src/name-component.cpp	/^Component::fromEscapedString(const char* escapedString, size_t beginOffset, size_t endOffset)$/;"	f	class:ndn::name::Component
fromEscapedString	ndn-cxx/src/name-component.hpp	/^  fromEscapedString(const char* escapedString)$/;"	f	class:ndn::name::Component
fromEscapedString	ndn-cxx/src/name-component.hpp	/^  fromEscapedString(const std::string& escapedString)$/;"	f	class:ndn::name::Component
fromFd	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::fromFd(int fd)$/;"	f	class:ndn::util::FaceUri
fromHex	ndn-cxx/src/util/string-helper.cpp	/^fromHex(const std::string& hexString)$/;"	f	namespace:ndn
fromHexChar	ndn-cxx/src/util/string-helper.cpp	/^fromHexChar(uint8_t c)$/;"	f	namespace:ndn
fromImplicitSha256Digest	ndn-cxx/src/name-component.cpp	/^Component::fromImplicitSha256Digest(const ConstBufferPtr& digest)$/;"	f	class:ndn::name::Component
fromImplicitSha256Digest	ndn-cxx/src/name-component.cpp	/^Component::fromImplicitSha256Digest(const uint8_t* digest, size_t digestSize)$/;"	f	class:ndn::name::Component
fromIsoString	ndn-cxx/src/util/time.cpp	/^fromIsoString(const std::string& isoString)$/;"	f	namespace:ndn::time
fromName	ndn-cxx/src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::fromName(const Name& name, bool hasAnchor)$/;"	f	class:ndn::RegexTopMatcher
fromNumber	ndn-cxx/src/name-component.cpp	/^Component::fromNumber(uint64_t number)$/;"	f	class:ndn::name::Component
fromNumberWithMarker	ndn-cxx/src/name-component.cpp	/^Component::fromNumberWithMarker(uint8_t marker, uint64_t number)$/;"	f	class:ndn::name::Component
fromSegment	ndn-cxx/src/name-component.cpp	/^Component::fromSegment(uint64_t segmentNo)$/;"	f	class:ndn::name::Component
fromSegmentOffset	ndn-cxx/src/name-component.cpp	/^Component::fromSegmentOffset(uint64_t offset)$/;"	f	class:ndn::name::Component
fromSequenceNumber	ndn-cxx/src/name-component.cpp	/^Component::fromSequenceNumber(uint64_t seqNo)$/;"	f	class:ndn::name::Component
fromStream	ndn-cxx/src/encoding/block.cpp	/^Block::fromStream(std::istream& is)$/;"	f	class:ndn::Block
fromString	ndn-cxx/src/util/ethernet.cpp	/^Address::fromString(const std::string& str)$/;"	f	class:ndn::util::ethernet::Address
fromString	ndn-cxx/src/util/time.cpp	/^fromString(const std::string& formattedTimePoint,$/;"	f	namespace:ndn::time
fromTimestamp	ndn-cxx/src/name-component.cpp	/^Component::fromTimestamp(const time::system_clock::TimePoint& timePoint)$/;"	f	class:ndn::name::Component
fromUnixTimestamp	ndn-cxx/src/util/time.cpp	/^fromUnixTimestamp(const milliseconds& duration)$/;"	f	namespace:ndn::time
fromVersion	ndn-cxx/src/name-component.cpp	/^Component::fromVersion(uint64_t version)$/;"	f	class:ndn::name::Component
fullEnumerate	NFD/daemon/table/name-tree.cpp	/^NameTree::fullEnumerate(const name_tree::EntrySelector& entrySelector) const$/;"	f	class:nfd::NameTree
fullfil_write	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    void fullfil_write() {$/;"	f	class:websocketpp::transport::debug::connection
fw	NFD/daemon/fw/access-strategy.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/daemon/fw/access-strategy.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/daemon/fw/best-route-strategy.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/daemon/fw/best-route-strategy.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/daemon/fw/best-route-strategy2.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/daemon/fw/best-route-strategy2.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/daemon/fw/broadcast-strategy.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/daemon/fw/broadcast-strategy.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/daemon/fw/client-control-strategy.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/daemon/fw/client-control-strategy.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/daemon/fw/forwarder.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/daemon/fw/multicast-strategy.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/daemon/fw/multicast-strategy.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/daemon/fw/ncc-strategy.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/daemon/fw/ncc-strategy.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/daemon/fw/retx-suppression-exponential.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/daemon/fw/retx-suppression-exponential.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/daemon/fw/retx-suppression-fixed.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/daemon/fw/retx-suppression-fixed.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/daemon/fw/retx-suppression.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/daemon/fw/retx-suppression.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/daemon/fw/strategy-info.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/daemon/fw/strategy-registry.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/daemon/fw/strategy-registry.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/daemon/fw/strategy.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/daemon/fw/strategy.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/daemon/table/measurements-accessor.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/daemon/table/strategy-choice-entry.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/tests/daemon/fw/access-strategy.t.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/tests/daemon/fw/best-route-strategy2.t.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/tests/daemon/fw/broadcast-strategy.t.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/tests/daemon/fw/client-control-strategy.t.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/tests/daemon/fw/multicast-strategy.t.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/tests/daemon/fw/ncc-strategy.t.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/tests/daemon/fw/retx-suppression.t.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/tests/daemon/fw/strategy-tester.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	NFD/tests/daemon/fw/strategy.t.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	NFD/tests/daemon/fw/topology-tester.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	examples/ndn-load-balancer/random-load-balancer-strategy.cpp	/^namespace fw {$/;"	n	namespace:nfd	file:
fw	examples/ndn-load-balancer/random-load-balancer-strategy.hpp	/^namespace fw {$/;"	n	namespace:nfd
fw	helper/ndn-strategy-choice-helper.hpp	/^namespace fw {$/;"	n	namespace:nfd
g_DummyStrategyInfo_count	NFD/tests/daemon/table/strategy-info-host.t.cpp	/^static int g_DummyStrategyInfo_count = 0;$/;"	m	namespace:nfd::tests	file:
g_EventEmitterTest_RefObject_copyCount	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^static int g_EventEmitterTest_RefObject_copyCount;$/;"	m	namespace:ndn::util::tests	file:
g_io	NFD/tests/test-common.hpp	/^  boost::asio::io_service& g_io;$/;"	m	class:nfd::tests::BaseFixture
g_log	model/cs/content-store-impl.hpp	/^  static LogComponent g_log; \/\/\/< @brief Logging variable$/;"	m	class:ns3::ndn::cs::ContentStoreImpl
g_log	model/cs/content-store-impl.hpp	/^LogComponent ContentStoreImpl<Policy>::g_log = LogComponent(("ndn.cs." + Policy::GetName()).c_str(), __FILE__);$/;"	m	class:ns3::ndn::cs::ContentStoreImpl
g_log	model/cs/content-store-with-freshness.hpp	/^  static LogComponent g_log; \/\/\/< @brief Logging variable$/;"	m	class:ns3::ndn::cs::ContentStoreWithFreshness
g_log	model/cs/content-store-with-freshness.hpp	/^LogComponent ContentStoreWithFreshness<Policy>::g_log = LogComponent(("ndn.cs.Freshness."$/;"	m	class:ns3::ndn::cs::ContentStoreWithFreshness
g_log	model/cs/content-store-with-stats.hpp	/^  static LogComponent g_log; \/\/\/< @brief Logging variable$/;"	m	class:ns3::ndn::cs::ContentStoreWithStats
g_log	model/cs/content-store-with-stats.hpp	/^LogComponent ContentStoreWithStats<Policy>::g_log = LogComponent(("ndn.cs.Stats."$/;"	m	class:ns3::ndn::cs::ContentStoreWithStats
g_response	NFD/tests/daemon/mgmt/status-server.t.cpp	/^shared_ptr<const Data> g_response;$/;"	m	namespace:nfd::tests	file:
g_rng	NFD/core/random.cpp	/^static boost::thread_specific_ptr<boost::random::mt19937> g_rng;$/;"	m	namespace:nfd	file:
g_steadyClock	ndn-cxx/src/util/time.cpp	/^static shared_ptr<CustomSteadyClock> g_steadyClock;$/;"	m	namespace:ndn::time	file:
g_systemClock	ndn-cxx/src/util/time.cpp	/^static shared_ptr<CustomSystemClock> g_systemClock;$/;"	m	namespace:ndn::time	file:
g_tracers	utils/tracers/l2-rate-tracer.cpp	/^  g_tracers;$/;"	m	namespace:ns3	file:
g_tracers	utils/tracers/ndn-app-delay-tracer.cpp	/^  g_tracers;$/;"	m	namespace:ns3::ndn	file:
g_tracers	utils/tracers/ndn-cs-tracer.cpp	/^static std::list<std::tuple<shared_ptr<std::ostream>, std::list<Ptr<CsTracer>>>> g_tracers;$/;"	m	namespace:ns3::ndn	file:
g_tracers	utils/tracers/ndn-l3-rate-tracer.cpp	/^  g_tracers;$/;"	m	namespace:ns3::ndn	file:
gateway_timeout	NFD/websocketpp/websocketpp/http/constants.hpp	/^            gateway_timeout = 504,$/;"	e	enum:websocketpp::http::status_code::value
general	NFD/daemon/mgmt/general-config-section.cpp	/^namespace general {$/;"	n	namespace:nfd	file:
general	NFD/daemon/mgmt/general-config-section.hpp	/^namespace general {$/;"	n	namespace:nfd
general	NFD/tests/daemon/mgmt/general-config-section.t.cpp	/^namespace general {$/;"	n	namespace:nfd	file:
general	NFD/websocketpp/websocketpp/error.hpp	/^    general = 1,$/;"	e	enum:websocketpp::error::value
general	NFD/websocketpp/websocketpp/extensions/extension.hpp	/^    general = 1,$/;"	e	enum:websocketpp::extensions::error::value
general	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    general = 1,$/;"	e	enum:websocketpp::extensions::permessage_deflate::error::value
general	NFD/websocketpp/websocketpp/processors/base.hpp	/^    general = 1,$/;"	e	enum:websocketpp::processor::error::processor_errors
general	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^    general = 1,$/;"	e	enum:websocketpp::transport::asio::error::value
general	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    general = 1,$/;"	e	enum:websocketpp::transport::error::value
general	NFD/websocketpp/websocketpp/transport/debug/base.hpp	/^    general = 1,$/;"	e	enum:websocketpp::transport::debug::error::value
general	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^    general = 1,$/;"	e	enum:websocketpp::transport::iostream::error::value
general	NFD/websocketpp/websocketpp/transport/stub/base.hpp	/^    general = 1,$/;"	e	enum:websocketpp::transport::stub::error::value
generate	NFD/daemon/mgmt/channel-status-publisher.cpp	/^ChannelStatusPublisher::generate(ndn::EncodingBuffer& outBuffer)$/;"	f	class:nfd::ChannelStatusPublisher
generate	NFD/daemon/mgmt/face-query-status-publisher.cpp	/^FaceQueryStatusPublisher::generate(ndn::EncodingBuffer& outBuffer)$/;"	f	class:nfd::FaceQueryStatusPublisher
generate	NFD/daemon/mgmt/face-status-publisher.cpp	/^FaceStatusPublisher::generate(ndn::EncodingBuffer& outBuffer)$/;"	f	class:nfd::FaceStatusPublisher
generate	NFD/daemon/mgmt/fib-enumeration-publisher.cpp	/^FibEnumerationPublisher::generate(ndn::EncodingBuffer& outBuffer)$/;"	f	class:nfd::FibEnumerationPublisher
generate	NFD/daemon/mgmt/strategy-choice-publisher.cpp	/^StrategyChoicePublisher::generate(ndn::EncodingBuffer& outBuffer)$/;"	f	class:nfd::StrategyChoicePublisher
generate	NFD/rib/rib-status-publisher.cpp	/^RibStatusPublisher::generate(ndn::EncodingBuffer& outBuffer)$/;"	f	class:nfd::rib::RibStatusPublisher
generate	NFD/tests/core/segment-publisher.t.cpp	/^  generate(ndn::EncodingBuffer& outBuffer)$/;"	f	class:nfd::tests::SegmentPublisherTester
generate	ndn-cxx/src/util/command-interest-generator.hpp	/^CommandInterestGenerator::generate(Interest& interest,$/;"	f	class:ndn::CommandInterestGenerator
generate	ndn-cxx/tests/unit-tests/util/random.t.cpp	/^  generate()$/;"	f	class:ndn::tests::PseudoRandomWord32
generate	ndn-cxx/tests/unit-tests/util/random.t.cpp	/^  generate()$/;"	f	class:ndn::tests::PseudoRandomWord64
generate	ndn-cxx/tests/unit-tests/util/random.t.cpp	/^  generate()$/;"	f	class:ndn::tests::SecureRandomWord32
generate	ndn-cxx/tests/unit-tests/util/random.t.cpp	/^  generate()$/;"	f	class:ndn::tests::SecureRandomWord64
generateCommand	NFD/tests/daemon/mgmt/validation-common.hpp	/^  generateCommand(Interest& interest)$/;"	f	class:nfd::tests::CommandFixture
generateEcdsaKeyPair	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::generateEcdsaKeyPair(const Name& identityName, bool isKsk, uint32_t keySize)$/;"	f	class:ndn::security::KeyChain
generateEcdsaKeyPairAsDefault	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::generateEcdsaKeyPairAsDefault(const Name& identityName, bool isKsk, uint32_t keySize)$/;"	f	class:ndn::security::KeyChain
generateIdentity	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  generateIdentity(const Name& prefix)$/;"	f	class:nfd::tests::CommandValidatorTester
generateKeyPair	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::generateKeyPair(const Name& identityName, bool isKsk, const KeyParams& params)$/;"	f	class:ndn::security::KeyChain
generateKeyPairInTpm	ndn-cxx/src/security/key-chain.hpp	/^  generateKeyPairInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::security::KeyChain
generateKeyPairInTpm	ndn-cxx/src/security/sec-tpm-file.cpp	/^SecTpmFile::generateKeyPairInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::SecTpmFile
generateKeyPairInTpm	ndn-cxx/src/security/sec-tpm-osx.hpp	/^  generateKeyPairInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::SecTpmOsx
generateKeyPairInTpm	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::generateKeyPairInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::security::DummyTpm
generateKeyPairInTpm	utils/dummy-keychain.cpp	/^DummyTpm::generateKeyPairInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::security::DummyTpm
generateKeyPairInTpmInternal	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::generateKeyPairInTpmInternal(const Name& keyName,$/;"	f	class:ndn::SecTpmOsx
generateRandomBlock	ndn-cxx/src/security/key-chain.hpp	/^  generateRandomBlock(uint8_t* res, size_t size) const$/;"	f	class:ndn::security::KeyChain
generateRandomBlock	ndn-cxx/src/security/sec-tpm-file.cpp	/^SecTpmFile::generateRandomBlock(uint8_t* res, size_t size)$/;"	f	class:ndn::SecTpmFile
generateRandomBlock	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::generateRandomBlock(uint8_t* res, size_t size)$/;"	f	class:ndn::SecTpmOsx
generateRandomBlock	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::generateRandomBlock(uint8_t* res, size_t size)$/;"	f	class:ndn::security::DummyTpm
generateRandomBlock	utils/dummy-keychain.cpp	/^DummyTpm::generateRandomBlock(uint8_t* res, size_t size)$/;"	f	class:ndn::security::DummyTpm
generateRsaKeyPair	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::generateRsaKeyPair(const Name& identityName, bool isKsk, uint32_t keySize)$/;"	f	class:ndn::security::KeyChain
generateRsaKeyPairAsDefault	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::generateRsaKeyPairAsDefault(const Name& identityName, bool isKsk, uint32_t keySize)$/;"	f	class:ndn::security::KeyChain
generateSecureWord32	ndn-cxx/src/util/random.cpp	/^generateSecureWord32()$/;"	f	namespace:ndn::random
generateSecureWord64	ndn-cxx/src/util/random.cpp	/^generateSecureWord64()$/;"	f	namespace:ndn::random
generateSymmetricKeyInTpm	ndn-cxx/src/security/key-chain.hpp	/^  generateSymmetricKeyInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::security::KeyChain
generateSymmetricKeyInTpm	ndn-cxx/src/security/sec-tpm-file.cpp	/^SecTpmFile::generateSymmetricKeyInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::SecTpmFile
generateSymmetricKeyInTpm	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::generateSymmetricKeyInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::SecTpmOsx
generateSymmetricKeyInTpm	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::generateSymmetricKeyInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::security::DummyTpm
generateSymmetricKeyInTpm	utils/dummy-keychain.cpp	/^DummyTpm::generateSymmetricKeyInTpm(const Name& keyName, const KeyParams& params)$/;"	f	class:ndn::security::DummyTpm
generateWithIdentity	ndn-cxx/src/util/command-interest-generator.hpp	/^CommandInterestGenerator::generateWithIdentity(Interest& interest, const Name& identity)$/;"	f	class:ndn::CommandInterestGenerator
generateWord32	ndn-cxx/src/util/random.cpp	/^generateWord32()$/;"	f	namespace:ndn::random
generateWord64	ndn-cxx/src/util/random.cpp	/^generateWord64()$/;"	f	namespace:ndn::random
generate_offer	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    std::string generate_offer() const {$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
generate_response	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    std::string generate_response() {$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
get	NFD/daemon/fw/face-table.cpp	/^FaceTable::get(FaceId id) const$/;"	f	class:nfd::FaceTable
get	NFD/daemon/table/measurements-accessor.hpp	/^MeasurementsAccessor::get(const Name& name)$/;"	f	class:nfd::MeasurementsAccessor
get	NFD/daemon/table/measurements-accessor.hpp	/^MeasurementsAccessor::get(const fib::Entry& fibEntry)$/;"	f	class:nfd::MeasurementsAccessor
get	NFD/daemon/table/measurements-accessor.hpp	/^MeasurementsAccessor::get(const pit::Entry& pitEntry)$/;"	f	class:nfd::MeasurementsAccessor
get	NFD/daemon/table/measurements.cpp	/^Measurements::get(const Name& name)$/;"	f	class:nfd::Measurements
get	NFD/daemon/table/measurements.cpp	/^Measurements::get(const fib::Entry& fibEntry)$/;"	f	class:nfd::Measurements
get	NFD/daemon/table/measurements.cpp	/^Measurements::get(const pit::Entry& pitEntry)$/;"	f	class:nfd::Measurements
get	NFD/daemon/table/measurements.cpp	/^Measurements::get(name_tree::Entry& nte)$/;"	f	class:nfd::Measurements
get	NFD/daemon/table/name-tree.hpp	/^NameTree::get(const fib::Entry& fibEntry) const$/;"	f	class:nfd::NameTree
get	NFD/daemon/table/name-tree.hpp	/^NameTree::get(const measurements::Entry& measurementsEntry) const$/;"	f	class:nfd::NameTree
get	NFD/daemon/table/name-tree.hpp	/^NameTree::get(const pit::Entry& pitEntry) const$/;"	f	class:nfd::NameTree
get	NFD/daemon/table/name-tree.hpp	/^NameTree::get(const strategy_choice::Entry& strategyChoiceEntry) const$/;"	f	class:nfd::NameTree
get	NFD/daemon/table/strategy-choice.cpp	/^StrategyChoice::get(const Name& prefix) const$/;"	f	class:nfd::StrategyChoice
get	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  get(FaceId id) const$/;"	f	class:nfd::tests::TestFaceTable
get	helper/boost-graph-ndn-global-routing-helper.hpp	/^get(DistancesMap& map, ns3::Ptr<ns3::ndn::GlobalRouter> key)$/;"	f	namespace:boost
get	helper/boost-graph-ndn-global-routing-helper.hpp	/^get(const boost::EdgeWeights&, ns3::ndn::GlobalRouter::Incidency& edge)$/;"	f	namespace:boost
get	helper/boost-graph-ndn-global-routing-helper.hpp	/^get(const boost::VertexIds&, ns3::Ptr<ns3::ndn::GlobalRouter>& gr)$/;"	f	namespace:boost
get	helper/boost-graph-ndn-global-routing-helper.hpp	/^get(edge_weight_t, const NdnGlobalRouterGraph& g)$/;"	f	namespace:boost
get	helper/boost-graph-ndn-global-routing-helper.hpp	/^get(vertex_index_t, const NdnGlobalRouterGraph& g)$/;"	f	namespace:boost
get	ndn-cxx/src/encoding/block.cpp	/^Block::get(uint32_t type) const$/;"	f	class:ndn::Block
get	ndn-cxx/src/encoding/buffer.hpp	/^  get() const$/;"	f	class:ndn::Buffer
get	ndn-cxx/src/encoding/buffer.hpp	/^  get()$/;"	f	class:ndn::Buffer
get	ndn-cxx/src/lp/packet.hpp	/^  get(size_t index = 0) const$/;"	f	class:ndn::lp::Packet
get	ndn-cxx/src/name.hpp	/^  get(ssize_t i) const$/;"	f	class:ndn::Name
get	ndn-cxx/src/security/additional-description.cpp	/^AdditionalDescription::get(const std::string& key) const$/;"	f	class:ndn::security::AdditionalDescription
get	ndn-cxx/src/security/public-key.hpp	/^  get() const$/;"	f	class:ndn::PublicKey
get	ndn-cxx/src/security/sec-tpm-osx.cpp	/^  get() const$/;"	f	class:ndn::CFReleaser
get	ndn-cxx/src/security/sec-tpm-osx.cpp	/^  get()$/;"	f	class:ndn::CFReleaser
get	utils/trie/detail/multi-policy-container.hpp	/^  get() const$/;"	f	struct:ns3::ndn::ndnSIM::detail::multi_policy_container
get	utils/trie/detail/multi-policy-container.hpp	/^  get()$/;"	f	struct:ns3::ndn::ndnSIM::detail::multi_policy_container
get	utils/trie/detail/multi-type-container.hpp	/^  get() const$/;"	f	struct:ns3::ndn::ndnSIM::detail::multi_type_container
get	utils/trie/detail/multi-type-container.hpp	/^  get()$/;"	f	struct:ns3::ndn::ndnSIM::detail::multi_type_container
getAction	NFD/rib/rib-update.hpp	/^RibUpdate::getAction() const$/;"	f	class:nfd::rib::RibUpdate
getAll	ndn-cxx/src/security/validator-config.hpp	/^    getAll() const$/;"	f	class:ndn::ValidatorConfig::TrustAnchorContainer
getAllCertificateNames	ndn-cxx/src/security/key-chain.hpp	/^  getAllCertificateNames(std::vector<Name>& nameList, bool isDefault) const$/;"	f	class:ndn::security::KeyChain
getAllCertificateNames	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getAllCertificateNames(vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::SecPublicInfoSqlite3
getAllCertificateNames	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getAllCertificateNames(std::vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::security::DummyPublicInfo
getAllCertificateNames	utils/dummy-keychain.cpp	/^DummyPublicInfo::getAllCertificateNames(std::vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::security::DummyPublicInfo
getAllCertificateNamesOfKey	ndn-cxx/src/security/key-chain.hpp	/^  getAllCertificateNamesOfKey(const Name& keyName,$/;"	f	class:ndn::security::KeyChain
getAllCertificateNamesOfKey	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getAllCertificateNamesOfKey(const Name& keyName,$/;"	f	class:ndn::SecPublicInfoSqlite3
getAllCertificateNamesOfKey	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getAllCertificateNamesOfKey(const Name& keyName, std::vector<Name>& nameList,$/;"	f	class:ndn::security::DummyPublicInfo
getAllCertificateNamesOfKey	utils/dummy-keychain.cpp	/^DummyPublicInfo::getAllCertificateNamesOfKey(const Name& keyName, std::vector<Name>& nameList,$/;"	f	class:ndn::security::DummyPublicInfo
getAllIdentities	ndn-cxx/src/security/key-chain.hpp	/^  getAllIdentities(std::vector<Name>& nameList, bool isDefault) const$/;"	f	class:ndn::security::KeyChain
getAllIdentities	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getAllIdentities(vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::SecPublicInfoSqlite3
getAllIdentities	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getAllIdentities(std::vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::security::DummyPublicInfo
getAllIdentities	utils/dummy-keychain.cpp	/^DummyPublicInfo::getAllIdentities(std::vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::security::DummyPublicInfo
getAllKeyNames	ndn-cxx/src/security/key-chain.hpp	/^  getAllKeyNames(std::vector<Name>& nameList, bool isDefault) const$/;"	f	class:ndn::security::KeyChain
getAllKeyNames	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getAllKeyNames(vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::SecPublicInfoSqlite3
getAllKeyNames	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getAllKeyNames(std::vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::security::DummyPublicInfo
getAllKeyNames	utils/dummy-keychain.cpp	/^DummyPublicInfo::getAllKeyNames(std::vector<Name>& nameList, bool isDefault)$/;"	f	class:ndn::security::DummyPublicInfo
getAllKeyNamesOfIdentity	ndn-cxx/src/security/key-chain.hpp	/^  getAllKeyNamesOfIdentity(const Name& identity, std::vector<Name>& nameList, bool isDefault) const$/;"	f	class:ndn::security::KeyChain
getAllKeyNamesOfIdentity	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getAllKeyNamesOfIdentity(const Name& identity,$/;"	f	class:ndn::SecPublicInfoSqlite3
getAllKeyNamesOfIdentity	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getAllKeyNamesOfIdentity(const Name& identity, std::vector<Name>& nameList,$/;"	f	class:ndn::security::DummyPublicInfo
getAllKeyNamesOfIdentity	utils/dummy-keychain.cpp	/^DummyPublicInfo::getAllKeyNamesOfIdentity(const Name& identity, std::vector<Name>& nameList,$/;"	f	class:ndn::security::DummyPublicInfo
getAncestorRoutes	NFD/rib/rib.cpp	/^Rib::getAncestorRoutes(const Name& name) const$/;"	f	class:nfd::rib::Rib
getAncestorRoutes	NFD/rib/rib.cpp	/^Rib::getAncestorRoutes(const RibEntry& entry) const$/;"	f	class:nfd::rib::Rib
getAppMetaInfo	ndn-cxx/src/meta-info.cpp	/^MetaInfo::getAppMetaInfo() const$/;"	f	class:ndn::MetaInfo
getAsymKeyType	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getAsymKeyType(KeyType keyType)$/;"	f	class:ndn::SecTpmOsx::Impl
getBackref	ndn-cxx/src/util/regex/regex-backref-manager.hpp	/^RegexBackrefManager::getBackref(size_t backrefNo)$/;"	f	class:ndn::RegexBackrefManager
getBestFace	NFD/daemon/fw/ncc-strategy.cpp	/^NccStrategy::MeasurementsEntryInfo::getBestFace(void) {$/;"	f	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
getBlob	ndn-cxx/src/util/sqlite3-statement.cpp	/^Sqlite3Statement::getBlob(int column)$/;"	f	class:ndn::util::Sqlite3Statement
getBlock	ndn-cxx/src/util/sqlite3-statement.cpp	/^Sqlite3Statement::getBlock(int column)$/;"	f	class:ndn::util::Sqlite3Statement
getBody	ndn-cxx/src/mgmt/control-response.hpp	/^ControlResponse::getBody() const$/;"	f	class:ndn::mgmt::ControlResponse
getBroadcastAddress	ndn-cxx/src/util/ethernet.cpp	/^getBroadcastAddress()$/;"	f	namespace:ndn::util::ethernet
getBuffer	ndn-cxx/src/encoding/block.hpp	/^Block::getBuffer() const$/;"	f	class:ndn::Block
getBuffer	ndn-cxx/src/encoding/encoder.hpp	/^Encoder::getBuffer()$/;"	f	class:ndn::encoding::Encoder
getCachingPolicy	ndn-cxx/src/data.hpp	/^Data::getCachingPolicy() const$/;"	f	class:ndn::Data
getCachingPolicy	ndn-cxx/src/management/nfd-local-control-header.hpp	/^  getCachingPolicy() const$/;"	f	class:ndn::nfd::LocalControlHeader
getCanonicalPibLocator	ndn-cxx/src/security/key-chain.cpp	/^getCanonicalPibLocator(const std::string& pibLocator)$/;"	f	namespace:ndn::security
getCanonicalTpmLocator	ndn-cxx/src/security/key-chain.cpp	/^getCanonicalTpmLocator(const std::string& tpmLocator)$/;"	f	namespace:ndn::security
getCanonizeProvider	ndn-cxx/src/util/face-uri.cpp	/^getCanonizeProvider(const std::string& scheme)$/;"	f	namespace:ndn::util
getCapacity	ndn-cxx/src/util/in-memory-storage.hpp	/^  getCapacity() const$/;"	f	class:ndn::util::InMemoryStorage
getCertificate	NFD/tests/daemon/mgmt/validation-common.hpp	/^  static shared_ptr<ndn::IdentityCertificate> getCertificate()$/;"	f	class:nfd::tests::CommandIdentityGlobalFixture
getCertificate	ndn-cxx/src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::getCertificate(const Name& certificateName)$/;"	f	class:ndn::CertificateCacheTtl
getCertificate	ndn-cxx/src/security/key-chain.hpp	/^  getCertificate(const Name& certificateName) const$/;"	f	class:ndn::security::KeyChain
getCertificate	ndn-cxx/src/security/key.cpp	/^Key::getCertificate(const Name& certName) const$/;"	f	class:ndn::security::Key
getCertificate	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::getCertificate(const Name& certName) const$/;"	f	class:ndn::security::PibMemory
getCertificate	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::getCertificate(const Name& certName) const$/;"	f	class:ndn::security::PibSqlite3
getCertificate	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getCertificate(const Name& certificateName)$/;"	f	class:ndn::SecPublicInfoSqlite3
getCertificate	ndn-cxx/src/security/secured-bag.hpp	/^  getCertificate() const$/;"	f	class:ndn::SecuredBag
getCertificate	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getCertificate(const Name& certificateName)$/;"	f	class:ndn::security::DummyPublicInfo
getCertificate	utils/dummy-keychain.cpp	/^DummyPublicInfo::getCertificate(const Name& certificateName)$/;"	f	class:ndn::security::DummyPublicInfo
getCertificateHttp	ndn-cxx/tools/ndnsec/cert-install.hpp	/^getCertificateHttp(const std::string& host, const std::string& port, const std::string& path)$/;"	f
getCertificates	ndn-cxx/src/security/key.cpp	/^Key::getCertificates() const$/;"	f	class:ndn::security::Key
getCertificatesOfKey	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::getCertificatesOfKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibMemory
getCertificatesOfKey	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::getCertificatesOfKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibSqlite3
getChannels	NFD/daemon/face/ethernet-factory.cpp	/^EthernetFactory::getChannels() const$/;"	f	class:nfd::EthernetFactory
getChannels	NFD/daemon/face/tcp-factory.cpp	/^TcpFactory::getChannels() const$/;"	f	class:nfd::TcpFactory
getChannels	NFD/daemon/face/udp-factory.cpp	/^UdpFactory::getChannels() const$/;"	f	class:nfd::UdpFactory
getChannels	NFD/daemon/face/unix-stream-factory.cpp	/^UnixStreamFactory::getChannels() const$/;"	f	class:nfd::UnixStreamFactory
getChannels	NFD/daemon/face/websocket-factory.cpp	/^WebSocketFactory::getChannels() const$/;"	f	class:nfd::WebSocketFactory
getChannels	NFD/tests/daemon/mgmt/channel-status-common.hpp	/^  getChannels() const$/;"	f	class:nfd::tests::DummyProtocolFactory
getChildSelector	ndn-cxx/src/interest.hpp	/^  getChildSelector() const$/;"	f	class:ndn::Interest
getChildSelector	ndn-cxx/src/selectors.hpp	/^  getChildSelector() const$/;"	f	class:ndn::Selectors
getChildren	NFD/daemon/table/name-tree-entry.hpp	/^Entry::getChildren()$/;"	f	class:nfd::name_tree::Entry
getChildren	NFD/rib/rib-entry.hpp	/^RibEntry::getChildren() const$/;"	f	class:nfd::rib::RibEntry
getClientFace	NFD/tests/daemon/fw/topology-tester.hpp	/^  getClientFace()$/;"	f	class:nfd::fw::tests::TopologyAppLink
getCode	ndn-cxx/src/mgmt/control-response.hpp	/^ControlResponse::getCode() const$/;"	f	class:ndn::mgmt::ControlResponse
getCommandOptions	ndn-cxx/src/detail/registered-prefix.hpp	/^  getCommandOptions() const$/;"	f	class:ndn::RegisteredPrefix
getConfig	model/ndn-l3-protocol.cpp	/^L3Protocol::getConfig()$/;"	f	class:ns3::ndn::L3Protocol
getContent	ndn-cxx/src/data.cpp	/^Data::getContent() const$/;"	f	class:ndn::Data
getContentType	ndn-cxx/src/data.hpp	/^Data::getContentType() const$/;"	f	class:ndn::Data
getCost	NFD/daemon/table/fib-nexthop.cpp	/^NextHop::getCost() const$/;"	f	class:nfd::fib::NextHop
getCost	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  getCost() const$/;"	f	class:ndn::nfd::ControlParameters
getCost	ndn-cxx/src/management/nfd-fib-entry.hpp	/^  getCost() const$/;"	f	class:ndn::nfd::NextHopRecord
getCost	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  getCost() const$/;"	f	class:ndn::nfd::Route
getCounters	NFD/daemon/face/face.hpp	/^Face::getCounters() const$/;"	f	class:nfd::Face
getCounters	NFD/daemon/fw/forwarder.hpp	/^Forwarder::getCounters() const$/;"	f	class:nfd::Forwarder
getCs	NFD/daemon/fw/forwarder.hpp	/^Forwarder::getCs()$/;"	f	class:nfd::Forwarder
getCs	NFD/daemon/table/cs-policy.hpp	/^Policy::getCs() const$/;"	f	class:nfd::cs::Policy
getCurrentTimestamp	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  getCurrentTimestamp() const$/;"	f	class:ndn::nfd::ForwarderStatus
getData	NFD/daemon/table/cs-entry.hpp	/^  getData() const$/;"	f	class:nfd::cs::Entry
getData	ndn-cxx/src/util/in-memory-storage-entry.hpp	/^  getData() const$/;"	f	class:ndn::util::InMemoryStorageEntry
getDeadNonceList	NFD/daemon/fw/forwarder.hpp	/^Forwarder::getDeadNonceList()$/;"	f	class:nfd::Forwarder
getDefaultCertificate	ndn-cxx/src/security/key-chain.hpp	/^  getDefaultCertificate() const$/;"	f	class:ndn::security::KeyChain
getDefaultCertificate	ndn-cxx/src/security/key.cpp	/^Key::getDefaultCertificate() const$/;"	f	class:ndn::security::Key
getDefaultCertificate	ndn-cxx/src/security/sec-public-info.cpp	/^SecPublicInfo::getDefaultCertificate()$/;"	f	class:ndn::SecPublicInfo
getDefaultCertificateName	ndn-cxx/src/security/key-chain.hpp	/^  getDefaultCertificateName() const$/;"	f	class:ndn::security::KeyChain
getDefaultCertificateName	ndn-cxx/src/security/sec-public-info.cpp	/^SecPublicInfo::getDefaultCertificateName()$/;"	f	class:ndn::SecPublicInfo
getDefaultCertificateNameForIdentity	ndn-cxx/src/security/key-chain.hpp	/^  getDefaultCertificateNameForIdentity(const Name& identityName) const$/;"	f	class:ndn::security::KeyChain
getDefaultCertificateNameForIdentity	ndn-cxx/src/security/sec-public-info.cpp	/^SecPublicInfo::getDefaultCertificateNameForIdentity(const Name& identityName)$/;"	f	class:ndn::SecPublicInfo
getDefaultCertificateNameForKey	ndn-cxx/src/security/key-chain.hpp	/^  getDefaultCertificateNameForKey(const Name& keyName) const$/;"	f	class:ndn::security::KeyChain
getDefaultCertificateNameForKey	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getDefaultCertificateNameForKey(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
getDefaultCertificateNameForKey	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getDefaultCertificateNameForKey(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
getDefaultCertificateNameForKey	utils/dummy-keychain.cpp	/^DummyPublicInfo::getDefaultCertificateNameForKey(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
getDefaultCertificateOfKey	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::getDefaultCertificateOfKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibMemory
getDefaultCertificateOfKey	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::getDefaultCertificateOfKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibSqlite3
getDefaultFreshness	NFD/core/segment-publisher.hpp	/^  getDefaultFreshness()$/;"	f	class:nfd::SegmentPublisher
getDefaultIdentity	ndn-cxx/src/security/key-chain.hpp	/^  getDefaultIdentity() const$/;"	f	class:ndn::security::KeyChain
getDefaultIdentity	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::getDefaultIdentity() const$/;"	f	class:ndn::security::PibMemory
getDefaultIdentity	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::getDefaultIdentity() const$/;"	f	class:ndn::security::PibSqlite3
getDefaultIdentity	ndn-cxx/src/security/pib.cpp	/^Pib::getDefaultIdentity() const$/;"	f	class:ndn::security::Pib
getDefaultIdentity	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getDefaultIdentity()$/;"	f	class:ndn::SecPublicInfoSqlite3
getDefaultIdentity	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getDefaultIdentity()$/;"	f	class:ndn::security::DummyPublicInfo
getDefaultIdentity	utils/dummy-keychain.cpp	/^DummyPublicInfo::getDefaultIdentity()$/;"	f	class:ndn::security::DummyPublicInfo
getDefaultInterestLifetime	NFD/tools/ndn-tlv-peek.cpp	/^  getDefaultInterestLifetime()$/;"	f	class:ndntlvpeek::NdnTlvPeek
getDefaultKey	ndn-cxx/src/security/identity.cpp	/^Identity::getDefaultKey() const$/;"	f	class:ndn::security::Identity
getDefaultKeyNameForIdentity	ndn-cxx/src/security/key-chain.hpp	/^  getDefaultKeyNameForIdentity(const Name& identityName) const$/;"	f	class:ndn::security::KeyChain
getDefaultKeyNameForIdentity	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getDefaultKeyNameForIdentity(const Name& identityName)$/;"	f	class:ndn::SecPublicInfoSqlite3
getDefaultKeyNameForIdentity	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getDefaultKeyNameForIdentity(const Name& identityName)$/;"	f	class:ndn::security::DummyPublicInfo
getDefaultKeyNameForIdentity	utils/dummy-keychain.cpp	/^DummyPublicInfo::getDefaultKeyNameForIdentity(const Name& identityName)$/;"	f	class:ndn::security::DummyPublicInfo
getDefaultKeyOfIdentity	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::getDefaultKeyOfIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibMemory
getDefaultKeyOfIdentity	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::getDefaultKeyOfIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibSqlite3
getDefaultKeySize	ndn-cxx/src/security/key-params.hpp	/^  getDefaultKeySize() const$/;"	f	class:ndn::SimplePublicKeyParams
getDefaultKeySize	ndn-cxx/src/security/key-params.hpp	/^  getDefaultKeySize() const$/;"	f	class:ndn::SimpleSymmetricKeyParams
getDefaultMulticastAddress	ndn-cxx/src/util/ethernet.cpp	/^getDefaultMulticastAddress()$/;"	f	namespace:ndn::util::ethernet
getDefaultPibLocator	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::getDefaultPibLocator()$/;"	f	class:ndn::security::KeyChain
getDefaultRefreshPeriod	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::getDefaultRefreshPeriod()$/;"	f	class:ndn::ValidatorConfig
getDefaultSize	ndn-cxx/src/security/key-params.cpp	/^AesKeyParamsInfo::getDefaultSize()$/;"	f	class:ndn::AesKeyParamsInfo
getDefaultSize	ndn-cxx/src/security/key-params.cpp	/^EcdsaKeyParamsInfo::getDefaultSize()$/;"	f	class:ndn::EcdsaKeyParamsInfo
getDefaultSize	ndn-cxx/src/security/key-params.cpp	/^RsaKeyParamsInfo::getDefaultSize()$/;"	f	class:ndn::RsaKeyParamsInfo
getDefaultSocketHostAndPort	ndn-cxx/src/transport/tcp-transport.cpp	/^TcpTransport::getDefaultSocketHostAndPort(const ConfigFile& config)$/;"	f	class:ndn::TcpTransport
getDefaultSocketName	ndn-cxx/src/transport/unix-transport.cpp	/^UnixTransport::getDefaultSocketName(const ConfigFile& config)$/;"	f	class:ndn::UnixTransport
getDefaultStartTime	ndn-cxx/src/util/time-unit-test-clock.hpp	/^  getDefaultStartTime()$/;"	f	class:ndn::time::UnitTestClockTraits
getDefaultTimeout	NFD/tools/ndn-tlv-poke.cpp	/^  getDefaultTimeout()$/;"	f	class:ndntlvpoke::NdnTlvPoke
getDefaultTpmLocator	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::getDefaultTpmLocator()$/;"	f	class:ndn::security::KeyChain
getDelegationFromWire	ndn-cxx/src/link.cpp	/^Link::getDelegationFromWire(const Block& block, size_t index)$/;"	f	class:ndn::Link
getDelegations	ndn-cxx/src/link.cpp	/^Link::getDelegations() const$/;"	f	class:ndn::Link
getDescription	NFD/daemon/face/face.hpp	/^Face::getDescription() const$/;"	f	class:nfd::Face
getDestinationFlag	NFD/daemon/table/pit-entry.cpp	/^Entry::getDestinationFlag()$/;"	f	class:nfd::pit::Entry
getDestinationFlag	ndn-cxx/src/interest.hpp	/^  getDestinationFlag() const$/;"	f	class:ndn::Interest
getDigestAlgorithm	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getDigestAlgorithm(DigestAlgorithm digestAlgo)$/;"	f	class:ndn::SecTpmOsx::Impl
getDigestAlgorithm	ndn-cxx/src/security/signing-info.hpp	/^  getDigestAlgorithm() const$/;"	f	class:ndn::security::SigningInfo
getDigestSize	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getDigestSize(DigestAlgorithm digestAlgo)$/;"	f	class:ndn::SecTpmOsx::Impl
getDummyFace	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  getDummyFace()$/;"	f	class:nfd::tests::TestFaceTable
getExclude	ndn-cxx/src/interest.hpp	/^  getExclude() const$/;"	f	class:ndn::Interest
getExclude	ndn-cxx/src/selectors.hpp	/^  getExclude() const$/;"	f	class:ndn::Selectors
getExpirationEvent	NFD/rib/route.hpp	/^  getExpirationEvent() const$/;"	f	class:nfd::rib::Route
getExpirationPeriod	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  getExpirationPeriod() const$/;"	f	class:ndn::nfd::ControlParameters
getExpirationPeriod	ndn-cxx/src/management/nfd-face-status.hpp	/^  getExpirationPeriod() const$/;"	f	class:ndn::nfd::FaceStatus
getExpirationPeriod	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  getExpirationPeriod() const$/;"	f	class:ndn::nfd::Route
getExpiry	NFD/daemon/table/pit-face-record.hpp	/^FaceRecord::getExpiry() const$/;"	f	class:nfd::pit::FaceRecord
getExpiry	ndn-cxx/src/mgmt/status-dataset-context.cpp	/^StatusDatasetContext::getExpiry() const$/;"	f	class:ndn::mgmt::StatusDatasetContext
getExpr	ndn-cxx/src/util/regex/regex-matcher.hpp	/^  getExpr() const$/;"	f	class:ndn::RegexMatcher
getExtensionList	ndn-cxx/src/security/certificate.hpp	/^  getExtensionList() const$/;"	f	class:ndn::Certificate
getExtensionList	ndn-cxx/src/security/certificate.hpp	/^  getExtensionList()$/;"	f	class:ndn::Certificate
getFace	NFD/daemon/fw/forwarder.hpp	/^Forwarder::getFace(FaceId id) const$/;"	f	class:nfd::Forwarder
getFace	NFD/daemon/fw/strategy.hpp	/^Strategy::getFace(FaceId id)$/;"	f	class:nfd::fw::Strategy
getFace	NFD/daemon/table/fib-nexthop.cpp	/^NextHop::getFace() const$/;"	f	class:nfd::fib::NextHop
getFace	NFD/daemon/table/pit-face-record.hpp	/^FaceRecord::getFace() const$/;"	f	class:nfd::pit::FaceRecord
getFace	NFD/tests/daemon/fw/topology-tester.hpp	/^  getFace(TopologyNode i)$/;"	f	class:nfd::fw::tests::TopologyLink
getFace	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  getFace()$/;"	f	class:nfd::tests::TestFaceManagerCommon
getFace	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  getFace(FaceId id)$/;"	f	class:nfd::tests::FibManagerFixture
getFace	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  getFace()$/;"	f	class:nfd::tests::StrategyChoiceManagerFixture
getFace	helper/ndn-scenario-helper.cpp	/^ScenarioHelper::getFace(const std::string& node1, const std::string& node2)$/;"	f	class:ns3::ndn::ScenarioHelper
getFaceById	model/ndn-l3-protocol.cpp	/^L3Protocol::getFaceById(nfd::FaceId id) const$/;"	f	class:ns3::ndn::L3Protocol
getFaceByNetDevice	model/ndn-l3-protocol.cpp	/^L3Protocol::getFaceByNetDevice(Ptr<NetDevice> netDevice) const$/;"	f	class:ns3::ndn::L3Protocol
getFaceId	NFD/rib/rib-update-batch.hpp	/^RibUpdateBatch::getFaceId() const$/;"	f	class:nfd::rib::RibUpdateBatch
getFaceId	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  getFaceId() const$/;"	f	class:ndn::nfd::ControlParameters
getFaceId	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  getFaceId() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getFaceId	ndn-cxx/src/management/nfd-face-traits.hpp	/^  getFaceId() const$/;"	f	class:ndn::nfd::FaceTraits
getFaceId	ndn-cxx/src/management/nfd-fib-entry.hpp	/^  getFaceId() const$/;"	f	class:ndn::nfd::NextHopRecord
getFaceId	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  getFaceId() const$/;"	f	class:ndn::nfd::Route
getFacePersistency	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  getFacePersistency() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getFacePersistency	ndn-cxx/src/management/nfd-face-traits.hpp	/^  getFacePersistency() const$/;"	f	class:ndn::nfd::FaceTraits
getFaceScope	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  getFaceScope() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getFaceScope	ndn-cxx/src/management/nfd-face-traits.hpp	/^  getFaceScope() const$/;"	f	class:ndn::nfd::FaceTraits
getFaceStatus	NFD/daemon/face/face.cpp	/^Face::getFaceStatus() const$/;"	f	class:nfd::Face
getFaceStatus	NFD/daemon/face/udp-face.cpp	/^UdpFace::getFaceStatus() const$/;"	f	class:nfd::UdpFace
getFaceTable	NFD/daemon/fw/forwarder.hpp	/^Forwarder::getFaceTable()$/;"	f	class:nfd::Forwarder
getFaceTable	NFD/daemon/fw/strategy.hpp	/^Strategy::getFaceTable()$/;"	f	class:nfd::fw::Strategy
getFaceUri1	NFD/tests/daemon/face/udp.t.cpp	/^  getFaceUri1()$/;"	f	class:nfd::tests::EndToEndIpv4
getFaceUri1	NFD/tests/daemon/face/udp.t.cpp	/^  getFaceUri1()$/;"	f	class:nfd::tests::EndToEndIpv6
getFaceUri2	NFD/tests/daemon/face/udp.t.cpp	/^  getFaceUri2()$/;"	f	class:nfd::tests::EndToEndIpv4
getFaceUri2	NFD/tests/daemon/face/udp.t.cpp	/^  getFaceUri2()$/;"	f	class:nfd::tests::EndToEndIpv6
getFaceUri3	NFD/tests/daemon/face/udp.t.cpp	/^  getFaceUri3()$/;"	f	class:nfd::tests::EndToEndIpv4
getFaceUri3	NFD/tests/daemon/face/udp.t.cpp	/^  getFaceUri3()$/;"	f	class:nfd::tests::EndToEndIpv6
getFib	NFD/daemon/fw/forwarder.hpp	/^Forwarder::getFib()$/;"	f	class:nfd::Forwarder
getFib	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  getFib()$/;"	f	class:nfd::tests::FibManagerFixture
getFibEntry	NFD/daemon/table/name-tree-entry.hpp	/^Entry::getFibEntry() const$/;"	f	class:nfd::name_tree::Entry
getFibManager	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  getFibManager()$/;"	f	class:nfd::tests::FibManagerFixture
getFibManager	model/ndn-l3-protocol.cpp	/^L3Protocol::getFibManager()$/;"	f	class:ns3::ndn::L3Protocol
getFibUpdates	NFD/tests/rib/fib-updates-common.hpp	/^  getFibUpdates()$/;"	f	class:nfd::rib::tests::FibUpdatesFixture
getFilter	ndn-cxx/src/detail/interest-filter-record.hpp	/^  getFilter() const$/;"	f	class:ndn::InterestFilterRecord
getFilter	ndn-cxx/src/detail/registered-prefix.hpp	/^  getFilter() const$/;"	f	class:ndn::RegisteredPrefix
getFinalBlockId	ndn-cxx/src/data.hpp	/^Data::getFinalBlockId() const$/;"	f	class:ndn::Data
getFinalBlockId	ndn-cxx/src/meta-info.hpp	/^MetaInfo::getFinalBlockId() const$/;"	f	class:ndn::MetaInfo
getFlag	ndn-cxx/src/destination-flag.cpp	/^DestinationFlag::getFlag() const$/;"	f	class:ndn::DestinationFlag
getFlags	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  getFlags() const$/;"	f	class:ndn::nfd::ControlParameters
getFlags	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  getFlags() const$/;"	f	class:ndn::nfd::Route
getForwardRange	NFD/daemon/fw/face-table.cpp	/^FaceTable::getForwardRange() const$/;"	f	class:nfd::FaceTable
getForwarder	NFD/tests/daemon/fw/topology-tester.hpp	/^  getForwarder(TopologyNode i)$/;"	f	class:nfd::fw::tests::TopologyTester
getForwarder	model/ndn-l3-protocol.cpp	/^L3Protocol::getForwarder()$/;"	f	class:ns3::ndn::L3Protocol
getForwarderFace	NFD/tests/daemon/fw/topology-tester.hpp	/^  getForwarderFace()$/;"	f	class:nfd::fw::tests::TopologyAppLink
getFreshnessPeriod	ndn-cxx/src/data.hpp	/^Data::getFreshnessPeriod() const$/;"	f	class:ndn::Data
getFreshnessPeriod	ndn-cxx/src/meta-info.hpp	/^MetaInfo::getFreshnessPeriod() const$/;"	f	class:ndn::MetaInfo
getFullName	NFD/daemon/table/cs-entry.hpp	/^  getFullName() const$/;"	f	class:nfd::cs::Entry
getFullName	ndn-cxx/src/data.cpp	/^Data::getFullName() const$/;"	f	class:ndn::Data
getFullName	ndn-cxx/src/util/in-memory-storage-entry.hpp	/^  getFullName() const$/;"	f	class:ndn::util::InMemoryStorageEntry
getGlobalIoService	NFD/core/global-io.hpp	/^getGlobalIoService()$/;"	f	namespace:nfd
getGlobalRng	NFD/core/random.cpp	/^getGlobalRng()$/;"	f	namespace:nfd
getHash	NFD/daemon/table/name-tree-entry.hpp	/^Entry::getHash() const$/;"	f	class:nfd::name_tree::Entry
getHeader	ndn-cxx/src/lp/nack.hpp	/^  getHeader() const$/;"	f	class:ndn::lp::Nack
getHeader	ndn-cxx/src/lp/nack.hpp	/^  getHeader()$/;"	f	class:ndn::lp::Nack
getHook	utils/trie/multi-policy.hpp	/^  struct getHook {$/;"	s	struct:ns3::ndn::ndnSIM::multi_policy_traits
getHost	ndn-cxx/src/util/face-uri.hpp	/^  getHost() const$/;"	f	class:ndn::util::FaceUri
getId	NFD/daemon/face/face.hpp	/^Face::getId() const$/;"	f	class:nfd::Face
getId	ndn-cxx/src/security/conf/rule.hpp	/^  getId()$/;"	f	class:ndn::security::conf::Rule
getIdentities	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::getIdentities() const$/;"	f	class:ndn::security::PibMemory
getIdentities	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::getIdentities() const$/;"	f	class:ndn::security::PibSqlite3
getIdentities	ndn-cxx/src/security/pib.cpp	/^Pib::getIdentities() const$/;"	f	class:ndn::security::Pib
getIdentity	ndn-cxx/src/security/key.cpp	/^Key::getIdentity() const$/;"	f	class:ndn::security::Key
getIdentity	ndn-cxx/src/security/pib.cpp	/^Pib::getIdentity(const Name& identity) const$/;"	f	class:ndn::security::Pib
getIdentityCertificate	ndn-cxx/tools/ndnsec/util.hpp	/^getIdentityCertificate(const std::string& fileName)$/;"	f
getIdentityName	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  getIdentityName() const$/;"	f	class:nfd::tests::CommandValidatorTester
getIdentityName	NFD/tests/daemon/mgmt/validation-common.hpp	/^  getIdentityName() const$/;"	f	class:nfd::tests::CommandFixture
getIdentityName	NFD/tests/daemon/mgmt/validation-common.hpp	/^  static const Name& getIdentityName()$/;"	f	class:nfd::tests::CommandIdentityGlobalFixture
getImpExpPassWord	ndn-cxx/src/security/sec-tpm.cpp	/^SecTpm::getImpExpPassWord(std::string& password, const std::string& prompt)$/;"	f	class:ndn::SecTpm
getImpl	ndn-cxx/src/security/pib.hpp	/^  getImpl()$/;"	f	class:ndn::security::Pib
getInRecord	NFD/daemon/table/pit-entry.cpp	/^Entry::getInRecord(const Face& face) const$/;"	f	class:nfd::pit::Entry
getInRecords	NFD/daemon/table/pit-entry.hpp	/^Entry::getInRecords() const$/;"	f	class:nfd::pit::Entry
getInTerminal	ndn-cxx/src/security/key-chain.hpp	/^  getInTerminal() const$/;"	f	class:ndn::security::KeyChain
getInTerminal	ndn-cxx/src/security/sec-tpm-file.hpp	/^  getInTerminal() const$/;"	f	class:ndn::SecTpmFile
getInTerminal	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::getInTerminal() const$/;"	f	class:ndn::SecTpmOsx
getInTerminal	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::getInTerminal() const$/;"	f	class:ndn::security::DummyTpm
getInTerminal	utils/dummy-keychain.cpp	/^DummyTpm::getInTerminal() const$/;"	f	class:ndn::security::DummyTpm
getIncomingFaceId	ndn-cxx/src/data.hpp	/^Data::getIncomingFaceId() const$/;"	f	class:ndn::Data
getIncomingFaceId	ndn-cxx/src/interest.hpp	/^  getIncomingFaceId() const$/;"	f	class:ndn::Interest
getIncomingFaceId	ndn-cxx/src/management/nfd-local-control-header.hpp	/^  getIncomingFaceId() const$/;"	f	class:ndn::nfd::LocalControlHeader
getInfo	ndn-cxx/src/signature.hpp	/^  getInfo() const$/;"	f	class:ndn::Signature
getInheritedRoutes	NFD/rib/rib-entry.hpp	/^RibEntry::getInheritedRoutes() const$/;"	f	class:nfd::rib::RibEntry
getInitialLifetime	NFD/daemon/table/measurements.hpp	/^Measurements::getInitialLifetime()$/;"	f	class:nfd::Measurements
getInitialRtt	NFD/daemon/fw/rtt-estimator.hpp	/^  getInitialRtt(void)$/;"	f	class:nfd::RttEstimator
getInt	ndn-cxx/src/util/sqlite3-statement.cpp	/^Sqlite3Statement::getInt(int column)$/;"	f	class:ndn::util::Sqlite3Statement
getIntegerList	ndn-cxx/src/encoding/oid.hpp	/^  getIntegerList() const$/;"	f	class:ndn::OID
getInterest	NFD/daemon/table/pit-entry.hpp	/^Entry::getInterest() const$/;"	f	class:nfd::pit::Entry
getInterest	NFD/daemon/table/pit-in-record.hpp	/^InRecord::getInterest() const$/;"	f	class:nfd::pit::InRecord
getInterest	ndn-cxx/src/detail/pending-interest.hpp	/^  getInterest() const$/;"	f	class:ndn::PendingInterest
getInterest	ndn-cxx/src/lp/nack.hpp	/^  getInterest() const$/;"	f	class:ndn::lp::Nack
getInterest	ndn-cxx/src/lp/nack.hpp	/^  getInterest()$/;"	f	class:ndn::lp::Nack
getInterestLifetime	ndn-cxx/src/interest.hpp	/^  getInterestLifetime() const$/;"	f	class:ndn::Interest
getInterestLifetime	ndn-cxx/src/util/notification-subscriber.hpp	/^  getInterestLifetime() const$/;"	f	class:ndn::util::NotificationSubscriber
getInterfaceMtu	NFD/daemon/face/ethernet-face.cpp	/^EthernetFace::getInterfaceMtu()$/;"	f	class:nfd::EthernetFace
getInternalFace	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  getInternalFace()$/;"	f	class:nfd::tests::FibManagerFixture
getInternalFace	NFD/tests/daemon/mgmt/manager-base.t.cpp	/^  getInternalFace()$/;"	f	class:nfd::tests::ManagerBaseTest
getIoService	ndn-cxx/src/face.hpp	/^  getIoService()$/;"	f	class:ndn::Face
getIoService	ndn-cxx/src/util/dummy-client-face.cpp	/^  getIoService()$/;"	f	class:ndn::util::DummyClientFace::Transport
getIsCritical	ndn-cxx/src/security/certificate-extension.hpp	/^  getIsCritical() const$/;"	f	class:ndn::CertificateExtension
getItemFromExpand	ndn-cxx/src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::getItemFromExpand(const std::string& expand, size_t& offset)$/;"	f	class:ndn::RegexTopMatcher
getKey	ndn-cxx/src/security/identity.cpp	/^Identity::getKey(const name::Component& keyId) const$/;"	f	class:ndn::security::Identity
getKey	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getKey(const Name& keyName, KeyClass keyClass)$/;"	f	class:ndn::SecTpmOsx::Impl
getKey	ndn-cxx/src/security/secured-bag.hpp	/^  getKey() const$/;"	f	class:ndn::SecuredBag
getKeyBits	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::getKeyBits(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibMemory
getKeyBits	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::getKeyBits(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibSqlite3
getKeyChain	helper/ndn-stack-helper.cpp	/^StackHelper::getKeyChain()$/;"	f	class:ns3::ndn::StackHelper
getKeyClass	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getKeyClass(KeyClass keyClass)$/;"	f	class:ndn::SecTpmOsx::Impl
getKeyDigest	ndn-cxx/src/key-locator.cpp	/^KeyLocator::getKeyDigest() const$/;"	f	class:ndn::KeyLocator
getKeyId	ndn-cxx/src/security/key.cpp	/^Key::getKeyId() const$/;"	f	class:ndn::security::Key
getKeyLocator	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::getKeyLocator() const$/;"	f	class:ndn::SignatureInfo
getKeyLocator	ndn-cxx/src/signature.hpp	/^  getKeyLocator() const$/;"	f	class:ndn::Signature
getKeyName	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::getKeyName(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibMemory
getKeyName	ndn-cxx/src/security/pib-sqlite3.cpp	/^getKeyName(const Name& identity, const name::Component& keyId)$/;"	f	namespace:ndn::security
getKeySize	ndn-cxx/src/security/key-params.hpp	/^  getKeySize() const$/;"	f	class:ndn::SimplePublicKeyParams
getKeySize	ndn-cxx/src/security/key-params.hpp	/^  getKeySize() const$/;"	f	class:ndn::SimpleSymmetricKeyParams
getKeyType	ndn-cxx/src/security/key-params.hpp	/^  getKeyType() const$/;"	f	class:ndn::KeyParams
getKeyType	ndn-cxx/src/security/public-key.hpp	/^  getKeyType() const$/;"	f	class:ndn::PublicKey
getKeys	ndn-cxx/src/security/identity.cpp	/^Identity::getKeys() const$/;"	f	class:ndn::security::Identity
getKeysOfIdentity	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::getKeysOfIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibMemory
getKeysOfIdentity	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::getKeysOfIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibSqlite3
getKind	ndn-cxx/src/management/nfd-face-event-notification.hpp	/^  getKind() const$/;"	f	class:ndn::nfd::FaceEventNotification
getL3Protocol	model/ndn-l3-protocol.cpp	/^L3Protocol::getL3Protocol(Ptr<Object> node)$/;"	f	class:ns3::ndn::L3Protocol
getLastException	NFD/tests/limited-io.cpp	/^LimitedIo::getLastException() const$/;"	f	class:nfd::tests::LimitedIo
getLastNonce	NFD/daemon/table/pit-face-record.hpp	/^FaceRecord::getLastNonce() const$/;"	f	class:nfd::pit::FaceRecord
getLastOutgoing	NFD/daemon/fw/retx-suppression.cpp	/^RetxSuppression::getLastOutgoing(const pit::Entry& pitEntry) const$/;"	f	class:nfd::fw::RetxSuppression
getLastRefresh	ndn-cxx/src/security/validator-config.hpp	/^    getLastRefresh() const$/;"	f	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
getLastRenewed	NFD/daemon/table/pit-face-record.hpp	/^FaceRecord::getLastRenewed() const$/;"	f	class:nfd::pit::FaceRecord
getLifetime	NFD/daemon/table/dead-nonce-list.hpp	/^DeadNonceList::getLifetime() const$/;"	f	class:nfd::DeadNonceList
getLimit	NFD/daemon/table/cs-policy.hpp	/^Policy::getLimit() const$/;"	f	class:nfd::cs::Policy
getLimit	NFD/daemon/table/cs.cpp	/^Cs::getLimit() const$/;"	f	class:nfd::cs::Cs
getLimit	NFD/tests/core/segment-publisher.t.cpp	/^  getLimit() const$/;"	f	class:nfd::tests::SegmentPublisherTester
getLimit	ndn-cxx/src/util/in-memory-storage.hpp	/^  getLimit() const$/;"	f	class:ndn::util::InMemoryStorage
getLink	ndn-cxx/src/interest.cpp	/^Interest::getLink() const$/;"	f	class:ndn::Interest
getLinkType	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  getLinkType() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getLinkType	ndn-cxx/src/management/nfd-face-traits.hpp	/^  getLinkType() const$/;"	f	class:ndn::nfd::FaceTraits
getLocalControlFeature	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  getLocalControlFeature() const$/;"	f	class:ndn::nfd::ControlParameters
getLocalControlHeader	ndn-cxx/src/data.hpp	/^Data::getLocalControlHeader() const$/;"	f	class:ndn::Data
getLocalControlHeader	ndn-cxx/src/data.hpp	/^Data::getLocalControlHeader()$/;"	f	class:ndn::Data
getLocalControlHeader	ndn-cxx/src/interest.hpp	/^  getLocalControlHeader() const$/;"	f	class:ndn::Interest
getLocalControlHeader	ndn-cxx/src/interest.hpp	/^  getLocalControlHeader()$/;"	f	class:ndn::Interest
getLocalFaces	NFD/tests/daemon/fw/strategy.t.cpp	/^  getLocalFaces()$/;"	f	class:nfd::fw::tests::FaceTableAccessTestStrategy
getLocalIp	NFD/tests/daemon/face/udp.t.cpp	/^  getLocalIp()$/;"	f	class:nfd::tests::EndToEndIpv4
getLocalIp	NFD/tests/daemon/face/udp.t.cpp	/^  getLocalIp()$/;"	f	class:nfd::tests::EndToEndIpv6
getLocalNfdTransport	NFD/rib/nrd.cpp	/^Nrd::getLocalNfdTransport()$/;"	f	class:nfd::rib::Nrd
getLocalUri	NFD/daemon/face/face.hpp	/^Face::getLocalUri() const$/;"	f	class:nfd::Face
getLocalUri	ndn-cxx/src/management/nfd-channel-status.hpp	/^  getLocalUri() const$/;"	f	class:ndn::nfd::ChannelStatus
getLocalUri	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  getLocalUri() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getLocalUri	ndn-cxx/src/management/nfd-face-traits.hpp	/^  getLocalUri() const$/;"	f	class:ndn::nfd::FaceTraits
getLocationSortOrder	ndn-cxx/src/lp/detail/field-info.hpp	/^getLocationSortOrder<field_location_tags::Fragment>()$/;"	f	namespace:ndn::lp::detail
getLocationSortOrder	ndn-cxx/src/lp/detail/field-info.hpp	/^getLocationSortOrder<field_location_tags::Header>()$/;"	f	namespace:ndn::lp::detail
getManager	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  getManager()$/;"	f	class:nfd::tests::FaceManagerFixture
getManager	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  getManager()$/;"	f	class:nfd::tests::StrategyChoiceManagerFixture
getMatchResult	ndn-cxx/src/util/regex/regex-matcher.hpp	/^  getMatchResult() const$/;"	f	class:ndn::RegexMatcher
getMaxRangeV4	NFD/core/network.cpp	/^Network::getMaxRangeV4()$/;"	f	class:nfd::Network
getMaxRangeV6	NFD/core/network.cpp	/^Network::getMaxRangeV6()$/;"	f	class:nfd::Network
getMaxSegmentSize	NFD/core/segment-publisher.hpp	/^  getMaxSegmentSize()$/;"	f	class:nfd::SegmentPublisher
getMaxSuffixComponents	ndn-cxx/src/interest.hpp	/^  getMaxSuffixComponents() const$/;"	f	class:ndn::Interest
getMaxSuffixComponents	ndn-cxx/src/selectors.hpp	/^  getMaxSuffixComponents() const$/;"	f	class:ndn::Selectors
getMeasurements	NFD/daemon/fw/forwarder.hpp	/^Forwarder::getMeasurements()$/;"	f	class:nfd::Forwarder
getMeasurements	NFD/daemon/fw/strategy.hpp	/^Strategy::getMeasurements()$/;"	f	class:nfd::fw::Strategy
getMeasurementsAccessor	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^  getMeasurementsAccessor()$/;"	f	class:nfd::tests::MeasurementsAccessorTestStrategy
getMeasurementsEntry	NFD/daemon/table/name-tree-entry.hpp	/^Entry::getMeasurementsEntry() const$/;"	f	class:nfd::name_tree::Entry
getMeasurementsEntryInfo	NFD/daemon/fw/ncc-strategy.cpp	/^NccStrategy::getMeasurementsEntryInfo(shared_ptr<measurements::Entry> entry)$/;"	f	class:nfd::fw::NccStrategy
getMeasurementsEntryInfo	NFD/daemon/fw/ncc-strategy.cpp	/^NccStrategy::getMeasurementsEntryInfo(shared_ptr<pit::Entry> entry)$/;"	f	class:nfd::fw::NccStrategy
getMessage	NFD/tests/core/simple-notification.hpp	/^  getMessage() const$/;"	f	class:nfd::tests::SimpleNotification
getMessage	ndn-cxx/tests/unit-tests/util/simple-notification.hpp	/^  getMessage() const$/;"	f	class:ndn::util::tests::SimpleNotification
getMetaInfo	ndn-cxx/src/data.hpp	/^Data::getMetaInfo() const$/;"	f	class:ndn::Data
getMetric	NFD/daemon/face/face.hpp	/^Face::getMetric() const$/;"	f	class:nfd::Face
getMinSuffixComponents	ndn-cxx/src/interest.hpp	/^  getMinSuffixComponents() const$/;"	f	class:ndn::Interest
getMinSuffixComponents	ndn-cxx/src/selectors.hpp	/^  getMinSuffixComponents() const$/;"	f	class:ndn::Selectors
getMulticastFaces	NFD/daemon/face/ethernet-factory.hpp	/^EthernetFactory::getMulticastFaces() const$/;"	f	class:nfd::EthernetFactory
getMulticastFaces	NFD/daemon/face/udp-factory.hpp	/^UdpFactory::getMulticastFaces() const$/;"	f	class:nfd::UdpFactory
getMulticastGroup	NFD/daemon/face/multicast-udp-face.cpp	/^MulticastUdpFace::getMulticastGroup() const$/;"	f	class:nfd::MulticastUdpFace
getMustBeFresh	ndn-cxx/src/interest.hpp	/^  getMustBeFresh() const$/;"	f	class:ndn::Interest
getMustBeFresh	ndn-cxx/src/selectors.hpp	/^  getMustBeFresh() const$/;"	f	class:ndn::Selectors
getMutableCounters	NFD/daemon/face/face.hpp	/^Face::getMutableCounters()$/;"	f	class:nfd::Face
getNBuckets	NFD/daemon/table/name-tree.hpp	/^NameTree::getNBuckets() const$/;"	f	class:nfd::NameTree
getNChannels	NFD/tests/daemon/mgmt/channel-status-common.hpp	/^  getNChannels() const$/;"	f	class:nfd::tests::DummyProtocolFactory
getNCsEntries	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  getNCsEntries() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNFibEntries	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  getNFibEntries() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNInBytes	NFD/daemon/face/face-counters.hpp	/^  getNInBytes() const$/;"	f	class:nfd::LinkLayerCounters
getNInBytes	NFD/daemon/face/face-counters.hpp	/^  getNInBytes()$/;"	f	class:nfd::LinkLayerCounters
getNInBytes	ndn-cxx/src/management/nfd-face-status.hpp	/^  getNInBytes() const$/;"	f	class:ndn::nfd::FaceStatus
getNInDatas	NFD/daemon/face/face-counters.hpp	/^  getNInDatas() const$/;"	f	class:nfd::NetworkLayerCounters
getNInDatas	NFD/daemon/face/face-counters.hpp	/^  getNInDatas()$/;"	f	class:nfd::NetworkLayerCounters
getNInDatas	ndn-cxx/src/management/nfd-face-status.hpp	/^  getNInDatas() const$/;"	f	class:ndn::nfd::FaceStatus
getNInDatas	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  getNInDatas() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNInInterests	NFD/daemon/face/face-counters.hpp	/^  getNInInterests() const$/;"	f	class:nfd::NetworkLayerCounters
getNInInterests	NFD/daemon/face/face-counters.hpp	/^  getNInInterests()$/;"	f	class:nfd::NetworkLayerCounters
getNInInterests	ndn-cxx/src/management/nfd-face-status.hpp	/^  getNInInterests() const$/;"	f	class:ndn::nfd::FaceStatus
getNInInterests	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  getNInInterests() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNMeasurementsEntries	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  getNMeasurementsEntries() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNNameTreeEntries	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  getNNameTreeEntries() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNOutBytes	NFD/daemon/face/face-counters.hpp	/^  getNOutBytes() const$/;"	f	class:nfd::LinkLayerCounters
getNOutBytes	NFD/daemon/face/face-counters.hpp	/^  getNOutBytes()$/;"	f	class:nfd::LinkLayerCounters
getNOutBytes	ndn-cxx/src/management/nfd-face-status.hpp	/^  getNOutBytes() const$/;"	f	class:ndn::nfd::FaceStatus
getNOutDatas	NFD/daemon/face/face-counters.hpp	/^  getNOutDatas() const$/;"	f	class:nfd::NetworkLayerCounters
getNOutDatas	NFD/daemon/face/face-counters.hpp	/^  getNOutDatas()$/;"	f	class:nfd::NetworkLayerCounters
getNOutDatas	ndn-cxx/src/management/nfd-face-status.hpp	/^  getNOutDatas() const$/;"	f	class:ndn::nfd::FaceStatus
getNOutDatas	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  getNOutDatas() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNOutInterests	NFD/daemon/face/face-counters.hpp	/^  getNOutInterests() const$/;"	f	class:nfd::NetworkLayerCounters
getNOutInterests	NFD/daemon/face/face-counters.hpp	/^  getNOutInterests()$/;"	f	class:nfd::NetworkLayerCounters
getNOutInterests	ndn-cxx/src/management/nfd-face-status.hpp	/^  getNOutInterests() const$/;"	f	class:ndn::nfd::FaceStatus
getNOutInterests	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  getNOutInterests() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNPendingInterests	ndn-cxx/src/face.cpp	/^Face::getNPendingInterests() const$/;"	f	class:ndn::Face
getNPitEntries	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  getNPitEntries() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNRoutes	NFD/rib/rib-entry.cpp	/^RibEntry::getNRoutes() const$/;"	f	class:nfd::rib::RibEntry
getName	NFD/daemon/fw/strategy.hpp	/^Strategy::getName() const$/;"	f	class:nfd::fw::Strategy
getName	NFD/daemon/table/cs-entry.hpp	/^  getName() const$/;"	f	class:nfd::cs::Entry
getName	NFD/daemon/table/cs-policy.hpp	/^Policy::getName() const$/;"	f	class:nfd::cs::Policy
getName	NFD/daemon/table/measurements-entry.hpp	/^Entry::getName() const$/;"	f	class:nfd::measurements::Entry
getName	NFD/daemon/table/pit-entry.cpp	/^Entry::getName() const$/;"	f	class:nfd::pit::Entry
getName	NFD/rib/rib-entry.hpp	/^RibEntry::getName() const$/;"	f	class:nfd::rib::RibEntry
getName	NFD/rib/rib-update.hpp	/^RibUpdate::getName() const$/;"	f	class:nfd::rib::RibUpdate
getName	NFD/tests/daemon/face/packet-datasets.hpp	/^  getName()$/;"	f	class:nfd::tests::CorruptedInterest
getName	NFD/tests/daemon/face/packet-datasets.hpp	/^  getName()$/;"	f	class:nfd::tests::CorruptedInterestWithLocalControlHeader
getName	ndn-cxx/src/data.hpp	/^Data::getName() const$/;"	f	class:ndn::Data
getName	ndn-cxx/src/interest.hpp	/^  getName() const$/;"	f	class:ndn::Interest
getName	ndn-cxx/src/key-locator.cpp	/^KeyLocator::getName() const$/;"	f	class:ndn::KeyLocator
getName	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  getName() const$/;"	f	class:ndn::nfd::ControlParameters
getName	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  getName() const$/;"	f	class:ndn::nfd::RibEntry
getName	ndn-cxx/src/management/nfd-strategy-choice.hpp	/^  getName() const$/;"	f	class:ndn::nfd::StrategyChoice
getName	ndn-cxx/src/security/identity.cpp	/^Identity::getName() const$/;"	f	class:ndn::security::Identity
getName	ndn-cxx/src/security/key.cpp	/^Key::getName() const$/;"	f	class:ndn::security::Key
getName	ndn-cxx/src/util/in-memory-storage-entry.hpp	/^  getName() const$/;"	f	class:ndn::util::InMemoryStorageEntry
getNameTree	NFD/daemon/fw/forwarder.hpp	/^Forwarder::getNameTree()$/;"	f	class:nfd::Forwarder
getNewKeyName	ndn-cxx/src/security/key-chain.hpp	/^  getNewKeyName(const Name& identityName, bool useKsk)$/;"	f	class:ndn::security::KeyChain
getNewKeyName	ndn-cxx/src/security/sec-public-info.cpp	/^SecPublicInfo::getNewKeyName(const Name& identityName, bool useKsk)$/;"	f	class:ndn::SecPublicInfo
getNextHopFaceId	ndn-cxx/src/interest.hpp	/^  getNextHopFaceId() const$/;"	f	class:ndn::Interest
getNextHopFaceId	ndn-cxx/src/management/nfd-local-control-header.hpp	/^  getNextHopFaceId() const$/;"	f	class:ndn::nfd::LocalControlHeader
getNextHopRecords	ndn-cxx/src/management/nfd-fib-entry.hpp	/^  getNextHopRecords() const$/;"	f	class:ndn::nfd::FibEntry
getNextHops	NFD/daemon/table/fib-entry.hpp	/^Entry::getNextHops() const$/;"	f	class:nfd::fib::Entry
getNfdVersion	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  getNfdVersion() const$/;"	f	class:ndn::nfd::ForwarderStatus
getNode	helper/ndn-scenario-helper.cpp	/^ScenarioHelper::getNode(const std::string& nodeName)$/;"	f	class:ns3::ndn::ScenarioHelper
getNonce	ndn-cxx/src/interest.cpp	/^Interest::getNonce() const$/;"	f	class:ndn::Interest
getNotAfter	ndn-cxx/src/security/certificate.hpp	/^  getNotAfter() const$/;"	f	class:ndn::Certificate
getNotAfter	ndn-cxx/src/security/certificate.hpp	/^  getNotAfter()$/;"	f	class:ndn::Certificate
getNotBefore	ndn-cxx/src/security/certificate.hpp	/^  getNotBefore() const$/;"	f	class:ndn::Certificate
getNotBefore	ndn-cxx/src/security/certificate.hpp	/^  getNotBefore()$/;"	f	class:ndn::Certificate
getNow	ndn-cxx/src/util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::getNow() const$/;"	f	class:ndn::time::UnitTestClock
getNow	utils/ndn-time.cpp	/^CustomSteadyClock::getNow() const$/;"	f	class:ns3::ndn::time::CustomSteadyClock
getNow	utils/ndn-time.cpp	/^CustomSystemClock::getNow() const$/;"	f	class:ns3::ndn::time::CustomSystemClock
getOid	ndn-cxx/src/security/certificate-extension.hpp	/^  getOid() const$/;"	f	class:ndn::CertificateExtension
getOidString	ndn-cxx/src/security/certificate-subject-description.hpp	/^  getOidString() const$/;"	f	class:ndn::CertificateSubjectDescription
getOrCreateNode	helper/ndn-scenario-helper.cpp	/^ScenarioHelper::getOrCreateNode(const std::string& nodeName)$/;"	f	class:ns3::ndn::ScenarioHelper
getOrCreateStrategyInfo	NFD/daemon/table/strategy-info-host.hpp	/^StrategyInfoHost::getOrCreateStrategyInfo(A&&... args)$/;"	f	class:nfd::StrategyInfoHost
getOrigin	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  getOrigin() const$/;"	f	class:ndn::nfd::ControlParameters
getOrigin	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  getOrigin() const$/;"	f	class:ndn::nfd::Route
getOutRecord	NFD/daemon/table/pit-entry.cpp	/^Entry::getOutRecord(const Face& face) const$/;"	f	class:nfd::pit::Entry
getOutRecords	NFD/daemon/table/pit-entry.hpp	/^Entry::getOutRecords() const$/;"	f	class:nfd::pit::Entry
getPacket	model/ndn-header.cpp	/^PacketHeader<Pkt>::getPacket()$/;"	f	class:ns3::ndn::PacketHeader
getPacket	utils/ndn-ns3-packet-tag.hpp	/^  getPacket() const$/;"	f	class:ns3::ndn::Ns3PacketTag
getPacketType	model/ndn-ns3.cpp	/^Convert::getPacketType(Ptr<const Packet> packet)$/;"	f	class:ns3::ndn::Convert
getParent	NFD/daemon/table/measurements-accessor.hpp	/^MeasurementsAccessor::getParent(const measurements::Entry& child)$/;"	f	class:nfd::MeasurementsAccessor
getParent	NFD/daemon/table/measurements.cpp	/^Measurements::getParent(const Entry& child)$/;"	f	class:nfd::Measurements
getParent	NFD/daemon/table/name-tree-entry.hpp	/^Entry::getParent() const$/;"	f	class:nfd::name_tree::Entry
getParent	NFD/rib/rib-entry.hpp	/^RibEntry::getParent() const$/;"	f	class:nfd::rib::RibEntry
getParsedConfiguration	ndn-cxx/src/util/config-file.hpp	/^ConfigFile::getParsedConfiguration() const$/;"	f	class:ndn::ConfigFile
getPassword	ndn-cxx/tools/ndnsec/util.hpp	/^getPassword(std::string& password, const std::string& prompt)$/;"	f
getPath	ndn-cxx/src/util/config-file.hpp	/^ConfigFile::getPath() const$/;"	f	class:ndn::ConfigFile
getPath	ndn-cxx/src/util/face-uri.hpp	/^  getPath() const$/;"	f	class:ndn::util::FaceUri
getPayload	ndn-cxx/src/management/nfd-local-control-header.hpp	/^LocalControlHeader::getPayload(const Block& wire)$/;"	f	class:ndn::nfd::LocalControlHeader
getPeriod	ndn-cxx/src/security/validity-period.cpp	/^ValidityPeriod::getPeriod() const$/;"	f	class:ndn::security::ValidityPeriod
getPersistency	NFD/daemon/face/face.hpp	/^Face::getPersistency() const$/;"	f	class:nfd::Face
getPib	ndn-cxx/src/security/key-chain.hpp	/^  getPib() const$/;"	f	class:ndn::security::KeyChain
getPib	ndn-cxx/src/security/key-chain.hpp	/^  getPib()$/;"	f	class:ndn::security::KeyChain
getPibFactories	ndn-cxx/src/security/key-chain.cpp	/^getPibFactories()$/;"	f	namespace:ndn::security
getPibLocator	ndn-cxx/src/security/pib.cpp	/^Pib::getPibLocator() const$/;"	f	class:ndn::security::Pib
getPibLocator	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getPibLocator()$/;"	f	class:ndn::SecPublicInfoSqlite3
getPibLocator	ndn-cxx/src/security/sec-public-info.cpp	/^SecPublicInfo::getPibLocator()$/;"	f	class:ndn::SecPublicInfo
getPit	NFD/daemon/fw/forwarder.hpp	/^Forwarder::getPit()$/;"	f	class:nfd::Forwarder
getPitEntries	NFD/daemon/table/name-tree-entry.hpp	/^Entry::getPitEntries() const$/;"	f	class:nfd::name_tree::Entry
getPolicy	NFD/daemon/table/cs.hpp	/^  getPolicy() const$/;"	f	class:nfd::cs::Cs
getPolicy	ndn-cxx/src/lp/cache-policy.cpp	/^CachePolicy::getPolicy() const$/;"	f	class:ndn::lp::CachePolicy
getPolicy	utils/trie/multi-policy.hpp	/^    struct getPolicy {$/;"	s	struct:ns3::ndn::ndnSIM::multi_policy_traits::policy
getPolicy	utils/trie/trie-with-policy.hpp	/^  getPolicy() const$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
getPolicy	utils/trie/trie-with-policy.hpp	/^  getPolicy()$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
getPort	ndn-cxx/src/util/face-uri.hpp	/^  getPort() const$/;"	f	class:ndn::util::FaceUri
getPort1	NFD/tests/daemon/face/udp.t.cpp	/^  getPort1()$/;"	f	class:nfd::tests::EndToEndIpv4
getPort1	NFD/tests/daemon/face/udp.t.cpp	/^  getPort1()$/;"	f	class:nfd::tests::EndToEndIpv6
getPort2	NFD/tests/daemon/face/udp.t.cpp	/^  getPort2()$/;"	f	class:nfd::tests::EndToEndIpv4
getPort2	NFD/tests/daemon/face/udp.t.cpp	/^  getPort2()$/;"	f	class:nfd::tests::EndToEndIpv6
getPort3	NFD/tests/daemon/face/udp.t.cpp	/^  getPort3()$/;"	f	class:nfd::tests::EndToEndIpv4
getPort3	NFD/tests/daemon/face/udp.t.cpp	/^  getPort3()$/;"	f	class:nfd::tests::EndToEndIpv6
getPrefix	NFD/daemon/table/fib-entry.hpp	/^Entry::getPrefix() const$/;"	f	class:nfd::fib::Entry
getPrefix	NFD/daemon/table/name-tree-entry.hpp	/^Entry::getPrefix() const$/;"	f	class:nfd::name_tree::Entry
getPrefix	NFD/daemon/table/strategy-choice-entry.hpp	/^Entry::getPrefix() const$/;"	f	class:nfd::strategy_choice::Entry
getPrefix	ndn-cxx/src/detail/registered-prefix.hpp	/^  getPrefix() const$/;"	f	class:ndn::RegisteredPrefix
getPrefix	ndn-cxx/src/interest-filter.hpp	/^  getPrefix() const$/;"	f	class:ndn::InterestFilter
getPrefix	ndn-cxx/src/management/nfd-command-options.hpp	/^  getPrefix() const$/;"	f	class:ndn::nfd::CommandOptions
getPrefix	ndn-cxx/src/management/nfd-fib-entry.hpp	/^  getPrefix() const$/;"	f	class:ndn::nfd::FibEntry
getPrefix	ndn-cxx/src/mgmt/status-dataset-context.cpp	/^StatusDatasetContext::getPrefix() const$/;"	f	class:ndn::mgmt::StatusDatasetContext
getPrefix	ndn-cxx/src/name.hpp	/^  getPrefix(ssize_t nComponents) const$/;"	f	class:ndn::Name
getPresentFields	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  getPresentFields() const$/;"	f	class:ndn::nfd::ControlParameters
getPublicKey	ndn-cxx/src/security/key-chain.hpp	/^  getPublicKey(const Name& keyName) const$/;"	f	class:ndn::security::KeyChain
getPublicKey	ndn-cxx/src/security/key.cpp	/^Key::getPublicKey() const$/;"	f	class:ndn::security::Key
getPublicKey	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getPublicKey(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
getPublicKey	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getPublicKey(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
getPublicKey	utils/dummy-keychain.cpp	/^DummyPublicInfo::getPublicKey(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
getPublicKeyFromTpm	ndn-cxx/src/security/key-chain.hpp	/^  getPublicKeyFromTpm(const Name& keyName) const$/;"	f	class:ndn::security::KeyChain
getPublicKeyFromTpm	ndn-cxx/src/security/sec-tpm-file.cpp	/^SecTpmFile::getPublicKeyFromTpm(const Name&  keyName)$/;"	f	class:ndn::SecTpmFile
getPublicKeyFromTpm	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::getPublicKeyFromTpm(const Name& keyName)$/;"	f	class:ndn::SecTpmOsx
getPublicKeyFromTpm	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::getPublicKeyFromTpm(const Name& keyName)$/;"	f	class:ndn::security::DummyTpm
getPublicKeyFromTpm	utils/dummy-keychain.cpp	/^DummyTpm::getPublicKeyFromTpm(const Name& keyName)$/;"	f	class:ndn::security::DummyTpm
getPublicKeyInfo	ndn-cxx/src/security/certificate.hpp	/^  getPublicKeyInfo() const$/;"	f	class:ndn::Certificate
getPublicKeyInfo	ndn-cxx/src/security/certificate.hpp	/^  getPublicKeyInfo()$/;"	f	class:ndn::Certificate
getPublicKeyName	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  getPublicKeyName() const$/;"	f	class:nfd::tests::CommandValidatorTester
getPublicKeyName	ndn-cxx/src/security/identity-certificate.hpp	/^  getPublicKeyName() const$/;"	f	class:ndn::IdentityCertificate
getPublicKeyType	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getPublicKeyType(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
getPublicKeyType	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getPublicKeyType(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
getPublicKeyType	utils/dummy-keychain.cpp	/^DummyPublicInfo::getPublicKeyType(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
getPublisherPublicKeyLocator	ndn-cxx/src/interest.hpp	/^  getPublisherPublicKeyLocator() const$/;"	f	class:ndn::Interest
getPublisherPublicKeyLocator	ndn-cxx/src/selectors.hpp	/^  getPublisherPublicKeyLocator() const$/;"	f	class:ndn::Selectors
getRandomGenerator	ndn-cxx/src/util/random.cpp	/^getRandomGenerator()$/;"	f	namespace:ndn::random
getReason	ndn-cxx/src/lp/nack-header.cpp	/^NackHeader::getReason() const$/;"	f	class:ndn::lp::NackHeader
getReason	ndn-cxx/src/lp/nack.hpp	/^  getReason() const$/;"	f	class:ndn::lp::Nack
getRefreshPeriod	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::getRefreshPeriod(std::string inputString)$/;"	f	class:ndn::ValidatorConfig
getRefreshPeriod	ndn-cxx/src/security/validator-config.hpp	/^    getRefreshPeriod() const$/;"	f	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
getRegexFilter	ndn-cxx/src/interest-filter.hpp	/^  getRegexFilter() const$/;"	f	class:ndn::InterestFilter
getRemoteUri	NFD/daemon/face/face.hpp	/^Face::getRemoteUri() const$/;"	f	class:nfd::Face
getRemoteUri	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  getRemoteUri() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getRemoteUri	ndn-cxx/src/management/nfd-face-traits.hpp	/^  getRemoteUri() const$/;"	f	class:ndn::nfd::FaceTraits
getRequestName	ndn-cxx/src/management/nfd-control-command.cpp	/^ControlCommand::getRequestName(const Name& commandPrefix,$/;"	f	class:ndn::nfd::ControlCommand
getRequestSeqNo	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  getRequestSeqNo() const$/;"	f	class:ndn::util::tests::EndToEndFixture
getRoute	NFD/rib/rib-update.hpp	/^RibUpdate::getRoute() const$/;"	f	class:nfd::rib::RibUpdate
getRouteWithLowestCostAndChildInheritByFaceId	NFD/rib/rib-entry.cpp	/^RibEntry::getRouteWithLowestCostAndChildInheritByFaceId(uint64_t faceId) const$/;"	f	class:nfd::rib::RibEntry
getRouteWithLowestCostByFaceId	NFD/rib/rib-entry.cpp	/^RibEntry::getRouteWithLowestCostByFaceId(uint64_t faceId) const$/;"	f	class:nfd::rib::RibEntry
getRouteWithSecondLowestCostByFaceId	NFD/rib/rib-entry.cpp	/^RibEntry::getRouteWithSecondLowestCostByFaceId(uint64_t faceId) const$/;"	f	class:nfd::rib::RibEntry
getRoutes	NFD/rib/rib-entry.hpp	/^RibEntry::getRoutes()$/;"	f	class:nfd::rib::RibEntry
getRoutes	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  getRoutes() const$/;"	f	class:ndn::nfd::RibEntry
getScheme	NFD/tests/daemon/face/udp.t.cpp	/^  getScheme()$/;"	f	class:nfd::tests::EndToEndIpv4
getScheme	NFD/tests/daemon/face/udp.t.cpp	/^  getScheme()$/;"	f	class:nfd::tests::EndToEndIpv6
getScheme	ndn-cxx/src/security/pib.hpp	/^  getScheme() const$/;"	f	class:ndn::security::Pib
getScheme	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getScheme()$/;"	f	class:ndn::SecPublicInfoSqlite3
getScheme	ndn-cxx/src/security/sec-tpm-file.cpp	/^SecTpmFile::getScheme()$/;"	f	class:ndn::SecTpmFile
getScheme	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::getScheme()$/;"	f	class:ndn::SecTpmOsx
getScheme	ndn-cxx/src/util/face-uri.hpp	/^  getScheme() const$/;"	f	class:ndn::util::FaceUri
getScheme	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getScheme()$/;"	f	class:ndn::security::DummyPublicInfo
getScheme	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::getScheme()$/;"	f	class:ndn::security::DummyTpm
getScheme	utils/dummy-keychain.cpp	/^DummyPublicInfo::getScheme()$/;"	f	class:ndn::security::DummyPublicInfo
getScheme	utils/dummy-keychain.cpp	/^DummyTpm::getScheme()$/;"	f	class:ndn::security::DummyTpm
getSchemes	ndn-cxx/src/util/face-uri.cpp	/^  getSchemes() const$/;"	f	class:ndn::util::EtherCanonizeProvider
getSchemes	ndn-cxx/src/util/face-uri.cpp	/^  getSchemes() const$/;"	f	class:ndn::util::IpHostCanonizeProvider
getSecureRandomGenerator	ndn-cxx/src/util/random.cpp	/^getSecureRandomGenerator()$/;"	f	namespace:ndn::random
getSelectedDelegation	ndn-cxx/src/interest.cpp	/^Interest::getSelectedDelegation() const$/;"	f	class:ndn::Interest
getSelectors	ndn-cxx/src/interest.hpp	/^  getSelectors() const$/;"	f	class:ndn::Interest
getSha256DigestUriPrefix	ndn-cxx/src/name-component.cpp	/^getSha256DigestUriPrefix()$/;"	f	namespace:ndn::name
getSigType	ndn-cxx/src/security/conf/checker.hpp	/^  getSigType(const std::string& sigType)$/;"	f	class:ndn::security::conf::CheckerFactory
getSignature	ndn-cxx/src/data.hpp	/^Data::getSignature() const$/;"	f	class:ndn::Data
getSignatureInfo	ndn-cxx/src/security/signing-info.hpp	/^  getSignatureInfo() const$/;"	f	class:ndn::security::SigningInfo
getSignatureType	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::getSignatureType(KeyType keyType, DigestAlgorithm digestAlgorithm)$/;"	f	class:ndn::security::KeyChain
getSignatureType	ndn-cxx/src/signature-info.hpp	/^  getSignatureType() const$/;"	f	class:ndn::SignatureInfo
getSigner	ndn-cxx/src/security/conf/checker.hpp	/^  getSigner(const ConfigSection& configSection, const std::string& configFilename)$/;"	f	class:ndn::security::conf::CheckerFactory
getSignerName	ndn-cxx/src/security/signing-info.hpp	/^  getSignerName() const$/;"	f	class:ndn::security::SigningInfo
getSignerType	ndn-cxx/src/security/signing-info.hpp	/^  getSignerType() const$/;"	f	class:ndn::security::SigningInfo
getSigningCertificate	ndn-cxx/src/management/nfd-command-options.cpp	/^CommandOptions::getSigningCertificate() const$/;"	f	class:ndn::nfd::CommandOptions
getSigningIdentity	ndn-cxx/src/management/nfd-command-options.cpp	/^CommandOptions::getSigningIdentity() const$/;"	f	class:ndn::nfd::CommandOptions
getSigningInfo	ndn-cxx/src/management/nfd-command-options.hpp	/^  getSigningInfo() const$/;"	f	class:ndn::nfd::CommandOptions
getSigningParamsKind	ndn-cxx/src/management/nfd-command-options.cpp	/^CommandOptions::getSigningParamsKind() const$/;"	f	class:ndn::nfd::CommandOptions
getSince	ndn-cxx/src/util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::getSince() const$/;"	f	class:ndn::time::UnitTestClock
getSince	utils/ndn-time.cpp	/^CustomSteadyClock::getSince() const$/;"	f	class:ns3::ndn::time::CustomSteadyClock
getSince	utils/ndn-time.cpp	/^CustomSystemClock::getSince() const$/;"	f	class:ns3::ndn::time::CustomSystemClock
getSize	ndn-cxx/src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::getSize()$/;"	f	class:ndn::CertificateCacheTtl
getSize	ndn-cxx/src/util/sqlite3-statement.cpp	/^Sqlite3Statement::getSize(int column)$/;"	f	class:ndn::util::Sqlite3Statement
getSortedFibUpdates	NFD/tests/rib/fib-updates-common.hpp	/^  getSortedFibUpdates()$/;"	f	class:nfd::rib::tests::FibUpdatesFixture
getStaleTime	NFD/daemon/table/cs-entry.hpp	/^  getStaleTime() const$/;"	f	class:nfd::cs::Entry
getStartTimestamp	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  getStartTimestamp() const$/;"	f	class:ndn::nfd::ForwarderStatus
getStrategy	NFD/daemon/table/strategy-choice-entry.hpp	/^Entry::getStrategy() const$/;"	f	class:nfd::strategy_choice::Entry
getStrategy	NFD/daemon/table/strategy-choice.cpp	/^StrategyChoice::getStrategy(const Name& strategyName) const$/;"	f	class:nfd::StrategyChoice
getStrategy	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  getStrategy() const$/;"	f	class:ndn::nfd::ControlParameters
getStrategy	ndn-cxx/src/management/nfd-strategy-choice.hpp	/^  getStrategy() const$/;"	f	class:ndn::nfd::StrategyChoice
getStrategyChoice	NFD/daemon/fw/forwarder.hpp	/^Forwarder::getStrategyChoice()$/;"	f	class:nfd::Forwarder
getStrategyChoice	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  getStrategyChoice()$/;"	f	class:nfd::tests::StrategyChoiceManagerFixture
getStrategyChoiceEntry	NFD/daemon/table/name-tree-entry.hpp	/^Entry::getStrategyChoiceEntry() const$/;"	f	class:nfd::name_tree::Entry
getStrategyChoiceManager	model/ndn-l3-protocol.cpp	/^L3Protocol::getStrategyChoiceManager()$/;"	f	class:ns3::ndn::L3Protocol
getStrategyFactories	NFD/daemon/fw/strategy-registry.cpp	/^getStrategyFactories()$/;"	f	namespace:nfd::fw
getStrategyInfo	NFD/daemon/table/strategy-info-host.hpp	/^StrategyInfoHost::getStrategyInfo() const$/;"	f	class:nfd::StrategyInfoHost
getStrategyName	NFD/daemon/table/strategy-choice-entry.cpp	/^Entry::getStrategyName() const$/;"	f	class:nfd::strategy_choice::Entry
getString	ndn-cxx/src/util/sqlite3-statement.cpp	/^Sqlite3Statement::getString(int column)$/;"	f	class:ndn::util::Sqlite3Statement
getSubName	ndn-cxx/src/name.cpp	/^Name::getSubName(ssize_t iStartComponent, size_t nComponents) const$/;"	f	class:ndn::Name
getSubjectDescriptionList	ndn-cxx/src/security/certificate.hpp	/^  getSubjectDescriptionList() const$/;"	f	class:ndn::Certificate
getSubjectDescriptionList	ndn-cxx/src/security/certificate.hpp	/^  getSubjectDescriptionList()$/;"	f	class:ndn::Certificate
getSuccessor	ndn-cxx/src/name-component.cpp	/^Component::getSuccessor() const$/;"	f	class:ndn::name::Component
getSuccessor	ndn-cxx/src/name.cpp	/^Name::getSuccessor() const$/;"	f	class:ndn::Name
getSymKeyType	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::getSymKeyType(KeyType keyType)$/;"	f	class:ndn::SecTpmOsx::Impl
getTag	ndn-cxx/src/tag-host.hpp	/^TagHost::getTag() const$/;"	f	class:ndn::TagHost
getText	ndn-cxx/src/mgmt/control-response.hpp	/^ControlResponse::getText() const$/;"	f	class:ndn::mgmt::ControlResponse
getTimeout	ndn-cxx/src/management/nfd-command-options.hpp	/^  getTimeout() const$/;"	f	class:ndn::nfd::CommandOptions
getTimestampMapSize	ndn-cxx/src/security/validator-config.hpp	/^  getTimestampMapSize()$/;"	f	class:ndn::ValidatorConfig
getTotalPayloadLength	NFD/tests/core/segment-publisher.t.cpp	/^  getTotalPayloadLength() const$/;"	f	class:nfd::tests::SegmentPublisherTester
getTpm	ndn-cxx/src/security/key-chain.hpp	/^  getTpm() const$/;"	f	class:ndn::security::KeyChain
getTpm	ndn-cxx/src/security/key-chain.hpp	/^  getTpm()$/;"	f	class:ndn::security::KeyChain
getTpmFactories	ndn-cxx/src/security/key-chain.cpp	/^getTpmFactories()$/;"	f	namespace:ndn::security
getTpmLocator	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::getTpmLocator() const$/;"	f	class:ndn::security::PibMemory
getTpmLocator	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::getTpmLocator() const$/;"	f	class:ndn::security::PibSqlite3
getTpmLocator	ndn-cxx/src/security/pib.cpp	/^Pib::getTpmLocator() const$/;"	f	class:ndn::security::Pib
getTpmLocator	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::getTpmLocator()$/;"	f	class:ndn::SecPublicInfoSqlite3
getTpmLocator	ndn-cxx/src/security/sec-tpm.cpp	/^SecTpm::getTpmLocator()$/;"	f	class:ndn::SecTpm
getTpmLocator	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::getTpmLocator()$/;"	f	class:ndn::security::DummyPublicInfo
getTpmLocator	utils/dummy-keychain.cpp	/^DummyPublicInfo::getTpmLocator()$/;"	f	class:ndn::security::DummyPublicInfo
getTrie	utils/trie/trie-with-policy.hpp	/^  getTrie() const$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
getTrie	utils/trie/trie-with-policy.hpp	/^  getTrie()$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
getType	ndn-cxx/src/key-locator.hpp	/^  getType() const$/;"	f	class:ndn::KeyLocator
getType	ndn-cxx/src/meta-info.hpp	/^MetaInfo::getType() const$/;"	f	class:ndn::MetaInfo
getType	ndn-cxx/src/security/key-params.hpp	/^  getType()$/;"	f	class:ndn::AesKeyParamsInfo
getType	ndn-cxx/src/security/key-params.hpp	/^  getType()$/;"	f	class:ndn::EcdsaKeyParamsInfo
getType	ndn-cxx/src/security/key-params.hpp	/^  getType()$/;"	f	class:ndn::RsaKeyParamsInfo
getType	ndn-cxx/src/signature.hpp	/^  getType() const$/;"	f	class:ndn::Signature
getTypeId	NFD/daemon/fw/access-strategy.hpp	/^    getTypeId()$/;"	f	class:nfd::fw::AccessStrategy::MtInfo
getTypeId	NFD/daemon/fw/access-strategy.hpp	/^    getTypeId()$/;"	f	class:nfd::fw::AccessStrategy::PitInfo
getTypeId	NFD/daemon/fw/ncc-strategy.hpp	/^    getTypeId()$/;"	f	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
getTypeId	NFD/daemon/fw/ncc-strategy.hpp	/^    getTypeId()$/;"	f	class:nfd::fw::NccStrategy::PitEntryInfo
getTypeId	NFD/daemon/fw/retx-suppression-exponential.cpp	/^  getTypeId()$/;"	f	class:nfd::fw::RetxSuppressionExponential::PitInfo
getTypeId	NFD/tests/daemon/table/measurements.t.cpp	/^  getTypeId()$/;"	f	class:nfd::tests::DummyStrategyInfo1
getTypeId	NFD/tests/daemon/table/measurements.t.cpp	/^  getTypeId()$/;"	f	class:nfd::tests::DummyStrategyInfo2
getTypeId	NFD/tests/daemon/table/strategy-choice.t.cpp	/^  getTypeId()$/;"	f	class:nfd::tests::PStrategyInfo
getTypeId	NFD/tests/daemon/table/strategy-info-host.t.cpp	/^  getTypeId()$/;"	f	class:nfd::tests::DummyStrategyInfo
getTypeId	NFD/tests/daemon/table/strategy-info-host.t.cpp	/^  getTypeId()$/;"	f	class:nfd::tests::DummyStrategyInfo2
getTypeId	ndn-cxx/tests/unit-tests/tag-host.t.cpp	/^  getTypeId()$/;"	f	class:ndn::tests::TestTag
getTypeId	ndn-cxx/tests/unit-tests/tag-host.t.cpp	/^  getTypeId()$/;"	f	class:ndn::tests::TestTag2
getTypeId	utils/ndn-ns3-packet-tag.hpp	/^  getTypeId()$/;"	f	class:ns3::ndn::Ns3PacketTag
getTypeSpecificTlv	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::getTypeSpecificTlv(uint32_t type) const$/;"	f	class:ndn::SignatureInfo
getUnixEpoch	ndn-cxx/src/util/time.cpp	/^getUnixEpoch()$/;"	f	namespace:ndn::time
getUri	NFD/daemon/face/channel.hpp	/^Channel::getUri() const$/;"	f	class:nfd::Channel
getUri	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  getUri() const$/;"	f	class:ndn::nfd::ControlParameters
getUriScheme	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  getUriScheme() const$/;"	f	class:ndn::nfd::FaceQueryFilter
getValidator	NFD/daemon/mgmt/internal-face.hpp	/^InternalFace::getValidator()$/;"	f	class:nfd::InternalFace
getValidityPeriod	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::getValidityPeriod() const$/;"	f	class:ndn::SignatureInfo
getValue	ndn-cxx/src/security/certificate-extension.hpp	/^  getValue() const$/;"	f	class:ndn::CertificateExtension
getValue	ndn-cxx/src/security/certificate-subject-description.hpp	/^  getValue() const$/;"	f	class:ndn::CertificateSubjectDescription
getValue	ndn-cxx/src/signature.hpp	/^  getValue() const$/;"	f	class:ndn::Signature
get_alog	NFD/websocketpp/websocketpp/endpoint.hpp	/^    alog_type & get_alog() {$/;"	f	class:websocketpp::endpoint
get_authority	NFD/websocketpp/websocketpp/uri.hpp	/^    std::string get_authority() const {$/;"	f	class:websocketpp::uri
get_basic_size	NFD/websocketpp/websocketpp/frame.hpp	/^inline uint8_t get_basic_size(const basic_header &h) {$/;"	f	namespace:websocketpp::frame
get_body	NFD/websocketpp/websocketpp/http/parser.hpp	/^    std::string const & get_body() const {$/;"	f	class:websocketpp::http::parser::parser::std
get_buffered_amount	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^size_t connection<config>::get_buffered_amount() const {$/;"	f	class:websocketpp::connection
get_bytes_needed	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    size_t get_bytes_needed() const {$/;"	f	class:websocketpp::processor::hybi13
get_bytes_needed	NFD/websocketpp/websocketpp/processors/processor.hpp	/^    virtual size_t get_bytes_needed() const {$/;"	f	class:websocketpp::processor::processor
get_category	NFD/websocketpp/websocketpp/error.hpp	/^inline const lib::error_category& get_category() {$/;"	f	namespace:websocketpp::error
get_category	NFD/websocketpp/websocketpp/extensions/extension.hpp	/^inline const lib::error_category& get_category() {$/;"	f	namespace:websocketpp::extensions::error
get_category	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^lib::error_category const & get_category() {$/;"	f	class:websocketpp::extensions::permessage_deflate::error::lib
get_category	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^inline lib::error_category const & get_category() {$/;"	f	class:websocketpp::transport::asio::error::lib
get_category	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^inline lib::error_category const & get_category() {$/;"	f	class:websocketpp::transport::error::lib
get_category	NFD/websocketpp/websocketpp/transport/debug/base.hpp	/^inline lib::error_category const & get_category() {$/;"	f	class:websocketpp::transport::debug::error::lib
get_category	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^inline lib::error_category const & get_category() {$/;"	f	class:websocketpp::transport::iostream::error::lib
get_category	NFD/websocketpp/websocketpp/transport/stub/base.hpp	/^inline lib::error_category const & get_category() {$/;"	f	class:websocketpp::transport::stub::error::lib
get_compressed	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    bool get_compressed() const {$/;"	f	class:websocketpp::message_buffer::message
get_con_from_hdl	NFD/websocketpp/websocketpp/endpoint.hpp	/^    connection_ptr get_con_from_hdl(connection_hdl hdl) {$/;"	f	class:websocketpp::endpoint
get_con_from_hdl	NFD/websocketpp/websocketpp/endpoint.hpp	/^    connection_ptr get_con_from_hdl(connection_hdl hdl, lib::error_code & ec) {$/;"	f	class:websocketpp::endpoint
get_connection	NFD/websocketpp/websocketpp/roles/client_endpoint.hpp	/^    connection_ptr get_connection(std::string const & u, lib::error_code & ec) {$/;"	f	class:websocketpp::client
get_connection	NFD/websocketpp/websocketpp/roles/client_endpoint.hpp	/^    connection_ptr get_connection(uri_ptr location, lib::error_code & ec) {$/;"	f	class:websocketpp::client
get_connection	NFD/websocketpp/websocketpp/roles/server_endpoint.hpp	/^    connection_ptr get_connection() {$/;"	f	class:websocketpp::server
get_data_from_hdl	NFD/websocketpp/examples/associative_storage/associative_storage.cpp	/^    connection_data& get_data_from_hdl(connection_hdl hdl) {$/;"	f	class:print_server
get_ec	NFD/websocketpp/websocketpp/connection.hpp	/^    lib::error_code get_ec() const {$/;"	f	class:websocketpp::connection
get_ec	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    lib::error_code get_ec() const {$/;"	f	class:websocketpp::transport::asio::basic_socket::connection
get_ec	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    lib::error_code get_ec() const {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
get_elog	NFD/websocketpp/websocketpp/endpoint.hpp	/^    elog_type & get_elog() {$/;"	f	class:websocketpp::endpoint
get_error	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    bool get_error() const {$/;"	f	class:websocketpp::processor::hybi00
get_error	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    bool get_error() const {$/;"	f	class:websocketpp::processor::hybi13
get_extended_size	NFD/websocketpp/websocketpp/frame.hpp	/^inline uint16_t get_extended_size(const extended_header &e) {$/;"	f	namespace:websocketpp::frame
get_extension_data	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    std::string const & get_extension_data() const {$/;"	f	class:websocketpp::message_buffer::message::std
get_extension_data	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    const std::string& get_extension_data() const {$/;"	f	class:websocketpp::message_buffer::message
get_fin	NFD/websocketpp/websocketpp/frame.hpp	/^inline bool get_fin(basic_header const & h) {$/;"	f	namespace:websocketpp::frame
get_fin	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    bool get_fin() const {$/;"	f	class:websocketpp::message_buffer::message
get_freshness	model/cs/custom-policies/freshness-policy.hpp	/^    get_freshness(typename Container::const_iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::freshness_policy_traits::policy
get_freshness	model/cs/custom-policies/freshness-policy.hpp	/^    get_freshness(typename Container::iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::freshness_policy_traits::policy
get_handle	NFD/websocketpp/websocketpp/connection.hpp	/^    connection_hdl get_handle() const {$/;"	f	class:websocketpp::connection
get_handle	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    connection_hdl get_handle() const {$/;"	f	class:websocketpp::transport::asio::connection
get_handle	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    connection_hdl get_handle() const {$/;"	f	class:websocketpp::transport::debug::connection
get_handle	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    connection_hdl get_handle() const {$/;"	f	class:websocketpp::transport::iostream::connection
get_handle	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    connection_hdl get_handle() const {$/;"	f	class:websocketpp::transport::stub::connection
get_handshake_type	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    socket_type::handshake_type get_handshake_type() {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
get_hdl	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    websocketpp::connection_hdl get_hdl() const {$/;"	f	class:connection_metadata
get_hdl	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    websocketpp::connection_hdl get_hdl() const {$/;"	f	class:connection_metadata
get_hdl	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    websocketpp::connection_hdl get_hdl() const {$/;"	f	class:connection_metadata
get_header	NFD/websocketpp/websocketpp/http/impl/parser.hpp	/^inline std::string const & parser::get_header(std::string const & key) const {$/;"	f	class:websocketpp::http::parser::std::parser
get_header	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    std::string const & get_header() const {$/;"	f	class:websocketpp::message_buffer::message::std
get_header	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    const std::string& get_header() const {$/;"	f	class:websocketpp::message_buffer::message
get_header_as_plist	NFD/websocketpp/websocketpp/http/impl/parser.hpp	/^inline bool parser::get_header_as_plist(std::string const & key,$/;"	f	class:websocketpp::http::parser::parser
get_header_len	NFD/websocketpp/websocketpp/frame.hpp	/^inline size_t get_header_len(basic_header const & h) {$/;"	f	namespace:websocketpp::frame
get_host	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^std::string const & connection<config>::get_host() const {$/;"	f	class:websocketpp::std::connection
get_host	NFD/websocketpp/websocketpp/uri.hpp	/^    std::string const & get_host() const {$/;"	f	class:websocketpp::uri::std
get_host_port	NFD/websocketpp/websocketpp/uri.hpp	/^    std::string get_host_port() const {$/;"	f	class:websocketpp::uri
get_id	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    int get_id() const {$/;"	f	class:connection_metadata
get_id	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    int get_id() const {$/;"	f	class:connection_metadata
get_id	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    int get_id() const {$/;"	f	class:connection_metadata
get_io_service	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    boost::asio::io_service & get_io_service() {$/;"	f	class:websocketpp::transport::asio::endpoint
get_jumbo_size	NFD/websocketpp/websocketpp/frame.hpp	/^inline uint64_t get_jumbo_size(const extended_header &e) {$/;"	f	namespace:websocketpp::frame
get_key3	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    std::string get_key3() const {$/;"	f	class:websocketpp::processor::hybi00
get_local_close_code	NFD/websocketpp/websocketpp/connection.hpp	/^    close::status::value get_local_close_code() const {$/;"	f	class:websocketpp::connection
get_local_close_reason	NFD/websocketpp/websocketpp/connection.hpp	/^    std::string const & get_local_close_reason() const {$/;"	f	class:websocketpp::connection::std
get_manager	NFD/websocketpp/websocketpp/message_buffer/alloc.hpp	/^    con_msg_man_ptr get_manager() const {$/;"	f	class:websocketpp::message_buffer::alloc::endpoint_msg_manager
get_manager	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    con_msg_man_ptr get_manager() const {$/;"	f	class:websocketpp::message_buffer::alloc::endpoint_msg_manager
get_masked	NFD/websocketpp/websocketpp/frame.hpp	/^inline bool get_masked(basic_header const & h) {$/;"	f	namespace:websocketpp::frame
get_masking_key	NFD/websocketpp/websocketpp/frame.hpp	/^inline masking_key_type get_masking_key(const basic_header &h, const$/;"	f	namespace:websocketpp::frame
get_masking_key_offset	NFD/websocketpp/websocketpp/frame.hpp	/^inline unsigned int get_masking_key_offset(const basic_header &h) {$/;"	f	namespace:websocketpp::frame
get_max_body_size	NFD/websocketpp/websocketpp/http/parser.hpp	/^    size_t get_max_body_size() const {$/;"	f	class:websocketpp::http::parser::parser
get_max_http_body_size	NFD/websocketpp/websocketpp/connection.hpp	/^    size_t get_max_http_body_size() const {$/;"	f	class:websocketpp::connection
get_max_http_body_size	NFD/websocketpp/websocketpp/endpoint.hpp	/^    size_t get_max_http_body_size() const {$/;"	f	class:websocketpp::endpoint
get_max_message_size	NFD/websocketpp/websocketpp/connection.hpp	/^    size_t get_max_message_size() const {$/;"	f	class:websocketpp::connection
get_max_message_size	NFD/websocketpp/websocketpp/endpoint.hpp	/^    size_t get_max_message_size() const {$/;"	f	class:websocketpp::endpoint
get_max_message_size	NFD/websocketpp/websocketpp/processors/processor.hpp	/^    size_t get_max_message_size() const {$/;"	f	class:websocketpp::processor::processor
get_max_size	model/cs/custom-policies/freshness-policy.hpp	/^      get_max_size() const$/;"	f	class:ns3::ndn::ndnSIM::freshness_policy_traits::policy::type
get_max_size	model/cs/custom-policies/lifetime-stats-policy.hpp	/^      get_max_size() const$/;"	f	class:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy::type
get_max_size	model/cs/custom-policies/probability-policy.hpp	/^      get_max_size() const$/;"	f	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
get_max_size	utils/trie/aggregate-stats-policy.hpp	/^      get_max_size() const$/;"	f	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
get_max_size	utils/trie/fifo-policy.hpp	/^      get_max_size() const$/;"	f	class:ns3::ndn::ndnSIM::fifo_policy_traits::policy::type
get_max_size	utils/trie/lfu-policy.hpp	/^      get_max_size() const$/;"	f	class:ns3::ndn::ndnSIM::lfu_policy_traits::policy::type
get_max_size	utils/trie/lru-policy.hpp	/^      get_max_size() const$/;"	f	class:ns3::ndn::ndnSIM::lru_policy_traits::policy::type
get_max_size	utils/trie/multi-policy.hpp	/^      get_max_size() const$/;"	f	class:ns3::ndn::ndnSIM::multi_policy_traits::policy::type
get_max_size	utils/trie/payload-policy.hpp	/^      get_max_size() const$/;"	f	class:ns3::ndn::ndnSIM::payload_policy_traits::policy::type
get_max_size	utils/trie/persistent-policy.hpp	/^      get_max_size() const$/;"	f	class:ns3::ndn::ndnSIM::persistent_policy_traits::policy::type
get_max_size	utils/trie/random-policy.hpp	/^      get_max_size() const$/;"	f	class:ns3::ndn::ndnSIM::random_policy_traits::policy::type
get_message	NFD/websocketpp/websocketpp/connection.hpp	/^    message_ptr get_message(websocketpp::frame::opcode::value op, size_t size)$/;"	f	class:websocketpp::connection
get_message	NFD/websocketpp/websocketpp/message_buffer/alloc.hpp	/^    message_ptr get_message() {$/;"	f	class:websocketpp::message_buffer::alloc::con_msg_manager
get_message	NFD/websocketpp/websocketpp/message_buffer/alloc.hpp	/^    message_ptr get_message(frame::opcode::value op,size_t size) {$/;"	f	class:websocketpp::message_buffer::alloc::con_msg_manager
get_message	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    message_ptr get_message(size_t size) const {$/;"	f	class:websocketpp::message_buffer::alloc::con_msg_manager
get_message	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    message_ptr get_message() {$/;"	f	class:websocketpp::processor::hybi00
get_message	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    message_ptr get_message() {$/;"	f	class:websocketpp::processor::hybi13
get_metadata	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    connection_metadata::ptr get_metadata(int id) const {$/;"	f	class:websocket_endpoint
get_metadata	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    connection_metadata::ptr get_metadata(int id) const {$/;"	f	class:websocket_endpoint
get_metadata	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    connection_metadata::ptr get_metadata(int id) const {$/;"	f	class:websocket_endpoint
get_metadata	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    connection_metadata::ptr get_metadata(int id) const {$/;"	f	class:websocket_endpoint
get_method	NFD/websocketpp/websocketpp/http/request.hpp	/^    std::string const & get_method() const {$/;"	f	class:websocketpp::http::parser::request::std
get_next_layer	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    boost::asio::ip::tcp::socket& get_next_layer() {$/;"	f	class:websocketpp::transport::asio::basic_socket::connection
get_next_layer	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    socket_type::next_layer_type& get_next_layer() {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
get_opcode	NFD/websocketpp/websocketpp/frame.hpp	/^inline opcode::value get_opcode(const basic_header &h) {$/;"	f	namespace:websocketpp::frame
get_opcode	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    frame::opcode::value get_opcode() const {$/;"	f	class:websocketpp::message_buffer::message
get_opcode	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    frame::opcode::value get_opcode() const {$/;"	f	class:websocketpp::message_buffer::message
get_order	utils/trie/lfu-policy.hpp	/^    get_order(typename Container::const_iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::lfu_policy_traits::policy
get_order	utils/trie/lfu-policy.hpp	/^    get_order(typename Container::iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::lfu_policy_traits::policy
get_order	utils/trie/random-policy.hpp	/^    get_order(typename Container::const_iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::random_policy_traits::policy
get_order	utils/trie/random-policy.hpp	/^    get_order(typename Container::iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::random_policy_traits::policy
get_origin	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^std::string const & connection<config>::get_origin() const {$/;"	f	class:websocketpp::std::connection
get_origin	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    std::string const & get_origin(request_type const & r) const {$/;"	f	class:websocketpp::processor::hybi00::std
get_origin	NFD/websocketpp/websocketpp/processors/hybi08.hpp	/^    std::string const & get_origin(request_type const & r) const {$/;"	f	class:websocketpp::processor::hybi08::std
get_origin	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    std::string const & get_origin(request_type const & r) const {$/;"	f	class:websocketpp::processor::hybi13::std
get_password	NFD/websocketpp/examples/echo_server_both/echo_server_both.cpp	/^std::string get_password() {$/;"	f
get_password	NFD/websocketpp/examples/echo_server_tls/echo_server_tls.cpp	/^std::string get_password() {$/;"	f
get_payload	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    std::string const & get_payload() const {$/;"	f	class:websocketpp::message_buffer::message::std
get_payload	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    const std::string& get_payload() const {$/;"	f	class:websocketpp::message_buffer::message
get_payload_size	NFD/websocketpp/websocketpp/frame.hpp	/^inline uint64_t get_payload_size(const basic_header &h, const$/;"	f	namespace:websocketpp::frame
get_port	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^uint16_t connection<config>::get_port() const {$/;"	f	class:websocketpp::connection
get_port	NFD/websocketpp/websocketpp/uri.hpp	/^    uint16_t get_port() const {$/;"	f	class:websocketpp::uri
get_port_from_string	NFD/websocketpp/websocketpp/uri.hpp	/^    uint16_t get_port_from_string(std::string const & port, lib::error_code &$/;"	f	class:websocketpp::uri
get_port_str	NFD/websocketpp/websocketpp/uri.hpp	/^    std::string get_port_str() const {$/;"	f	class:websocketpp::uri
get_prepared	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    bool get_prepared() const {$/;"	f	class:websocketpp::message_buffer::message
get_probability	model/cs/custom-policies/probability-policy.hpp	/^      get_probability() const$/;"	f	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
get_processor	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^connection<config>::get_processor(int version) const {$/;"	f	class:websocketpp::connection
get_processor_category	NFD/websocketpp/websocketpp/processors/base.hpp	/^inline lib::error_category const & get_processor_category() {$/;"	f	class:websocketpp::processor::error::lib
get_proxy	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    std::string const & get_proxy() const {$/;"	f	class:websocketpp::transport::asio::connection::std
get_query	NFD/websocketpp/websocketpp/uri.hpp	/^    std::string get_query() const {$/;"	f	class:websocketpp::uri
get_raw	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    std::string get_raw(response_type const & res) const {$/;"	f	class:websocketpp::processor::hybi00
get_raw	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    std::string get_raw(response_type const & res) const {$/;"	f	class:websocketpp::processor::hybi13
get_raw_payload	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    std::string & get_raw_payload() {$/;"	f	class:websocketpp::message_buffer::message
get_raw_socket	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    boost::asio::ip::tcp::socket& get_raw_socket() {$/;"	f	class:websocketpp::transport::asio::basic_socket::connection
get_raw_socket	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    socket_type::lowest_layer_type& get_raw_socket() {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
get_remote_close_code	NFD/websocketpp/websocketpp/connection.hpp	/^    close::status::value get_remote_close_code() const {$/;"	f	class:websocketpp::connection
get_remote_close_reason	NFD/websocketpp/websocketpp/connection.hpp	/^    std::string const & get_remote_close_reason() const {$/;"	f	class:websocketpp::connection::std
get_remote_endpoint	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    std::string get_remote_endpoint() const {$/;"	f	class:websocketpp::transport::asio::connection
get_remote_endpoint	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    std::string get_remote_endpoint(lib::error_code &ec) const {$/;"	f	class:websocketpp::transport::asio::basic_socket::connection
get_remote_endpoint	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    std::string get_remote_endpoint(lib::error_code &ec) const {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
get_remote_endpoint	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    std::string get_remote_endpoint() const {$/;"	f	class:websocketpp::transport::debug::connection
get_remote_endpoint	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    std::string get_remote_endpoint() const {$/;"	f	class:websocketpp::transport::iostream::connection
get_remote_endpoint	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    std::string get_remote_endpoint() const {$/;"	f	class:websocketpp::transport::stub::connection
get_request	NFD/websocketpp/websocketpp/connection.hpp	/^    request_type const & get_request() const {$/;"	f	class:websocketpp::connection
get_request_body	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^connection<config>::get_request_body() const {$/;"	f	class:websocketpp::std::connection
get_request_header	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^connection<config>::get_request_header(std::string const & key) const {$/;"	f	class:websocketpp::std::connection
get_requested_subprotocols	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^connection<config>::get_requested_subprotocols() const {$/;"	f	class:websocketpp::std::connection
get_resource	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^std::string const & connection<config>::get_resource() const {$/;"	f	class:websocketpp::std::connection
get_resource	NFD/websocketpp/websocketpp/uri.hpp	/^    std::string const & get_resource() const {$/;"	f	class:websocketpp::uri::std
get_response_header	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^connection<config>::get_response_header(std::string const & key) const {$/;"	f	class:websocketpp::std::connection
get_rsv1	NFD/websocketpp/websocketpp/frame.hpp	/^inline bool get_rsv1(const basic_header &h) {$/;"	f	namespace:websocketpp::frame
get_rsv2	NFD/websocketpp/websocketpp/frame.hpp	/^inline bool get_rsv2(const basic_header &h) {$/;"	f	namespace:websocketpp::frame
get_rsv3	NFD/websocketpp/websocketpp/frame.hpp	/^inline bool get_rsv3(const basic_header &h) {$/;"	f	namespace:websocketpp::frame
get_scheme	NFD/websocketpp/websocketpp/uri.hpp	/^    std::string const & get_scheme() const {$/;"	f	class:websocketpp::uri::std
get_secure	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^bool connection<config>::get_secure() const {$/;"	f	class:websocketpp::connection
get_secure	NFD/websocketpp/websocketpp/uri.hpp	/^    bool get_secure() const {$/;"	f	class:websocketpp::uri
get_shared	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    ptr get_shared() {$/;"	f	struct:stub_con
get_shared	NFD/websocketpp/websocketpp/connection.hpp	/^    ptr get_shared() {$/;"	f	class:websocketpp::connection
get_shared	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    ptr get_shared() {$/;"	f	class:websocketpp::transport::asio::connection
get_shared	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    ptr get_shared() {$/;"	f	class:websocketpp::transport::asio::basic_socket::connection
get_shared	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    ptr get_shared() {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
get_shared	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    ptr get_shared() {$/;"	f	class:websocketpp::transport::debug::connection
get_shared	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    ptr get_shared() {$/;"	f	class:websocketpp::transport::iostream::connection
get_shared	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    ptr get_shared() {$/;"	f	class:websocketpp::transport::stub::connection
get_socket	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    boost::asio::ip::tcp::socket& get_socket() {$/;"	f	class:websocketpp::transport::asio::basic_socket::connection
get_socket	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    socket_type& get_socket() {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
get_socket_category	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^inline lib::error_category const & get_socket_category() {$/;"	f	class:websocketpp::transport::asio::socket::lib
get_state	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^session::state::value connection<config>::get_state() const {$/;"	f	class:websocketpp::connection
get_status	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    std::string get_status() const {$/;"	f	class:connection_metadata
get_status	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    std::string get_status() const {$/;"	f	class:connection_metadata
get_status	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    std::string get_status() const {$/;"	f	class:connection_metadata
get_status_code	NFD/websocketpp/websocketpp/http/response.hpp	/^    status_code::value get_status_code() const {$/;"	f	class:websocketpp::http::parser::response
get_status_msg	NFD/websocketpp/websocketpp/http/response.hpp	/^    const std::string& get_status_msg() const {$/;"	f	class:websocketpp::http::parser::response
get_strand	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    strand_ptr get_strand() {$/;"	f	class:websocketpp::transport::asio::connection
get_string	NFD/websocketpp/websocketpp/close.hpp	/^    inline std::string get_string(value code) {$/;"	f	namespace:websocketpp::close::status
get_string	NFD/websocketpp/websocketpp/http/constants.hpp	/^        inline std::string get_string(value c) {$/;"	f	namespace:websocketpp::http::status_code
get_subprotocol	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^std::string const & connection<config>::get_subprotocol() const {$/;"	f	class:websocketpp::std::connection
get_supported_versions	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^std::vector<int> const & connection<config>::get_supported_versions() const$/;"	f	class:websocketpp::std::connection
get_terminal	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    bool get_terminal() const {$/;"	f	class:websocketpp::message_buffer::message
get_time	model/cs/custom-policies/lifetime-stats-policy.hpp	/^    get_time(typename Container::const_iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy
get_time	model/cs/custom-policies/lifetime-stats-policy.hpp	/^    get_time(typename Container::iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy
get_uri	NFD/websocketpp/websocketpp/http/request.hpp	/^    std::string const & get_uri() const {$/;"	f	class:websocketpp::http::parser::request::std
get_uri	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^uri_ptr connection<config>::get_uri() const {$/;"	f	class:websocketpp::connection
get_uri	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    uri_ptr get_uri(request_type const & request) const {$/;"	f	class:websocketpp::processor::hybi00
get_uri	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    uri_ptr get_uri(request_type const & request) const {$/;"	f	class:websocketpp::processor::hybi13
get_uri_from_host	NFD/websocketpp/websocketpp/processors/processor.hpp	/^uri_ptr get_uri_from_host(request_type & request, std::string scheme) {$/;"	f	namespace:websocketpp::processor
get_user_agent	NFD/websocketpp/websocketpp/endpoint.hpp	/^    std::string get_user_agent() const {$/;"	f	class:websocketpp::endpoint
get_valid	NFD/websocketpp/websocketpp/uri.hpp	/^    bool get_valid() const {$/;"	f	class:websocketpp::uri
get_version	NFD/websocketpp/websocketpp/http/parser.hpp	/^    std::string const & get_version() const {$/;"	f	class:websocketpp::http::parser::parser::std
get_version	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    int get_version() const {$/;"	f	class:websocketpp::processor::hybi00
get_version	NFD/websocketpp/websocketpp/processors/hybi07.hpp	/^    int get_version() const {$/;"	f	class:websocketpp::processor::hybi07
get_version	NFD/websocketpp/websocketpp/processors/hybi08.hpp	/^    int get_version() const {$/;"	f	class:websocketpp::processor::hybi08
get_version	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    int get_version() const {$/;"	f	class:websocketpp::processor::hybi13
get_websocket_version	NFD/websocketpp/websocketpp/processors/processor.hpp	/^int get_websocket_version(request_type& r) {$/;"	f	namespace:websocketpp::processor
goUp	utils/trie/trie.hpp	/^  goUp()$/;"	f	class:ns3::ndn::ndnSIM::trie_iterator
going_away	NFD/websocketpp/websocketpp/close.hpp	/^    static value const going_away = 1001;$/;"	m	namespace:websocketpp::close::status
gone	NFD/websocketpp/websocketpp/http/constants.hpp	/^            gone = 410,$/;"	e	enum:websocketpp::http::status_code::value
graph_traits	helper/boost-graph-ndn-global-routing-helper.hpp	/^struct graph_traits<NdnGlobalRouterGraph> {$/;"	s	namespace:boost
handle	NFD/tests/daemon/face/websocket.t.cpp	/^  websocketpp::connection_hdl handle;$/;"	m	class:nfd::tests::EndToEndFixture	file:
handleAccept	NFD/daemon/face/tcp-channel.cpp	/^TcpChannel::handleAccept(const boost::system::error_code& error,$/;"	f	class:nfd::TcpChannel
handleAccept	NFD/daemon/face/unix-stream-channel.cpp	/^UnixStreamChannel::handleAccept(const boost::system::error_code& error,$/;"	f	class:nfd::UnixStreamChannel
handleAsyncReceive	ndn-cxx/src/transport/stream-transport.hpp	/^  handleAsyncReceive(const boost::system::error_code& error, std::size_t nBytesRecvd)$/;"	f	class:ndn::StreamTransportImpl
handleAsyncWrite	ndn-cxx/src/transport/stream-transport.hpp	/^  handleAsyncWrite(const boost::system::error_code& error,$/;"	f	class:ndn::StreamTransportImpl
handleClose	NFD/daemon/face/websocket-channel.cpp	/^WebSocketChannel::handleClose(websocketpp::connection_hdl hdl)$/;"	f	class:nfd::WebSocketChannel
handleConnect	NFD/daemon/face/tcp-channel.cpp	/^TcpChannel::handleConnect(const boost::system::error_code& error,$/;"	f	class:nfd::TcpChannel
handleConnectTimeout	NFD/daemon/face/tcp-channel.cpp	/^TcpChannel::handleConnectTimeout(const shared_ptr<ip::tcp::socket>& socket,$/;"	f	class:nfd::TcpChannel
handleMessage	NFD/daemon/face/websocket-channel.cpp	/^WebSocketChannel::handleMessage(websocketpp::connection_hdl hdl,$/;"	f	class:nfd::WebSocketChannel
handleNewPeer	NFD/daemon/face/udp-channel.cpp	/^UdpChannel::handleNewPeer(const boost::system::error_code& error,$/;"	f	class:nfd::UdpChannel
handleOpen	NFD/daemon/face/websocket-channel.cpp	/^WebSocketChannel::handleOpen(websocketpp::connection_hdl hdl)$/;"	f	class:nfd::WebSocketChannel
handlePong	NFD/daemon/face/websocket-channel.cpp	/^WebSocketChannel::handlePong(websocketpp::connection_hdl hdl, std::string msg)$/;"	f	class:nfd::WebSocketChannel
handlePongTimeout	NFD/daemon/face/websocket-channel.cpp	/^WebSocketChannel::handlePongTimeout(websocketpp::connection_hdl hdl, std::string msg)$/;"	f	class:nfd::WebSocketChannel
handleRead	NFD/daemon/face/ethernet-face.cpp	/^EthernetFace::handleRead(const boost::system::error_code& error, size_t)$/;"	f	class:nfd::EthernetFace
handleReceive	NFD/daemon/face/datagram-face.hpp	/^DatagramFace<T, U>::handleReceive(const boost::system::error_code& error,$/;"	f	class:nfd::DatagramFace
handleReceive	NFD/daemon/face/stream-face.hpp	/^StreamFace<T, U>::handleReceive(const boost::system::error_code& error,$/;"	f	class:nfd::StreamFace
handleReceive	NFD/daemon/face/websocket-face.cpp	/^WebSocketFace::handleReceive(const std::string& msg)$/;"	f	class:nfd::WebSocketFace
handleSend	NFD/daemon/face/datagram-face.hpp	/^DatagramFace<T, U>::handleSend(const boost::system::error_code& error,$/;"	f	class:nfd::DatagramFace
handleSend	NFD/daemon/face/stream-face.hpp	/^StreamFace<T, U>::handleSend(const boost::system::error_code& error,$/;"	f	class:nfd::StreamFace
handle_accept	NFD/websocketpp/websocketpp/roles/server_endpoint.hpp	/^    void handle_accept(connection_ptr con, lib::error_code const & ec) {$/;"	f	class:websocketpp::server
handle_accept	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void handle_accept(accept_handler callback, boost::system::error_code const$/;"	f	class:websocketpp::transport::asio::endpoint
handle_async_read	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void handle_async_read(boost::system::error_code const & ec,$/;"	f	class:websocketpp::transport::asio::connection
handle_async_shutdown	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    void handle_async_shutdown(websocketpp::lib::error_code const & e) {$/;"	f	struct:stub_con
handle_async_shutdown	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void handle_async_shutdown(timer_ptr shutdown_timer, shutdown_handler$/;"	f	class:websocketpp::transport::asio::connection
handle_async_shutdown_timeout	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void handle_async_shutdown_timeout(timer_ptr, init_handler callback, $/;"	f	class:websocketpp::transport::asio::connection
handle_async_write	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void handle_async_write(boost::system::error_code const & ec, size_t) {$/;"	f	class:websocketpp::transport::asio::connection
handle_close_handshake_timeout	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::handle_close_handshake_timeout($/;"	f	class:websocketpp::connection
handle_connect	NFD/websocketpp/test/transport/asio/timers.cpp	/^    void handle_connect(connection_ptr con, websocketpp::lib::error_code const & ec)$/;"	f	struct:mock_endpoint
handle_connect	NFD/websocketpp/websocketpp/roles/client_endpoint.hpp	/^    void handle_connect(connection_ptr con, lib::error_code const & ec) {$/;"	f	class:websocketpp::client
handle_connect	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void handle_connect(transport_con_ptr tcon, timer_ptr con_timer,$/;"	f	class:websocketpp::transport::asio::endpoint
handle_connect_timeout	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void handle_connect_timeout(transport_con_ptr tcon, timer_ptr,$/;"	f	class:websocketpp::transport::asio::endpoint
handle_indef	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    void handle_indef(websocketpp::lib::error_code const & e, size_t amt_read) {$/;"	f	struct:stub_con
handle_init	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    void handle_init(init_handler callback,boost::system::error_code const & ec)$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
handle_interrupt	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::handle_interrupt() {$/;"	f	class:websocketpp::connection
handle_op	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    void handle_op(websocketpp::lib::error_code const & e) {$/;"	f	struct:stub_con
handle_open_handshake_timeout	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::handle_open_handshake_timeout($/;"	f	class:websocketpp::connection
handle_pause_reading	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::handle_pause_reading() {$/;"	f	class:websocketpp::connection
handle_pong_timeout	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::handle_pong_timeout(std::string payload,$/;"	f	class:websocketpp::connection
handle_post_init	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void handle_post_init(timer_ptr post_timer, init_handler callback,$/;"	f	class:websocketpp::transport::asio::connection
handle_post_init_timeout	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void handle_post_init_timeout(timer_ptr, init_handler callback,$/;"	f	class:websocketpp::transport::asio::connection
handle_pre_init	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void handle_pre_init(lib::error_code const & ec) {$/;"	f	class:websocketpp::transport::asio::connection
handle_proxy_read	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void handle_proxy_read(init_handler callback,$/;"	f	class:websocketpp::transport::asio::connection
handle_proxy_timeout	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void handle_proxy_timeout(init_handler callback, lib::error_code const & ec)$/;"	f	class:websocketpp::transport::asio::connection
handle_proxy_write	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void handle_proxy_write(init_handler callback,$/;"	f	class:websocketpp::transport::asio::connection
handle_read_frame	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::handle_read_frame(lib::error_code const & ec,$/;"	f	class:websocketpp::connection
handle_read_handshake	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::handle_read_handshake(lib::error_code const & ec,$/;"	f	class:websocketpp::connection
handle_read_http_response	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::handle_read_http_response(lib::error_code const & ec,$/;"	f	class:websocketpp::connection
handle_resolve	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void handle_resolve(transport_con_ptr tcon, timer_ptr dns_timer,$/;"	f	class:websocketpp::transport::asio::endpoint
handle_resolve_timeout	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void handle_resolve_timeout(timer_ptr, connect_handler callback,$/;"	f	class:websocketpp::transport::asio::endpoint
handle_resume_reading	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::handle_resume_reading() {$/;"	f	class:websocketpp::connection
handle_send_http_request	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::handle_send_http_request(lib::error_code const & ec) {$/;"	f	class:websocketpp::connection
handle_send_http_response	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::handle_send_http_response(lib::error_code const & ec) {$/;"	f	class:websocketpp::connection
handle_start	NFD/websocketpp/test/transport/asio/timers.cpp	/^    void handle_start(const websocketpp::lib::error_code& ec) {$/;"	f	struct:mock_con
handle_terminate	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::handle_terminate(terminate_status tstat,$/;"	f	class:websocketpp::connection
handle_timer	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void handle_timer(timer_ptr, timer_handler callback,$/;"	f	class:websocketpp::transport::asio::connection
handle_timer	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void handle_timer(timer_ptr, timer_handler callback,$/;"	f	class:websocketpp::transport::asio::endpoint
handle_transport_init	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::handle_transport_init(lib::error_code const & ec) {$/;"	f	class:websocketpp::connection
handle_write_frame	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::handle_write_frame(lib::error_code const & ec)$/;"	f	class:websocketpp::connection
handler	ndn-cxx/src/util/signal-signal.hpp	/^    Handler handler;$/;"	m	struct:ndn::util::signal::Signal::Slot
handler_	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^  Handler handler_;$/;"	m	class:websocketpp::transport::asio::custom_alloc_handler
handler_allocator	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^  handler_allocator()$/;"	f	class:websocketpp::transport::asio::handler_allocator
handler_allocator	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^class handler_allocator$/;"	c	namespace:websocketpp::transport::asio
handshake_guid	NFD/websocketpp/websocketpp/processors/base.hpp	/^static char const handshake_guid[] = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";$/;"	m	namespace:websocketpp::processor::constants
has	NFD/daemon/table/dead-nonce-list.cpp	/^DeadNonceList::has(const Name& name, uint32_t nonce) const$/;"	f	class:nfd::DeadNonceList
has	ndn-cxx/src/lp/packet.hpp	/^  has() const$/;"	f	class:ndn::lp::Packet
has	ndn-cxx/src/security/additional-description.cpp	/^AdditionalDescription::has(const std::string& key) const$/;"	f	class:ndn::security::AdditionalDescription
hasAllowedSchema	NFD/tools/nfd-autoreg.cpp	/^  hasAllowedSchema(const FaceUri& uri)$/;"	f	class:ndn::nfd_autoreg::AutoregServer
hasBeenUsedRecently	NFD/daemon/face/datagram-face.hpp	/^DatagramFace<T, U>::hasBeenUsedRecently() const$/;"	f	class:nfd::DatagramFace
hasCachingPolicy	ndn-cxx/src/management/nfd-local-control-header.hpp	/^  hasCachingPolicy() const$/;"	f	class:ndn::nfd::LocalControlHeader
hasCapture	NFD/rib/rib-entry.cpp	/^RibEntry::hasCapture() const$/;"	f	class:nfd::rib::RibEntry
hasCertificate	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::hasCertificate(const Name& certName) const$/;"	f	class:ndn::security::PibMemory
hasCertificate	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::hasCertificate(const Name& certName) const$/;"	f	class:ndn::security::PibSqlite3
hasChildInheritOnFaceId	NFD/rib/rib-entry.cpp	/^RibEntry::hasChildInheritOnFaceId(uint64_t faceId) const$/;"	f	class:nfd::rib::RibEntry
hasChildren	NFD/daemon/table/name-tree-entry.hpp	/^Entry::hasChildren() const$/;"	f	class:nfd::name_tree::Entry
hasCost	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  hasCost() const$/;"	f	class:ndn::nfd::ControlParameters
hasData	NFD/daemon/table/cs-entry.hpp	/^  hasData() const$/;"	f	class:nfd::cs::Entry
hasExpirationPeriod	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  hasExpirationPeriod() const$/;"	f	class:ndn::nfd::ControlParameters
hasExpirationPeriod	ndn-cxx/src/management/nfd-face-status.hpp	/^  hasExpirationPeriod() const$/;"	f	class:ndn::nfd::FaceStatus
hasFaceForForwarding	examples/ndn-load-balancer/random-load-balancer-strategy.cpp	/^hasFaceForForwarding(const fib::NextHopList& nexthops, shared_ptr<pit::Entry>& pitEntry)$/;"	f	namespace:nfd::fw
hasFaceId	NFD/rib/rib-entry.cpp	/^RibEntry::hasFaceId(const uint64_t faceId) const$/;"	f	class:nfd::rib::RibEntry
hasFaceId	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  hasFaceId() const$/;"	f	class:ndn::nfd::ControlParameters
hasFaceId	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  hasFaceId() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasFacePersistency	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  hasFacePersistency() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasFaceScope	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  hasFaceScope() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasFired	tests/unit-tests/ndn-cxx/face.t.cpp	/^  bool hasFired;$/;"	m	class:ns3::ndn::NndCxxFaceFixture	file:
hasFlags	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  hasFlags() const$/;"	f	class:ndn::nfd::ControlParameters
hasIdentity	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::hasIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibMemory
hasIdentity	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::hasIdentity(const Name& identity) const$/;"	f	class:ndn::security::PibSqlite3
hasIncomingFaceId	ndn-cxx/src/management/nfd-local-control-header.hpp	/^  hasIncomingFaceId() const$/;"	f	class:ndn::nfd::LocalControlHeader
hasInfiniteExpirationPeriod	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  hasInfiniteExpirationPeriod() const$/;"	f	class:ndn::nfd::Route
hasInheritedRoute	NFD/rib/rib-entry.cpp	/^RibEntry::hasInheritedRoute(const Route& route) const$/;"	f	class:nfd::rib::RibEntry
hasInitialRequest	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  hasInitialRequest() const$/;"	f	class:ndn::util::tests::EndToEndFixture
hasIpv4	ndn-cxx/tests/unit-tests/network-configuration-detector.cpp	/^NetworkConfigurationDetector::hasIpv4()$/;"	f	class:ndn::tests::NetworkConfigurationDetector
hasIpv6	ndn-cxx/tests/unit-tests/network-configuration-detector.cpp	/^NetworkConfigurationDetector::hasIpv6()$/;"	f	class:ndn::tests::NetworkConfigurationDetector
hasKey	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::hasKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibMemory
hasKey	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::hasKey(const Name& identity, const name::Component& keyId) const$/;"	f	class:ndn::security::PibSqlite3
hasKeyLocator	ndn-cxx/src/signature-info.hpp	/^  hasKeyLocator() const$/;"	f	class:ndn::SignatureInfo
hasKeyLocator	ndn-cxx/src/signature.hpp	/^  hasKeyLocator() const$/;"	f	class:ndn::Signature
hasLink	ndn-cxx/src/interest.cpp	/^Interest::hasLink() const$/;"	f	class:ndn::Interest
hasLinkType	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  hasLinkType() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasLocalControlFeature	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  hasLocalControlFeature() const$/;"	f	class:ndn::nfd::ControlParameters
hasLocalInRecord	NFD/daemon/table/pit-entry.cpp	/^Entry::hasLocalInRecord() const$/;"	f	class:nfd::pit::Entry
hasLocalUri	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  hasLocalUri() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasName	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  hasName() const$/;"	f	class:ndn::nfd::ControlParameters
hasNextHop	NFD/daemon/table/fib-entry.cpp	/^Entry::hasNextHop(shared_ptr<Face> face) const$/;"	f	class:nfd::fib::Entry
hasNextHopFaceId	ndn-cxx/src/management/nfd-local-control-header.hpp	/^  hasNextHopFaceId() const$/;"	f	class:ndn::nfd::LocalControlHeader
hasNextHopWithCost	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^  hasNextHopWithCost(const fib::NextHopList& nextHops,$/;"	f	class:nfd::tests::FibEnumerationPublisherFixture
hasNextHops	NFD/daemon/table/fib-entry.hpp	/^Entry::hasNextHops() const$/;"	f	class:nfd::fib::Entry
hasNonce	ndn-cxx/src/interest.hpp	/^  hasNonce() const$/;"	f	class:ndn::Interest
hasOrigin	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  hasOrigin() const$/;"	f	class:ndn::nfd::ControlParameters
hasPitEntries	NFD/daemon/table/name-tree-entry.hpp	/^Entry::hasPitEntries() const$/;"	f	class:nfd::name_tree::Entry
hasRegexFilter	ndn-cxx/src/interest-filter.hpp	/^  hasRegexFilter() const$/;"	f	class:ndn::InterestFilter
hasRemoteUri	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  hasRemoteUri() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasRoute	NFD/rib/rib-entry.cpp	/^RibEntry::hasRoute(const Route& route)$/;"	f	class:nfd::rib::RibEntry
hasSelectedDelegation	ndn-cxx/src/interest.cpp	/^Interest::hasSelectedDelegation() const$/;"	f	class:ndn::Interest
hasSelectors	ndn-cxx/src/interest.hpp	/^  hasSelectors() const$/;"	f	class:ndn::Interest
hasStrategy	NFD/daemon/table/strategy-choice.cpp	/^StrategyChoice::hasStrategy(const Name& strategyName, bool isExact) const$/;"	f	class:nfd::StrategyChoice
hasStrategy	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  hasStrategy() const$/;"	f	class:ndn::nfd::ControlParameters
hasTimeout	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  bool hasTimeout;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
hasUnexpiredOutRecords	NFD/daemon/table/pit-entry.cpp	/^Entry::hasUnexpiredOutRecords() const$/;"	f	class:nfd::pit::Entry
hasUri	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  hasUri() const$/;"	f	class:ndn::nfd::ControlParameters
hasUriScheme	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  hasUriScheme() const$/;"	f	class:ndn::nfd::FaceQueryFilter
hasValue	ndn-cxx/src/encoding/block.cpp	/^Block::hasValue() const$/;"	f	class:ndn::Block
hasWire	ndn-cxx/src/data.hpp	/^Data::hasWire() const$/;"	f	class:ndn::Data
hasWire	ndn-cxx/src/encoding/block.cpp	/^Block::hasWire() const$/;"	f	class:ndn::Block
hasWire	ndn-cxx/src/interest.hpp	/^  hasWire() const$/;"	f	class:ndn::Interest
hasWire	ndn-cxx/src/name.hpp	/^Name::hasWire() const$/;"	f	class:ndn::Name
has_permessage_compress	NFD/websocketpp/websocketpp/processors/processor.hpp	/^    virtual bool has_permessage_compress() const {$/;"	f	class:websocketpp::processor::processor
has_permessage_deflate	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    bool has_permessage_deflate() const {$/;"	f	class:websocketpp::processor::hybi13
hash	ndn-cxx/src/name.hpp	/^struct hash<ndn::Name>$/;"	s	namespace:std
hash	ndn-cxx/src/util/ethernet.hpp	/^struct hash<ndn::util::ethernet::Address>$/;"	s	namespace:std
hash_value	model/cs/ndn-content-store.hpp	/^hash_value(const ::ndn::name::Component component)$/;"	f	namespace:boost
hash_value	utils/trie/trie.hpp	/^hash_value(const trie<FullKey, PayloadTraits, PolicyHook>& trie_node)$/;"	f	namespace:ns3::ndn::ndnSIM
hdl	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    websocketpp::connection_hdl hdl;$/;"	m	struct:action	file:
header	NFD/tools/ndn-autoconfig/base-dns.cpp	/^  HEADER header;$/;"	m	union:ndn::tools::autoconfig::BaseDns::QueryAnswer	file:
header_delimiter	NFD/websocketpp/websocketpp/http/constants.hpp	/^    static char const header_delimiter[] = "\\r\\n";$/;"	m	namespace:websocketpp::http
header_list	NFD/websocketpp/websocketpp/http/parser.hpp	/^typedef std::map<std::string, std::string, utility::ci_less > header_list;$/;"	t	namespace:websocketpp::http::parser
header_separator	NFD/websocketpp/websocketpp/http/constants.hpp	/^    static char const header_separator[] = ":";$/;"	m	namespace:websocketpp::http
header_token	NFD/websocketpp/websocketpp/http/constants.hpp	/^    static char const header_token[] = {$/;"	m	namespace:websocketpp::http
headers	NFD/websocketpp/websocketpp/http/parser.hpp	/^        headers$/;"	e	enum:websocketpp::http::parser::state::value
headers_ready	NFD/websocketpp/websocketpp/http/response.hpp	/^    bool headers_ready() const {$/;"	f	class:websocketpp::http::parser::response
helper	NFD/websocketpp/websocketpp/connection.hpp	/^    static int const helper[] = {0,7,8,13};$/;"	m	namespace:websocketpp
hexval	NFD/websocketpp/websocketpp/common/md5.hpp	/^const char hexval[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};$/;"	m	namespace:websocketpp::md5
hook_ptr	utils/trie/detail/functor-hook.hpp	/^  typedef hook_type* hook_ptr;$/;"	t	struct:ns3::ndn::ndnSIM::detail::FunctorHook
hook_type	utils/trie/detail/functor-hook.hpp	/^  typedef typename BaseHook::template index<N>::type hook_type;$/;"	t	struct:ns3::ndn::ndnSIM::detail::FunctorHook
htobe16	ndn-cxx/src/encoding/endian.hpp	42;"	d
htobe32	ndn-cxx/src/encoding/endian.hpp	46;"	d
htobe64	ndn-cxx/src/encoding/endian.hpp	50;"	d
htole16	ndn-cxx/src/encoding/endian.hpp	43;"	d
htole32	ndn-cxx/src/encoding/endian.hpp	47;"	d
htole64	ndn-cxx/src/encoding/endian.hpp	51;"	d
http	NFD/websocketpp/websocketpp/http/constants.hpp	/^namespace http {$/;"	n	namespace:websocketpp
http	NFD/websocketpp/websocketpp/http/impl/parser.hpp	/^namespace http {$/;"	n	namespace:websocketpp
http	NFD/websocketpp/websocketpp/http/impl/request.hpp	/^namespace http {$/;"	n	namespace:websocketpp
http	NFD/websocketpp/websocketpp/http/impl/response.hpp	/^namespace http {$/;"	n	namespace:websocketpp
http	NFD/websocketpp/websocketpp/http/parser.hpp	/^namespace http {$/;"	n	namespace:websocketpp
http	NFD/websocketpp/websocketpp/http/request.hpp	/^namespace http {$/;"	n	namespace:websocketpp
http	NFD/websocketpp/websocketpp/http/response.hpp	/^namespace http {$/;"	n	namespace:websocketpp
http	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const http = 0x1000;$/;"	m	struct:websocketpp::log::alevel
http_connection_ended	NFD/websocketpp/websocketpp/error.hpp	/^    http_connection_ended,$/;"	e	enum:websocketpp::error::value
http_func	NFD/websocketpp/test/connection/connection.cpp	/^void http_func(server* s, websocketpp::connection_hdl hdl) {$/;"	f
http_handler	NFD/websocketpp/websocketpp/connection.hpp	/^typedef lib::function<void(connection_hdl)> http_handler;$/;"	t	namespace:websocketpp
http_parse_error	NFD/websocketpp/websocketpp/error.hpp	/^    http_parse_error$/;"	e	enum:websocketpp::error::value
http_version_not_supported	NFD/websocketpp/websocketpp/http/constants.hpp	/^            http_version_not_supported = 505,$/;"	e	enum:websocketpp::http::status_code::value
hybi00	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    explicit hybi00(bool secure, bool p_is_server, msg_manager_ptr manager)$/;"	f	class:websocketpp::processor::hybi00
hybi00	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^class hybi00 : public processor<config> {$/;"	c	namespace:websocketpp::processor
hybi07	NFD/websocketpp/websocketpp/processors/hybi07.hpp	/^    explicit hybi07(bool secure, bool p_is_server, msg_manager_ptr manager, rng_type& rng)$/;"	f	class:websocketpp::processor::hybi07
hybi07	NFD/websocketpp/websocketpp/processors/hybi07.hpp	/^class hybi07 : public hybi08<config> {$/;"	c	namespace:websocketpp::processor
hybi08	NFD/websocketpp/websocketpp/processors/hybi08.hpp	/^    explicit hybi08(bool secure, bool p_is_server, msg_manager_ptr manager, rng_type& rng)$/;"	f	class:websocketpp::processor::hybi08
hybi08	NFD/websocketpp/websocketpp/processors/hybi08.hpp	/^class hybi08 : public hybi13<config> {$/;"	c	namespace:websocketpp::processor
hybi13	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    explicit hybi13(bool secure, bool p_is_server, msg_manager_ptr manager, rng_type& rng)$/;"	f	class:websocketpp::processor::hybi13
hybi13	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^class hybi13 : public processor<config> {$/;"	c	namespace:websocketpp::processor
i	NFD/websocketpp/websocketpp/close.hpp	/^    uint16_t i;$/;"	m	union:websocketpp::close::code_converter
i	NFD/websocketpp/websocketpp/frame.hpp	/^    uint16_t i;$/;"	m	union:websocketpp::frame::uint16_converter
i	NFD/websocketpp/websocketpp/frame.hpp	/^    uint32_t i;$/;"	m	union:websocketpp::frame::uint32_converter
i	NFD/websocketpp/websocketpp/frame.hpp	/^    uint64_t i;$/;"	m	union:websocketpp::frame::uint64_converter
i_seq	apps/ndn-consumer.hpp	/^  class i_seq {$/;"	c	class:ns3::ndn::Consumer
i_timestamp	apps/ndn-consumer.hpp	/^  class i_timestamp {$/;"	c	class:ns3::ndn::Consumer
id1	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  Name id1;$/;"	m	class:ndn::security::PibDataFixture
id1Key1	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  PublicKey id1Key1;$/;"	m	class:ndn::security::PibDataFixture
id1Key1Cert1	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  IdentityCertificate id1Key1Cert1;$/;"	m	class:ndn::security::PibDataFixture
id1Key1Cert2	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  IdentityCertificate id1Key1Cert2;$/;"	m	class:ndn::security::PibDataFixture
id1Key1Name	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  Name id1Key1Name;$/;"	m	class:ndn::security::PibDataFixture
id1Key2	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  PublicKey id1Key2;$/;"	m	class:ndn::security::PibDataFixture
id1Key2Cert1	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  IdentityCertificate id1Key2Cert1;$/;"	m	class:ndn::security::PibDataFixture
id1Key2Cert2	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  IdentityCertificate id1Key2Cert2;$/;"	m	class:ndn::security::PibDataFixture
id1Key2Name	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  Name id1Key2Name;$/;"	m	class:ndn::security::PibDataFixture
id2	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  Name id2;$/;"	m	class:ndn::security::PibDataFixture
id2Key1	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  PublicKey id2Key1;$/;"	m	class:ndn::security::PibDataFixture
id2Key1Cert1	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  IdentityCertificate id2Key1Cert1;$/;"	m	class:ndn::security::PibDataFixture
id2Key1Cert2	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  IdentityCertificate id2Key1Cert2;$/;"	m	class:ndn::security::PibDataFixture
id2Key1Name	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  Name id2Key1Name;$/;"	m	class:ndn::security::PibDataFixture
id2Key2	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  PublicKey id2Key2;$/;"	m	class:ndn::security::PibDataFixture
id2Key2Cert1	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  IdentityCertificate id2Key2Cert1;$/;"	m	class:ndn::security::PibDataFixture
id2Key2Cert2	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  IdentityCertificate id2Key2Cert2;$/;"	m	class:ndn::security::PibDataFixture
id2Key2Name	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^  Name id2Key2Name;$/;"	m	class:ndn::security::PibDataFixture
identity	ndn-cxx/tests/unit-tests/data.t.cpp	/^  Name identity;$/;"	m	class:ndn::tests::DataIdentityFixture	file:
if_c	NFD/daemon/table/name-tree.cpp	/^typedef boost::mpl::if_c<sizeof(size_t) >= 8, Hash64, Hash32>::type CityHash;$/;"	t	class:nfd::name_tree::boost::mpl	file:
ignoreRibAndLogSections	NFD/daemon/nfd.cpp	/^ignoreRibAndLogSections(const std::string& filename, const std::string& sectionName,$/;"	f	namespace:nfd
ignoreUnknownSection	NFD/core/config-file.cpp	/^ConfigFile::ignoreUnknownSection(const std::string& filename,$/;"	f	class:nfd::ConfigFile
ignoreUnsignedVerb	NFD/daemon/mgmt/face-manager.hpp	/^FaceManager::ignoreUnsignedVerb(const Interest& request)$/;"	f	class:nfd::FaceManager
im_a_teapot	NFD/websocketpp/websocketpp/http/constants.hpp	/^            im_a_teapot = 418,$/;"	e	enum:websocketpp::http::status_code::value
impl	ndn-cxx/tests/unit-tests/security/pib-impl.t.cpp	/^  PibMemory impl;$/;"	m	class:ndn::security::tests::PibMemoryWrapper	file:
impl	ndn-cxx/tests/unit-tests/security/pib-impl.t.cpp	/^  PibSqlite3 impl;$/;"	m	class:ndn::security::tests::PibSqlite3Wrapper	file:
impl	ndn-cxx/tests/unit-tests/security/pib-sqlite3.t.cpp	/^  PibSqlite3 impl;$/;"	m	class:ndn::security::tests::PibSqlite3TestFixture	file:
importIdentity	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::importIdentity(const SecuredBag& securedBag, const std::string& passwordStr)$/;"	f	class:ndn::security::KeyChain
importPrivateKeyPkcs5IntoTpm	ndn-cxx/src/security/key-chain.hpp	/^  importPrivateKeyPkcs5IntoTpm(const Name& keyName,$/;"	f	class:ndn::security::KeyChain
importPrivateKeyPkcs5IntoTpm	ndn-cxx/src/security/sec-tpm.cpp	/^SecTpm::importPrivateKeyPkcs5IntoTpm(const Name& keyName,$/;"	f	class:ndn::SecTpm
importPrivateKeyPkcs8IntoTpm	ndn-cxx/src/security/sec-tpm-file.cpp	/^SecTpmFile::importPrivateKeyPkcs8IntoTpm(const Name& keyName, const uint8_t* buf, size_t size)$/;"	f	class:ndn::SecTpmFile
importPrivateKeyPkcs8IntoTpm	ndn-cxx/src/security/sec-tpm-osx.hpp	/^  importPrivateKeyPkcs8IntoTpm(const Name& keyName, const uint8_t* buf, size_t size)$/;"	f	class:ndn::SecTpmOsx
importPrivateKeyPkcs8IntoTpm	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::importPrivateKeyPkcs8IntoTpm(const Name& keyName, const uint8_t* buffer,$/;"	f	class:ndn::security::DummyTpm
importPrivateKeyPkcs8IntoTpm	utils/dummy-keychain.cpp	/^DummyTpm::importPrivateKeyPkcs8IntoTpm(const Name& keyName, const uint8_t* buffer,$/;"	f	class:ndn::security::DummyTpm
importPrivateKeyPkcs8IntoTpmInternal	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::importPrivateKeyPkcs8IntoTpmInternal(const Name& keyName,$/;"	f	class:ndn::SecTpmOsx
importPublicKeyPkcs1IntoTpm	ndn-cxx/src/security/sec-tpm-file.cpp	/^SecTpmFile::importPublicKeyPkcs1IntoTpm(const Name& keyName, const uint8_t* buf, size_t size)$/;"	f	class:ndn::SecTpmFile
importPublicKeyPkcs1IntoTpm	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::importPublicKeyPkcs1IntoTpm(const Name& keyName, const uint8_t* buf, size_t size)$/;"	f	class:ndn::SecTpmOsx
importPublicKeyPkcs1IntoTpm	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::importPublicKeyPkcs1IntoTpm(const Name& keyName, const uint8_t* buffer, size_t bufferSize)$/;"	f	class:ndn::security::DummyTpm
importPublicKeyPkcs1IntoTpm	utils/dummy-keychain.cpp	/^DummyTpm::importPublicKeyPkcs1IntoTpm(const Name& keyName, const uint8_t* buffer, size_t bufferSize)$/;"	f	class:ndn::security::DummyTpm
in_use_	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^  bool in_use_;$/;"	m	class:websocketpp::transport::asio::handler_allocator
incrementFrequency	ndn-cxx/src/util/in-memory-storage-lfu.hpp	/^  incrementFrequency(CleanupEntry& cleanupEntry)$/;"	f	class:ndn::util::InMemoryStorageLfu
incrementMultiplier	NFD/daemon/fw/rtt-estimator.cpp	/^RttEstimator::incrementMultiplier()$/;"	f	class:nfd::RttEstimator
indef_read	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    void indef_read() {$/;"	f	struct:stub_con
indef_read_buf	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    char * indef_read_buf;$/;"	m	struct:stub_con	file:
indef_read_len	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    size_t indef_read_len;$/;"	m	struct:stub_con	file:
indef_read_size	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    size_t indef_read_size;$/;"	m	struct:stub_con	file:
indef_read_total	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    size_t indef_read_total;$/;"	m	struct:stub_con	file:
index	NFD/core/network-interface.hpp	/^  int index;$/;"	m	class:nfd::NetworkInterfaceInfo
index	utils/trie/detail/multi-policy-container.hpp	/^  struct index {$/;"	s	struct:ns3::ndn::ndnSIM::detail::multi_policy_container
index	utils/trie/detail/multi-type-container.hpp	/^  struct index {$/;"	s	struct:ns3::ndn::ndnSIM::detail::multi_type_container
index_container	utils/trie/payload-with-policy.hpp	/^      index_container;$/;"	t	class:ns3::ndn::ndnSIM::payload_with_index
info	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const info = 0x4;$/;"	m	struct:websocketpp::log::elevel
inheritFrom	NFD/daemon/fw/ncc-strategy.cpp	/^NccStrategy::MeasurementsEntryInfo::inheritFrom(const MeasurementsEntryInfo& other)$/;"	f	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
inherit_with_base	utils/trie/detail/multi-policy-container.hpp	/^  inherit_with_base(Base& base)$/;"	f	struct:ns3::ndn::ndnSIM::detail::inherit_with_base
inherit_with_base	utils/trie/detail/multi-policy-container.hpp	/^struct inherit_with_base : Super, Value {$/;"	s	namespace:ns3::ndn::ndnSIM::detail
init	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    lib::error_code init() {$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
init	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void init(init_handler callback) {$/;"	f	class:websocketpp::transport::asio::connection
init	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    lib::error_code init(transport_con_ptr tcon) {$/;"	f	class:websocketpp::transport::asio::endpoint
init	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    lib::error_code init(socket_con_ptr scon) {$/;"	f	class:websocketpp::transport::asio::basic_socket::endpoint
init	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    lib::error_code init(socket_con_ptr scon) {$/;"	f	class:websocketpp::transport::asio::tls_socket::endpoint
init	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    void init(init_handler handler) {$/;"	f	class:websocketpp::transport::debug::connection
init	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^    lib::error_code init(transport_con_ptr) {$/;"	f	class:websocketpp::transport::debug::endpoint
init	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    void init(init_handler handler) {$/;"	f	class:websocketpp::transport::iostream::connection
init	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    lib::error_code init(transport_con_ptr tcon) {$/;"	f	class:websocketpp::transport::iostream::endpoint
init	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    void init(init_handler handler) {$/;"	f	class:websocketpp::transport::stub::connection
init	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^    lib::error_code init(transport_con_ptr tcon) {$/;"	f	class:websocketpp::transport::stub::endpoint
init_asio	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    lib::error_code init_asio (io_service_ptr io_service) {$/;"	f	class:websocketpp::transport::asio::connection
init_asio	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void init_asio() {$/;"	f	class:websocketpp::transport::asio::endpoint
init_asio	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void init_asio(io_service_ptr ptr) {$/;"	f	class:websocketpp::transport::asio::endpoint
init_asio	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void init_asio(io_service_ptr ptr, lib::error_code & ec) {$/;"	f	class:websocketpp::transport::asio::endpoint
init_asio	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void init_asio(lib::error_code & ec) {$/;"	f	class:websocketpp::transport::asio::endpoint
init_asio	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    lib::error_code init_asio (io_service_ptr service, strand_ptr, bool)$/;"	f	class:websocketpp::transport::asio::basic_socket::connection
init_asio	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    lib::error_code init_asio (io_service_ptr service, strand_ptr strand,$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
init_handler	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^typedef lib::function<void(const lib::error_code&)> init_handler;$/;"	t	namespace:websocketpp::transport::asio::socket
init_handler	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^typedef lib::function<void(lib::error_code const &)> init_handler;$/;"	t	namespace:websocketpp::transport
init_logging	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void init_logging(alog_type* a, elog_type* e) {$/;"	f	class:websocketpp::transport::asio::endpoint
init_logging	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^    void init_logging(alog_type *, elog_type *) {}$/;"	f	class:websocketpp::transport::debug::endpoint
init_logging	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    void init_logging(alog_type * a, elog_type * e) {$/;"	f	class:websocketpp::transport::iostream::endpoint
init_logging	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^    void init_logging(alog_type * a, elog_type * e) {}$/;"	f	class:websocketpp::transport::stub::endpoint
initialBucketSize_	utils/trie/trie.hpp	/^  size_t initialBucketSize_;$/;"	m	class:ns3::ndn::ndnSIM::trie
initialize	NFD/core/privilege-helper.cpp	/^PrivilegeHelper::initialize(const std::string& userName, const std::string& groupName)$/;"	f	class:nfd::PrivilegeHelper
initialize	NFD/daemon/main.cpp	/^  initialize()$/;"	f	class:nfd::NfdRunner
initialize	NFD/daemon/nfd.cpp	/^Nfd::initialize()$/;"	f	class:nfd::Nfd
initialize	NFD/rib/nrd.cpp	/^Nrd::initialize()$/;"	f	class:nfd::rib::Nrd
initialize	model/ndn-l3-protocol.cpp	/^L3Protocol::initialize()$/;"	f	class:ns3::ndn::L3Protocol
initialize	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::initialize(const std::string& pibLocator,$/;"	f	class:ndn::security::KeyChain
initializeConfig	ndn-cxx/tests/unit-tests/transport/transport-fixture.hpp	/^  initializeConfig(const char* path)$/;"	f	class:ndn::TransportFixture
initializeLogging	NFD/daemon/nfd.cpp	/^Nfd::initializeLogging()$/;"	f	class:nfd::Nfd
initializeLogging	NFD/rib/nrd.cpp	/^Nrd::initializeLogging()$/;"	f	class:nfd::rib::Nrd
initializeManagement	NFD/daemon/nfd.cpp	/^Nfd::initializeManagement()$/;"	f	class:nfd::Nfd
initializeManagement	model/ndn-l3-protocol.cpp	/^L3Protocol::initializeManagement()$/;"	f	class:ns3::ndn::L3Protocol
initializeRibManager	model/ndn-l3-protocol.cpp	/^L3Protocol::initializeRibManager()$/;"	f	class:ns3::ndn::L3Protocol
initializeTable	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::initializeTable(const string& tableName, const string& initCommand)$/;"	f	class:ndn::SecPublicInfoSqlite3
initialize_processor	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^lib::error_code connection<config>::initialize_processor() {$/;"	f	class:websocketpp::connection
innerHash	NFD/websocketpp/websocketpp/sha1/sha1.hpp	/^inline void innerHash(unsigned int * result, unsigned int * w)$/;"	f	namespace:websocketpp::sha1::__anon14
insert	NFD/daemon/table/cs.cpp	/^Cs::insert(const Data& data, bool isUnsolicited)$/;"	f	class:nfd::cs::Cs
insert	NFD/daemon/table/fib.cpp	/^Fib::insert(const Name& prefix)$/;"	f	class:nfd::Fib
insert	NFD/daemon/table/name-tree.cpp	/^NameTree::insert(const Name& prefix)$/;"	f	class:nfd::NameTree
insert	NFD/daemon/table/pit.cpp	/^Pit::insert(const Interest& interest)$/;"	f	class:nfd::Pit
insert	NFD/daemon/table/strategy-choice.cpp	/^StrategyChoice::insert(const Name& prefix, const Name& strategyName)$/;"	f	class:nfd::StrategyChoice
insert	NFD/rib/rib.cpp	/^Rib::insert(const Name& prefix, const Route& route)$/;"	f	class:nfd::rib::Rib
insert	NFD/tests/daemon/table/cs.t.cpp	/^  insert(uint32_t id, const Name& name)$/;"	f	class:nfd::cs::tests::FindFixture
insert	model/cs/custom-policies/freshness-policy.hpp	/^      insert(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::freshness_policy_traits::policy::type
insert	model/cs/custom-policies/lifetime-stats-policy.hpp	/^      insert(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy::type
insert	model/cs/custom-policies/probability-policy.hpp	/^      insert(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
insert	ndn-cxx/src/detail/container-with-on-empty-signal.hpp	/^  insert(const value_type& value)$/;"	f	class:ndn::ContainerWithOnEmptySignal
insert	ndn-cxx/src/encoding/block.cpp	/^Block::insert(Block::element_const_iterator pos, const Block& element)$/;"	f	class:ndn::Block
insert	ndn-cxx/src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::insert(shared_ptr<const IdentityCertificate> certificate)$/;"	f	class:ndn::CertificateCacheTtl
insert	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::insert(const Data& data)$/;"	f	class:ndn::util::InMemoryStorage
insert	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^  insert(uint32_t id, const Name& name)$/;"	f	class:ndn::util::FindFixture
insert	utils/trie/aggregate-stats-policy.hpp	/^      insert(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
insert	utils/trie/counting-policy.hpp	/^      insert(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::counting_policy_traits::policy::type
insert	utils/trie/detail/multi-policy-container.hpp	/^  insert(typename Base::iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::detail::empty_policy_wrap
insert	utils/trie/detail/multi-policy-container.hpp	/^  insert(typename Base::iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::detail::inherit_with_base
insert	utils/trie/empty-policy.hpp	/^      inline bool insert(typename Container::iterator)$/;"	f	struct:ns3::ndn::ndnSIM::empty_policy_traits::policy::type
insert	utils/trie/fifo-policy.hpp	/^      insert(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::fifo_policy_traits::policy::type
insert	utils/trie/lfu-policy.hpp	/^      insert(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::lfu_policy_traits::policy::type
insert	utils/trie/lru-policy.hpp	/^      insert(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::lru_policy_traits::policy::type
insert	utils/trie/multi-policy.hpp	/^      insert(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::multi_policy_traits::policy::type
insert	utils/trie/payload-policy.hpp	/^      insert(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::payload_policy_traits::policy::type
insert	utils/trie/payload-with-policy.hpp	/^  insert(typename iterator payload)$/;"	f	class:ns3::ndn::ndnSIM::payload_with_index
insert	utils/trie/persistent-policy.hpp	/^      insert(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::persistent_policy_traits::policy::type
insert	utils/trie/random-policy.hpp	/^      insert(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::random_policy_traits::policy::type
insert	utils/trie/trie-with-policy.hpp	/^  insert(const FullKey& key, typename PayloadTraits::insert_type payload)$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
insert	utils/trie/trie.hpp	/^  insert(const FullKey& key, typename PayloadTraits::insert_type payload)$/;"	f	class:ns3::ndn::ndnSIM::trie
insertAb1Ab2Ac1Ac2	NFD/tests/daemon/table/name-tree.t.cpp	/^  insertAb1Ab2Ac1Ac2()$/;"	f	class:nfd::tests::EnumerationFixture
insertAbAc	NFD/tests/daemon/table/name-tree.t.cpp	/^  insertAbAc()$/;"	f	class:nfd::tests::EnumerationFixture
insertCertificate	ndn-cxx/src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::insertCertificate(shared_ptr<const IdentityCertificate> certificate)$/;"	f	class:ndn::CertificateCacheTtl
insertDeadNonceList	NFD/daemon/fw/forwarder.cpp	/^Forwarder::insertDeadNonceList(pit::Entry& pitEntry, bool isSatisfied,$/;"	f	class:nfd::Forwarder
insertEntryWithIdentity	NFD/tests/rib/remote-registrator.t.cpp	/^  insertEntryWithIdentity(Name identity,$/;"	f	class:nfd::rib::tests::RemoteRegistratorFixture
insertEntryWithoutIdentity	NFD/tests/rib/remote-registrator.t.cpp	/^  insertEntryWithoutIdentity(Name identity,$/;"	f	class:nfd::rib::tests::RemoteRegistratorFixture
insertNonceToDnl	NFD/daemon/fw/forwarder.cpp	/^insertNonceToDnl(DeadNonceList& dnl, const pit::Entry& pitEntry,$/;"	f	namespace:nfd
insertOrUpdateInRecord	NFD/daemon/table/pit-entry.cpp	/^Entry::insertOrUpdateInRecord(shared_ptr<Face> face, const Interest& interest)$/;"	f	class:nfd::pit::Entry
insertOrUpdateOutRecord	NFD/daemon/table/pit-entry.cpp	/^Entry::insertOrUpdateOutRecord(shared_ptr<Face> face, const Interest& interest)$/;"	f	class:nfd::pit::Entry
insertPitEntry	NFD/daemon/table/name-tree-entry.cpp	/^Entry::insertPitEntry(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::name_tree::Entry
insertRoute	NFD/rib/rib-entry.cpp	/^RibEntry::insertRoute(const Route& route)$/;"	f	class:nfd::rib::RibEntry
insertRoute	NFD/tests/rib/fib-updates-common.hpp	/^  insertRoute(const Name& name, uint64_t faceId, uint64_t origin, uint64_t cost, uint64_t flags)$/;"	f	class:nfd::rib::tests::FibUpdatesFixture
insertToQueue	NFD/daemon/table/cs-policy-lru.cpp	/^LruPolicy::insertToQueue(iterator i, bool isNewEntry)$/;"	f	class:nfd::cs::lru::LruPolicy
insert_type	utils/trie/trie.hpp	/^  typedef Payload* insert_type;  \/\/ what parameter is inserted$/;"	t	struct:ns3::ndn::ndnSIM::pointer_payload_traits
insert_type	utils/trie/trie.hpp	/^  typedef const Payload& insert_type; \/\/ nothing to insert$/;"	t	struct:ns3::ndn::ndnSIM::non_pointer_traits
insert_type	utils/trie/trie.hpp	/^  typedef ns3::Ptr<Payload> insert_type;$/;"	t	struct:ns3::ndn::ndnSIM::smart_pointer_payload_traits
install	NFD/daemon/table/strategy-choice.cpp	/^StrategyChoice::install(shared_ptr<Strategy> strategy)$/;"	f	class:nfd::StrategyChoice
installStrategies	NFD/daemon/fw/strategy-registry.cpp	/^installStrategies(Forwarder& forwarder)$/;"	f	namespace:nfd::fw
int_generator	NFD/websocketpp/websocketpp/random/none.hpp	/^        int_generator() {}$/;"	f	class:websocketpp::random::none::int_generator
int_generator	NFD/websocketpp/websocketpp/random/none.hpp	/^class int_generator {$/;"	c	namespace:websocketpp::random::none
int_generator	NFD/websocketpp/websocketpp/random/random_device.hpp	/^        int_generator() {}$/;"	f	class:websocketpp::random::random_device::int_generator
int_generator	NFD/websocketpp/websocketpp/random/random_device.hpp	/^class int_generator {$/;"	c	namespace:websocketpp::random::random_device
interceptResponse	NFD/tests/daemon/mgmt/status-server.t.cpp	/^interceptResponse(const Data& data)$/;"	f	namespace:nfd::tests
interest	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^  shared_ptr<Interest> interest;$/;"	m	class:ndn::mgmt::tests::StatusDatasetContextFixture	file:
interestCheckFailed	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^interestCheckFailed(const shared_ptr<const Interest>& interest,$/;"	f	namespace:ndn::security::conf::tests
interestCheckFailedFalse	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^interestCheckFailedFalse(const shared_ptr<const Interest>& interest,$/;"	f	namespace:ndn::security::conf::tests
interestChecked	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^interestChecked(const shared_ptr<const Interest>& interest)$/;"	f	namespace:ndn::security::conf::tests
interestCheckedFalse	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^interestCheckedFalse(const shared_ptr<const Interest>& interest)$/;"	f	namespace:ndn::security::conf::tests
interestFilters	ndn-cxx/src/mgmt/dispatcher.hpp	/^    std::vector<const ndn::InterestFilterId*> interestFilters;$/;"	m	struct:ndn::mgmt::Dispatcher::TopPrefixEntry
internal_endpoint_error	NFD/websocketpp/websocketpp/close.hpp	/^    static value const internal_endpoint_error = 1011;$/;"	m	namespace:websocketpp::close::status
internal_server_error	NFD/websocketpp/websocketpp/http/constants.hpp	/^            internal_server_error = 500,$/;"	e	enum:websocketpp::http::status_code::value
internal_state	NFD/websocketpp/websocketpp/connection.hpp	/^namespace internal_state {$/;"	n	namespace:websocketpp::session
interrupt	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^lib::error_code connection<config>::interrupt() {$/;"	f	class:websocketpp::connection
interrupt	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^void endpoint<connection,config>::interrupt(connection_hdl hdl) {$/;"	f	class:websocketpp::endpoint
interrupt	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^void endpoint<connection,config>::interrupt(connection_hdl hdl, lib::error_code & ec)$/;"	f	class:websocketpp::endpoint
interrupt	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    lib::error_code interrupt(interrupt_handler handler) {$/;"	f	class:websocketpp::transport::asio::connection
interrupt_handler	NFD/websocketpp/websocketpp/connection.hpp	/^typedef lib::function<void(connection_hdl)> interrupt_handler;$/;"	t	namespace:websocketpp
interrupt_handler	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^typedef lib::function<void()> interrupt_handler;$/;"	t	namespace:websocketpp::transport
invalid	NFD/websocketpp/websocketpp/close.hpp	/^    inline bool invalid(value code) {$/;"	f	namespace:websocketpp::close::status
invalid	NFD/websocketpp/websocketpp/frame.hpp	/^    inline bool invalid(value v) {$/;"	f	namespace:websocketpp::frame::opcode
invalid_arguments	NFD/websocketpp/websocketpp/processors/base.hpp	/^    invalid_arguments,$/;"	e	enum:websocketpp::processor::error::processor_errors
invalid_attribute_value	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    invalid_attribute_value,$/;"	e	enum:websocketpp::extensions::permessage_deflate::error::value
invalid_attributes	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    invalid_attributes,$/;"	e	enum:websocketpp::extensions::permessage_deflate::error::value
invalid_close_code	NFD/websocketpp/websocketpp/error.hpp	/^    invalid_close_code,$/;"	e	enum:websocketpp::error::value
invalid_close_code	NFD/websocketpp/websocketpp/processors/base.hpp	/^    invalid_close_code,$/;"	e	enum:websocketpp::processor::error::processor_errors
invalid_continuation	NFD/websocketpp/websocketpp/processors/base.hpp	/^    invalid_continuation,$/;"	e	enum:websocketpp::processor::error::processor_errors
invalid_high	NFD/websocketpp/websocketpp/close.hpp	/^    static value const invalid_high = 5000;$/;"	m	namespace:websocketpp::close::status
invalid_host_service	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^    invalid_host_service$/;"	e	enum:websocketpp::transport::asio::error::value
invalid_http_method	NFD/websocketpp/websocketpp/processors/base.hpp	/^    invalid_http_method,$/;"	e	enum:websocketpp::processor::error::processor_errors
invalid_http_status	NFD/websocketpp/websocketpp/processors/base.hpp	/^    invalid_http_status,$/;"	e	enum:websocketpp::processor::error::processor_errors
invalid_http_version	NFD/websocketpp/websocketpp/processors/base.hpp	/^    invalid_http_version,$/;"	e	enum:websocketpp::processor::error::processor_errors
invalid_low	NFD/websocketpp/websocketpp/close.hpp	/^    static value const invalid_low = 999;$/;"	m	namespace:websocketpp::close::status
invalid_max_window_bits	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    invalid_max_window_bits,$/;"	e	enum:websocketpp::extensions::permessage_deflate::error::value
invalid_mode	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    invalid_mode,$/;"	e	enum:websocketpp::extensions::permessage_deflate::error::value
invalid_num_bytes	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^    invalid_num_bytes,$/;"	e	enum:websocketpp::transport::asio::error::value
invalid_num_bytes	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    invalid_num_bytes,$/;"	e	enum:websocketpp::transport::error::value
invalid_num_bytes	NFD/websocketpp/websocketpp/transport/debug/base.hpp	/^    invalid_num_bytes,$/;"	e	enum:websocketpp::transport::debug::error::value
invalid_num_bytes	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^    invalid_num_bytes,$/;"	e	enum:websocketpp::transport::iostream::error::value
invalid_opcode	NFD/websocketpp/websocketpp/processors/base.hpp	/^    invalid_opcode,$/;"	e	enum:websocketpp::processor::error::processor_errors
invalid_payload	NFD/websocketpp/websocketpp/close.hpp	/^    static value const invalid_payload = 1007;$/;"	m	namespace:websocketpp::close::status
invalid_payload	NFD/websocketpp/websocketpp/processors/base.hpp	/^    invalid_payload,$/;"	e	enum:websocketpp::processor::error::processor_errors
invalid_port	NFD/websocketpp/websocketpp/error.hpp	/^    invalid_port,$/;"	e	enum:websocketpp::error::value
invalid_rsv_bit	NFD/websocketpp/websocketpp/processors/base.hpp	/^    invalid_rsv_bit,$/;"	e	enum:websocketpp::processor::error::processor_errors
invalid_state	NFD/websocketpp/websocketpp/error.hpp	/^    invalid_state,$/;"	e	enum:websocketpp::error::value
invalid_state	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^        invalid_state,$/;"	e	enum:websocketpp::transport::asio::socket::error::value
invalid_subprotocol	NFD/websocketpp/websocketpp/error.hpp	/^    invalid_subprotocol,$/;"	e	enum:websocketpp::error::value
invalid_subprotocol_data	NFD/websocketpp/websocketpp/close.hpp	/^    static value const invalid_subprotocol_data = 3001;$/;"	m	namespace:websocketpp::close::status
invalid_tls_context	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^        invalid_tls_context,$/;"	e	enum:websocketpp::transport::asio::socket::error::value
invalid_uri	NFD/websocketpp/websocketpp/error.hpp	/^    invalid_uri,$/;"	e	enum:websocketpp::error::value
invalid_utf8	NFD/websocketpp/websocketpp/error.hpp	/^    invalid_utf8,$/;"	e	enum:websocketpp::error::value
invalid_utf8	NFD/websocketpp/websocketpp/processors/base.hpp	/^    invalid_utf8,$/;"	e	enum:websocketpp::processor::error::processor_errors
invalid_version	NFD/websocketpp/websocketpp/error.hpp	/^    invalid_version,$/;"	e	enum:websocketpp::error::value
invalidate	ndn-cxx/src/util/scheduler.cpp	/^  invalidate()$/;"	f	struct:ndn::util::scheduler::EventIdImpl
invokeDataCallback	ndn-cxx/src/detail/pending-interest.hpp	/^  invokeDataCallback(const Data& data)$/;"	f	class:ndn::PendingInterest
invokeInterestCallback	ndn-cxx/src/detail/interest-filter-record.hpp	/^  invokeInterestCallback(const Interest& interest) const$/;"	f	class:ndn::InterestFilterRecord
invokeTimeoutCallback	ndn-cxx/src/detail/pending-interest.hpp	/^  invokeTimeoutCallback()$/;"	f	class:ndn::PendingInterest
io	ndn-cxx/src/util/io.hpp	/^namespace io {$/;"	n	namespace:ndn
io	ndn-cxx/tests/unit-tests/unit-test-time-fixture.hpp	/^  boost::asio::io_service io;$/;"	m	class:ndn::tests::UnitTestTimeFixture
io_service_ptr	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    typedef boost::asio::io_service* io_service_ptr;$/;"	t	class:websocketpp::transport::asio::connection
io_service_ptr	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    typedef boost::asio::io_service* io_service_ptr;$/;"	t	class:websocketpp::transport::asio::endpoint
io_service_ptr	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    typedef boost::asio::io_service* io_service_ptr;$/;"	t	class:websocketpp::transport::asio::basic_socket::connection
io_service_ptr	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    typedef boost::asio::io_service* io_service_ptr;$/;"	t	class:websocketpp::transport::asio::tls_socket::connection
iostream	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^namespace iostream {$/;"	n	namespace:websocketpp::transport
iostream	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^namespace iostream {$/;"	n	namespace:websocketpp::transport
iostream	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^namespace iostream {$/;"	n	namespace:websocketpp::transport
iostream_client	NFD/websocketpp/test/transport/integration.cpp	/^typedef websocketpp::client<websocketpp::config::core_client> iostream_client;$/;"	t	file:
iostream_con	NFD/websocketpp/test/transport/iostream/connection.cpp	/^typedef websocketpp::transport::iostream::connection<config> iostream_con;$/;"	t	file:
iostream_server	NFD/websocketpp/test/transport/integration.cpp	/^typedef websocketpp::server<websocketpp::config::core> iostream_server;$/;"	t	file:
iostreams	ndn-cxx/src/encoding/buffer-stream.hpp	/^namespace iostreams$/;"	n	namespace:ndn
ip	ndn-cxx/src/transport/tcp-transport.hpp	/^namespace boost { namespace asio { namespace ip { class tcp; } } }$/;"	n	namespace:boost::asio
ipv4Addresses	NFD/core/network-interface.hpp	/^  std::vector<boost::asio::ip::address_v4> ipv4Addresses;$/;"	m	class:nfd::NetworkInterfaceInfo
ipv6Addresses	NFD/core/network-interface.hpp	/^  std::vector<boost::asio::ip::address_v6> ipv6Addresses;$/;"	m	class:nfd::NetworkInterfaceInfo
isBlacklisted	NFD/tools/nfd-autoreg.cpp	/^  isBlacklisted(const boost::asio::ip::address& address)$/;"	f	class:ndn::nfd_autoreg::AutoregServer
isBroadcast	ndn-cxx/src/util/ethernet.cpp	/^Address::isBroadcast() const$/;"	f	class:ndn::util::ethernet::Address
isBroadcastCapable	NFD/core/network-interface.hpp	/^NetworkInterfaceInfo::isBroadcastCapable() const$/;"	f	class:nfd::NetworkInterfaceInfo
isCanonical	ndn-cxx/src/util/face-uri.cpp	/^  isCanonical(const FaceUri& faceUri) const$/;"	f	class:ndn::util::EtherCanonizeProvider
isCanonical	ndn-cxx/src/util/face-uri.cpp	/^  isCanonical(const FaceUri& faceUri) const$/;"	f	class:ndn::util::IpHostCanonizeProvider
isCanonical	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::isCanonical() const$/;"	f	class:ndn::util::FaceUri
isCapture	NFD/rib/route.hpp	/^  isCapture() const$/;"	f	class:nfd::rib::Route
isChildInherit	NFD/rib/route.hpp	/^  isChildInherit() const$/;"	f	class:nfd::rib::Route
isChildInherit	ndn-cxx/src/management/nfd-rib-flags.hpp	/^  isChildInherit() const$/;"	f	class:ndn::nfd::RibFlagsTraits
isComplete	NFD/daemon/face/ndnlp-partial-message-store.cpp	/^PartialMessage::isComplete() const$/;"	f	class:nfd::ndnlp::PartialMessage
isConnected	ndn-cxx/src/transport/transport.hpp	/^Transport::isConnected()$/;"	f	class:ndn::Transport
isConnected	ndn-cxx/src/util/signal-connection.cpp	/^Connection::isConnected() const$/;"	f	class:ndn::util::signal::Connection
isConnected	ndn-cxx/src/util/signal-scoped-connection.cpp	/^ScopedConnection::isConnected() const$/;"	f	class:ndn::util::signal::ScopedConnection
isCorrectName	ndn-cxx/src/security/identity-certificate.cpp	/^IdentityCertificate::isCorrectName(const Name& name)$/;"	f	class:ndn::IdentityCertificate
isDataReceived	NFD/tools/ndn-tlv-peek.cpp	/^  isDataReceived() const$/;"	f	class:ndntlvpeek::NdnTlvPeek
isDataSent	NFD/tools/ndn-tlv-poke.cpp	/^  isDataSent() const$/;"	f	class:ndntlvpoke::NdnTlvPoke
isEmpty	NFD/daemon/table/fib.cpp	/^Fib::isEmpty(shared_ptr<fib::Entry> fibEntry) const$/;"	f	class:nfd::Fib
isEmpty	NFD/daemon/table/name-tree-entry.cpp	/^Entry::isEmpty() const$/;"	f	class:nfd::name_tree::Entry
isEmpty	ndn-cxx/src/security/certificate-cache.hpp	/^  isEmpty()$/;"	f	class:ndn::CertificateCache
isEmpty	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::isEmpty()$/;"	f	class:ndn::ValidatorConfig
isEmpty	ndn-cxx/src/util/event-emitter.hpp	/^EventEmitter<TArgs...>::isEmpty() const$/;"	f	class:ndn::util::EventEmitter
isEmpty	ndn-cxx/src/util/signal-signal.hpp	/^Signal<Owner, TArgs...>::isEmpty() const$/;"	f	class:ndn::util::signal::Signal
isEmptyFilteredLocalControlHeader	NFD/daemon/face/local-face.hpp	/^LocalFace::isEmptyFilteredLocalControlHeader(const ndn::nfd::LocalControlHeader& header) const$/;"	f	class:nfd::LocalFace
isExcluded	ndn-cxx/src/exclude.cpp	/^Exclude::isExcluded(const name::Component& comp) const$/;"	f	class:ndn::Exclude
isExempted	ndn-cxx/src/security/sec-rule-specific.hpp	/^  isExempted() const$/;"	f	class:ndn::SecRuleSpecific
isExpectedException	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^isExpectedException(const ConfigFile::Error& error, const std::string& expectedMessage)$/;"	f	namespace:nfd::tests
isExpectingData	ndn-cxx/src/transport/transport.hpp	/^Transport::isExpectingData()$/;"	f	class:ndn::Transport
isFull	ndn-cxx/src/util/in-memory-storage.hpp	/^  isFull() const$/;"	f	class:ndn::util::InMemoryStorage
isGeneric	ndn-cxx/src/name-component.cpp	/^Component::isGeneric() const$/;"	f	class:ndn::name::Component
isIdentityCertificate	ndn-cxx/src/security/identity-certificate.cpp	/^IdentityCertificate::isIdentityCertificate(const Certificate& certificate)$/;"	f	class:ndn::IdentityCertificate
isImplicitSha256Digest	ndn-cxx/src/name-component.cpp	/^Component::isImplicitSha256Digest() const$/;"	f	class:ndn::name::Component
isListening	NFD/daemon/face/tcp-channel.hpp	/^TcpChannel::isListening() const$/;"	f	class:nfd::TcpChannel
isListening	NFD/daemon/face/udp-channel.hpp	/^UdpChannel::isListening() const$/;"	f	class:nfd::UdpChannel
isListening	NFD/daemon/face/unix-stream-channel.hpp	/^UnixStreamChannel::isListening() const$/;"	f	class:nfd::UnixStreamChannel
isListening	NFD/daemon/face/websocket-channel.hpp	/^WebSocketChannel::isListening() const$/;"	f	class:nfd::WebSocketChannel
isLocal	NFD/daemon/face/face.hpp	/^Face::isLocal() const$/;"	f	class:nfd::Face
isLocalControlHeaderEnabled	NFD/daemon/face/local-face.hpp	/^LocalFace::isLocalControlHeaderEnabled() const$/;"	f	class:nfd::LocalFace
isLocalControlHeaderEnabled	NFD/daemon/face/local-face.hpp	/^LocalFace::isLocalControlHeaderEnabled(LocalControlFeature feature) const$/;"	f	class:nfd::LocalFace
isLocalEndpointOnDifferentGroup	NFD/tests/daemon/face/udp.t.cpp	/^  isLocalEndpointOnDifferentGroup(const UdpFactory::Error& e) {$/;"	f	class:nfd::tests::FactoryErrorCheck
isLocked	ndn-cxx/src/security/key-chain.hpp	/^  isLocked() const$/;"	f	class:ndn::security::KeyChain
isLocked	ndn-cxx/src/security/sec-tpm-file.hpp	/^  isLocked()$/;"	f	class:ndn::SecTpmFile
isLocked	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::isLocked()$/;"	f	class:ndn::SecTpmOsx
isLocked	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::isLocked()$/;"	f	class:ndn::security::DummyTpm
isLocked	utils/dummy-keychain.cpp	/^DummyTpm::isLocked()$/;"	f	class:ndn::security::DummyTpm
isLoopback	NFD/core/network-interface.hpp	/^NetworkInterfaceInfo::isLoopback() const$/;"	f	class:nfd::NetworkInterfaceInfo
isMultiAccess	NFD/daemon/face/face.hpp	/^Face::isMultiAccess() const$/;"	f	class:nfd::Face
isMulticast	ndn-cxx/src/util/ethernet.cpp	/^Address::isMulticast() const$/;"	f	class:ndn::util::ethernet::Address
isMulticastCapable	NFD/core/network-interface.hpp	/^NetworkInterfaceInfo::isMulticastCapable() const$/;"	f	class:nfd::NetworkInterfaceInfo
isNotExcluded	model/cs/content-store-impl.hpp	/^  inline isNotExcluded(const Exclude& exclude)$/;"	f	struct:ns3::ndn::cs::isNotExcluded
isNotExcluded	model/cs/content-store-impl.hpp	/^struct isNotExcluded {$/;"	s	namespace:ns3::ndn::cs
isNotMulticastAddress	NFD/tests/daemon/face/udp.t.cpp	/^  isNotMulticastAddress(const UdpFactory::Error& e) {$/;"	f	class:nfd::tests::FactoryErrorCheck
isNull	ndn-cxx/src/util/ethernet.cpp	/^Address::isNull() const$/;"	f	class:ndn::util::ethernet::Address
isNumber	ndn-cxx/src/name-component.cpp	/^Component::isNumber() const$/;"	f	class:ndn::name::Component
isNumberWithMarker	ndn-cxx/src/name-component.cpp	/^Component::isNumberWithMarker(uint8_t marker) const$/;"	f	class:ndn::name::Component
isOverlappedWithOthers	ndn-cxx/src/mgmt/dispatcher.cpp	/^Dispatcher::isOverlappedWithOthers(const PartialName& relPrefix)$/;"	f	class:ndn::mgmt::Dispatcher
isPositive	ndn-cxx/src/security/sec-rule.hpp	/^SecRule::isPositive()$/;"	f	class:ndn::SecRule
isPrefixOf	ndn-cxx/src/name.cpp	/^Name::isPrefixOf(const Name& name) const$/;"	f	class:ndn::Name
isQuery	NFD/daemon/table/cs-entry-impl.cpp	/^EntryImpl::isQuery() const$/;"	f	class:nfd::cs::EntryImpl
isRecognized	ndn-cxx/src/lp/detail/field-info.hpp	/^  bool isRecognized;$/;"	m	class:ndn::lp::detail::FieldInfo
isRepeatable	ndn-cxx/src/lp/detail/field-info.hpp	/^  bool isRepeatable;$/;"	m	class:ndn::lp::detail::FieldInfo
isRibCapture	ndn-cxx/src/management/nfd-rib-flags.hpp	/^  isRibCapture() const$/;"	f	class:ndn::nfd::RibFlagsTraits
isRunning	ndn-cxx/src/util/notification-subscriber.hpp	/^  isRunning() const$/;"	f	class:ndn::util::NotificationSubscriber
isSegment	ndn-cxx/src/name-component.cpp	/^Component::isSegment() const$/;"	f	class:ndn::name::Component
isSegmentOffset	ndn-cxx/src/name-component.cpp	/^Component::isSegmentOffset() const$/;"	f	class:ndn::name::Component
isSequenceNumber	ndn-cxx/src/name-component.cpp	/^Component::isSequenceNumber() const$/;"	f	class:ndn::name::Component
isSigEmpty	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^  isSigEmpty()$/;"	f	class:ndn::util::signal::tests::SignalOwner0
isStale	NFD/daemon/table/cs-entry.cpp	/^Entry::isStale() const$/;"	f	class:nfd::cs::Entry
isTheSameMulticastEndpoint	NFD/tests/daemon/face/udp.t.cpp	/^  isTheSameMulticastEndpoint(const UdpFactory::Error& e) {$/;"	f	class:nfd::tests::FactoryErrorCheck
isTheSameUnicastEndpoint	NFD/tests/daemon/face/udp.t.cpp	/^  isTheSameUnicastEndpoint(const UdpFactory::Error& e) {$/;"	f	class:nfd::tests::FactoryErrorCheck
isTimestamp	ndn-cxx/src/name-component.cpp	/^Component::isTimestamp() const$/;"	f	class:ndn::name::Component
isTooEarly	ndn-cxx/src/security/certificate.cpp	/^Certificate::isTooEarly()$/;"	f	class:ndn::Certificate
isTooLate	ndn-cxx/src/security/certificate.cpp	/^Certificate::isTooLate()$/;"	f	class:ndn::Certificate
isUnsolicited	NFD/daemon/table/cs-entry.hpp	/^  isUnsolicited() const$/;"	f	class:nfd::cs::Entry
isUp	NFD/core/network-interface.hpp	/^NetworkInterfaceInfo::isUp() const$/;"	f	class:nfd::NetworkInterfaceInfo
isUp	NFD/daemon/face/face.cpp	/^Face::isUp() const$/;"	f	class:nfd::Face
isValid	ndn-cxx/src/security/validity-period.cpp	/^ValidityPeriod::isValid(const time::system_clock::TimePoint& now) const$/;"	f	class:ndn::security::ValidityPeriod
isValid	ndn-cxx/src/util/scheduler.cpp	/^  isValid() const$/;"	f	struct:ndn::util::scheduler::EventIdImpl
isVersion	ndn-cxx/src/name-component.cpp	/^Component::isVersion() const$/;"	f	class:ndn::name::Component
isWhitelisted	NFD/tools/nfd-autoreg.cpp	/^  isWhitelisted(const boost::asio::ip::address& address)$/;"	f	class:ndn::nfd_autoreg::AutoregServer
is_base64	NFD/websocketpp/websocketpp/base64/base64.hpp	/^static inline bool is_base64(unsigned char c) {$/;"	f	namespace:websocketpp
is_control	NFD/websocketpp/websocketpp/frame.hpp	/^    inline bool is_control(value v) {$/;"	f	namespace:websocketpp::frame::opcode
is_enabled	NFD/websocketpp/websocketpp/extensions/permessage_deflate/disabled.hpp	/^    bool is_enabled() const {$/;"	f	class:websocketpp::extensions::permessage_deflate::disabled
is_enabled	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    bool is_enabled() const {$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
is_error_code_enum	NFD/websocketpp/websocketpp/error.hpp	/^template<> struct is_error_code_enum<websocketpp::error::value>$/;"	s
is_error_code_enum	NFD/websocketpp/websocketpp/extensions/extension.hpp	/^template<> struct is_error_code_enum$/;"	s
is_error_code_enum	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^template<> struct is_error_code_enum$/;"	s
is_error_code_enum	NFD/websocketpp/websocketpp/processors/base.hpp	/^template<> struct is_error_code_enum<websocketpp::processor::error::processor_errors>$/;"	s
is_error_code_enum	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^template<> struct is_error_code_enum<websocketpp::transport::asio::error::value>$/;"	s
is_error_code_enum	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^template<> struct is_error_code_enum<websocketpp::transport::error::value>$/;"	s
is_error_code_enum	NFD/websocketpp/websocketpp/transport/debug/base.hpp	/^template<> struct is_error_code_enum<websocketpp::transport::debug::error::value>$/;"	s
is_error_code_enum	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^template<> struct is_error_code_enum<websocketpp::transport::iostream::error::value>$/;"	s
is_error_code_enum	NFD/websocketpp/websocketpp/transport/stub/base.hpp	/^template<> struct is_error_code_enum<websocketpp::transport::stub::error::value>$/;"	s
is_implemented	NFD/websocketpp/websocketpp/extensions/permessage_deflate/disabled.hpp	/^    bool is_implemented() const {$/;"	f	class:websocketpp::extensions::permessage_deflate::disabled
is_implemented	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    bool is_implemented() const {$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
is_listening	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    bool is_listening() const {$/;"	f	class:websocketpp::transport::asio::endpoint
is_little_endian	NFD/websocketpp/websocketpp/common/network.hpp	/^inline bool is_little_endian() {$/;"	f	namespace:websocketpp::lib::net
is_not_token_char	NFD/websocketpp/websocketpp/http/constants.hpp	/^    inline bool is_not_token_char(unsigned char c) {$/;"	f	namespace:websocketpp::http
is_not_whitespace_char	NFD/websocketpp/websocketpp/http/constants.hpp	/^    inline bool is_not_whitespace_char(unsigned char c) {$/;"	f	namespace:websocketpp::http
is_secure	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    bool is_secure() const {$/;"	f	class:websocketpp::transport::asio::connection
is_secure	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    bool is_secure() const {$/;"	f	class:websocketpp::transport::asio::endpoint
is_secure	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    bool is_secure() const {$/;"	f	class:websocketpp::transport::asio::basic_socket::connection
is_secure	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    bool is_secure() const {$/;"	f	class:websocketpp::transport::asio::basic_socket::endpoint
is_secure	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    bool is_secure() const {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
is_secure	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    bool is_secure() const {$/;"	f	class:websocketpp::transport::asio::tls_socket::endpoint
is_secure	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    bool is_secure() const {$/;"	f	class:websocketpp::transport::debug::connection
is_secure	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^    bool is_secure() const {$/;"	f	class:websocketpp::transport::debug::endpoint
is_secure	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    bool is_secure() const {$/;"	f	class:websocketpp::transport::iostream::connection
is_secure	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    bool is_secure() const {$/;"	f	class:websocketpp::transport::iostream::endpoint
is_secure	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    bool is_secure() const {$/;"	f	class:websocketpp::transport::stub::connection
is_secure	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^    bool is_secure() const {$/;"	f	class:websocketpp::transport::stub::endpoint
is_server	NFD/websocketpp/test/connection/connection.cpp	/^    bool is_server() const {$/;"	f	struct:connection_extension
is_server	NFD/websocketpp/test/endpoint/endpoint.cpp	/^    bool is_server() const {$/;"	f	struct:endpoint_extension
is_server	NFD/websocketpp/websocketpp/connection.hpp	/^    bool is_server() const {$/;"	f	class:websocketpp::connection
is_server	NFD/websocketpp/websocketpp/endpoint.hpp	/^    bool is_server() const {$/;"	f	class:websocketpp::endpoint
is_steady	ndn-cxx/src/util/time.hpp	/^  static constexpr bool is_steady = false;$/;"	m	class:ndn::time::system_clock
is_steady	ndn-cxx/src/util/time.hpp	/^  static constexpr bool is_steady = true;$/;"	m	class:ndn::time::steady_clock
is_token_char	NFD/websocketpp/websocketpp/http/constants.hpp	/^    inline bool is_token_char(unsigned char c) {$/;"	f	namespace:websocketpp::http
is_websocket_handshake	NFD/websocketpp/websocketpp/processors/processor.hpp	/^bool is_websocket_handshake(request_type& r) {$/;"	f	namespace:websocketpp::processor
is_whitespace_char	NFD/websocketpp/websocketpp/http/constants.hpp	/^    inline bool is_whitespace_char(unsigned char c) {$/;"	f	namespace:websocketpp::http
istate_type	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef session::internal_state::value istate_type;$/;"	t	class:websocketpp::connection
istream_buffer	NFD/websocketpp/websocketpp/http/constants.hpp	/^    size_t const istream_buffer = 512;$/;"	m	namespace:websocketpp::http
item_	model/cs/content-store-impl.hpp	/^  typename CS::super::iterator item_;$/;"	m	class:ns3::ndn::cs::EntryImpl
iterator	NFD/daemon/table/cs-internal.hpp	/^typedef Table::const_iterator iterator;$/;"	t	namespace:nfd::cs
iterator	NFD/rib/rib-entry.hpp	/^  typedef RouteList::iterator iterator;$/;"	t	class:nfd::rib::RibEntry
iterator	ndn-cxx/src/detail/container-with-on-empty-signal.hpp	/^  typedef typename Base::iterator iterator;$/;"	t	class:ndn::ContainerWithOnEmptySignal
iterator	ndn-cxx/src/encoding/encoder.hpp	/^  typedef Buffer::iterator iterator;$/;"	t	class:ndn::encoding::Encoder
iterator	ndn-cxx/src/exclude.hpp	/^  typedef exclude_type::iterator iterator;$/;"	t	class:ndn::Exclude
iterator	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  typedef RouteList::const_iterator iterator;$/;"	t	class:ndn::nfd::RibEntry
iterator	ndn-cxx/src/name.hpp	/^  typedef Component*              iterator;$/;"	t	class:ndn::Name
iterator	ndn-cxx/src/security/additional-description.hpp	/^  typedef std::map<std::string, std::string>::iterator iterator;$/;"	t	class:ndn::security::AdditionalDescription
iterator	ndn-cxx/src/security/certificate-container.hpp	/^  typedef const_iterator iterator;$/;"	t	class:ndn::security::CertificateContainer
iterator	ndn-cxx/src/security/identity-container.hpp	/^  typedef const_iterator iterator;$/;"	t	class:ndn::security::IdentityContainer
iterator	ndn-cxx/src/security/key-container.hpp	/^  typedef const_iterator iterator;$/;"	t	class:ndn::security::KeyContainer
iterator	utils/trie/detail/multi-policy-container.hpp	/^  typedef typename boost::mpl::at_c<Vector, 0>::type::iterator iterator;$/;"	t	struct:ns3::ndn::ndnSIM::detail::multi_policy_container
iterator	utils/trie/payload-with-policy.hpp	/^  typedef PayloadTraits::pointer_type iterator;$/;"	t	class:ns3::ndn::ndnSIM::payload_with_index
iterator	utils/trie/trie-with-policy.hpp	/^  typedef typename parent_trie::iterator iterator;$/;"	t	class:ns3::ndn::ndnSIM::trie_with_policy
iterator	utils/trie/trie.hpp	/^  typedef trie* iterator;$/;"	t	class:ns3::ndn::ndnSIM::trie
j	ndn-cxx/src/util/concepts.hpp	/^  X j;$/;"	m	class:ndn::WireEncodable
j	ndn-cxx/src/util/concepts.hpp	/^  X j;$/;"	m	class:ndn::WireEncodableWithEncodingBuffer
joinMulticastGroup	NFD/daemon/face/ethernet-face.cpp	/^EthernetFace::joinMulticastGroup()$/;"	f	class:nfd::EthernetFace
k0	NFD/core/city-hash.cpp	/^static const uint64 k0 = 0xc3a5c85c97cb3127ULL;$/;"	v	file:
k1	NFD/core/city-hash.cpp	/^static const uint64 k1 = 0xb492b66fbe98f273ULL;$/;"	v	file:
k2	NFD/core/city-hash.cpp	/^static const uint64 k2 = 0x9ae16a3b2f90404fULL;$/;"	v	file:
keepFaceAliveUntilAllHandlersExecuted	NFD/daemon/face/datagram-face.hpp	/^DatagramFace<T, U>::keepFaceAliveUntilAllHandlersExecuted(const shared_ptr<Face>& face)$/;"	f	class:nfd::DatagramFace
key	utils/trie/trie.hpp	/^  key() const$/;"	f	class:ns3::ndn::ndnSIM::trie
keyChain	NFD/tests/rib/fib-updates-common.hpp	/^  ndn::KeyChain keyChain;$/;"	m	class:nfd::rib::tests::FibUpdatesFixture
keyChain	NFD/tests/rib/rib-manager.t.cpp	/^  ndn::KeyChain keyChain;$/;"	m	class:nfd::rib::tests::RibManagerFixture	file:
keyChain	ndn-cxx/tests/unit-tests/data.t.cpp	/^  KeyChain keyChain;$/;"	m	class:ndn::tests::DataIdentityFixture	file:
keyChain	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^  KeyChain keyChain;$/;"	m	class:ndn::nfd::tests::CommandFixture	file:
keyChain	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^  KeyChain keyChain;$/;"	m	class:ndn::util::tests::Fixture	file:
key_	utils/trie/trie.hpp	/^  Key key_; \/\/\/< name component$/;"	m	class:ns3::ndn::ndnSIM::trie
key_type	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef ns3::Ptr<ns3::ndn::GlobalRouter> key_type;$/;"	t	struct:boost::property_traits
key_type	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef ns3::ndn::GlobalRouter::Incidency key_type;$/;"	t	struct:boost::property_traits
laptopA	NFD/tests/daemon/fw/access-strategy.t.cpp	/^  TopologyNode laptopA;$/;"	m	class:nfd::fw::tests::TwoLaptopsFixture	file:
laptopB	NFD/tests/daemon/fw/access-strategy.t.cpp	/^  TopologyNode laptopB;$/;"	m	class:nfd::fw::tests::TwoLaptopsFixture	file:
largest	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    largest,$/;"	e	enum:websocketpp::extensions::permessage_deflate::mode::value
lastDecodeErrorData	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  Data lastDecodeErrorData;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
lastDeliveredSeqNo	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  uint64_t lastDeliveredSeqNo;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
lastError	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^  uint32_t lastError;$/;"	m	class:ndn::util::tests::Fixture	file:
lastNexthop	NFD/daemon/fw/access-strategy.hpp	/^    FaceId lastNexthop;$/;"	m	class:nfd::fw::AccessStrategy::MtInfo
lastNonce	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^  uint32_t lastNonce;$/;"	m	class:nfd::tests::PeriodicalInsertionFixture	file:
lastNotification	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  SimpleNotification lastNotification;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
lateCompile	ndn-cxx/src/util/regex/regex-backref-matcher.hpp	/^  lateCompile()$/;"	f	class:ndn::RegexBackrefMatcher
le16toh	ndn-cxx/src/encoding/endian.hpp	45;"	d
le32toh	ndn-cxx/src/encoding/endian.hpp	49;"	d
le64toh	ndn-cxx/src/encoding/endian.hpp	53;"	d
len	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    size_t len;$/;"	m	struct:websocketpp::transport::buffer
length_required	NFD/websocketpp/websocketpp/http/constants.hpp	/^            length_required = 411,$/;"	e	enum:websocketpp::http::status_code::value
less_than	ndn-cxx/src/util/monotonic_deadline_timer.hpp	/^  less_than(const time_type& timeLhs, const time_type& timeRhs)$/;"	f	struct:boost::asio::time_traits
level	NFD/websocketpp/websocketpp/logger/levels.hpp	/^typedef uint32_t level;$/;"	t	namespace:websocketpp::log
lfu_policy_traits	utils/trie/lfu-policy.hpp	/^struct lfu_policy_traits {$/;"	s	namespace:ns3::ndn::ndnSIM
lib	NFD/websocketpp/websocketpp/common/chrono.hpp	/^namespace lib {$/;"	n	namespace:websocketpp
lib	NFD/websocketpp/websocketpp/common/functional.hpp	/^namespace lib {$/;"	n	namespace:websocketpp
lib	NFD/websocketpp/websocketpp/common/memory.hpp	/^namespace lib {$/;"	n	namespace:websocketpp
lib	NFD/websocketpp/websocketpp/common/network.hpp	/^namespace lib {$/;"	n	namespace:websocketpp
lib	NFD/websocketpp/websocketpp/common/random.hpp	/^namespace lib {$/;"	n	namespace:websocketpp
lib	NFD/websocketpp/websocketpp/common/regex.hpp	/^namespace lib {$/;"	n	namespace:websocketpp
lib	NFD/websocketpp/websocketpp/common/system_error.hpp	/^namespace lib {$/;"	n	namespace:websocketpp
lib	NFD/websocketpp/websocketpp/common/thread.hpp	/^namespace lib {$/;"	n	namespace:websocketpp
lib	NFD/websocketpp/websocketpp/common/time.hpp	/^namespace lib {$/;"	n	namespace:websocketpp
library	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const library = 0x2;$/;"	m	struct:websocketpp::log::elevel
lifetime_stats_container	model/cs/content-store-with-stats.hpp	/^  typedef typename super::policy_container::template index<1>::type lifetime_stats_container;$/;"	t	class:ns3::ndn::cs::ContentStoreWithStats
lifetime_stats_policy_traits	model/cs/custom-policies/lifetime-stats-policy.hpp	/^struct lifetime_stats_policy_traits {$/;"	s	namespace:ns3::ndn::ndnSIM
limitedIo	NFD/tests/daemon/face/tcp.t.cpp	/^  LimitedIo limitedIo;$/;"	m	class:nfd::tests::EndToEndFixture	file:
limitedIo	NFD/tests/daemon/face/tcp.t.cpp	/^  LimitedIo limitedIo;$/;"	m	class:nfd::tests::FaceCreateTimeoutFixture	file:
limitedIo	NFD/tests/daemon/face/tcp.t.cpp	/^  LimitedIo limitedIo;$/;"	m	class:nfd::tests::SimpleEndToEndFixture	file:
limitedIo	NFD/tests/daemon/face/unix-stream.t.cpp	/^  LimitedIo limitedIo;$/;"	m	class:nfd::tests::EndToEndFixture	file:
limitedIo	NFD/tests/daemon/face/unix-stream.t.cpp	/^  LimitedIo limitedIo;$/;"	m	class:nfd::tests::SimpleEndToEndFixture	file:
limitedIo	NFD/tests/daemon/face/websocket.t.cpp	/^  LimitedIo limitedIo;$/;"	m	class:nfd::tests::EndToEndFixture	file:
limits	NFD/websocketpp/websocketpp/frame.hpp	/^namespace limits {$/;"	n	namespace:websocketpp::frame
linkA	NFD/tests/daemon/fw/access-strategy.t.cpp	/^  shared_ptr<TopologyLink> linkA;$/;"	m	class:nfd::fw::tests::TwoLaptopsFixture	file:
linkB	NFD/tests/daemon/fw/access-strategy.t.cpp	/^  shared_ptr<TopologyLink> linkB;$/;"	m	class:nfd::fw::tests::TwoLaptopsFixture	file:
links	helper/ndn-scenario-helper.hpp	/^  std::map<std::string, std::map<std::string, Ptr<NetDevice>>> links;$/;"	m	class:ns3::ndn::ScenarioHelper
list	ndn-cxx/src/lp/packet.hpp	/^  list() const$/;"	f	class:ndn::lp::Packet
listChannels	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::listChannels(const Interest& request)$/;"	f	class:nfd::FaceManager
listEntries	NFD/daemon/mgmt/fib-manager.cpp	/^FibManager::listEntries(const Interest& request)$/;"	f	class:nfd::FibManager
listEntries	NFD/rib/rib-manager.cpp	/^RibManager::listEntries(const Interest& request)$/;"	f	class:nfd::rib::RibManager
listFaces	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::listFaces(const Interest& request)$/;"	f	class:nfd::FaceManager
listNetworkInterfaces	NFD/core/network-interface.cpp	/^listNetworkInterfaces()$/;"	f	namespace:nfd
listQueriedFaces	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::listQueriedFaces(const Interest& request)$/;"	f	class:nfd::FaceManager
listStrategies	NFD/daemon/mgmt/strategy-choice-manager.cpp	/^StrategyChoiceManager::listStrategies(const Interest& request)$/;"	f	class:nfd::StrategyChoiceManager
listen	NFD/daemon/face/tcp-channel.cpp	/^TcpChannel::listen(const FaceCreatedCallback& onFaceCreated,$/;"	f	class:nfd::TcpChannel
listen	NFD/daemon/face/udp-channel.cpp	/^UdpChannel::listen(const FaceCreatedCallback& onFaceCreated,$/;"	f	class:nfd::UdpChannel
listen	NFD/daemon/face/unix-stream-channel.cpp	/^UnixStreamChannel::listen(const FaceCreatedCallback& onFaceCreated,$/;"	f	class:nfd::UnixStreamChannel
listen	NFD/daemon/face/websocket-channel.cpp	/^WebSocketChannel::listen(const FaceCreatedCallback& onFaceCreated)$/;"	f	class:nfd::WebSocketChannel
listen	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void listen(InternetProtocol const & internet_protocol, uint16_t port)$/;"	f	class:websocketpp::transport::asio::endpoint
listen	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void listen(InternetProtocol const & internet_protocol, uint16_t port,$/;"	f	class:websocketpp::transport::asio::endpoint
listen	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void listen(boost::asio::ip::tcp::endpoint const & ep) {$/;"	f	class:websocketpp::transport::asio::endpoint
listen	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void listen(boost::asio::ip::tcp::endpoint const & ep, lib::error_code & ec)$/;"	f	class:websocketpp::transport::asio::endpoint
listen	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void listen(std::string const & host, std::string const & service)$/;"	f	class:websocketpp::transport::asio::endpoint
listen	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void listen(std::string const & host, std::string const & service,$/;"	f	class:websocketpp::transport::asio::endpoint
listen	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void listen(uint16_t port) {$/;"	f	class:websocketpp::transport::asio::endpoint
listen	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void listen(uint16_t port, lib::error_code & ec) {$/;"	f	class:websocketpp::transport::asio::endpoint
load	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::load(const security::conf::ConfigSection& configSection,$/;"	f	class:ndn::ValidatorConfig
load	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::load(const std::string& filename)$/;"	f	class:ndn::ValidatorConfig
load	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::load(const std::string& input, const std::string& filename)$/;"	f	class:ndn::ValidatorConfig
load	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::load(std::istream& input, const std::string& filename)$/;"	f	class:ndn::ValidatorConfig
load	ndn-cxx/src/util/io.hpp	/^load(const std::string& file, IoEncoding encoding = BASE_64)$/;"	f	namespace:ndn::io
load	ndn-cxx/src/util/io.hpp	/^load(std::istream& is, IoEncoding encoding = BASE_64)$/;"	f	namespace:ndn::io
loadConfig	NFD/rib/remote-registrator.cpp	/^RemoteRegistrator::loadConfig(const ConfigSection& configSection)$/;"	f	class:nfd::rib::RemoteRegistrator
local	ndn-cxx/src/transport/unix-transport.hpp	/^namespace boost { namespace asio { namespace local { class stream_protocol; } } }$/;"	n	namespace:boost::asio
localtime	NFD/websocketpp/websocketpp/common/time.hpp	/^inline std::tm localtime(std::time_t const & time) {$/;"	f	namespace:websocketpp::lib
locationSortOrder	ndn-cxx/src/lp/detail/field-info.hpp	/^  int locationSortOrder;$/;"	m	class:ndn::lp::detail::FieldInfo
log	NFD/websocketpp/websocketpp/logger/basic.hpp	/^namespace log {$/;"	n	namespace:websocketpp
log	NFD/websocketpp/websocketpp/logger/levels.hpp	/^namespace log {$/;"	n	namespace:websocketpp
log	NFD/websocketpp/websocketpp/logger/stub.hpp	/^namespace log {$/;"	n	namespace:websocketpp
log	NFD/websocketpp/websocketpp/logger/syslog.hpp	/^namespace log {$/;"	n	namespace:websocketpp
log_close_result	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::log_close_result()$/;"	f	class:websocketpp::connection
log_err	NFD/websocketpp/websocketpp/connection.hpp	/^    void log_err(log::level l, char const * msg, error_type const & ec) {$/;"	f	class:websocketpp::connection
log_err	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void log_err(log::level l, const char * msg, const error_type & ec) {$/;"	f	class:websocketpp::transport::asio::connection
log_err	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void log_err(log::level l, char const * msg, error_type const & ec) {$/;"	f	class:websocketpp::transport::asio::endpoint
log_fail_result	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::log_fail_result()$/;"	f	class:websocketpp::connection
log_http_result	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::log_http_result() {$/;"	f	class:websocketpp::connection
log_open_result	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::log_open_result()$/;"	f	class:websocketpp::connection
longest_prefix_match	utils/trie/trie-with-policy.hpp	/^  longest_prefix_match(const FullKey& key)$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
longest_prefix_match_if	utils/trie/trie-with-policy.hpp	/^  longest_prefix_match_if(const FullKey& key, Predicate pred)$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
lookup	NFD/daemon/table/name-tree.cpp	/^NameTree::lookup(const Name& prefix)$/;"	f	class:nfd::NameTree
lookup	model/cs/custom-policies/freshness-policy.hpp	/^      lookup(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::freshness_policy_traits::policy::type
lookup	model/cs/custom-policies/lifetime-stats-policy.hpp	/^      lookup(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy::type
lookup	model/cs/custom-policies/probability-policy.hpp	/^      lookup(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
lookup	utils/trie/aggregate-stats-policy.hpp	/^      lookup(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
lookup	utils/trie/counting-policy.hpp	/^      lookup(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::counting_policy_traits::policy::type
lookup	utils/trie/detail/multi-policy-container.hpp	/^  lookup(typename Base::iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::detail::empty_policy_wrap
lookup	utils/trie/detail/multi-policy-container.hpp	/^  lookup(typename Base::iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::detail::inherit_with_base
lookup	utils/trie/empty-policy.hpp	/^      lookup(typename Container::iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::empty_policy_traits::policy::type
lookup	utils/trie/fifo-policy.hpp	/^      lookup(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::fifo_policy_traits::policy::type
lookup	utils/trie/lfu-policy.hpp	/^      lookup(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::lfu_policy_traits::policy::type
lookup	utils/trie/lru-policy.hpp	/^      lookup(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::lru_policy_traits::policy::type
lookup	utils/trie/multi-policy.hpp	/^      lookup(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::multi_policy_traits::policy::type
lookup	utils/trie/payload-policy.hpp	/^      lookup(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::payload_policy_traits::policy::type
lookup	utils/trie/persistent-policy.hpp	/^      lookup(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::persistent_policy_traits::policy::type
lookup	utils/trie/random-policy.hpp	/^      lookup(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::random_policy_traits::policy::type
lp	ndn-cxx/src/lp/cache-policy.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	ndn-cxx/src/lp/cache-policy.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	ndn-cxx/src/lp/detail/field-decl.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	ndn-cxx/src/lp/detail/field-info.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	ndn-cxx/src/lp/detail/field-info.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	ndn-cxx/src/lp/field.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	ndn-cxx/src/lp/fields.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	ndn-cxx/src/lp/nack-header.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	ndn-cxx/src/lp/nack-header.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	ndn-cxx/src/lp/nack.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	ndn-cxx/src/lp/nack.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	ndn-cxx/src/lp/packet.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	ndn-cxx/src/lp/packet.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	ndn-cxx/src/lp/sequence.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	ndn-cxx/src/lp/tlv.hpp	/^namespace lp {$/;"	n	namespace:ndn
lp	ndn-cxx/tests/unit-tests/lp/cache-policy.t.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	ndn-cxx/tests/unit-tests/lp/nack-header.t.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	ndn-cxx/tests/unit-tests/lp/nack.t.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lp	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^namespace lp {$/;"	n	namespace:ndn	file:
lru	NFD/daemon/table/cs-policy-lru.cpp	/^namespace lru {$/;"	n	namespace:nfd::cs	file:
lru	NFD/daemon/table/cs-policy-lru.hpp	/^namespace lru {$/;"	n	namespace:nfd::cs
lru_policy_traits	utils/trie/lru-policy.hpp	/^struct lru_policy_traits {$/;"	s	namespace:ns3::ndn::ndnSIM
m_HOME	ndn-cxx/tests/unit-tests/security/identity-fixture.cpp	/^  std::string m_HOME;$/;"	m	class:ndn::security::IdentityFixture	file:
m_HOME	ndn-cxx/tests/unit-tests/security/sec-tpm-osx.t.cpp	/^  std::string m_HOME;$/;"	m	class:ndn::tests::OsxKeyChainTestFixture	file:
m_HOME	ndn-cxx/tests/unit-tests/transport/transport-fixture.hpp	/^  std::string m_HOME;$/;"	m	class:ndn::TransportFixture
m_HOME	ndn-cxx/tests/unit-tests/util/test-home-environment-fixture.hpp	/^  std::string m_HOME;$/;"	m	class:ndn::util::TestHomeEnvironmentFixture
m_N	apps/ndn-consumer-zipf-mandelbrot.hpp	/^  uint32_t m_N;               \/\/ number of the contents$/;"	m	class:ns3::ndn::ConsumerZipfMandelbrot
m_OLD_HOME	ndn-cxx/tests/unit-tests/security/identity-fixture.cpp	/^  std::string m_OLD_HOME;$/;"	m	class:ndn::security::IdentityFixture	file:
m_Pcum	apps/ndn-consumer-zipf-mandelbrot.hpp	/^  std::vector<double> m_Pcum; \/\/ cumulative probability$/;"	m	class:ns3::ndn::ConsumerZipfMandelbrot
m_a1	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^  int m_a1;$/;"	m	class:ndn::util::tests::EventEmitterTester	file:
m_a2	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^  int m_a2;$/;"	m	class:ndn::util::tests::EventEmitterTester	file:
m_a3	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^  int m_a3;$/;"	m	class:ndn::util::tests::EventEmitterTester	file:
m_a4	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^  int m_a4;$/;"	m	class:ndn::util::tests::EventEmitterTester	file:
m_acceptSocket	NFD/daemon/face/tcp-channel.hpp	/^  boost::asio::ip::tcp::socket m_acceptSocket;$/;"	m	class:nfd::TcpChannel
m_acceptor	NFD/daemon/face/tcp-channel.hpp	/^  boost::asio::ip::tcp::acceptor m_acceptor;$/;"	m	class:nfd::TcpChannel
m_acceptor	NFD/daemon/face/unix-stream-channel.hpp	/^  boost::asio::local::stream_protocol::acceptor m_acceptor;$/;"	m	class:nfd::UnixStreamChannel
m_acceptor	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    acceptor_ptr        m_acceptor;$/;"	m	class:websocketpp::transport::asio::endpoint
m_action	NFD/rib/rib-update.hpp	/^  Action m_action;$/;"	m	class:nfd::rib::RibUpdate
m_action_cond	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    condition_variable m_action_cond;$/;"	m	class:broadcast_server	file:
m_action_lock	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    mutex m_action_lock;$/;"	m	class:broadcast_server	file:
m_actions	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    std::queue<action> m_actions;$/;"	m	class:broadcast_server	file:
m_active	apps/ndn-app.hpp	/^  bool m_active; \/\/\/< @brief Flag to indicate that application is active (set by StartApplication and StopApplication)$/;"	m	class:ns3::ndn::App
m_activeFaceFetchEvent	NFD/rib/rib-manager.hpp	/^  scheduler::EventId m_activeFaceFetchEvent;$/;"	m	class:nfd::rib::RibManager
m_actualMarkCounts	NFD/daemon/table/dead-nonce-list.hpp	/^  std::multiset<size_t> m_actualMarkCounts;$/;"	m	class:nfd::DeadNonceList
m_addFired	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  bool m_addFired;$/;"	m	class:nfd::tests::TestFaceTable	file:
m_addressSelector	ndn-cxx/src/util/dns.cpp	/^  ndn::dns::AddressSelector m_addressSelector;$/;"	m	class:ndn::dns::Resolver	file:
m_adjustCapacityEvent	NFD/daemon/table/dead-nonce-list.hpp	/^  scheduler::EventId m_adjustCapacityEvent;$/;"	m	class:nfd::DeadNonceList
m_adjustCapacityInterval	NFD/daemon/table/dead-nonce-list.hpp	/^  time::nanoseconds m_adjustCapacityInterval;$/;"	m	class:nfd::DeadNonceList
m_afterEraseConnection	NFD/rib/remote-registrator.hpp	/^  ndn::util::signal::ScopedConnection m_afterEraseConnection;$/;"	m	class:nfd::rib::RemoteRegistrator
m_afterInsertConnection	NFD/rib/remote-registrator.hpp	/^  ndn::util::signal::ScopedConnection m_afterInsertConnection;$/;"	m	class:nfd::rib::RemoteRegistrator
m_afterInterest	ndn-cxx/src/detail/interest-filter-record.hpp	/^  InterestCallback m_afterInterest;$/;"	m	class:ndn::InterestFilterRecord
m_afterReceiveInterest_count	NFD/tests/daemon/fw/dummy-strategy.hpp	/^  int m_afterReceiveInterest_count;$/;"	m	class:nfd::tests::DummyStrategy
m_allFacesPrefixes	NFD/tools/nfd-autoreg.cpp	/^  std::vector<ndn::Name> m_allFacesPrefixes;$/;"	m	class:ndn::nfd_autoreg::AutoregServer	file:
m_allowCreate	NFD/tools/nfdc.hpp	/^    bool m_allowCreate;$/;"	m	class:nfdc::Nfdc::FaceIdFetcher
m_alog	NFD/websocketpp/websocketpp/connection.hpp	/^    alog_type& m_alog;$/;"	m	class:websocketpp::connection
m_alog	NFD/websocketpp/websocketpp/endpoint.hpp	/^    alog_type m_alog;$/;"	m	class:websocketpp::endpoint
m_alog	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    alog_type& m_alog;$/;"	m	class:websocketpp::transport::asio::connection
m_alog	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    alog_type* m_alog;$/;"	m	class:websocketpp::transport::asio::endpoint
m_alog	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    alog_type &     m_alog;$/;"	m	class:websocketpp::transport::debug::connection
m_alog	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    alog_type &     m_alog;$/;"	m	class:websocketpp::transport::iostream::connection
m_alog	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    alog_type *     m_alog;$/;"	m	class:websocketpp::transport::iostream::endpoint
m_alog	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    alog_type & m_alog;$/;"	m	class:websocketpp::transport::stub::connection
m_anchors	ndn-cxx/src/security/validator-config.hpp	/^  AnchorList m_anchors;$/;"	m	class:ndn::ValidatorConfig
m_app	model/ndn-app-face.hpp	/^  Ptr<App> m_app;$/;"	m	class:ns3::ndn::AppFace
m_appFaceImpl	ndn-cxx/src/detail/face-impl.hpp	/^    Impl& m_appFaceImpl;$/;"	m	class:ndn::Face::Impl::NfdFace
m_appId	apps/ndn-app.hpp	/^  uint32_t m_appId;$/;"	m	class:ns3::ndn::App
m_appMetaInfo	ndn-cxx/src/meta-info.hpp	/^  std::list<Block> m_appMetaInfo;$/;"	m	class:ndn::MetaInfo
m_areTablesConfigured	NFD/daemon/mgmt/tables-config-section.hpp	/^  bool m_areTablesConfigured;$/;"	m	class:nfd::TablesConfigSection
m_async_read_handler	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    async_read_handler  m_async_read_handler;$/;"	m	class:websocketpp::transport::asio::connection
m_async_write_handler	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    async_write_handler m_async_write_handler;$/;"	m	class:websocketpp::transport::asio::connection
m_autoregPrefixes	NFD/tools/nfd-autoreg.cpp	/^  std::vector<ndn::Name> m_autoregPrefixes;$/;"	m	class:ndn::nfd_autoreg::AutoregServer	file:
m_backboneRouters	utils/topology/rocketfuel-map-reader.hpp	/^  NodeContainer m_backboneRouters;$/;"	m	class:ns3::RocketfuelMapReader
m_backrefManager	ndn-cxx/src/util/regex/regex-matcher.hpp	/^  shared_ptr<RegexBackrefManager> m_backrefManager;$/;"	m	class:ndn::RegexMatcher
m_backrefs	ndn-cxx/src/util/regex/regex-backref-manager.hpp	/^  std::vector<shared_ptr<RegexMatcher> > m_backrefs;$/;"	m	class:ndn::RegexBackrefManager
m_baseScheme	ndn-cxx/src/util/face-uri.cpp	/^  std::string m_baseScheme;$/;"	m	class:ndn::util::IpHostCanonizeProvider	file:
m_basic_header	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    frame::basic_header m_basic_header;$/;"	m	class:websocketpp::processor::hybi13
m_batchFaceId	NFD/rib/fib-updater.hpp	/^  uint64_t m_batchFaceId;$/;"	m	class:nfd::rib::FibUpdater
m_batches	apps/ndn-consumer-batches.hpp	/^  Batches m_batches;$/;"	m	class:ns3::ndn::ConsumerBatches
m_beforeEvictConnection	NFD/daemon/table/cs.hpp	/^  ndn::util::signal::ScopedConnection m_beforeEvictConnection;$/;"	m	class:nfd::cs::Cs
m_beforeExpirePendingInterest_count	NFD/tests/daemon/fw/dummy-strategy.hpp	/^  int m_beforeExpirePendingInterest_count;$/;"	m	class:nfd::tests::DummyStrategy
m_beforeSatisfyInterest_count	NFD/tests/daemon/fw/dummy-strategy.hpp	/^  int m_beforeSatisfyInterest_count;$/;"	m	class:nfd::tests::DummyStrategy
m_begin	ndn-cxx/src/encoding/block.hpp	/^  Buffer::const_iterator m_begin;$/;"	m	class:ndn::Block
m_begin	ndn-cxx/src/encoding/encoder.hpp	/^  iterator m_begin;$/;"	m	class:ndn::encoding::Encoder
m_blackList	NFD/tools/nfd-autoreg.cpp	/^  std::vector<Network> m_blackList;$/;"	m	class:ndn::nfd_autoreg::AutoregServer	file:
m_body	NFD/websocketpp/websocketpp/http/constants.hpp	/^        std::string         m_body;$/;"	m	class:websocketpp::http::exception
m_body	NFD/websocketpp/websocketpp/http/parser.hpp	/^    std::string             m_body;$/;"	m	class:websocketpp::http::parser::parser
m_body	ndn-cxx/src/mgmt/control-response.hpp	/^  Block m_body;$/;"	m	class:ndn::mgmt::ControlResponse
m_body_bytes_max	NFD/websocketpp/websocketpp/http/parser.hpp	/^    size_t                  m_body_bytes_max;$/;"	m	class:websocketpp::http::parser::parser
m_body_bytes_needed	NFD/websocketpp/websocketpp/http/parser.hpp	/^    size_t                  m_body_bytes_needed;$/;"	m	class:websocketpp::http::parser::parser
m_body_encoding	NFD/websocketpp/websocketpp/http/parser.hpp	/^    body_encoding::value    m_body_encoding;$/;"	m	class:websocketpp::http::parser::parser
m_buckets	NFD/daemon/table/name-tree.hpp	/^  name_tree::Node**             m_buckets; \/\/ Name Tree Buckets in the NPHT$/;"	m	class:nfd::NameTree
m_buf	NFD/websocketpp/websocketpp/connection.hpp	/^    char                    m_buf[config::connection_read_buffer_size];$/;"	m	class:websocketpp::connection
m_buf	NFD/websocketpp/websocketpp/http/request.hpp	/^    lib::shared_ptr<std::string>    m_buf;$/;"	m	class:websocketpp::http::parser::request
m_buf	NFD/websocketpp/websocketpp/http/response.hpp	/^    lib::shared_ptr<std::string>    m_buf;$/;"	m	class:websocketpp::http::parser::response
m_buf	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    char *          m_buf;$/;"	m	class:websocketpp::transport::debug::connection
m_buf	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    char *          m_buf;$/;"	m	class:websocketpp::transport::iostream::connection
m_buf_cursor	NFD/websocketpp/websocketpp/connection.hpp	/^    size_t                  m_buf_cursor;$/;"	m	class:websocketpp::connection
m_buffer	NFD/tests/core/logger.t.cpp	/^  std::stringstream m_buffer;$/;"	m	class:nfd::tests::LoggerFixture	file:
m_buffer	NFD/tests/core/segment-publisher.t.cpp	/^  ndn::EncodingBuffer m_buffer;$/;"	m	class:nfd::tests::SegmentPublisherFixture	file:
m_buffer	NFD/tests/daemon/mgmt/channel-status-publisher.t.cpp	/^  ndn::EncodingBuffer m_buffer;$/;"	m	class:nfd::tests::ChannelStatusPublisherFixture	file:
m_buffer	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  ndn::EncodingBuffer m_buffer;$/;"	m	class:nfd::tests::FaceQueryStatusPublisherFixture
m_buffer	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^  ndn::EncodingBuffer m_buffer;$/;"	m	class:nfd::tests::FaceStatusPublisherFixture
m_buffer	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^  ndn::EncodingBuffer m_buffer;$/;"	m	class:nfd::tests::FibEnumerationPublisherFixture
m_buffer	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^  ndn::EncodingBuffer m_buffer;$/;"	m	class:nfd::tests::StrategyChoicePublisherFixture	file:
m_buffer	NFD/tools/nfd-status.cpp	/^  shared_ptr<OBufferStream> m_buffer;$/;"	m	class:ndn::NfdStatus	file:
m_buffer	ndn-cxx/src/encoding/block.hpp	/^  shared_ptr<const Buffer> m_buffer;$/;"	m	class:ndn::Block
m_buffer	ndn-cxx/src/encoding/buffer-stream.hpp	/^  BufferPtr m_buffer;$/;"	m	class:ndn::OBufferStream
m_buffer	ndn-cxx/src/encoding/encoder.hpp	/^  shared_ptr<Buffer> m_buffer;$/;"	m	class:ndn::encoding::Encoder
m_buffer	ndn-cxx/src/mgmt/status-dataset-context.hpp	/^  shared_ptr<EncodingBuffer> m_buffer;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_buffer	ndn-cxx/src/util/digest.hpp	/^  BufferPtr m_buffer;$/;"	m	class:ndn::util::Digest
m_buffer	ndn-cxx/src/util/indented-stream.hpp	/^  StreamBuf m_buffer;$/;"	m	class:ndn::util::IndentedStream
m_buffer	ndn-cxx/src/util/segment-fetcher.hpp	/^  shared_ptr<OBufferStream> m_buffer;$/;"	m	class:ndn::util::SegmentFetcher
m_bufs	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    std::vector<boost::asio::const_buffer> m_bufs;$/;"	m	class:websocketpp::transport::asio::connection
m_bytes_needed	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    size_t m_bytes_needed;$/;"	m	class:websocketpp::processor::hybi13
m_bytes_needed	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    size_t          m_bytes_needed;$/;"	m	class:websocketpp::transport::debug::connection
m_bytes_needed	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    size_t          m_bytes_needed;$/;"	m	class:websocketpp::transport::iostream::connection
m_c2s_max_window_bits	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    uint8_t m_c2s_max_window_bits;$/;"	m	class:websocketpp::extensions::permessage_deflate::enabled
m_c2s_max_window_bits_mode	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    mode::value m_c2s_max_window_bits_mode;$/;"	m	class:websocketpp::extensions::permessage_deflate::enabled
m_c2s_no_context_takeover	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    bool m_c2s_no_context_takeover;$/;"	m	class:websocketpp::extensions::permessage_deflate::enabled
m_cache	ndn-cxx/src/security/certificate-cache-ttl.hpp	/^  Cache m_cache;$/;"	m	class:ndn::CertificateCacheTtl
m_cache	ndn-cxx/src/util/in-memory-storage.hpp	/^    const Cache* m_cache;$/;"	m	class:ndn::util::InMemoryStorage::const_iterator
m_cache	ndn-cxx/src/util/in-memory-storage.hpp	/^  Cache m_cache;$/;"	m	class:ndn::util::InMemoryStorage
m_cacheHits	utils/tracers/ndn-cs-tracer.hpp	/^  double m_cacheHits;$/;"	m	struct:ns3::ndn::cs::Stats
m_cacheHitsTrace	model/cs/ndn-content-store.hpp	/^                 shared_ptr<const Data>> m_cacheHitsTrace; \/\/\/< @brief trace of cache hits$/;"	m	class:ns3::ndn::ContentStore
m_cacheMisses	utils/tracers/ndn-cs-tracer.hpp	/^  double m_cacheMisses;$/;"	m	struct:ns3::ndn::cs::Stats
m_cacheMissesTrace	model/cs/ndn-content-store.hpp	/^  TracedCallback<shared_ptr<const Interest>> m_cacheMissesTrace; \/\/\/< @brief trace of cache misses$/;"	m	class:ns3::ndn::ContentStore
m_cachingPolicy	ndn-cxx/src/management/nfd-local-control-header.hpp	/^  CachingPolicy m_cachingPolicy;$/;"	m	class:ndn::nfd::LocalControlHeader
m_callbackFired	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  bool m_callbackFired;$/;"	m	class:nfd::tests::TestFaceManagerCommon	file:
m_callbackFired	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  bool m_callbackFired;$/;"	m	class:nfd::tests::FibManagerFixture	file:
m_callbackFired	NFD/tests/daemon/mgmt/manager-base.t.cpp	/^  bool m_callbackFired;$/;"	m	class:nfd::tests::ManagerBaseTest	file:
m_callbackFired	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  bool m_callbackFired;$/;"	m	class:nfd::tests::StrategyChoiceManagerFixture	file:
m_capacity	NFD/daemon/table/dead-nonce-list.hpp	/^  size_t m_capacity;$/;"	m	class:nfd::DeadNonceList
m_capacity	ndn-cxx/src/util/in-memory-storage.hpp	/^  size_t m_capacity;$/;"	m	class:ndn::util::InMemoryStorage
m_cert	ndn-cxx/src/security/secured-bag.hpp	/^  IdentityCertificate m_cert;$/;"	m	class:ndn::SecuredBag
m_certNames	ndn-cxx/src/security/certificate-container.hpp	/^  std::set<Name> m_certNames;$/;"	m	class:ndn::security::CertificateContainer
m_certificate	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  shared_ptr<ndn::IdentityCertificate> m_certificate;$/;"	m	class:nfd::tests::CommandValidatorTester	file:
m_certificate	NFD/tests/daemon/mgmt/validation-common.hpp	/^  shared_ptr<ndn::IdentityCertificate> m_certificate;$/;"	m	class:nfd::tests::CommandFixture
m_certificateCache	ndn-cxx/src/security/validator-config.hpp	/^  shared_ptr<CertificateCache> m_certificateCache;$/;"	m	class:ndn::ValidatorConfig
m_certificateCache	ndn-cxx/src/security/validator-regex.hpp	/^  shared_ptr<CertificateCache> m_certificateCache;$/;"	m	class:ndn::ValidatorRegex
m_certificates	ndn-cxx/src/security/key.hpp	/^  mutable CertificateContainer m_certificates;$/;"	m	class:ndn::security::Key
m_certificates	ndn-cxx/src/security/validator-config.hpp	/^    std::list<shared_ptr<IdentityCertificate> > m_certificates;$/;"	m	class:ndn::ValidatorConfig::TrustAnchorContainer
m_certs	ndn-cxx/src/security/pib-memory.hpp	/^  std::map<Name, IdentityCertificate> m_certs;$/;"	m	class:ndn::security::PibMemory
m_channelFaces	NFD/daemon/face/tcp-channel.hpp	/^  std::map<tcp::Endpoint, shared_ptr<Face>> m_channelFaces;$/;"	m	class:nfd::TcpChannel
m_channelFaces	NFD/daemon/face/udp-channel.hpp	/^  std::map<udp::Endpoint, shared_ptr<UdpFace>> m_channelFaces;$/;"	m	class:nfd::UdpChannel
m_channelFaces	NFD/daemon/face/websocket-channel.hpp	/^           std::owner_less<websocketpp::connection_hdl>> m_channelFaces;$/;"	m	class:nfd::WebSocketChannel
m_channelStatusPublisher	NFD/daemon/mgmt/face-manager.hpp	/^  ChannelStatusPublisher m_channelStatusPublisher;$/;"	m	class:nfd::FaceManager
m_channel_type_hint	NFD/websocketpp/websocketpp/logger/syslog.hpp	/^    channel_type_hint::value m_channel_type_hint;$/;"	m	class:websocketpp::log::syslog
m_channels	NFD/daemon/face/tcp-factory.hpp	/^  ChannelMap m_channels;$/;"	m	class:nfd::TcpFactory
m_channels	NFD/daemon/face/udp-factory.hpp	/^  ChannelMap m_channels;$/;"	m	class:nfd::UdpFactory
m_channels	NFD/daemon/face/unix-stream-factory.hpp	/^  ChannelMap m_channels;$/;"	m	class:nfd::UnixStreamFactory
m_channels	NFD/daemon/face/websocket-factory.hpp	/^  ChannelMap m_channels;$/;"	m	class:nfd::WebSocketFactory
m_channels	NFD/tests/daemon/mgmt/channel-status-common.hpp	/^  std::list<shared_ptr<const Channel> > m_channels;$/;"	m	class:nfd::tests::DummyProtocolFactory
m_checkers	ndn-cxx/src/security/conf/rule.hpp	/^  CheckerList m_checkers;$/;"	m	class:ndn::security::conf::Rule
m_childSelector	ndn-cxx/src/selectors.hpp	/^  int m_childSelector;$/;"	m	class:ndn::Selectors
m_children	NFD/daemon/table/name-tree-entry.hpp	/^  std::vector<shared_ptr<Entry> > m_children; \/\/ Children pointers.$/;"	m	class:nfd::name_tree::Entry
m_children	NFD/rib/rib-entry.hpp	/^  std::list<shared_ptr<RibEntry>> m_children;$/;"	m	class:nfd::rib::RibEntry
m_cleanEvent	model/cs/content-store-with-freshness.hpp	/^  EventId m_cleanEvent;$/;"	m	class:ns3::ndn::cs::ContentStoreWithFreshness
m_cleanup	NFD/daemon/table/measurements-entry.hpp	/^  scheduler::EventId m_cleanup;$/;"	m	class:nfd::measurements::Entry
m_cleanupIndex	ndn-cxx/src/util/in-memory-storage-fifo.hpp	/^  CleanupIndex m_cleanupIndex;$/;"	m	class:ndn::util::InMemoryStorageFifo
m_cleanupIndex	ndn-cxx/src/util/in-memory-storage-lfu.hpp	/^  CleanupIndex m_cleanupIndex;$/;"	m	class:ndn::util::InMemoryStorageLfu
m_cleanupIndex	ndn-cxx/src/util/in-memory-storage-lru.hpp	/^  CleanupIndex m_cleanupIndex;$/;"	m	class:ndn::util::InMemoryStorageLru
m_client	NFD/tests/daemon/fw/topology-tester.hpp	/^  shared_ptr<DummyClientFace> m_client;$/;"	m	class:nfd::fw::tests::TopologyAppLink
m_client	NFD/websocketpp/examples/telemetry_client/telemetry_client.cpp	/^    client m_client;$/;"	m	class:telemetry_client	file:
m_close	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    std::chrono::high_resolution_clock::time_point m_close;$/;"	m	class:perftest	file:
m_closeFired	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  bool m_closeFired;$/;"	m	class:nfd::tests::FaceManagerTestFace	file:
m_closeIfIdleEvent	NFD/daemon/face/udp-face.hpp	/^  scheduler::ScopedEventId m_closeIfIdleEvent;$/;"	m	class:nfd::UdpFace
m_close_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    close_handler           m_close_handler;$/;"	m	class:websocketpp::connection
m_close_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    close_handler               m_close_handler;$/;"	m	class:websocketpp::endpoint
m_close_handshake_timeout_dur	NFD/websocketpp/websocketpp/connection.hpp	/^    long                    m_close_handshake_timeout_dur;$/;"	m	class:websocketpp::connection
m_close_handshake_timeout_dur	NFD/websocketpp/websocketpp/endpoint.hpp	/^    long                        m_close_handshake_timeout_dur;$/;"	m	class:websocketpp::endpoint
m_closed	NFD/daemon/face/websocket-face.hpp	/^  bool m_closed;$/;"	m	class:nfd::WebSocketFace
m_closed_by_me	NFD/websocketpp/websocketpp/connection.hpp	/^    bool                    m_closed_by_me;$/;"	m	class:websocketpp::connection
m_code	NFD/websocketpp/websocketpp/error.hpp	/^    lib::error_code m_code;$/;"	m	class:websocketpp::exception
m_code	ndn-cxx/src/mgmt/control-response.hpp	/^  uint32_t m_code;$/;"	m	class:ndn::mgmt::ControlResponse
m_codepoint	NFD/websocketpp/websocketpp/utf8_validator.hpp	/^    uint32_t    m_codepoint;$/;"	m	class:websocketpp::utf8_validator::validator
m_commandLineArguments	NFD/tools/nfdc.hpp	/^  const char* const* m_commandLineArguments;$/;"	m	class:nfdc::Nfdc
m_commandOptions	NFD/rib/remote-registrator.hpp	/^  ndn::nfd::CommandOptions m_commandOptions;$/;"	m	class:nfd::rib::RemoteRegistrator
m_completeCallback	ndn-cxx/src/util/segment-fetcher.hpp	/^  CompleteCallback m_completeCallback;$/;"	m	class:ndn::util::SegmentFetcher
m_componentRegex	ndn-cxx/src/util/regex/regex-component-matcher.hpp	/^  boost::regex m_componentRegex;$/;"	m	class:ndn::RegexComponentMatcher
m_components	ndn-cxx/src/util/regex/regex-component-set-matcher.hpp	/^  ComponentsSet m_components;$/;"	m	class:ndn::RegexComponentSetMatcher
m_compress_buffer	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    lib::unique_ptr_uchar_array m_compress_buffer;$/;"	m	class:websocketpp::extensions::permessage_deflate::enabled
m_compress_buffer_size	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    size_t m_compress_buffer_size;$/;"	m	class:websocketpp::extensions::permessage_deflate::enabled
m_compressed	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    bool                        m_compressed;$/;"	m	class:websocketpp::message_buffer::message
m_con	NFD/websocketpp/test/transport/asio/timers.cpp	/^    connection_ptr m_con;$/;"	m	struct:mock_endpoint	file:
m_config	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  ConfigFile m_config;$/;"	m	class:nfd::tests::FaceManagerFixture	file:
m_config	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^  ConfigFile m_config;$/;"	m	class:nfd::tests::TablesConfigSectionFixture	file:
m_config	model/ndn-l3-protocol.cpp	/^  nfd::ConfigSection m_config;$/;"	m	class:ns3::ndn::L3Protocol::Impl	file:
m_config	ndn-cxx/src/util/config-file.hpp	/^  Parsed m_config;$/;"	m	class:ndn::ConfigFile
m_config	ndn-cxx/tests/unit-tests/transport/transport-fixture.hpp	/^  unique_ptr<ConfigFile> m_config;$/;"	m	class:ndn::TransportFixture
m_configFile	NFD/daemon/main.cpp	/^  std::string             m_configFile;$/;"	m	class:nfd::NfdRunner	file:
m_configFile	NFD/daemon/nfd.hpp	/^  std::string m_configFile;$/;"	m	class:nfd::Nfd
m_configFile	NFD/rib/nrd.hpp	/^  std::string m_configFile;$/;"	m	class:nfd::rib::Nrd
m_configSection	NFD/daemon/nfd.hpp	/^  ConfigSection m_configSection;$/;"	m	class:nfd::Nfd
m_configSection	NFD/rib/nrd.hpp	/^  ConfigSection m_configSection;$/;"	m	class:nfd::rib::Nrd
m_connectTimer	ndn-cxx/src/transport/stream-transport.hpp	/^  boost::asio::deadline_timer m_connectTimer;$/;"	m	class:ndn::StreamTransportImpl
m_connection	ndn-cxx/src/util/signal-scoped-connection.cpp	/^  : m_connection(other.m_connection)$/;"	f	namespace:ndn::util::signal
m_connection	ndn-cxx/src/util/signal-scoped-connection.hpp	/^  Connection m_connection;$/;"	m	class:ndn::util::signal::ScopedConnection
m_connectionInProgress	ndn-cxx/src/transport/stream-transport.hpp	/^  bool m_connectionInProgress;$/;"	m	class:ndn::StreamTransportImpl
m_connection_hdl	NFD/websocketpp/websocketpp/connection.hpp	/^    connection_hdl          m_connection_hdl;$/;"	m	class:websocketpp::connection
m_connection_hdl	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    connection_hdl  m_connection_hdl;$/;"	m	class:websocketpp::transport::asio::connection
m_connection_hdl	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    connection_hdl  m_connection_hdl;$/;"	m	class:websocketpp::transport::debug::connection
m_connection_hdl	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    connection_hdl  m_connection_hdl;$/;"	m	class:websocketpp::transport::iostream::connection
m_connection_list	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    con_list m_connection_list;$/;"	m	class:websocket_endpoint	file:
m_connection_list	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    con_list m_connection_list;$/;"	m	class:websocket_endpoint	file:
m_connection_list	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    con_list m_connection_list;$/;"	m	class:websocket_endpoint	file:
m_connection_list	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    con_list m_connection_list;$/;"	m	class:websocket_endpoint	file:
m_connection_lock	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    mutex m_connection_lock;$/;"	m	class:broadcast_server	file:
m_connection_state_lock	NFD/websocketpp/websocketpp/connection.hpp	/^    mutable mutex_type      m_connection_state_lock;$/;"	m	class:websocketpp::connection
m_connections	NFD/websocketpp/docs/simple_broadcast_server.cpp	/^    con_list m_connections;$/;"	m	class:broadcast_server	file:
m_connections	NFD/websocketpp/docs/simple_count_server_thread.cpp	/^    con_list m_connections;$/;"	m	class:count_server	file:
m_connections	NFD/websocketpp/examples/associative_storage/associative_storage.cpp	/^    con_list m_connections;$/;"	m	class:print_server	file:
m_connections	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    con_list m_connections;$/;"	m	class:broadcast_server	file:
m_connections	NFD/websocketpp/examples/simple_broadcast_server/simple_broadcast_server.cpp	/^    con_list m_connections;$/;"	m	class:broadcast_server	file:
m_connections	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^    con_list m_connections;$/;"	m	class:telemetry_server	file:
m_container	ndn-cxx/src/detail/container-with-on-empty-signal.hpp	/^  Base m_container;$/;"	m	class:ndn::ContainerWithOnEmptySignal
m_container	ndn-cxx/src/encoding/buffer-stream.hpp	/^  Buffer& m_container;$/;"	m	class:ndn::iostreams::buffer_append_device
m_container	utils/trie/multi-policy.hpp	/^        policy_container& m_container;$/;"	m	struct:ns3::ndn::ndnSIM::multi_policy_traits::policy::type::max_size_setter
m_content	ndn-cxx/src/data.hpp	/^  mutable Block m_content;$/;"	m	class:ndn::Data
m_contentStoreFactory	helper/ndn-stack-helper.hpp	/^  ObjectFactory m_contentStoreFactory;$/;"	m	class:ns3::ndn::StackHelper
m_context	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    context_ptr         m_context;$/;"	m	class:websocketpp::transport::asio::tls_socket::connection
m_controlParameters	NFD/rib/remote-registrator.hpp	/^  ndn::nfd::ControlParameters m_controlParameters;$/;"	m	class:nfd::rib::RemoteRegistrator
m_control_msg	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    msg_metadata m_control_msg;$/;"	m	class:websocketpp::processor::hybi13
m_controller	NFD/rib/fib-updater.hpp	/^  ndn::nfd::Controller& m_controller;$/;"	m	class:nfd::rib::FibUpdater
m_controller	NFD/tools/ndn-autoconfig/base.hpp	/^  nfd::Controller m_controller;$/;"	m	class:ndn::tools::autoconfig::Base
m_controller	NFD/tools/nfd-autoreg.cpp	/^  Controller m_controller;$/;"	m	class:ndn::nfd_autoreg::AutoregServer	file:
m_controller	NFD/tools/nfdc.hpp	/^    Controller& m_controller;$/;"	m	class:nfdc::Nfdc::FaceIdFetcher
m_controller	NFD/tools/nfdc.hpp	/^  Controller m_controller;$/;"	m	class:nfdc::Nfdc
m_cost	NFD/daemon/table/fib-nexthop.hpp	/^  uint64_t m_cost;$/;"	m	class:nfd::fib::NextHop
m_cost	NFD/tools/nfd-autoreg.cpp	/^  uint64_t m_cost;$/;"	m	class:ndn::nfd_autoreg::AutoregServer	file:
m_cost	NFD/tools/nfdc.hpp	/^  uint64_t m_cost;$/;"	m	class:nfdc::Nfdc
m_cost	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  uint64_t            m_cost;$/;"	m	class:ndn::nfd::ControlParameters
m_cost	ndn-cxx/src/management/nfd-fib-entry.hpp	/^  uint64_t m_cost;$/;"	m	class:ndn::nfd::NextHopRecord
m_cost	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  uint64_t m_cost;$/;"	m	class:ndn::nfd::Route
m_count	NFD/daemon/face/ndnlp-sequence-generator.hpp	/^  size_t m_count;$/;"	m	class:nfd::ndnlp::SequenceBlock
m_count	NFD/websocketpp/docs/simple_count_server_thread.cpp	/^    int m_count;$/;"	m	class:count_server	file:
m_count	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^    uint64_t m_count;$/;"	m	class:telemetry_server	file:
m_counters	NFD/daemon/face/face.hpp	/^  FaceCounters m_counters;$/;"	m	class:nfd::Face
m_counters	NFD/daemon/fw/forwarder.hpp	/^  ForwarderCounters m_counters;$/;"	m	class:nfd::Forwarder
m_createFaceFired	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  bool m_createFaceFired;$/;"	m	class:nfd::tests::ValidatedFaceRequestFixture	file:
m_cs	NFD/daemon/fw/forwarder.hpp	/^  Cs             m_cs;$/;"	m	class:nfd::Forwarder
m_cs	NFD/daemon/mgmt/tables-config-section.hpp	/^  Cs& m_cs;$/;"	m	class:nfd::TablesConfigSection
m_cs	NFD/daemon/table/cs-policy.hpp	/^  Cs* m_cs;$/;"	m	class:nfd::cs::Policy
m_cs	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^  Cs& m_cs;$/;"	m	class:nfd::tests::TablesConfigSectionFixture	file:
m_cs	NFD/tests/daemon/table/cs.t.cpp	/^  Cs m_cs;$/;"	m	class:nfd::cs::tests::FindFixture	file:
m_cs	model/cs/ndn-content-store.hpp	/^  Ptr<ContentStore> m_cs;        \/\/\/< \\brief content store to which entry is added$/;"	m	class:ns3::ndn::cs::Entry
m_csFace	NFD/daemon/fw/forwarder.hpp	/^  shared_ptr<NullFace> m_csFace;$/;"	m	class:nfd::Forwarder
m_csFromNdnSim	NFD/daemon/fw/forwarder.hpp	/^  ns3::Ptr<ns3::ndn::ContentStore> m_csFromNdnSim;$/;"	m	class:nfd::Forwarder
m_csFromNdnSim	model/ndn-l3-protocol.cpp	/^  Ptr<ContentStore> m_csFromNdnSim;$/;"	m	class:ns3::ndn::L3Protocol::Impl	file:
m_csSize	tests/other/ndn-test.cpp	/^  size_t m_csSize;$/;"	m	class:ns3::Tester	file:
m_currentEstimatedRtt	utils/ndn-rtt-estimator.hpp	/^  Time m_currentEstimatedRtt; \/\/ Current estimate$/;"	m	class:ns3::ndn::RttEstimator
m_currentSlot	ndn-cxx/src/util/signal-signal.hpp	/^  typename SlotList::iterator m_currentSlot;$/;"	m	class:ndn::util::signal::Signal
m_currentTime	ndn-cxx/src/util/time-unit-test-clock.hpp	/^  nanoseconds m_currentTime;$/;"	m	class:ndn::time::UnitTestClock
m_currentTimestamp	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  time::system_clock::TimePoint m_currentTimestamp;$/;"	m	class:ndn::nfd::ForwarderStatus
m_current_msg	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    msg_metadata * m_current_msg;$/;"	m	class:websocketpp::processor::hybi13
m_current_msgs	NFD/websocketpp/websocketpp/connection.hpp	/^    std::vector<message_ptr> m_current_msgs;$/;"	m	class:websocketpp::connection
m_cursor	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    size_t m_cursor;$/;"	m	class:websocketpp::processor::hybi13
m_cursor	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    size_t          m_cursor;$/;"	m	class:websocketpp::transport::debug::connection
m_cursor	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    size_t          m_cursor;$/;"	m	class:websocketpp::transport::iostream::connection
m_customerRouters	utils/topology/rocketfuel-map-reader.hpp	/^  NodeContainer m_customerRouters;$/;"	m	class:ns3::RocketfuelMapReader
m_data	NFD/daemon/table/cs-entry.hpp	/^  shared_ptr<const Data> m_data;$/;"	m	class:nfd::cs::Entry
m_data	model/cs/ndn-content-store.hpp	/^  shared_ptr<const Data> m_data; \/\/\/< \\brief non-modifiable Data$/;"	m	class:ns3::ndn::cs::Entry
m_dataExpand	ndn-cxx/src/security/sec-rule-relative.hpp	/^  const std::string m_dataExpand;$/;"	m	class:ndn::SecRuleRelative
m_dataName	ndn-cxx/tools/ndncatchunks3.cpp	/^  Name m_dataName;$/;"	m	class:ndn::Consumer	file:
m_dataNameRegex	ndn-cxx/src/security/sec-rule-relative.hpp	/^  Regex m_dataNameRegex;$/;"	m	class:ndn::SecRuleRelative
m_dataPacket	ndn-cxx/src/util/in-memory-storage-entry.hpp	/^  shared_ptr<const Data> m_dataPacket;$/;"	m	class:ndn::util::InMemoryStorageEntry
m_dataRegex	ndn-cxx/src/security/sec-rule-relative.hpp	/^  const std::string m_dataRegex;$/;"	m	class:ndn::SecRuleRelative
m_dataRegex	ndn-cxx/src/security/sec-rule-specific.hpp	/^  shared_ptr<Regex> m_dataRegex;$/;"	m	class:ndn::SecRuleSpecific
m_dataRules	ndn-cxx/src/security/validator-config.hpp	/^  DataRuleList m_dataRules;$/;"	m	class:ndn::ValidatorConfig
m_dataSender	ndn-cxx/src/mgmt/status-dataset-context.hpp	/^  DataSender m_dataSender;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_data_msg	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    msg_metadata m_data_msg;$/;"	m	class:websocketpp::processor::hybi13
m_database	ndn-cxx/src/security/pib-sqlite3.hpp	/^  sqlite3* m_database;$/;"	m	class:ndn::security::PibSqlite3
m_database	ndn-cxx/src/security/sec-public-info-sqlite3.hpp	/^  sqlite3* m_database;$/;"	m	class:ndn::SecPublicInfoSqlite3
m_deadNonceList	NFD/daemon/fw/forwarder.hpp	/^  DeadNonceList  m_deadNonceList;$/;"	m	class:nfd::Forwarder
m_default	ndn-cxx/tools/ndnsec/util.hpp	/^    T m_default;$/;"	m	class:AccumulatorType
m_defaultBandwidth	utils/topology/rocketfuel-weights-reader.hpp	/^  std::string m_defaultBandwidth; \/\/ since the topology files don't provide bandwidth parameter$/;"	m	class:ns3::RocketfuelWeightsReader
m_defaultCert	ndn-cxx/src/security/pib-memory.hpp	/^  std::map<Name, Name> m_defaultCert;$/;"	m	class:ndn::security::PibMemory
m_defaultCertificate	ndn-cxx/src/security/key.hpp	/^  mutable IdentityCertificate m_defaultCertificate;$/;"	m	class:ndn::security::Key
m_defaultCertificate	ndn-cxx/src/security/sec-public-info.hpp	/^  shared_ptr<IdentityCertificate> m_defaultCertificate;$/;"	m	class:ndn::SecPublicInfo
m_defaultIdentity	ndn-cxx/src/security/pib-memory.hpp	/^  Name m_defaultIdentity;$/;"	m	class:ndn::security::PibMemory
m_defaultIdentity	ndn-cxx/src/security/pib.hpp	/^  mutable Identity m_defaultIdentity;$/;"	m	class:ndn::security::Pib
m_defaultKey	ndn-cxx/src/security/identity.hpp	/^  mutable Key m_defaultKey;$/;"	m	class:ndn::security::Identity
m_defaultKey	ndn-cxx/src/security/pib-memory.hpp	/^  std::map<Name, Name> m_defaultKey;$/;"	m	class:ndn::security::PibMemory
m_defaultMulticastPort	ndn-cxx/src/util/face-uri.cpp	/^  uint32_t m_defaultMulticastPort;$/;"	m	class:ndn::util::IpHostCanonizeProvider	file:
m_defaultPort	NFD/daemon/face/tcp-factory.hpp	/^  std::string m_defaultPort;$/;"	m	class:nfd::TcpFactory
m_defaultPort	NFD/daemon/face/udp-factory.hpp	/^  std::string m_defaultPort;$/;"	m	class:nfd::UdpFactory
m_defaultPort	NFD/daemon/face/websocket-factory.hpp	/^  std::string m_defaultPort;$/;"	m	class:nfd::WebSocketFactory
m_defaultTtl	ndn-cxx/src/security/certificate-cache-ttl.hpp	/^  time::seconds m_defaultTtl;$/;"	m	class:ndn::CertificateCacheTtl
m_defaultUnicastPort	ndn-cxx/src/util/face-uri.cpp	/^  uint32_t m_defaultUnicastPort;$/;"	m	class:ndn::util::IpHostCanonizeProvider	file:
m_delay	NFD/tests/daemon/fw/topology-tester.hpp	/^  time::nanoseconds m_delay;$/;"	m	class:nfd::fw::tests::TopologyLink
m_delegations	ndn-cxx/src/link.hpp	/^  DelegationSet m_delegations;$/;"	m	class:ndn::Link
m_deleter	ndn-cxx/src/detail/pending-interest.hpp	/^  std::function<void()> m_deleter;$/;"	m	class:ndn::PendingInterest
m_description	NFD/daemon/face/face.hpp	/^  std::string m_description;$/;"	m	class:nfd::Face
m_destAddress	NFD/daemon/face/ethernet-face.hpp	/^  ethernet::Address m_destAddress;$/;"	m	class:nfd::EthernetFace
m_destinationFlag	ndn-cxx/src/interest.hpp	/^  DestinationFlag m_destinationFlag;$/;"	m	class:ndn::Interest
m_destination_flag	NFD/daemon/table/pit-entry.hpp	/^  bool m_destination_flag; \/\/Onur $/;"	m	class:nfd::pit::Entry
m_destroyFaceFired	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  bool m_destroyFaceFired;$/;"	m	class:nfd::tests::ValidatedFaceRequestFixture	file:
m_device	ndn-cxx/src/encoding/buffer-stream.hpp	/^  iostreams::buffer_append_device m_device;$/;"	m	class:ndn::OBufferStream
m_dfBlock	ndn-cxx/src/destination-flag.hpp	/^  mutable Block m_dfBlock;$/;"	m	class:ndn::DestinationFlag
m_didAddEntry	model/cs/content-store-impl.hpp	/^  TracedCallback<Ptr<const Entry>> m_didAddEntry;$/;"	m	class:ns3::ndn::cs::ContentStoreImpl
m_digest	ndn-cxx/src/security/public-key.hpp	/^  mutable Block m_digest;$/;"	m	class:ndn::PublicKey
m_digestAlgorithm	ndn-cxx/src/security/signing-info.hpp	/^  DigestAlgorithm m_digestAlgorithm;$/;"	m	class:ndn::security::SigningInfo
m_dis	NFD/websocketpp/websocketpp/random/random_device.hpp	/^        lib::uniform_int_distribution<int_type> m_dis;$/;"	m	class:websocketpp::random::random_device::int_generator
m_disconnect	ndn-cxx/src/util/signal-connection.hpp	/^  weak_ptr<function<void()>> m_disconnect;$/;"	m	class:ndn::util::signal::Connection
m_dispatchToStrategy_count	NFD/tests/daemon/fw/forwarder.t.cpp	/^  int m_dispatchToStrategy_count;$/;"	m	class:nfd::tests::ScopeLocalhostIncomingTestForwarder	file:
m_docroot	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^    std::string m_docroot;$/;"	m	class:telemetry_server	file:
m_done	NFD/websocketpp/examples/telemetry_client/telemetry_client.cpp	/^    bool m_done;$/;"	m	class:telemetry_client	file:
m_drop	utils/tracers/l2-tracer.hpp	/^    uint64_t m_drop;$/;"	m	struct:ns3::L2Tracer::Stats
m_dropped_by_me	NFD/websocketpp/websocketpp/connection.hpp	/^    bool                    m_dropped_by_me;$/;"	m	class:websocketpp::connection
m_dstate	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    z_stream m_dstate;$/;"	m	class:websocketpp::extensions::permessage_deflate::enabled
m_dummy	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  shared_ptr<FaceManagerTestFace> m_dummy;$/;"	m	class:nfd::tests::TestFaceTable	file:
m_dummyFace	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  shared_ptr<DummyFace> m_dummyFace;$/;"	m	class:nfd::tests::FaceQueryStatusPublisherFixture
m_dummyLocalFace	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  shared_ptr<DummyLocalFace> m_dummyLocalFace;$/;"	m	class:nfd::tests::FaceQueryStatusPublisherFixture
m_dummyUri	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  shared_ptr<DummyFace> m_dummyUri;$/;"	m	class:nfd::tests::FaceQueryStatusPublisherFixture
m_dynamicContainers	ndn-cxx/src/security/validator-config.hpp	/^  DynamicContainers m_dynamicContainers;$/;"	m	class:ndn::ValidatorConfig
m_dynamic_channels	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    level m_dynamic_channels;$/;"	m	class:websocketpp::log::basic
m_ec	NFD/websocketpp/websocketpp/connection.hpp	/^    lib::error_code m_ec;$/;"	m	class:websocketpp::connection
m_ec	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    lib::error_code     m_ec;$/;"	m	class:websocketpp::transport::asio::tls_socket::connection
m_elog	NFD/websocketpp/websocketpp/connection.hpp	/^    elog_type& m_elog;$/;"	m	class:websocketpp::connection
m_elog	NFD/websocketpp/websocketpp/endpoint.hpp	/^    elog_type m_elog;$/;"	m	class:websocketpp::endpoint
m_elog	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    elog_type& m_elog;$/;"	m	class:websocketpp::transport::asio::connection
m_elog	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    elog_type* m_elog;$/;"	m	class:websocketpp::transport::asio::endpoint
m_elog	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    elog_type &     m_elog;$/;"	m	class:websocketpp::transport::debug::connection
m_elog	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    elog_type &     m_elog;$/;"	m	class:websocketpp::transport::iostream::connection
m_elog	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    elog_type *     m_elog;$/;"	m	class:websocketpp::transport::iostream::endpoint
m_elog	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    elog_type & m_elog;$/;"	m	class:websocketpp::transport::stub::connection
m_enabled	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    bool m_enabled;$/;"	m	class:websocketpp::extensions::permessage_deflate::enabled
m_end	NFD/daemon/table/name-tree.hpp	/^  shared_ptr<name_tree::Entry>  m_end;$/;"	m	class:nfd::NameTree
m_end	ndn-cxx/src/encoding/block.hpp	/^  Buffer::const_iterator m_end;$/;"	m	class:ndn::Block
m_end	ndn-cxx/src/encoding/encoder.hpp	/^  iterator m_end;$/;"	m	class:ndn::encoding::Encoder
m_endIterator	NFD/daemon/table/name-tree.hpp	/^  const_iterator                m_endIterator;$/;"	m	class:nfd::NameTree
m_endpoint	NFD/daemon/face/unix-stream-channel.hpp	/^  unix_stream::Endpoint m_endpoint;$/;"	m	class:nfd::UnixStreamChannel
m_endpoint	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    client m_endpoint;$/;"	m	class:perftest	file:
m_endpoint	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^    server m_endpoint;$/;"	m	class:telemetry_server	file:
m_endpoint	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    client m_endpoint;$/;"	m	class:websocket_endpoint	file:
m_endpoint	NFD/websocketpp/tutorials/utility_client/step3.cpp	/^    client m_endpoint;$/;"	m	class:websocket_endpoint	file:
m_endpoint	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    client m_endpoint;$/;"	m	class:websocket_endpoint	file:
m_endpoint	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    client m_endpoint;$/;"	m	class:websocket_endpoint	file:
m_endpoint	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    client m_endpoint;$/;"	m	class:websocket_endpoint	file:
m_enlargeFactor	NFD/daemon/table/name-tree.hpp	/^  int                           m_enlargeFactor;$/;"	m	class:nfd::NameTree
m_enlargeLoadFactor	NFD/daemon/table/name-tree.hpp	/^  double                        m_enlargeLoadFactor;$/;"	m	class:nfd::NameTree
m_enlargeThreshold	NFD/daemon/table/name-tree.hpp	/^  size_t                        m_enlargeThreshold;$/;"	m	class:nfd::NameTree
m_entry	NFD/daemon/table/name-tree-entry.hpp	/^  shared_ptr<Entry> m_entry; \/\/ Name Tree Entry (i.e., Name Prefix Entry)$/;"	m	class:nfd::name_tree::Node
m_entry	NFD/daemon/table/name-tree.hpp	/^    shared_ptr<name_tree::Entry>                m_entry;$/;"	m	class:nfd::NameTree::const_iterator
m_entryInfoMap	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^  EntryInfoMapFifo m_entryInfoMap;$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy
m_entrySelector	NFD/daemon/table/name-tree.hpp	/^    shared_ptr<name_tree::EntrySelector>        m_entrySelector;$/;"	m	class:nfd::NameTree::const_iterator
m_entrySubTreeSelector	NFD/daemon/table/name-tree.hpp	/^    shared_ptr<name_tree::EntrySubTreeSelector> m_entrySubTreeSelector;$/;"	m	class:nfd::NameTree::const_iterator
m_erases	utils/trie/aggregate-stats-policy.hpp	/^      uint64_t m_erases;$/;"	m	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
m_errorCallback	ndn-cxx/src/util/segment-fetcher.hpp	/^  ErrorCallback m_errorCallback;$/;"	m	class:ndn::util::SegmentFetcher
m_error_code	NFD/websocketpp/websocketpp/http/constants.hpp	/^        status_code::value  m_error_code;$/;"	m	class:websocketpp::http::exception
m_error_msg	NFD/websocketpp/websocketpp/http/constants.hpp	/^        std::string         m_error_msg;$/;"	m	class:websocketpp::http::exception
m_error_reason	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    std::string m_error_reason;$/;"	m	class:connection_metadata	file:
m_error_reason	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    std::string m_error_reason;$/;"	m	class:connection_metadata	file:
m_error_reason	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    std::string m_error_reason;$/;"	m	class:connection_metadata	file:
m_error_reason	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    std::string m_error_reason;$/;"	m	class:connection_metadata	file:
m_event	NFD/core/scheduler.hpp	/^  EventId m_event;$/;"	m	class:nfd::scheduler::ScopedEventId
m_event	ndn-cxx/src/util/scheduler-scoped-event-id.cpp	/^  , m_event(other.m_event)$/;"	f	namespace:ndn::util::scheduler
m_event	ndn-cxx/src/util/scheduler-scoped-event-id.hpp	/^  EventId m_event;$/;"	m	class:ndn::util::scheduler::ScopedEventId
m_event	ndn-cxx/src/util/scheduler.cpp	/^  Scheduler::EventQueue::iterator m_event;$/;"	m	struct:ndn::util::scheduler::EventIdImpl	file:
m_event	ndn-cxx/src/util/scheduler.hpp	/^    Event m_event;$/;"	m	struct:ndn::util::scheduler::Scheduler::EventInfo
m_event	tests/unit-tests/ndn-cxx/face.t.cpp	/^  ::ndn::util::scheduler::ScopedEventId m_event;$/;"	m	class:ns3::ndn::MultipleInterest	file:
m_eventId	ndn-cxx/src/util/scheduler.hpp	/^    mutable EventId m_eventId;$/;"	m	struct:ndn::util::scheduler::Scheduler::EventInfo
m_events	ndn-cxx/src/util/scheduler.hpp	/^  EventQueue m_events;$/;"	m	class:ndn::util::scheduler::Scheduler
m_exclude	model/cs/content-store-impl.hpp	/^  const Exclude& m_exclude;$/;"	m	struct:ns3::ndn::cs::isNotExcluded
m_exclude	ndn-cxx/src/exclude.hpp	/^  exclude_type m_exclude;$/;"	m	class:ndn::Exclude
m_exclude	ndn-cxx/src/selectors.hpp	/^  Exclude m_exclude;$/;"	m	class:ndn::Selectors
m_expand	ndn-cxx/src/util/regex/regex-top-matcher.hpp	/^  const std::string m_expand;$/;"	m	class:ndn::RegexTopMatcher
m_expectDryRun	NFD/tests/core/config-file.t.cpp	/^  bool m_expectDryRun;$/;"	m	class:nfd::tests::DummySubscriber	file:
m_expectedEntries	NFD/tests/daemon/mgmt/channel-status-publisher.t.cpp	/^  std::map<std::string, ndn::nfd::ChannelStatus> m_expectedEntries;$/;"	m	class:nfd::tests::ChannelStatusPublisherFixture	file:
m_expectedEntries	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^  std::map<std::string, ndn::nfd::StrategyChoice> m_expectedEntries;$/;"	m	class:nfd::tests::StrategyChoicePublisherFixture	file:
m_expectedFreshnessPeriod	NFD/tests/core/segment-publisher.t.cpp	/^  const time::milliseconds m_expectedFreshnessPeriod;$/;"	m	class:nfd::tests::SegmentPublisherFixture	file:
m_expectedUri	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^    std::string m_expectedUri;$/;"	m	class:ndn::util::tests::CanonizeFixture::CanonizeTestCase	file:
m_expirationEvent	NFD/rib/route.hpp	/^  scheduler::EventId m_expirationEvent;$/;"	m	class:nfd::rib::Route
m_expirationPeriod	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  time::milliseconds  m_expirationPeriod;$/;"	m	class:ndn::nfd::ControlParameters
m_expirationPeriod	ndn-cxx/src/management/nfd-face-status.hpp	/^  time::milliseconds m_expirationPeriod;$/;"	m	class:ndn::nfd::FaceStatus
m_expirationPeriod	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  time::milliseconds m_expirationPeriod;$/;"	m	class:ndn::nfd::Route
m_expires	NFD/tools/nfdc.hpp	/^  ndn::time::milliseconds m_expires;$/;"	m	class:nfdc::Nfdc
m_expiry	NFD/daemon/table/measurements-entry.hpp	/^  time::steady_clock::TimePoint m_expiry;$/;"	m	class:nfd::measurements::Entry
m_expiry	NFD/daemon/table/pit-face-record.hpp	/^  time::steady_clock::TimePoint m_expiry;$/;"	m	class:nfd::pit::FaceRecord
m_expiry	ndn-cxx/src/mgmt/status-dataset-context.hpp	/^  time::milliseconds m_expiry;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_expr	ndn-cxx/src/util/regex/regex-matcher.hpp	/^  const std::string m_expr;$/;"	m	class:ndn::RegexMatcher
m_extended_header	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    frame::extended_header m_extended_header;$/;"	m	class:websocketpp::processor::hybi13
m_extensionId	ndn-cxx/src/security/certificate-extension.hpp	/^  OID m_extensionId;$/;"	m	class:ndn::CertificateExtension
m_extensionList	ndn-cxx/src/security/certificate.hpp	/^  ExtensionList m_extensionList;$/;"	m	class:ndn::Certificate
m_extensionValue	ndn-cxx/src/security/certificate-extension.hpp	/^  Buffer m_extensionValue;$/;"	m	class:ndn::CertificateExtension
m_extension_data	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    std::string                 m_extension_data;$/;"	m	class:websocketpp::message_buffer::message
m_extension_data	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    std::string                 m_extension_data;$/;"	m	class:websocketpp::message_buffer::message
m_external_io_service	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    bool                m_external_io_service;$/;"	m	class:websocketpp::transport::asio::endpoint
m_face	NFD/core/notification-stream.hpp	/^  FaceBase& m_face;$/;"	m	class:nfd::NotificationStream
m_face	NFD/core/segment-publisher.hpp	/^  FaceBase& m_face;$/;"	m	class:nfd::SegmentPublisher
m_face	NFD/daemon/mgmt/manager-base.hpp	/^  shared_ptr<InternalFace> m_face;$/;"	m	class:nfd::ManagerBase
m_face	NFD/daemon/mgmt/status-server.hpp	/^  shared_ptr<AppFace> m_face;$/;"	m	class:nfd::StatusServer
m_face	NFD/daemon/table/fib-nexthop.hpp	/^  shared_ptr<Face> m_face;$/;"	m	class:nfd::fib::NextHop
m_face	NFD/daemon/table/pit-face-record.hpp	/^  shared_ptr<Face> m_face;$/;"	m	class:nfd::pit::FaceRecord
m_face	NFD/rib/nrd.hpp	/^  unique_ptr<ndn::Face> m_face;$/;"	m	class:nfd::rib::Nrd
m_face	NFD/rib/rib-manager.hpp	/^  ndn::Face& m_face;$/;"	m	class:nfd::rib::RibManager
m_face	NFD/tests/core/segment-publisher.t.cpp	/^  shared_ptr<ndn::util::DummyClientFace> m_face;$/;"	m	class:nfd::tests::SegmentPublisherFixture	file:
m_face	NFD/tests/daemon/fw/topology-tester.hpp	/^  shared_ptr<DummyLocalFace> m_face;$/;"	m	class:nfd::fw::tests::TopologyAppLink
m_face	NFD/tests/daemon/mgmt/channel-status-publisher.t.cpp	/^  shared_ptr<InternalFace> m_face;$/;"	m	class:nfd::tests::ChannelStatusPublisherFixture	file:
m_face	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  shared_ptr<InternalFace> m_face;$/;"	m	class:nfd::tests::TestFaceManagerCommon	file:
m_face	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  shared_ptr<InternalFace> m_face;$/;"	m	class:nfd::tests::FaceQueryStatusPublisherFixture
m_face	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^  shared_ptr<InternalFace> m_face;$/;"	m	class:nfd::tests::FaceStatusPublisherFixture
m_face	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^  shared_ptr<InternalFace> m_face;$/;"	m	class:nfd::tests::FibEnumerationPublisherFixture
m_face	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  shared_ptr<InternalFace> m_face;$/;"	m	class:nfd::tests::StrategyChoiceManagerFixture	file:
m_face	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^  shared_ptr<InternalFace> m_face;$/;"	m	class:nfd::tests::StrategyChoicePublisherFixture	file:
m_face	NFD/tools/ndn-autoconfig-server.cpp	/^  Face m_face;$/;"	m	class:ndn::NdnAutoconfigServer	file:
m_face	NFD/tools/ndn-autoconfig/base.hpp	/^  Face& m_face;$/;"	m	class:ndn::tools::autoconfig::Base
m_face	NFD/tools/ndn-autoconfig/main.cpp	/^  Face m_face;$/;"	m	class:ndn::tools::NdnAutoconfig	file:
m_face	NFD/tools/ndn-tlv-peek.cpp	/^  ndn::Face m_face;$/;"	m	class:ndntlvpeek::NdnTlvPeek	file:
m_face	NFD/tools/ndn-tlv-poke.cpp	/^  ndn::Face m_face;$/;"	m	class:ndntlvpoke::NdnTlvPoke	file:
m_face	NFD/tools/nfd-autoreg.cpp	/^  Face m_face;$/;"	m	class:ndn::nfd_autoreg::AutoregServer	file:
m_face	NFD/tools/nfd-status.cpp	/^  Face m_face;$/;"	m	class:ndn::NfdStatus	file:
m_face	NFD/tools/nfdc.hpp	/^    ndn::Face& m_face;$/;"	m	class:nfdc::Nfdc::FaceIdFetcher
m_face	NFD/tools/nfdc.hpp	/^  ndn::Face& m_face;$/;"	m	class:nfdc::Nfdc
m_face	apps/ndn-app.hpp	/^  shared_ptr<AppFace> m_face; \/\/\/< @brief automatically created application face through which application communicates$/;"	m	class:ns3::ndn::App
m_face	model/ndn-l3-protocol.cpp	/^  shared_ptr< ::ndn::Face> m_face;$/;"	m	class:ns3::ndn::L3Protocol::Impl	file:
m_face	ndn-cxx/examples/consumer-with-timer.cpp	/^  Face m_face;$/;"	m	class:ndn::examples::ConsumerWithTimer	file:
m_face	ndn-cxx/examples/consumer.cpp	/^  Face m_face;$/;"	m	class:ndn::examples::Consumer	file:
m_face	ndn-cxx/examples/producer.cpp	/^  Face m_face;$/;"	m	class:ndn::examples::Producer	file:
m_face	ndn-cxx/src/detail/face-impl.hpp	/^  Face& m_face;$/;"	m	class:ndn::Face::Impl
m_face	ndn-cxx/src/management/nfd-controller.hpp	/^  Face& m_face;$/;"	m	class:ndn::nfd::Controller
m_face	ndn-cxx/src/mgmt/dispatcher.hpp	/^  Face& m_face;$/;"	m	class:ndn::mgmt::Dispatcher
m_face	ndn-cxx/src/security/validator.hpp	/^  Face* m_face;$/;"	m	class:ndn::Validator
m_face	ndn-cxx/src/util/notification-stream.hpp	/^  Face& m_face;$/;"	m	class:ndn::util::NotificationStream
m_face	ndn-cxx/src/util/notification-subscriber.hpp	/^  Face& m_face;$/;"	m	class:ndn::util::NotificationSubscriber
m_face	ndn-cxx/src/util/segment-fetcher.hpp	/^  Face& m_face;$/;"	m	class:ndn::util::SegmentFetcher
m_face	ndn-cxx/tools/ndncatchunks3.cpp	/^  Face m_face;$/;"	m	class:ndn::Consumer	file:
m_face	ndn-cxx/tools/ndnputchunks3.cpp	/^  Face m_face;$/;"	m	class:ndn::Producer	file:
m_face	tests/unit-tests/model/ndn-l3-protocol.t.cpp	/^  ::ndn::Face m_face;$/;"	m	class:ns3::ndn::TesterApp	file:
m_face	tests/unit-tests/ndn-cxx/face.t.cpp	/^  ::ndn::Face m_face;$/;"	m	class:ns3::ndn::BaseTesterApp	file:
m_faceAddConn	NFD/daemon/mgmt/face-manager.hpp	/^  signal::ScopedConnection m_faceAddConn;$/;"	m	class:nfd::FaceManager
m_faceConsumer	examples/ndn-cxx-simple/real-app.hpp	/^  ndn::Face m_faceConsumer;$/;"	m	class:app::RealApp
m_faceFilter	NFD/daemon/mgmt/face-query-status-publisher.hpp	/^  const ndn::nfd::FaceQueryFilter& m_faceFilter;$/;"	m	class:nfd::FaceQueryStatusPublisher
m_faceId	NFD/rib/rib-update-batch.hpp	/^  uint64_t m_faceId;$/;"	m	class:nfd::rib::RibUpdateBatch
m_faceId	NFD/tools/nfdc.hpp	/^  uint64_t m_faceId;$/;"	m	class:nfdc::Nfdc
m_faceId	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  uint64_t            m_faceId;$/;"	m	class:ndn::nfd::ControlParameters
m_faceId	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  uint64_t m_faceId;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_faceId	ndn-cxx/src/management/nfd-face-traits.hpp	/^  uint64_t m_faceId;$/;"	m	class:ndn::nfd::FaceTraits
m_faceId	ndn-cxx/src/management/nfd-fib-entry.hpp	/^  uint64_t m_faceId;$/;"	m	class:ndn::nfd::NextHopRecord
m_faceId	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  uint64_t m_faceId;$/;"	m	class:ndn::nfd::Route
m_faceManager	NFD/daemon/nfd.hpp	/^  unique_ptr<FaceManager>           m_faceManager;$/;"	m	class:nfd::Nfd
m_faceManager	model/ndn-l3-protocol.cpp	/^  shared_ptr<nfd::FaceManager> m_faceManager;$/;"	m	class:ns3::ndn::L3Protocol::Impl	file:
m_faceMap	NFD/rib/rib.hpp	/^  FaceLookupTable m_faceMap;$/;"	m	class:nfd::rib::Rib
m_faceMonitor	NFD/rib/rib-manager.hpp	/^  ndn::nfd::FaceMonitor m_faceMonitor;$/;"	m	class:nfd::rib::RibManager
m_faceMonitor	NFD/tools/nfd-autoreg.cpp	/^  FaceMonitor m_faceMonitor;$/;"	m	class:ndn::nfd_autoreg::AutoregServer	file:
m_facePersistency	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  FacePersistency m_facePersistency;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_facePersistency	ndn-cxx/src/management/nfd-face-traits.hpp	/^  FacePersistency  m_facePersistency;$/;"	m	class:ndn::nfd::FaceTraits
m_faceProducer	examples/ndn-cxx-simple/real-app.hpp	/^  ndn::Face m_faceProducer;$/;"	m	class:app::RealApp
m_faceRemoveConn	NFD/daemon/mgmt/face-manager.hpp	/^  signal::ScopedConnection m_faceRemoveConn;$/;"	m	class:nfd::FaceManager
m_faceScope	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  FaceScope m_faceScope;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_faceScope	ndn-cxx/src/management/nfd-face-traits.hpp	/^  FaceScope m_faceScope;$/;"	m	class:ndn::nfd::FaceTraits
m_faceStatusPublisher	NFD/daemon/mgmt/face-manager.hpp	/^  FaceStatusPublisher m_faceStatusPublisher;$/;"	m	class:nfd::FaceManager
m_faceTable	NFD/daemon/fw/forwarder.hpp	/^  FaceTable m_faceTable;$/;"	m	class:nfd::Forwarder
m_faceTable	NFD/daemon/mgmt/face-manager.hpp	/^  FaceTable& m_faceTable;$/;"	m	class:nfd::FaceManager
m_faceTable	NFD/daemon/mgmt/face-query-status-publisher.hpp	/^  const FaceTable& m_faceTable;$/;"	m	class:nfd::FaceQueryStatusPublisher
m_faceTable	NFD/daemon/mgmt/face-status-publisher.hpp	/^  const FaceTable& m_faceTable;$/;"	m	class:nfd::FaceStatusPublisher
m_faceTable	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  FaceTable m_faceTable;$/;"	m	class:nfd::tests::FaceTableFixture	file:
m_faceTable	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  TestFaceTable m_faceTable;$/;"	m	class:nfd::tests::TestFaceTableFixture	file:
m_faces	NFD/daemon/fw/face-table.hpp	/^  FaceMap m_faces;$/;"	m	class:nfd::FaceTable
m_faces	NFD/tests/daemon/fw/topology-tester.hpp	/^  std::unordered_map<TopologyNode, unique_ptr<LinkFace>> m_faces;$/;"	m	class:nfd::fw::tests::TopologyLink
m_faces	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  std::vector<shared_ptr<Face> > m_faces;$/;"	m	class:nfd::tests::FibManagerFixture	file:
m_faces	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^  std::vector<shared_ptr<Face> > m_faces;$/;"	m	class:nfd::tests::InternalFaceFixture	file:
m_faces	helper/ndn-face-container.hpp	/^  Container m_faces;$/;"	m	class:ns3::ndn::FaceContainer
m_factories	NFD/daemon/mgmt/channel-status-publisher.hpp	/^  const FactoryMap& m_factories;$/;"	m	class:nfd::ChannelStatusPublisher
m_factories	NFD/daemon/mgmt/face-manager.hpp	/^  FactoryMap m_factories;$/;"	m	class:nfd::FaceManager
m_factories	NFD/tests/daemon/mgmt/channel-status-publisher.t.cpp	/^  ChannelStatusPublisher::FactoryMap m_factories;$/;"	m	class:nfd::tests::ChannelStatusPublisherFixture	file:
m_factory	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  UdpFactory m_factory;$/;"	m	class:nfd::tests::FaceQueryStatusPublisherFixture
m_factory	helper/ndn-app-helper.hpp	/^  FactoryCallback m_factory;$/;"	m	class:ns3::ndn::FactoryCallbackApp
m_factory	helper/ndn-app-helper.hpp	/^  ObjectFactory m_factory;$/;"	m	class:ns3::ndn::AppHelper
m_failConn	NFD/tests/daemon/face/face-history.hpp	/^  signal::ScopedConnection m_failConn;$/;"	m	class:nfd::tests::FaceHistory
m_fail_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    fail_handler            m_fail_handler;$/;"	m	class:websocketpp::connection
m_fail_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    fail_handler                m_fail_handler;$/;"	m	class:websocketpp::endpoint
m_failed_by_me	NFD/websocketpp/websocketpp/connection.hpp	/^    bool                    m_failed_by_me;$/;"	m	class:websocketpp::connection
m_fetchSteps	NFD/tools/nfd-status.cpp	/^  std::deque<function<void()> > m_fetchSteps;$/;"	m	class:ndn::NfdStatus	file:
m_fib	NFD/daemon/fw/forwarder.hpp	/^  Fib            m_fib;$/;"	m	class:nfd::Forwarder
m_fib	NFD/daemon/mgmt/fib-enumeration-publisher.hpp	/^  const Fib& m_fib;$/;"	m	class:nfd::FibEnumerationPublisher
m_fib	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^  Fib m_fib;$/;"	m	class:nfd::tests::FibEnumerationPublisherFixture
m_fib	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^  Fib& m_fib;$/;"	m	class:nfd::tests::TablesConfigSectionFixture	file:
m_fibEntry	NFD/daemon/table/name-tree-entry.hpp	/^  shared_ptr<fib::Entry> m_fibEntry;$/;"	m	class:nfd::name_tree::Entry
m_fibEnumerationPublisher	NFD/daemon/mgmt/fib-manager.hpp	/^  FibEnumerationPublisher m_fibEnumerationPublisher;$/;"	m	class:nfd::FibManager
m_fibManager	NFD/daemon/nfd.hpp	/^  unique_ptr<FibManager>            m_fibManager;$/;"	m	class:nfd::Nfd
m_fibManager	model/ndn-l3-protocol.cpp	/^  shared_ptr<nfd::FibManager> m_fibManager;$/;"	m	class:ns3::ndn::L3Protocol::Impl	file:
m_fibUpdater	NFD/rib/rib-manager.hpp	/^  FibUpdater m_fibUpdater;$/;"	m	class:nfd::rib::RibManager
m_fibUpdater	NFD/rib/rib.hpp	/^  FibUpdater* m_fibUpdater;$/;"	m	class:nfd::rib::Rib
m_filter	ndn-cxx/src/detail/interest-filter-record.hpp	/^  InterestFilter m_filter;$/;"	m	class:ndn::InterestFilterRecord
m_filter	ndn-cxx/src/detail/registered-prefix.hpp	/^  shared_ptr<InterestFilterRecord> m_filter;$/;"	m	class:ndn::RegisteredPrefix
m_filters	ndn-cxx/src/security/conf/rule.hpp	/^  FilterList m_filters;$/;"	m	class:ndn::security::conf::Rule
m_fin	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    bool                        m_fin;$/;"	m	class:websocketpp::message_buffer::message
m_finalBlockId	ndn-cxx/src/meta-info.hpp	/^  name::Component m_finalBlockId;$/;"	m	class:ndn::MetaInfo
m_finished	NFD/tests/daemon/mgmt/channel-status-publisher.t.cpp	/^  bool m_finished;$/;"	m	class:nfd::tests::ChannelStatusPublisherFixture	file:
m_finished	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  bool m_finished;$/;"	m	class:nfd::tests::FaceQueryStatusPublisherFixture
m_finished	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^  bool m_finished;$/;"	m	class:nfd::tests::FaceStatusPublisherFixture
m_finished	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^  bool m_finished;$/;"	m	class:nfd::tests::FibEnumerationPublisherFixture
m_finished	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^  bool m_finished;$/;"	m	class:nfd::tests::StrategyChoicePublisherFixture	file:
m_firstInterestDataDelay	apps/ndn-consumer.hpp	/^                 uint32_t \/*retx count*\/, int32_t \/*hop count*\/> m_firstInterestDataDelay;$/;"	m	class:ns3::ndn::Consumer
m_firstTime	apps/ndn-consumer-cbr.hpp	/^  bool m_firstTime;$/;"	m	class:ns3::ndn::ConsumerCbr
m_fit	NFD/daemon/fw/access-strategy.hpp	/^  FaceInfoTable m_fit;$/;"	m	class:nfd::fw::AccessStrategy
m_flag	ndn-cxx/src/destination-flag.hpp	/^  uint64_t m_flag;$/;"	m	class:ndn::DestinationFlag
m_flags	NFD/tools/nfdc.hpp	/^  uint64_t m_flags;$/;"	m	class:nfdc::Nfdc
m_flags	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  uint64_t            m_flags;$/;"	m	class:ndn::nfd::ControlParameters
m_flags	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  uint64_t m_flags;$/;"	m	class:ndn::nfd::Route
m_forwarder	NFD/daemon/fw/face-table.hpp	/^  Forwarder& m_forwarder;$/;"	m	class:nfd::FaceTable
m_forwarder	NFD/daemon/fw/strategy.hpp	/^  Forwarder& m_forwarder;$/;"	m	class:nfd::fw::Strategy
m_forwarder	NFD/daemon/mgmt/status-server.hpp	/^  Forwarder& m_forwarder;$/;"	m	class:nfd::StatusServer
m_forwarder	NFD/daemon/nfd.hpp	/^  unique_ptr<Forwarder> m_forwarder;$/;"	m	class:nfd::Nfd
m_forwarder	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  Forwarder m_forwarder;$/;"	m	class:nfd::tests::FaceTableFixture	file:
m_forwarder	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  Forwarder m_forwarder;$/;"	m	class:nfd::tests::TestFaceTableFixture	file:
m_forwarder	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  Forwarder m_forwarder;$/;"	m	class:nfd::tests::FaceQueryStatusPublisherFixture
m_forwarder	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^  Forwarder m_forwarder;$/;"	m	class:nfd::tests::FaceStatusPublisherFixture
m_forwarder	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  Forwarder m_forwarder;$/;"	m	class:nfd::tests::StrategyChoiceManagerFixture	file:
m_forwarder	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^  Forwarder m_forwarder;$/;"	m	class:nfd::tests::StrategyChoicePublisherFixture	file:
m_forwarder	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^  Forwarder m_forwarder;$/;"	m	class:nfd::tests::TablesConfigSectionFixture	file:
m_forwarder	model/ndn-l3-protocol.cpp	/^  shared_ptr<nfd::Forwarder> m_forwarder;$/;"	m	class:ns3::ndn::L3Protocol::Impl	file:
m_forwarders	NFD/tests/daemon/fw/topology-tester.hpp	/^  std::vector<unique_ptr<Forwarder>> m_forwarders;$/;"	m	class:nfd::fw::tests::TopologyTester
m_fragCount	NFD/daemon/face/ndnlp-partial-message-store.hpp	/^  size_t m_fragCount;$/;"	m	class:nfd::ndnlp::PartialMessage
m_freeEntries	ndn-cxx/src/util/in-memory-storage.hpp	/^  std::stack<InMemoryStorageEntry*> m_freeEntries;$/;"	m	class:ndn::util::InMemoryStorage
m_frequency	apps/ndn-consumer-cbr.hpp	/^  double m_frequency; \/\/ Frequency of interest packets (in hertz)$/;"	m	class:ns3::ndn::ConsumerCbr
m_freshness	apps/ndn-producer.hpp	/^  Time m_freshness;$/;"	m	class:ns3::ndn::Producer
m_freshnessPeriod	NFD/core/segment-publisher.hpp	/^  const time::milliseconds m_freshnessPeriod;$/;"	m	class:nfd::SegmentPublisher
m_freshnessPeriod	NFD/tools/ndn-tlv-poke.cpp	/^  ndn::time::milliseconds m_freshnessPeriod;$/;"	m	class:ndntlvpoke::NdnTlvPoke	file:
m_freshnessPeriod	ndn-cxx/src/meta-info.hpp	/^  time::milliseconds m_freshnessPeriod;$/;"	m	class:ndn::MetaInfo
m_fullName	ndn-cxx/src/data.hpp	/^  mutable Name m_fullName;$/;"	m	class:ndn::Data
m_gain	NFD/daemon/fw/rtt-estimator.hpp	/^  double m_gain;$/;"	m	class:nfd::RttEstimator
m_gain	utils/ndn-rtt-mean-deviation.hpp	/^  double m_gain;   \/\/ Filter gain$/;"	m	class:ns3::ndn::RttMeanDeviation
m_gain2	utils/ndn-rtt-mean-deviation.hpp	/^  double m_gain2;  \/\/ Filter gain$/;"	m	class:ns3::ndn::RttMeanDeviation
m_gatewayRouters	utils/topology/rocketfuel-map-reader.hpp	/^  NodeContainer m_gatewayRouters;$/;"	m	class:ns3::RocketfuelMapReader
m_generator	NFD/tests/daemon/mgmt/validation-common.hpp	/^  ndn::CommandInterestGenerator m_generator;$/;"	m	class:nfd::tests::CommandFixture
m_getFace	NFD/daemon/mgmt/fib-manager.hpp	/^  function<shared_ptr<Face>(FaceId)> m_getFace;$/;"	m	class:nfd::FibManager
m_getFired	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  mutable bool m_getFired;$/;"	m	class:nfd::tests::TestFaceTable	file:
m_global	NFD/core/config-file.hpp	/^  ConfigSection m_global;$/;"	m	class:nfd::ConfigFile
m_graceInterval	ndn-cxx/src/security/validator-config.hpp	/^  time::milliseconds m_graceInterval;$/;"	m	class:ndn::ValidatorConfig
m_graceInterval	ndn-cxx/src/util/command-interest-validator.hpp	/^  time::milliseconds m_graceInterval; \/\/ms$/;"	m	class:ndn::CommandInterestValidator
m_graph	helper/boost-graph-ndn-global-routing-helper.hpp	/^  const NdnGlobalRouterGraph& m_graph;$/;"	m	struct:boost::EdgeWeights
m_graph	helper/boost-graph-ndn-global-routing-helper.hpp	/^  const NdnGlobalRouterGraph& m_graph;$/;"	m	struct:boost::VertexIds
m_graph	utils/topology/rocketfuel-map-reader.hpp	/^  Graph m_graph;$/;"	m	class:ns3::RocketfuelMapReader
m_graphNodes	utils/topology/rocketfuel-map-reader.hpp	/^  node_map_t m_graphNodes;$/;"	m	class:ns3::RocketfuelMapReader
m_handle	NFD/daemon/face/websocket-face.hpp	/^  websocketpp::connection_hdl m_handle;$/;"	m	class:nfd::WebSocketFace
m_handle_read_frame	NFD/websocketpp/websocketpp/connection.hpp	/^    read_handler            m_handle_read_frame;$/;"	m	class:websocketpp::connection
m_handlers	ndn-cxx/src/mgmt/dispatcher.hpp	/^  HandlerMap m_handlers;$/;"	m	class:ndn::mgmt::Dispatcher
m_handlers	ndn-cxx/src/util/event-emitter.hpp	/^  std::vector<Handler> m_handlers;$/;"	m	class:ndn::util::EventEmitter
m_handshake_buffer	NFD/websocketpp/websocketpp/connection.hpp	/^    std::string m_handshake_buffer;$/;"	m	class:websocketpp::connection
m_handshake_timer	NFD/websocketpp/websocketpp/connection.hpp	/^    timer_ptr               m_handshake_timer;$/;"	m	class:websocketpp::connection
m_hasBeenUsedRecently	NFD/daemon/face/datagram-face.hpp	/^  bool m_hasBeenUsedRecently;$/;"	m	class:nfd::DatagramFace
m_hasConnectedHub	NFD/rib/remote-registrator.hpp	/^  bool m_hasConnectedHub;$/;"	m	class:nfd::rib::RemoteRegistrator
m_hasDefaultCertificate	ndn-cxx/src/security/key.hpp	/^  mutable bool m_hasDefaultCertificate;$/;"	m	class:ndn::security::Key
m_hasDefaultIdentity	ndn-cxx/src/security/pib-memory.hpp	/^  bool m_hasDefaultIdentity;$/;"	m	class:ndn::security::PibMemory
m_hasDefaultIdentity	ndn-cxx/src/security/pib.hpp	/^  mutable bool m_hasDefaultIdentity;$/;"	m	class:ndn::security::Pib
m_hasDefaultKey	ndn-cxx/src/security/identity.hpp	/^  mutable bool m_hasDefaultKey;$/;"	m	class:ndn::security::Identity
m_hasExpirationPeriod	ndn-cxx/src/management/nfd-face-status.hpp	/^  bool m_hasExpirationPeriod;$/;"	m	class:ndn::nfd::FaceStatus
m_hasFaceId	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  bool m_hasFaceId;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasFacePersistency	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  bool m_hasFacePersistency;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasFaceScope	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  bool m_hasFaceScope;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasFields	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  std::vector<bool>   m_hasFields;$/;"	m	class:ndn::nfd::ControlParameters
m_hasInfiniteExpirationPeriod	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  bool m_hasInfiniteExpirationPeriod;$/;"	m	class:ndn::nfd::Route
m_hasIpv4	ndn-cxx/tests/unit-tests/network-configuration-detector.cpp	/^bool NetworkConfigurationDetector::m_hasIpv4 = false;$/;"	m	class:ndn::tests::NetworkConfigurationDetector	file:
m_hasIpv4	ndn-cxx/tests/unit-tests/network-configuration-detector.hpp	/^  static bool m_hasIpv4;$/;"	m	class:ndn::tests::NetworkConfigurationDetector
m_hasIpv6	ndn-cxx/tests/unit-tests/network-configuration-detector.cpp	/^bool NetworkConfigurationDetector::m_hasIpv6 = false;$/;"	m	class:ndn::tests::NetworkConfigurationDetector	file:
m_hasIpv6	ndn-cxx/tests/unit-tests/network-configuration-detector.hpp	/^  static bool m_hasIpv6;$/;"	m	class:ndn::tests::NetworkConfigurationDetector
m_hasKeyLocator	ndn-cxx/src/signature-info.hpp	/^  bool m_hasKeyLocator;$/;"	m	class:ndn::SignatureInfo
m_hasLinkType	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  bool m_hasLinkType;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasLocalUri	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  bool m_hasLocalUri;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasOldDefaultIdentity	ndn-cxx/tests/unit-tests/security/identity-fixture.cpp	/^  bool m_hasOldDefaultIdentity;$/;"	m	class:ndn::security::IdentityFixture	file:
m_hasRemoteUri	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  bool m_hasRemoteUri;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hasUriScheme	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  bool m_hasUriScheme;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_hash	NFD/daemon/table/name-tree-entry.hpp	/^  size_t m_hash;$/;"	m	class:nfd::name_tree::Entry
m_hash	ndn-cxx/src/util/digest.hpp	/^  Hash m_hash;$/;"	m	class:ndn::util::Digest
m_hdl	NFD/websocketpp/examples/telemetry_client/telemetry_client.cpp	/^    websocketpp::connection_hdl m_hdl;$/;"	m	class:telemetry_client	file:
m_hdl	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    websocketpp::connection_hdl m_hdl;$/;"	m	class:connection_metadata	file:
m_hdl	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    websocketpp::connection_hdl m_hdl;$/;"	m	class:connection_metadata	file:
m_hdl	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    websocketpp::connection_hdl m_hdl;$/;"	m	class:connection_metadata	file:
m_hdl	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    websocketpp::connection_hdl m_hdl;$/;"	m	class:connection_metadata	file:
m_hdl	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    connection_hdl      m_hdl;$/;"	m	class:websocketpp::transport::asio::basic_socket::connection
m_hdl	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    connection_hdl      m_hdl;$/;"	m	class:websocketpp::transport::asio::tls_socket::connection
m_header	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    std::string                 m_header;$/;"	m	class:websocketpp::message_buffer::message
m_header	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    std::string                 m_header;$/;"	m	class:websocketpp::message_buffer::message
m_header	ndn-cxx/src/lp/nack.hpp	/^  NackHeader m_header;$/;"	m	class:ndn::lp::Nack
m_header_bytes	NFD/websocketpp/websocketpp/http/parser.hpp	/^    size_t                  m_header_bytes;$/;"	m	class:websocketpp::http::parser::parser
m_headers	NFD/websocketpp/websocketpp/http/parser.hpp	/^    header_list m_headers;$/;"	m	class:websocketpp::http::parser::parser
m_history	utils/ndn-rtt-estimator.hpp	/^  RttHistory_t m_history;     \/\/ List of sent packet$/;"	m	class:ns3::ndn::RttEstimator
m_hit	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^  int m_hit;$/;"	m	class:ndn::util::tests::EventEmitterTester	file:
m_hopCount	utils/ndn-fw-hop-count-tag.hpp	/^  uint32_t m_hopCount;$/;"	m	class:ns3::ndn::FwHopCountTag
m_host	NFD/websocketpp/websocketpp/uri.hpp	/^    std::string m_host;$/;"	m	class:websocketpp::uri
m_host	ndn-cxx/src/transport/tcp-transport.hpp	/^  std::string m_host;$/;"	m	class:ndn::TcpTransport
m_host	ndn-cxx/src/util/face-uri.hpp	/^  std::string m_host;$/;"	m	class:ndn::util::FaceUri
m_ht	NFD/daemon/table/dead-nonce-list.hpp	/^  Hashtable& m_ht;$/;"	m	class:nfd::DeadNonceList
m_http_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    http_handler            m_http_handler;$/;"	m	class:websocketpp::connection
m_http_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    http_handler                m_http_handler;$/;"	m	class:websocketpp::endpoint
m_hubData	NFD/tools/ndn-autoconfig-server.cpp	/^  shared_ptr<Data> m_hubData;$/;"	m	class:ndn::NdnAutoconfigServer	file:
m_hyperKRegex	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  shared_ptr<Regex> m_hyperKRegex;$/;"	m	class:ndn::security::conf::HyperKeyLocatorNameChecker
m_hyperPRegex	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  shared_ptr<Regex> m_hyperPRegex;$/;"	m	class:ndn::security::conf::HyperKeyLocatorNameChecker
m_hyperRelation	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  Relation m_hyperRelation;$/;"	m	class:ndn::security::conf::HyperKeyLocatorNameChecker
m_iPitEntry	NFD/daemon/table/pit.hpp	/^    size_t m_iPitEntry;$/;"	m	class:nfd::Pit::const_iterator
m_id	NFD/daemon/face/face.hpp	/^  FaceId m_id;$/;"	m	class:nfd::Face
m_id	NFD/tests/daemon/table/strategy-info-host.t.cpp	/^  int m_id;$/;"	m	class:nfd::tests::DummyStrategyInfo	file:
m_id	NFD/tests/daemon/table/strategy-info-host.t.cpp	/^  int m_id;$/;"	m	class:nfd::tests::DummyStrategyInfo2	file:
m_id	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    int m_id;$/;"	m	class:connection_metadata	file:
m_id	NFD/websocketpp/test/http/parser_perf.cpp	/^    std::string m_id;$/;"	m	class:scoped_timer	file:
m_id	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    int m_id;$/;"	m	class:connection_metadata	file:
m_id	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    int m_id;$/;"	m	class:connection_metadata	file:
m_id	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    int m_id;$/;"	m	class:connection_metadata	file:
m_id	model/ndn-global-router.hpp	/^  uint32_t m_id;$/;"	m	class:ns3::ndn::GlobalRouter
m_id	ndn-cxx/src/detail/interest-filter-record.hpp	/^  const InterestFilterId* m_id;$/;"	m	class:ndn::MatchInterestFilterId
m_id	ndn-cxx/src/detail/pending-interest.hpp	/^  const PendingInterestId* m_id;$/;"	m	class:ndn::MatchPendingInterestId
m_id	ndn-cxx/src/detail/registered-prefix.hpp	/^  const RegisteredPrefixId* m_id;$/;"	m	class:ndn::MatchRegisteredPrefixId
m_id	ndn-cxx/src/security/conf/rule.hpp	/^  std::string m_id;$/;"	m	class:ndn::security::conf::Rule
m_id	ndn-cxx/src/security/key.hpp	/^  Name m_id;$/;"	m	class:ndn::security::Key
m_idCounter	model/ndn-global-router.cpp	/^uint32_t GlobalRouter::m_idCounter = 0;$/;"	m	class:ns3::ndn::GlobalRouter	file:
m_idCounter	model/ndn-global-router.hpp	/^  static uint32_t m_idCounter;$/;"	m	class:ns3::ndn::GlobalRouter
m_identities	NFD/tests/identity-management-fixture.hpp	/^  std::vector<ndn::Name> m_identities;$/;"	m	class:nfd::tests::IdentityManagementFixture
m_identities	ndn-cxx/src/security/identity-container.hpp	/^  std::set<Name> m_identities;$/;"	m	class:ndn::security::IdentityContainer
m_identities	ndn-cxx/src/security/pib-memory.hpp	/^  std::set<Name> m_identities;$/;"	m	class:ndn::security::PibMemory
m_identities	ndn-cxx/src/security/pib.hpp	/^  mutable IdentityContainer m_identities;$/;"	m	class:ndn::security::Pib
m_identities	ndn-cxx/tests/identity-management-fixture.hpp	/^  std::vector<Name> m_identities;$/;"	m	class:ndn::security::IdentityManagementFixture
m_identity	ndn-cxx/src/security/identity-container.hpp	/^    Name m_identity;$/;"	m	class:ndn::security::IdentityContainer::const_iterator
m_identity	ndn-cxx/src/security/key-container.hpp	/^    Name m_identity;$/;"	m	class:ndn::security::KeyContainer::const_iterator
m_identity	ndn-cxx/src/security/key-container.hpp	/^  Name m_identity;$/;"	m	class:ndn::security::KeyContainer
m_identityName	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  Name m_identityName;$/;"	m	class:nfd::tests::CommandValidatorTester	file:
m_identityName	NFD/tools/ndn-tlv-poke.cpp	/^  ndn::shared_ptr<ndn::Name> m_identityName;$/;"	m	class:ndntlvpoke::NdnTlvPoke	file:
m_idleDuration	NFD/daemon/face/ndnlp-partial-message-store.hpp	/^  time::nanoseconds m_idleDuration;$/;"	m	class:nfd::ndnlp::PartialMessageStore
m_idleFaceTimeout	NFD/daemon/face/udp-channel.hpp	/^  time::seconds m_idleFaceTimeout;$/;"	m	class:nfd::UdpChannel
m_idleTimeout	NFD/daemon/face/udp-face.hpp	/^  const time::seconds m_idleTimeout;$/;"	m	class:nfd::UdpFace
m_ignored	model/ndn-l3-protocol.cpp	/^  std::vector<std::string> m_ignored;$/;"	m	class:ns3::ndn::IgnoreSections	file:
m_impl	helper/ndn-app-helper.hpp	/^  std::shared_ptr<void> m_impl;$/;"	m	class:ns3::ndn::FactoryCallbackApp
m_impl	model/ndn-l3-protocol.hpp	/^  std::unique_ptr<Impl> m_impl;$/;"	m	class:ns3::ndn::L3Protocol
m_impl	ndn-cxx/src/face.hpp	/^  unique_ptr<Impl> m_impl;$/;"	m	class:ndn::Face
m_impl	ndn-cxx/src/security/certificate-container.hpp	/^    shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::CertificateContainer::const_iterator
m_impl	ndn-cxx/src/security/certificate-container.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::CertificateContainer
m_impl	ndn-cxx/src/security/identity-container.hpp	/^    shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::IdentityContainer::const_iterator
m_impl	ndn-cxx/src/security/identity-container.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::IdentityContainer
m_impl	ndn-cxx/src/security/identity.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::Identity
m_impl	ndn-cxx/src/security/key-container.hpp	/^    shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::KeyContainer::const_iterator
m_impl	ndn-cxx/src/security/key-container.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::KeyContainer
m_impl	ndn-cxx/src/security/key.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::Key
m_impl	ndn-cxx/src/security/pib.hpp	/^  shared_ptr<PibImpl> m_impl;$/;"	m	class:ndn::security::Pib
m_impl	ndn-cxx/src/security/sec-tpm-file.hpp	/^  unique_ptr<Impl> m_impl;$/;"	m	class:ndn::SecTpmFile
m_impl	ndn-cxx/src/security/sec-tpm-osx.hpp	/^  shared_ptr<Impl> m_impl;$/;"	m	class:ndn::SecTpmOsx
m_impl	ndn-cxx/src/transport/tcp-transport.hpp	/^  shared_ptr< Impl > m_impl;$/;"	m	class:ndn::TcpTransport
m_impl	ndn-cxx/src/transport/unix-transport.hpp	/^  shared_ptr< Impl > m_impl;$/;"	m	class:ndn::UnixTransport
m_impl	ndn-cxx/src/util/network-monitor.hpp	/^  std::unique_ptr<Impl> m_impl;$/;"	m	class:ndn::util::NetworkMonitor
m_ims	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^  InMemoryStoragePersistent m_ims;$/;"	m	class:ndn::util::FindFixture	file:
m_in	utils/tracers/l2-tracer.hpp	/^    uint64_t m_in;$/;"	m	struct:ns3::L2Tracer::Stats
m_inData	model/ndn-l3-protocol.hpp	/^  TracedCallback<const Data&, const Face&> m_inData;  \/\/\/< @brief trace of incoming Data$/;"	m	class:ns3::ndn::L3Protocol
m_inData	utils/tracers/ndn-l3-tracer.hpp	/^    double m_inData;$/;"	m	struct:ns3::ndn::L3Tracer::Stats
m_inFlight	apps/ndn-consumer-window.hpp	/^  TracedValue<uint32_t> m_inFlight;$/;"	m	class:ns3::ndn::ConsumerWindow
m_inInterests	model/ndn-l3-protocol.hpp	/^    m_inInterests; \/\/\/< @brief trace of incoming Interests$/;"	m	class:ns3::ndn::L3Protocol
m_inInterests	utils/tracers/ndn-l3-tracer.hpp	/^    double m_inInterests;$/;"	m	struct:ns3::ndn::L3Tracer::Stats
m_inRecords	NFD/daemon/table/pit-entry.hpp	/^  InRecordCollection m_inRecords;$/;"	m	class:nfd::pit::Entry
m_inTerminal	ndn-cxx/src/security/sec-tpm-file.hpp	/^  bool m_inTerminal;$/;"	m	class:ndn::SecTpmFile
m_inTerminal	ndn-cxx/src/security/sec-tpm-osx.cpp	/^  bool m_inTerminal;$/;"	m	class:ndn::SecTpmOsx::Impl	file:
m_incidencies	model/ndn-global-router.hpp	/^  IncidencyList m_incidencies;$/;"	m	class:ns3::ndn::GlobalRouter
m_incomingFaceId	ndn-cxx/src/management/nfd-local-control-header.hpp	/^  uint64_t m_incomingFaceId;$/;"	m	class:ndn::nfd::LocalControlHeader
m_indent	ndn-cxx/src/util/indented-stream.hpp	/^    std::string m_indent;$/;"	m	class:ndn::util::IndentedStream::StreamBuf
m_index	NFD/daemon/table/dead-nonce-list.hpp	/^  Index m_index;$/;"	m	class:nfd::DeadNonceList
m_indicator	ndn-cxx/src/util/regex/regex-repeat-matcher.hpp	/^  size_t m_indicator;$/;"	m	class:ndn::RegexRepeatMatcher
m_info	ndn-cxx/src/security/additional-description.hpp	/^  std::map<std::string, std::string> m_info;$/;"	m	class:ndn::security::AdditionalDescription
m_info	ndn-cxx/src/security/signing-info.hpp	/^  SignatureInfo m_info;$/;"	m	class:ndn::security::SigningInfo
m_info	ndn-cxx/src/signature.hpp	/^  SignatureInfo m_info;$/;"	m	class:ndn::Signature
m_inheritedRoutes	NFD/rib/fib-updater.hpp	/^  RibUpdateList m_inheritedRoutes;$/;"	m	class:nfd::rib::FibUpdater
m_inheritedRoutes	NFD/rib/rib-entry.hpp	/^  RouteList m_inheritedRoutes;$/;"	m	class:nfd::rib::RibEntry
m_init_handler	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    init_handler        m_init_handler;$/;"	m	class:websocketpp::transport::asio::connection
m_initial	apps/ndn-consumer-batches.hpp	/^  bool m_initial;$/;"	m	class:ns3::ndn::ConsumerBatches
m_initialEstimatedRtt	utils/ndn-rtt-estimator.hpp	/^  Time m_initialEstimatedRtt;$/;"	m	class:ns3::ndn::RttEstimator
m_initialInterval	NFD/daemon/fw/retx-suppression-exponential.hpp	/^  const Duration m_initialInterval;$/;"	m	class:nfd::fw::RetxSuppressionExponential
m_initialOverhead	tests/other/ndn-test.cpp	/^  double m_initialOverhead;$/;"	m	class:ns3::Tester	file:
m_initialWindow	apps/ndn-consumer-window.hpp	/^  uint32_t m_initialWindow;$/;"	m	class:ns3::ndn::ConsumerWindow
m_initialized	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    bool m_initialized;$/;"	m	class:websocketpp::extensions::permessage_deflate::enabled
m_input	ndn-cxx/src/util/config-file.hpp	/^  std::ifstream m_input;$/;"	m	class:ndn::ConfigFile
m_inputBuffer	NFD/daemon/face/datagram-face.hpp	/^  uint8_t m_inputBuffer[ndn::MAX_NDN_PACKET_SIZE];$/;"	m	class:nfd::DatagramFace
m_inputBuffer	NFD/daemon/face/stream-face.hpp	/^  uint8_t m_inputBuffer[ndn::MAX_NDN_PACKET_SIZE];$/;"	m	class:nfd::StreamFace
m_inputBuffer	NFD/daemon/face/udp-channel.hpp	/^  uint8_t m_inputBuffer[ndn::MAX_NDN_PACKET_SIZE];$/;"	m	class:nfd::UdpChannel
m_inputBuffer	ndn-cxx/src/transport/stream-transport.hpp	/^  uint8_t m_inputBuffer[MAX_NDN_PACKET_SIZE];$/;"	m	class:ndn::StreamTransportImpl
m_inputBufferSize	NFD/daemon/face/stream-face.hpp	/^  size_t m_inputBufferSize;$/;"	m	class:nfd::StreamFace
m_inputBufferSize	ndn-cxx/src/transport/stream-transport.hpp	/^  size_t m_inputBufferSize;$/;"	m	class:ndn::StreamTransportImpl
m_inputType	utils/topology/rocketfuel-weights-reader.hpp	/^  uint8_t m_inputType;$/;"	m	class:ns3::RocketfuelWeightsReader
m_inserts	utils/trie/aggregate-stats-policy.hpp	/^      uint64_t m_inserts;$/;"	m	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
m_instance	examples/ndn-cxx-simple/real-app-starter.hpp	/^  std::unique_ptr<app::RealApp> m_instance;$/;"	m	class:ns3::RealAppStarter
m_interest	NFD/daemon/table/pit-entry.hpp	/^  shared_ptr<const Interest> m_interest;$/;"	m	class:nfd::pit::Entry
m_interest	NFD/daemon/table/pit-in-record.hpp	/^  shared_ptr<const Interest> m_interest;$/;"	m	class:nfd::pit::InRecord
m_interest	NFD/tests/daemon/table/cs.t.cpp	/^  shared_ptr<Interest> m_interest;$/;"	m	class:nfd::cs::tests::FindFixture	file:
m_interest	ndn-cxx/src/detail/pending-interest.hpp	/^  shared_ptr<const Interest> m_interest;$/;"	m	class:ndn::PendingInterest
m_interest	ndn-cxx/src/lp/nack.hpp	/^  Interest m_interest;$/;"	m	class:ndn::lp::Nack
m_interest	ndn-cxx/src/mgmt/status-dataset-context.hpp	/^  const Interest& m_interest;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_interest	ndn-cxx/src/security/validation-request.hpp	/^  Interest m_interest;$/;"	m	class:ndn::ValidationRequest
m_interest	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^  shared_ptr<Interest> m_interest;$/;"	m	class:ndn::util::FindFixture	file:
m_interestFilterTable	ndn-cxx/src/detail/face-impl.hpp	/^  InterestFilterTable m_interestFilterTable;$/;"	m	class:ndn::Face::Impl
m_interestFilters	NFD/daemon/mgmt/internal-face.hpp	/^  std::map<Name, OnInterest> m_interestFilters;$/;"	m	class:nfd::InternalFace
m_interestLifeTime	apps/ndn-consumer.hpp	/^  Time m_interestLifeTime; \/\/\/< \\brief LifeTime for interest packet$/;"	m	class:ns3::ndn::Consumer
m_interestLifetime	NFD/tools/ndn-tlv-peek.cpp	/^  ndn::time::milliseconds m_interestLifetime;$/;"	m	class:ndntlvpeek::NdnTlvPeek	file:
m_interestLifetime	ndn-cxx/src/interest.hpp	/^  time::milliseconds m_interestLifetime;$/;"	m	class:ndn::Interest
m_interestLifetime	ndn-cxx/src/util/notification-subscriber.hpp	/^  time::milliseconds m_interestLifetime;$/;"	m	class:ndn::util::NotificationSubscriber
m_interestName	apps/ndn-consumer.hpp	/^  Name m_interestName;     \/\/\/< \\brief NDN Name of the Interest (use Name)$/;"	m	class:ns3::ndn::Consumer
m_interestOutFace	NFD/tests/daemon/fw/dummy-strategy.hpp	/^  shared_ptr<Face> m_interestOutFace;$/;"	m	class:nfd::tests::DummyStrategy
m_interestRate	tests/other/ndn-test.cpp	/^  double m_interestRate;$/;"	m	class:ns3::Tester	file:
m_interestRules	ndn-cxx/src/security/validator-config.hpp	/^  InterestRuleList m_interestRules;$/;"	m	class:ndn::ValidatorConfig
m_interfaceIndex	NFD/daemon/face/ethernet-face.hpp	/^  int m_interfaceIndex;$/;"	m	class:nfd::EthernetFace
m_interfaceMtu	NFD/daemon/face/ethernet-face.hpp	/^  size_t m_interfaceMtu;$/;"	m	class:nfd::EthernetFace
m_interfaceName	NFD/daemon/face/ethernet-face.hpp	/^  std::string m_interfaceName;$/;"	m	class:nfd::EthernetFace
m_interfaces	NFD/tests/daemon/face/ethernet.t.cpp	/^  std::vector<NetworkInterfaceInfo> m_interfaces;$/;"	m	class:nfd::tests::InterfacesFixture	file:
m_internalFace	NFD/daemon/nfd.hpp	/^  shared_ptr<InternalFace>          m_internalFace;$/;"	m	class:nfd::Nfd
m_internalFace	model/ndn-l3-protocol.cpp	/^  shared_ptr<nfd::InternalFace> m_internalFace;$/;"	m	class:ns3::ndn::L3Protocol::Impl	file:
m_internalKeyChain	ndn-cxx/src/face.hpp	/^  unique_ptr<KeyChain> m_internalKeyChain;$/;"	m	class:ndn::Face
m_internal_state	NFD/websocketpp/websocketpp/connection.hpp	/^    istate_type             m_internal_state;$/;"	m	class:websocketpp::connection
m_interrupt_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    interrupt_handler       m_interrupt_handler;$/;"	m	class:websocketpp::connection
m_interrupt_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    interrupt_handler           m_interrupt_handler;$/;"	m	class:websocketpp::endpoint
m_interval	ndn-cxx/tools/ndnsec/util.hpp	/^    T m_interval;$/;"	m	class:AccumulatorType
m_io	NFD/tools/ndn-autoconfig/main.cpp	/^  boost::asio::io_service m_io;$/;"	m	class:ndn::tools::NdnAutoconfig	file:
m_io	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^  boost::asio::io_service m_io;$/;"	m	class:ndn::util::tests::CanonizeFixture	file:
m_ioService	NFD/tools/nfdc.hpp	/^  boost::asio::io_service& m_ioService;$/;"	m	class:nfdc::Nfdc
m_ioService	ndn-cxx/examples/consumer-with-timer.cpp	/^  boost::asio::io_service m_ioService;$/;"	m	class:ndn::examples::ConsumerWithTimer	file:
m_ioService	ndn-cxx/src/transport/transport.hpp	/^  boost::asio::io_service* m_ioService;$/;"	m	class:ndn::Transport
m_ioService	ndn-cxx/tests/unit-tests/util/dns.t.cpp	/^  boost::asio::io_service m_ioService;$/;"	m	class:ndn::util::tests::DnsFixture	file:
m_io_service	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    io_service_ptr  m_io_service;$/;"	m	class:websocketpp::transport::asio::connection
m_io_service	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    io_service_ptr      m_io_service;$/;"	m	class:websocketpp::transport::asio::endpoint
m_io_service	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    io_service_ptr      m_io_service;$/;"	m	class:websocketpp::transport::asio::tls_socket::connection
m_is	model/ndn-header.cpp	/^  ns3::Buffer::Iterator& m_is;$/;"	m	class:ns3::ndn::Ns3BufferIteratorSource	file:
m_isChildSelectorRightmost	NFD/tools/ndn-tlv-peek.cpp	/^  bool m_isChildSelectorRightmost;$/;"	m	class:ndntlvpeek::NdnTlvPeek	file:
m_isCompleted	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^    bool m_isCompleted;$/;"	m	class:ndn::util::tests::CanonizeFixture::CanonizeTestCase	file:
m_isConnected	ndn-cxx/src/transport/transport.hpp	/^  bool m_isConnected;$/;"	m	class:ndn::Transport
m_isCritical	ndn-cxx/src/security/certificate-extension.hpp	/^  bool m_isCritical;$/;"	m	class:ndn::CertificateExtension
m_isDaemonMode	NFD/tools/ndn-autoconfig/main.cpp	/^  bool m_isDaemonMode;$/;"	m	class:ndn::tools::NdnAutoconfig	file:
m_isDataReceived	NFD/tools/ndn-tlv-peek.cpp	/^  bool m_isDataReceived;$/;"	m	class:ndntlvpeek::NdnTlvPeek	file:
m_isDataSent	NFD/tools/ndn-tlv-poke.cpp	/^  bool m_isDataSent;$/;"	m	class:ndntlvpoke::NdnTlvPoke	file:
m_isDir	ndn-cxx/src/security/validator-config.hpp	/^    bool m_isDir;$/;"	m	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
m_isExactMatch	ndn-cxx/src/util/regex/regex-component-matcher.hpp	/^  bool m_isExactMatch;$/;"	m	class:ndn::RegexComponentMatcher
m_isExecuting	ndn-cxx/src/util/signal-signal.hpp	/^  bool m_isExecuting;$/;"	m	class:ndn::util::signal::Signal
m_isExempted	ndn-cxx/src/security/sec-rule-specific.hpp	/^  bool m_isExempted;$/;"	m	class:ndn::SecRuleSpecific
m_isExpectingData	ndn-cxx/src/transport/transport.hpp	/^  bool m_isExpectingData;$/;"	m	class:ndn::Transport
m_isFaceManagerDisabled	helper/ndn-stack-helper.hpp	/^  bool m_isFaceManagerDisabled;$/;"	m	class:ns3::ndn::StackHelper
m_isFailed	NFD/daemon/face/face.hpp	/^  bool m_isFailed;$/;"	m	class:nfd::Face
m_isFinalized	ndn-cxx/src/util/digest.hpp	/^  bool m_isFinalized;$/;"	m	class:ndn::util::Digest
m_isFirstUse	NFD/daemon/fw/broadcast-strategy.hpp	/^  bool m_isFirstUse;$/;"	m	class:nfd::fw::BroadcastStrategy
m_isForceDataSet	NFD/tools/ndn-tlv-poke.cpp	/^  bool m_isForceDataSet;$/;"	m	class:ndntlvpoke::NdnTlvPoke	file:
m_isInProcess	ndn-cxx/src/util/digest.hpp	/^  bool m_isInProcess;$/;"	m	class:ndn::util::Digest
m_isInclusion	ndn-cxx/src/util/regex/regex-component-set-matcher.hpp	/^  bool m_isInclusion;$/;"	m	class:ndn::RegexComponentSetMatcher
m_isInitialized	ndn-cxx/tests/unit-tests/network-configuration-detector.cpp	/^bool NetworkConfigurationDetector::m_isInitialized = false;$/;"	m	class:ndn::tests::NetworkConfigurationDetector	file:
m_isInitialized	ndn-cxx/tests/unit-tests/network-configuration-detector.hpp	/^  static bool m_isInitialized;$/;"	m	class:ndn::tests::NetworkConfigurationDetector
m_isLastAsFinalBlockIdSet	NFD/tools/ndn-tlv-poke.cpp	/^  bool m_isLastAsFinalBlockIdSet;$/;"	m	class:ndntlvpoke::NdnTlvPoke	file:
m_isListening	NFD/daemon/face/websocket-channel.hpp	/^  bool m_isListening;$/;"	m	class:nfd::WebSocketChannel
m_isLocal	NFD/daemon/face/face.hpp	/^  const bool m_isLocal;$/;"	m	class:nfd::Face
m_isLocalhopEnabled	NFD/rib/rib-manager.hpp	/^  bool m_isLocalhopEnabled;$/;"	m	class:nfd::rib::RibManager
m_isMultiAccess	NFD/daemon/face/face.hpp	/^  const bool m_isMultiAccess;$/;"	m	class:nfd::Face
m_isOutputEnabled	ndn-cxx/tools/ndncatchunks3.cpp	/^  bool m_isOutputEnabled;  \/\/ set to false by default$/;"	m	class:ndn::Consumer	file:
m_isOutputXml	NFD/tools/nfd-status.cpp	/^  bool m_isOutputXml;$/;"	m	class:ndn::NfdStatus	file:
m_isPayloadOnlySet	NFD/tools/ndn-tlv-peek.cpp	/^  bool m_isPayloadOnlySet;$/;"	m	class:ndntlvpeek::NdnTlvPeek	file:
m_isPositive	ndn-cxx/src/security/sec-rule.hpp	/^  bool m_isPositive;$/;"	m	class:ndn::SecRule
m_isRibManagerDisabled	helper/ndn-stack-helper.hpp	/^  bool m_isRibManagerDisabled;$/;"	m	class:ns3::ndn::StackHelper
m_isRunning	NFD/tests/limited-io.hpp	/^  bool m_isRunning;$/;"	m	class:nfd::tests::LimitedIo
m_isRunning	examples/ndn-simple-with-content-freshness/one-interest-requester.hpp	/^  bool m_isRunning;$/;"	m	class:ns3::OneInterestRequester
m_isRunning	ndn-cxx/src/util/notification-subscriber.hpp	/^  bool m_isRunning;$/;"	m	class:ndn::util::NotificationSubscriber
m_isSecondaryUsed	ndn-cxx/src/util/regex/regex-top-matcher.hpp	/^  bool m_isSecondaryUsed;$/;"	m	class:ndn::RegexTopMatcher
m_isStatusServerDisabled	helper/ndn-stack-helper.hpp	/^  bool m_isStatusServerDisabled;$/;"	m	class:ns3::ndn::StackHelper
m_isStrategyChoiceManagerDisabled	helper/ndn-stack-helper.hpp	/^  bool m_isStrategyChoiceManagerDisabled;$/;"	m	class:ns3::ndn::StackHelper
m_isTopologyInitialized	helper/ndn-scenario-helper.hpp	/^  bool m_isTopologyInitialized;$/;"	m	class:ns3::ndn::ScenarioHelper
m_isUnsolicited	NFD/daemon/table/cs-entry.hpp	/^  bool m_isUnsolicited;$/;"	m	class:nfd::cs::Entry
m_isUp	NFD/tests/daemon/fw/topology-tester.hpp	/^  bool m_isUp;$/;"	m	class:nfd::fw::tests::TopologyLinkBase
m_isUpdateInProgress	NFD/rib/rib.hpp	/^  bool m_isUpdateInProgress;$/;"	m	class:nfd::rib::Rib
m_isUseDigestSha256Set	NFD/tools/ndn-tlv-poke.cpp	/^  bool m_isUseDigestSha256Set;$/;"	m	class:ndntlvpoke::NdnTlvPoke	file:
m_isV6	ndn-cxx/src/util/face-uri.hpp	/^  bool m_isV6;$/;"	m	class:ndn::util::FaceUri
m_isValid	ndn-cxx/src/util/scheduler.cpp	/^  bool m_isValid;$/;"	m	struct:ndn::util::scheduler::EventIdImpl	file:
m_isVerbose	ndn-cxx/tools/ndnputchunks3.cpp	/^  bool m_isVerbose;$/;"	m	class:ndn::Producer	file:
m_is_http	NFD/websocketpp/websocketpp/connection.hpp	/^    bool m_is_http;$/;"	m	class:websocketpp::connection
m_is_secure	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    bool            m_is_secure;$/;"	m	class:websocketpp::transport::debug::connection
m_is_secure	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    bool            m_is_secure;$/;"	m	class:websocketpp::transport::iostream::connection
m_is_secure	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    bool            m_is_secure;$/;"	m	class:websocketpp::transport::iostream::endpoint
m_is_server	NFD/websocketpp/websocketpp/connection.hpp	/^    bool const              m_is_server;$/;"	m	class:websocketpp::connection
m_is_server	NFD/websocketpp/websocketpp/endpoint.hpp	/^    bool const                  m_is_server;$/;"	m	class:websocketpp::endpoint
m_is_server	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    const bool m_is_server;$/;"	m	class:websocketpp::transport::asio::connection
m_is_server	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    bool                m_is_server;$/;"	m	class:websocketpp::transport::asio::tls_socket::connection
m_is_server	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    bool const      m_is_server;$/;"	m	class:websocketpp::transport::debug::connection
m_is_server	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    bool const      m_is_server;$/;"	m	class:websocketpp::transport::iostream::connection
m_istate	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    z_stream m_istate;$/;"	m	class:websocketpp::extensions::permessage_deflate::enabled
m_it	ndn-cxx/src/security/certificate-container.hpp	/^    std::set<Name>::const_iterator m_it;$/;"	m	class:ndn::security::CertificateContainer::const_iterator
m_it	ndn-cxx/src/security/identity-container.hpp	/^    std::set<Name>::const_iterator m_it;$/;"	m	class:ndn::security::IdentityContainer::const_iterator
m_it	ndn-cxx/src/security/key-container.hpp	/^    std::set<name::Component>::const_iterator m_it;$/;"	m	class:ndn::security::KeyContainer::const_iterator
m_it	ndn-cxx/src/util/in-memory-storage.hpp	/^    Cache::index<byFullName>::type::iterator m_it;$/;"	m	class:ndn::util::InMemoryStorage::const_iterator
m_items	NFD/daemon/table/strategy-info-host.hpp	/^  std::map<int, shared_ptr<fw::StrategyInfo>> m_items;$/;"	m	class:nfd::StrategyInfoHost
m_key	ndn-cxx/src/security/certificate.hpp	/^  PublicKey m_key;$/;"	m	class:ndn::Certificate
m_key	ndn-cxx/src/security/key.hpp	/^  PublicKey m_key;$/;"	m	class:ndn::security::Key
m_key	ndn-cxx/src/security/public-key.hpp	/^  Buffer m_key;$/;"	m	class:ndn::PublicKey
m_key	ndn-cxx/src/security/secured-bag.hpp	/^  ConstBufferPtr m_key;$/;"	m	class:ndn::SecuredBag
m_keyChain	NFD/core/notification-stream.hpp	/^  ndn::KeyChain& m_keyChain;$/;"	m	class:nfd::NotificationStream
m_keyChain	NFD/core/segment-publisher.hpp	/^  ndn::KeyChain& m_keyChain;$/;"	m	class:nfd::SegmentPublisher
m_keyChain	NFD/daemon/mgmt/manager-base.hpp	/^  ndn::KeyChain& m_keyChain;$/;"	m	class:nfd::ManagerBase
m_keyChain	NFD/daemon/mgmt/status-server.hpp	/^  ndn::KeyChain& m_keyChain;$/;"	m	class:nfd::StatusServer
m_keyChain	NFD/daemon/nfd.hpp	/^  ndn::KeyChain&                    m_keyChain;$/;"	m	class:nfd::Nfd
m_keyChain	NFD/rib/nrd.hpp	/^  ndn::KeyChain& m_keyChain;$/;"	m	class:nfd::rib::Nrd
m_keyChain	NFD/rib/remote-registrator.hpp	/^  ndn::KeyChain& m_keyChain;$/;"	m	class:nfd::rib::RemoteRegistrator
m_keyChain	NFD/rib/rib-manager.hpp	/^  ndn::KeyChain& m_keyChain;$/;"	m	class:nfd::rib::RibManager
m_keyChain	NFD/tests/core/segment-publisher.t.cpp	/^  ndn::KeyChain m_keyChain;$/;"	m	class:nfd::tests::SegmentPublisherFixture	file:
m_keyChain	NFD/tests/daemon/mgmt/channel-status-publisher.t.cpp	/^  ndn::KeyChain m_keyChain;$/;"	m	class:nfd::tests::ChannelStatusPublisherFixture	file:
m_keyChain	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  ndn::KeyChain m_keyChain;$/;"	m	class:nfd::tests::FaceQueryStatusPublisherFixture
m_keyChain	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^  ndn::KeyChain m_keyChain;$/;"	m	class:nfd::tests::FaceStatusPublisherFixture
m_keyChain	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^  ndn::KeyChain m_keyChain;$/;"	m	class:nfd::tests::FibEnumerationPublisherFixture
m_keyChain	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  ndn::KeyChain m_keyChain;$/;"	m	class:nfd::tests::FibManagerFixture	file:
m_keyChain	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^  ndn::KeyChain m_keyChain;$/;"	m	class:nfd::tests::InternalFaceFixture	file:
m_keyChain	NFD/tests/daemon/mgmt/manager-base.t.cpp	/^  ndn::KeyChain m_keyChain;$/;"	m	class:nfd::tests::ManagerBaseTest	file:
m_keyChain	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  ndn::KeyChain m_keyChain;$/;"	m	class:nfd::tests::StrategyChoiceManagerFixture	file:
m_keyChain	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^  ndn::KeyChain m_keyChain;$/;"	m	class:nfd::tests::StrategyChoicePublisherFixture	file:
m_keyChain	NFD/tests/identity-management-fixture.hpp	/^  ndn::KeyChain m_keyChain;$/;"	m	class:nfd::tests::IdentityManagementFixture
m_keyChain	NFD/tools/ndn-autoconfig/base.hpp	/^  KeyChain& m_keyChain;$/;"	m	class:ndn::tools::autoconfig::Base
m_keyChain	NFD/tools/ndn-autoconfig/main.cpp	/^  KeyChain m_keyChain;$/;"	m	class:ndn::tools::NdnAutoconfig	file:
m_keyChain	NFD/tools/ndn-tlv-poke.cpp	/^  ndn::KeyChain m_keyChain;$/;"	m	class:ndntlvpoke::NdnTlvPoke	file:
m_keyChain	NFD/tools/nfd-autoreg.cpp	/^  KeyChain m_keyChain;$/;"	m	class:ndn::nfd_autoreg::AutoregServer	file:
m_keyChain	NFD/tools/nfdc.hpp	/^  ndn::KeyChain m_keyChain;$/;"	m	class:nfdc::Nfdc
m_keyChain	examples/ndn-cxx-simple/real-app.hpp	/^  ndn::KeyChain& m_keyChain;$/;"	m	class:app::RealApp
m_keyChain	ndn-cxx/examples/producer.cpp	/^  KeyChain m_keyChain;$/;"	m	class:ndn::examples::Producer	file:
m_keyChain	ndn-cxx/src/management/nfd-controller.hpp	/^  KeyChain& m_keyChain;$/;"	m	class:ndn::nfd::Controller
m_keyChain	ndn-cxx/src/mgmt/dispatcher.hpp	/^  security::KeyChain& m_keyChain;$/;"	m	class:ndn::mgmt::Dispatcher
m_keyChain	ndn-cxx/src/util/command-interest-generator.hpp	/^  KeyChain m_keyChain;$/;"	m	class:ndn::CommandInterestGenerator
m_keyChain	ndn-cxx/src/util/notification-stream.hpp	/^  KeyChain& m_keyChain;$/;"	m	class:ndn::util::NotificationStream
m_keyChain	ndn-cxx/tests/identity-management-fixture.hpp	/^  KeyChain m_keyChain;$/;"	m	class:ndn::security::IdentityManagementFixture
m_keyChainRef	ndn-cxx/src/security/sec-tpm-osx.cpp	/^  SecKeychainRef m_keyChainRef;$/;"	m	class:ndn::SecTpmOsx::Impl	file:
m_keyDigest	ndn-cxx/src/key-locator.hpp	/^  Block m_keyDigest;$/;"	m	class:ndn::KeyLocator
m_keyId	ndn-cxx/src/security/key.hpp	/^  name::Component m_keyId;$/;"	m	class:ndn::security::Key
m_keyIds	ndn-cxx/src/security/key-container.hpp	/^  std::set<name::Component> m_keyIds;$/;"	m	class:ndn::security::KeyContainer
m_keyLocator	apps/ndn-producer.hpp	/^  Name m_keyLocator;$/;"	m	class:ns3::ndn::Producer
m_keyLocator	ndn-cxx/src/signature-info.hpp	/^  KeyLocator m_keyLocator;$/;"	m	class:ndn::SignatureInfo
m_keyLocatorChecker	ndn-cxx/src/security/conf/checker.hpp	/^  shared_ptr<KeyLocatorChecker> m_keyLocatorChecker;$/;"	m	class:ndn::security::conf::CustomizedChecker
m_keyName	ndn-cxx/src/security/key.hpp	/^  Name m_keyName;$/;"	m	class:ndn::security::Key
m_keyTimestampTtl	ndn-cxx/src/security/validator-config.hpp	/^  const time::system_clock::Duration& m_keyTimestampTtl;$/;"	m	class:ndn::ValidatorConfig
m_keyType	ndn-cxx/src/security/key-params.hpp	/^  KeyType m_keyType;$/;"	m	class:ndn::KeyParams
m_keychain	ndn-cxx/tools/ndnputchunks3.cpp	/^  KeyChain m_keychain;$/;"	m	class:ndn::Producer	file:
m_keys	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  ndn::KeyChain m_keys;$/;"	m	class:nfd::tests::CommandValidatorTester	file:
m_keys	NFD/tests/daemon/mgmt/validation-common.hpp	/^  ndn::KeyChain m_keys;$/;"	m	class:nfd::tests::CommandIdentityGlobalFixture
m_keys	ndn-cxx/src/security/identity.hpp	/^  mutable KeyContainer m_keys;$/;"	m	class:ndn::security::Identity
m_keys	ndn-cxx/src/security/pib-memory.hpp	/^  std::map<Name, PublicKey> m_keys;$/;"	m	class:ndn::security::PibMemory
m_keystorePath	ndn-cxx/src/security/sec-tpm-file.cpp	/^  boost::filesystem::path m_keystorePath;$/;"	m	class:ndn::SecTpmFile::Impl	file:
m_kind	ndn-cxx/src/management/nfd-face-event-notification.hpp	/^  FaceEventKind m_kind;$/;"	m	class:ndn::nfd::FaceEventNotification
m_lastException	NFD/tests/limited-io.hpp	/^  std::exception m_lastException;$/;"	m	class:nfd::tests::LimitedIo
m_lastFaceId	NFD/daemon/fw/face-table.hpp	/^  FaceId m_lastFaceId;$/;"	m	class:nfd::FaceTable
m_lastIdleCheck	NFD/daemon/face/udp-face.hpp	/^  time::steady_clock::TimePoint m_lastIdleCheck;$/;"	m	class:nfd::UdpFace
m_lastInterestId	ndn-cxx/src/util/notification-subscriber.hpp	/^  const PendingInterestId* m_lastInterestId;$/;"	m	class:ndn::util::NotificationSubscriber
m_lastNonce	NFD/daemon/table/pit-face-record.hpp	/^  uint32_t m_lastNonce;$/;"	m	class:nfd::pit::FaceRecord
m_lastRefresh	ndn-cxx/src/security/validator-config.hpp	/^    time::system_clock::TimePoint m_lastRefresh;$/;"	m	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
m_lastRenewed	NFD/daemon/table/pit-face-record.hpp	/^  time::steady_clock::TimePoint m_lastRenewed;$/;"	m	class:nfd::pit::FaceRecord
m_lastRetransmittedInterestDataDelay	apps/ndn-consumer.hpp	/^    m_lastRetransmittedInterestDataDelay;$/;"	m	class:ns3::ndn::Consumer
m_lastSequenceNo	ndn-cxx/src/util/notification-subscriber.hpp	/^  uint64_t m_lastSequenceNo;$/;"	m	class:ndn::util::NotificationSubscriber
m_lastTimestamp	ndn-cxx/src/security/key-chain.hpp	/^  time::milliseconds m_lastTimestamp;$/;"	m	class:ndn::security::KeyChain
m_lastTimestamp	ndn-cxx/src/security/validator-config.hpp	/^  LastTimestampMap m_lastTimestamp;$/;"	m	class:ndn::ValidatorConfig
m_lastTimestamp	ndn-cxx/src/util/command-interest-generator.hpp	/^  time::milliseconds m_lastTimestamp;$/;"	m	class:ndn::CommandInterestGenerator
m_lastTimestamp	ndn-cxx/src/util/command-interest-validator.hpp	/^  LastTimestampMap m_lastTimestamp;$/;"	m	class:ndn::CommandInterestValidator
m_len	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    size_t          m_len;$/;"	m	class:websocketpp::transport::debug::connection
m_len	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    size_t          m_len;$/;"	m	class:websocketpp::transport::iostream::connection
m_lifetime	NFD/daemon/table/dead-nonce-list.hpp	/^  time::nanoseconds m_lifetime;$/;"	m	class:nfd::DeadNonceList
m_limit	NFD/daemon/table/cs-policy.hpp	/^  size_t m_limit;$/;"	m	class:nfd::cs::Policy
m_limit	ndn-cxx/src/util/in-memory-storage.hpp	/^  size_t m_limit;$/;"	m	class:ndn::util::InMemoryStorage
m_limitedIo	NFD/tests/daemon/face/face-history.hpp	/^  LimitedIo* m_limitedIo;$/;"	m	class:nfd::tests::FaceHistory
m_link	ndn-cxx/src/interest.hpp	/^  mutable Block m_link;$/;"	m	class:ndn::Interest
m_linkType	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  LinkType m_linkType;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_linkType	ndn-cxx/src/management/nfd-face-traits.hpp	/^  LinkType m_linkType;$/;"	m	class:ndn::nfd::FaceTraits
m_listPublisher	NFD/daemon/mgmt/strategy-choice-manager.hpp	/^  StrategyChoicePublisher m_listPublisher;$/;"	m	class:nfd::StrategyChoiceManager
m_listen_backlog	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    int                 m_listen_backlog;$/;"	m	class:websocketpp::transport::asio::endpoint
m_loc	NFD/websocketpp/websocketpp/utilities.hpp	/^    std::locale const & m_loc;$/;"	m	class:websocketpp::utility::my_equal::std
m_localControlFeature	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  LocalControlFeature m_localControlFeature;$/;"	m	class:ndn::nfd::ControlParameters
m_localControlHeader	ndn-cxx/src/data.hpp	/^  nfd::LocalControlHeader m_localControlHeader;$/;"	m	class:ndn::Data
m_localControlHeader	ndn-cxx/src/interest.hpp	/^  nfd::LocalControlHeader m_localControlHeader;$/;"	m	class:ndn::Interest
m_localControlHeaderFeatures	NFD/daemon/face/local-face.hpp	/^  std::vector<bool> m_localControlHeaderFeatures;$/;"	m	class:nfd::LocalFace
m_localEndpoint	NFD/daemon/face/tcp-channel.hpp	/^  tcp::Endpoint m_localEndpoint;$/;"	m	class:nfd::TcpChannel
m_localEndpoint	NFD/daemon/face/udp-channel.hpp	/^  udp::Endpoint m_localEndpoint;$/;"	m	class:nfd::UdpChannel
m_localEndpoint	NFD/daemon/face/websocket-channel.hpp	/^  websocket::Endpoint m_localEndpoint;$/;"	m	class:nfd::WebSocketChannel
m_localPrefixes	model/ndn-global-router.hpp	/^  LocalPrefixList m_localPrefixes;$/;"	m	class:ns3::ndn::GlobalRouter
m_localUri	NFD/daemon/face/face.hpp	/^  const FaceUri m_localUri;$/;"	m	class:nfd::Face
m_localUri	ndn-cxx/src/management/nfd-channel-status.hpp	/^  std::string m_localUri;$/;"	m	class:ndn::nfd::ChannelStatus
m_localUri	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  std::string m_localUri;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_localUri	ndn-cxx/src/management/nfd-face-traits.hpp	/^  std::string m_localUri;$/;"	m	class:ndn::nfd::FaceTraits
m_local_close_code	NFD/websocketpp/websocketpp/connection.hpp	/^    close::status::value    m_local_close_code;$/;"	m	class:websocketpp::connection
m_local_close_reason	NFD/websocketpp/websocketpp/connection.hpp	/^    std::string             m_local_close_reason;$/;"	m	class:websocketpp::connection
m_localhopValidator	NFD/rib/rib-manager.hpp	/^  ndn::ValidatorConfig m_localhopValidator;$/;"	m	class:nfd::rib::RibManager
m_localhostValidator	NFD/rib/rib-manager.hpp	/^  ndn::ValidatorConfig m_localhostValidator;$/;"	m	class:nfd::rib::RibManager
m_location	ndn-cxx/src/security/pib.hpp	/^  std::string m_location;$/;"	m	class:ndn::security::Pib
m_location	ndn-cxx/src/security/sec-public-info.hpp	/^  std::string m_location;$/;"	m	class:ndn::SecPublicInfo
m_location	ndn-cxx/src/security/sec-tpm.hpp	/^  std::string m_location;$/;"	m	class:ndn::SecTpm
m_lock	NFD/websocketpp/examples/telemetry_client/telemetry_client.cpp	/^    websocketpp::lib::mutex m_lock;$/;"	m	class:telemetry_client	file:
m_lock	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    mutex_type m_lock;$/;"	m	class:websocketpp::log::basic
m_lock	NFD/websocketpp/websocketpp/random/random_device.hpp	/^        mutex_type m_lock;$/;"	m	class:websocketpp::random::random_device::int_generator
m_lookups	utils/trie/aggregate-stats-policy.hpp	/^      uint64_t m_lookups;$/;"	m	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
m_managedFib	NFD/daemon/mgmt/fib-manager.hpp	/^  Fib& m_managedFib;$/;"	m	class:nfd::FibManager
m_managedRib	NFD/rib/rib-manager.hpp	/^  Rib m_managedRib;$/;"	m	class:nfd::rib::RibManager
m_manager	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  FaceManager m_manager;$/;"	m	class:nfd::tests::FaceListFixture	file:
m_manager	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  FaceManager m_manager;$/;"	m	class:nfd::tests::FaceManagerFixture	file:
m_manager	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  FaceManager m_manager;$/;"	m	class:nfd::tests::FaceQueryListFixture	file:
m_manager	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  FibManager m_manager;$/;"	m	class:nfd::tests::FibManagerFixture	file:
m_manager	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  StrategyChoiceManager m_manager;$/;"	m	class:nfd::tests::StrategyChoiceManagerFixture	file:
m_manager	NFD/websocketpp/test/message_buffer/alloc.cpp	/^    con_msg_man_weak_ptr                m_manager;$/;"	m	struct:stub	file:
m_manager	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    con_msg_man_weak_ptr        m_manager;$/;"	m	class:websocketpp::message_buffer::message
m_manager	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    con_msg_man_ptr             m_manager;$/;"	m	class:websocketpp::message_buffer::message
m_markEvent	NFD/daemon/table/dead-nonce-list.hpp	/^  scheduler::EventId m_markEvent;$/;"	m	class:nfd::DeadNonceList
m_markInterval	NFD/daemon/table/dead-nonce-list.hpp	/^  time::nanoseconds m_markInterval;$/;"	m	class:nfd::DeadNonceList
m_matchResult	ndn-cxx/src/util/regex/regex-matcher.hpp	/^  std::vector<name::Component> m_matchResult;$/;"	m	class:ndn::RegexMatcher
m_matchedEntries	NFD/tests/daemon/mgmt/channel-status-publisher.t.cpp	/^  std::set<std::string> m_matchedEntries;$/;"	m	class:nfd::tests::ChannelStatusPublisherFixture	file:
m_matchedEntries	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^  std::set<std::string> m_matchedEntries;$/;"	m	class:nfd::tests::StrategyChoicePublisherFixture	file:
m_matchers	ndn-cxx/src/util/regex/regex-matcher.hpp	/^  std::vector<shared_ptr<RegexMatcher> > m_matchers;$/;"	m	class:ndn::RegexMatcher
m_maxAddress	NFD/core/network.hpp	/^  boost::asio::ip::address m_maxAddress;$/;"	m	class:nfd::Network
m_maxCsSize	helper/ndn-stack-helper.hpp	/^  size_t m_maxCsSize;$/;"	m	class:ns3::ndn::StackHelper
m_maxInterval	NFD/daemon/fw/retx-suppression-exponential.hpp	/^  const Duration m_maxInterval;$/;"	m	class:nfd::fw::RetxSuppressionExponential
m_maxMultiplier	NFD/daemon/fw/rtt-estimator.hpp	/^  uint16_t m_maxMultiplier;$/;"	m	class:nfd::RttEstimator
m_maxMultiplier	utils/ndn-rtt-estimator.hpp	/^  uint16_t m_maxMultiplier;$/;"	m	class:ns3::ndn::RttEstimator
m_maxNodeId	utils/topology/rocketfuel-map-reader.hpp	/^  uint32_t m_maxNodeId;$/;"	m	class:ns3::RocketfuelMapReader
m_maxPayload	NFD/daemon/face/ndnlp-slicer.hpp	/^  size_t m_maxPayload;$/;"	m	class:nfd::ndnlp::Slicer
m_maxRto	utils/ndn-rtt-estimator.hpp	/^  Time m_maxRto;              \/\/ maximum value of the timeout$/;"	m	class:ns3::ndn::RttEstimator
m_maxSize	apps/ndn-consumer-window.hpp	/^  double m_maxSize;       \/\/ max size to request$/;"	m	class:ns3::ndn::ConsumerWindow
m_maxSuffixComponents	NFD/tools/ndn-tlv-peek.cpp	/^  int m_maxSuffixComponents;$/;"	m	class:ndntlvpeek::NdnTlvPeek	file:
m_maxSuffixComponents	ndn-cxx/src/selectors.hpp	/^  int m_maxSuffixComponents;$/;"	m	class:ndn::Selectors
m_maxTrackedKeys	ndn-cxx/src/security/validator-config.hpp	/^  size_t m_maxTrackedKeys;$/;"	m	class:ndn::ValidatorConfig
m_max_http_body_size	NFD/websocketpp/websocketpp/endpoint.hpp	/^    size_t                      m_max_http_body_size;$/;"	m	class:websocketpp::endpoint
m_max_message_size	NFD/websocketpp/websocketpp/connection.hpp	/^    size_t                  m_max_message_size;$/;"	m	class:websocketpp::connection
m_max_message_size	NFD/websocketpp/websocketpp/endpoint.hpp	/^    size_t                      m_max_message_size;$/;"	m	class:websocketpp::endpoint
m_max_message_size	NFD/websocketpp/websocketpp/processors/processor.hpp	/^    size_t m_max_message_size;$/;"	m	class:websocketpp::processor::processor
m_measurements	NFD/daemon/fw/forwarder.hpp	/^  Measurements   m_measurements;$/;"	m	class:nfd::Forwarder
m_measurements	NFD/daemon/fw/strategy.hpp	/^  MeasurementsAccessor m_measurements;$/;"	m	class:nfd::fw::Strategy
m_measurements	NFD/daemon/table/measurements-accessor.hpp	/^  Measurements& m_measurements;$/;"	m	class:nfd::MeasurementsAccessor
m_measurements	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^  Measurements& m_measurements;$/;"	m	class:nfd::tests::TablesConfigSectionFixture	file:
m_measurementsEntry	NFD/daemon/table/name-tree-entry.hpp	/^  shared_ptr<measurements::Entry> m_measurementsEntry;$/;"	m	class:nfd::name_tree::Entry
m_message	NFD/tests/core/simple-notification.hpp	/^  std::string m_message;$/;"	m	class:nfd::tests::SimpleNotification
m_message	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    std::chrono::high_resolution_clock::time_point m_message;$/;"	m	class:perftest	file:
m_message	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^    std::string m_message;$/;"	m	class:ndn::util::tests::CanonizeFixture::CanonizeTestCase	file:
m_message	ndn-cxx/tests/unit-tests/util/simple-notification.hpp	/^  std::string m_message;$/;"	m	class:ndn::util::tests::SimpleNotification
m_message_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    message_handler         m_message_handler;$/;"	m	class:websocketpp::connection
m_message_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    message_handler             m_message_handler;$/;"	m	class:websocketpp::endpoint
m_messages	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    std::vector<std::string> m_messages;$/;"	m	class:connection_metadata	file:
m_messages	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    std::vector<std::string> m_messages;$/;"	m	class:connection_metadata	file:
m_metaInfo	ndn-cxx/src/data.hpp	/^  MetaInfo m_metaInfo;$/;"	m	class:ndn::Data
m_method	NFD/websocketpp/websocketpp/http/request.hpp	/^    std::string                     m_method;$/;"	m	class:websocketpp::http::parser::request
m_metric	NFD/daemon/face/face.hpp	/^  uint64_t m_metric;$/;"	m	class:nfd::Face
m_minAddress	NFD/core/network.hpp	/^  boost::asio::ip::address m_minAddress;$/;"	m	class:nfd::Network
m_minNBuckets	NFD/daemon/table/name-tree.hpp	/^  size_t                        m_minNBuckets; \/\/ Minimum number of hash buckets$/;"	m	class:nfd::NameTree
m_minRetxInterval	NFD/daemon/fw/retx-suppression-fixed.hpp	/^  const time::milliseconds m_minRetxInterval;$/;"	m	class:nfd::fw::RetxSuppressionFixed
m_minRto	NFD/daemon/fw/rtt-estimator.hpp	/^  double m_minRto;$/;"	m	class:nfd::RttEstimator
m_minRto	utils/ndn-rtt-estimator.hpp	/^  Time m_minRto;              \/\/ minimum value of the timeout$/;"	m	class:ns3::ndn::RttEstimator
m_minSuffixComponents	NFD/tools/ndn-tlv-peek.cpp	/^  int m_minSuffixComponents;$/;"	m	class:ndntlvpeek::NdnTlvPeek	file:
m_minSuffixComponents	ndn-cxx/src/selectors.hpp	/^  int m_minSuffixComponents;$/;"	m	class:ndn::Selectors
m_missingFired	NFD/tests/core/config-file.t.cpp	/^  bool m_missingFired;$/;"	m	class:nfd::tests::MissingCallbackFixture	file:
m_mobilityFactory	utils/topology/annotated-topology-reader.hpp	/^  ObjectFactory m_mobilityFactory;$/;"	m	class:ns3::AnnotatedTopologyReader
m_module	ndn-cxx/src/management/nfd-control-command.hpp	/^  name::Component m_module;$/;"	m	class:ndn::nfd::ControlCommand
m_msg	NFD/websocketpp/websocketpp/error.hpp	/^    std::string m_msg;$/;"	m	class:websocketpp::exception
m_msg	NFD/websocketpp/websocketpp/http/constants.hpp	/^        std::string         m_msg;$/;"	m	class:websocketpp::http::exception
m_msg_manager	NFD/websocketpp/websocketpp/connection.hpp	/^    con_msg_manager_ptr     m_msg_manager;$/;"	m	class:websocketpp::connection
m_msg_manager	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    msg_manager_ptr m_msg_manager;$/;"	m	class:websocketpp::processor::hybi00
m_msg_manager	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    msg_manager_ptr m_msg_manager;$/;"	m	class:websocketpp::processor::hybi13
m_msg_ptr	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    message_ptr m_msg_ptr;$/;"	m	class:websocketpp::processor::hybi00
m_mtu	NFD/daemon/face/ndnlp-slicer.hpp	/^  size_t m_mtu;$/;"	m	class:nfd::ndnlp::Slicer
m_multicastFaces	NFD/daemon/face/ethernet-factory.hpp	/^  MulticastFaceMap m_multicastFaces;$/;"	m	class:nfd::EthernetFactory
m_multicastFaces	NFD/daemon/face/udp-factory.hpp	/^  MulticastFaceMap m_multicastFaces;$/;"	m	class:nfd::UdpFactory
m_multicastGroup	NFD/daemon/face/multicast-udp-face.hpp	/^  protocol::endpoint m_multicastGroup;$/;"	m	class:nfd::MulticastUdpFace
m_multiplier	NFD/daemon/fw/retx-suppression-exponential.hpp	/^  const float m_multiplier;$/;"	m	class:nfd::fw::RetxSuppressionExponential
m_multiplier	NFD/daemon/fw/rtt-estimator.hpp	/^  uint16_t m_multiplier;$/;"	m	class:nfd::RttEstimator
m_multiplier	utils/ndn-rtt-estimator.hpp	/^  uint16_t m_multiplier;      \/\/ RTO Multiplier$/;"	m	class:ns3::ndn::RttEstimator
m_mustBeFresh	NFD/tools/ndn-tlv-peek.cpp	/^  bool m_mustBeFresh;$/;"	m	class:ndntlvpeek::NdnTlvPeek	file:
m_mustBeFresh	ndn-cxx/src/selectors.hpp	/^  bool m_mustBeFresh;$/;"	m	class:ndn::Selectors
m_mustBeFresh	ndn-cxx/tools/ndncatchunks3.cpp	/^  bool m_mustBeFresh;$/;"	m	class:ndn::Consumer	file:
m_mustFailVerify	ndn-cxx/src/security/validator-regex.hpp	/^  RuleList m_mustFailVerify;$/;"	m	class:ndn::ValidatorRegex
m_mutex	NFD/websocketpp/docs/simple_count_server_thread.cpp	/^    std::mutex m_mutex;$/;"	m	class:count_server	file:
m_mutex	NFD/websocketpp/websocketpp/endpoint.hpp	/^    mutable mutex_type          m_mutex;$/;"	m	class:websocketpp::endpoint
m_nASections	NFD/tests/core/config-file.t.cpp	/^  int m_nASections;$/;"	m	class:nfd::tests::DummySubscriber	file:
m_nBSections	NFD/tests/core/config-file.t.cpp	/^  int m_nBSections;$/;"	m	class:nfd::tests::DummySubscriber	file:
m_nBuckets	NFD/daemon/table/name-tree.hpp	/^  size_t                        m_nBuckets; \/\/ Number of hash buckets$/;"	m	class:nfd::NameTree
m_nCsEntries	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  size_t m_nCsEntries;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nDropped	NFD/daemon/face/ethernet-face.hpp	/^  unsigned int m_nDropped;$/;"	m	class:nfd::EthernetFace
m_nFailures	ndn-cxx/tests/unit-tests/util/dns.t.cpp	/^  uint32_t m_nFailures;$/;"	m	class:ndn::util::tests::DnsFixture	file:
m_nFibEntries	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  size_t m_nFibEntries;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nInBytes	NFD/daemon/face/face-counters.hpp	/^  ByteCounter m_nInBytes;$/;"	m	class:nfd::LinkLayerCounters
m_nInBytes	ndn-cxx/src/management/nfd-face-status.hpp	/^  uint64_t m_nInBytes;$/;"	m	class:ndn::nfd::FaceStatus
m_nInDatas	NFD/daemon/face/face-counters.hpp	/^  PacketCounter m_nInDatas;$/;"	m	class:nfd::NetworkLayerCounters
m_nInDatas	ndn-cxx/src/management/nfd-face-status.hpp	/^  uint64_t m_nInDatas;$/;"	m	class:ndn::nfd::FaceStatus
m_nInDatas	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  uint64_t m_nInDatas;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nInInterests	NFD/daemon/face/face-counters.hpp	/^  PacketCounter m_nInInterests;$/;"	m	class:nfd::NetworkLayerCounters
m_nInInterests	ndn-cxx/src/management/nfd-face-status.hpp	/^  uint64_t m_nInInterests;$/;"	m	class:ndn::nfd::FaceStatus
m_nInInterests	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  uint64_t m_nInInterests;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nItems	NFD/daemon/table/fib.hpp	/^  size_t m_nItems;$/;"	m	class:nfd::Fib
m_nItems	NFD/daemon/table/measurements.hpp	/^  size_t m_nItems;$/;"	m	class:nfd::Measurements
m_nItems	NFD/daemon/table/name-tree.hpp	/^  size_t                        m_nItems;  \/\/ Number of items being stored$/;"	m	class:nfd::NameTree
m_nItems	NFD/daemon/table/pit.hpp	/^  size_t m_nItems;$/;"	m	class:nfd::Pit
m_nItems	NFD/daemon/table/strategy-choice.hpp	/^  size_t m_nItems;$/;"	m	class:nfd::StrategyChoice
m_nItems	NFD/rib/rib.hpp	/^  size_t m_nItems;$/;"	m	class:nfd::rib::Rib
m_nMeasurementsEntries	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  size_t m_nMeasurementsEntries;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nNameTreeEntries	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  size_t m_nNameTreeEntries;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nOpsRemaining	NFD/tests/limited-io.hpp	/^  int m_nOpsRemaining;$/;"	m	class:nfd::tests::LimitedIo
m_nOptions	NFD/tools/nfdc.hpp	/^  int m_nOptions;$/;"	m	class:nfdc::Nfdc
m_nOutBytes	NFD/daemon/face/face-counters.hpp	/^  ByteCounter m_nOutBytes;$/;"	m	class:nfd::LinkLayerCounters
m_nOutBytes	ndn-cxx/src/management/nfd-face-status.hpp	/^  uint64_t m_nOutBytes;$/;"	m	class:ndn::nfd::FaceStatus
m_nOutDatas	NFD/daemon/face/face-counters.hpp	/^  PacketCounter m_nOutDatas;$/;"	m	class:nfd::NetworkLayerCounters
m_nOutDatas	ndn-cxx/src/management/nfd-face-status.hpp	/^  uint64_t m_nOutDatas;$/;"	m	class:ndn::nfd::FaceStatus
m_nOutDatas	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  uint64_t m_nOutDatas;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nOutInterests	NFD/daemon/face/face-counters.hpp	/^  PacketCounter m_nOutInterests;$/;"	m	class:nfd::NetworkLayerCounters
m_nOutInterests	ndn-cxx/src/management/nfd-face-status.hpp	/^  uint64_t m_nOutInterests;$/;"	m	class:ndn::nfd::FaceStatus
m_nOutInterests	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  uint64_t m_nOutInterests;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nPackets	ndn-cxx/src/util/in-memory-storage.hpp	/^  size_t m_nPackets;$/;"	m	class:ndn::util::InMemoryStorage
m_nPending	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^  ssize_t m_nPending;$/;"	m	class:ndn::util::tests::CanonizeFixture	file:
m_nPitEntries	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  size_t m_nPitEntries;$/;"	m	class:ndn::nfd::ForwarderStatus
m_nRemainingACallbacks	NFD/tests/core/config-file.t.cpp	/^  int m_nRemainingACallbacks;$/;"	m	class:nfd::tests::DummySubscriber	file:
m_nRemainingBCallbacks	NFD/tests/core/config-file.t.cpp	/^  int m_nRemainingBCallbacks;$/;"	m	class:nfd::tests::DummySubscriber	file:
m_nRetries	NFD/rib/remote-registrator.hpp	/^  int m_nRetries;$/;"	m	class:nfd::rib::RemoteRegistrator
m_nRetries	ndn-cxx/src/security/validation-request.hpp	/^  int m_nRetries;$/;"	m	class:ndn::ValidationRequest
m_nRoutesWithCaptureSet	NFD/rib/rib-entry.hpp	/^  uint64_t m_nRoutesWithCaptureSet;$/;"	m	class:nfd::rib::RibEntry
m_nSamples	NFD/daemon/fw/rtt-estimator.hpp	/^  uint32_t m_nSamples;$/;"	m	class:nfd::RttEstimator
m_nSamples	utils/ndn-rtt-estimator.hpp	/^  uint32_t m_nSamples;        \/\/ Number of samples$/;"	m	class:ns3::ndn::RttEstimator
m_nSteps	ndn-cxx/src/security/validation-request.hpp	/^  int m_nSteps;$/;"	m	class:ndn::ValidationRequest
m_nSuccesses	ndn-cxx/tests/unit-tests/util/dns.t.cpp	/^  uint32_t m_nSuccesses;$/;"	m	class:ndn::util::tests::DnsFixture	file:
m_nTotalSegments	ndn-cxx/tools/ndncatchunks3.cpp	/^  size_t m_nTotalSegments;$/;"	m	class:ndn::Consumer	file:
m_name	NFD/daemon/fw/strategy.hpp	/^  Name m_name;$/;"	m	class:nfd::fw::Strategy
m_name	NFD/daemon/table/measurements-entry.hpp	/^  Name m_name;$/;"	m	class:nfd::measurements::Entry
m_name	NFD/rib/rib-entry.hpp	/^  Name m_name;$/;"	m	class:nfd::rib::RibEntry
m_name	NFD/rib/rib-update.hpp	/^  Name m_name;$/;"	m	class:nfd::rib::RibUpdate
m_name	NFD/tools/nfdc.hpp	/^  std::string m_name;$/;"	m	class:nfdc::Nfdc
m_name	examples/ndn-simple-with-content-freshness/one-interest-requester.hpp	/^  ndn::Name m_name;$/;"	m	class:ns3::OneInterestRequester
m_name	ndn-cxx/src/data.hpp	/^  Name m_name;$/;"	m	class:ndn::Data
m_name	ndn-cxx/src/interest.hpp	/^  Name m_name;$/;"	m	class:ndn::Interest
m_name	ndn-cxx/src/key-locator.hpp	/^  Name m_name;$/;"	m	class:ndn::KeyLocator
m_name	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  Name                m_name;$/;"	m	class:ndn::nfd::ControlParameters
m_name	ndn-cxx/src/management/nfd-strategy-choice.hpp	/^  Name m_name; \/\/ namespace$/;"	m	class:ndn::nfd::StrategyChoice
m_name	ndn-cxx/src/security/conf/filter.hpp	/^  Name m_name;$/;"	m	class:ndn::security::conf::RelationNameFilter
m_name	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  Name m_name;$/;"	m	class:ndn::security::conf::RelationKeyLocatorNameChecker
m_name	ndn-cxx/src/security/identity.hpp	/^  Name m_name;$/;"	m	class:ndn::security::Identity
m_name	ndn-cxx/src/security/signing-info.hpp	/^  Name m_name;$/;"	m	class:ndn::security::SigningInfo
m_name	ndn-cxx/tools/ndnputchunks3.cpp	/^  Name m_name;$/;"	m	class:ndn::Producer	file:
m_name	utils/trie/multi-policy.hpp	/^    std::string& m_name;$/;"	m	struct:ns3::ndn::ndnSIM::multi_policy_traits::name_getter
m_nameBlock	ndn-cxx/src/name.hpp	/^  mutable Block m_nameBlock;$/;"	m	class:ndn::Name
m_nameTree	NFD/daemon/fw/forwarder.hpp	/^  NameTree       m_nameTree;$/;"	m	class:nfd::Forwarder
m_nameTree	NFD/daemon/table/fib.hpp	/^  NameTree& m_nameTree;$/;"	m	class:nfd::Fib
m_nameTree	NFD/daemon/table/measurements.hpp	/^  NameTree& m_nameTree;$/;"	m	class:nfd::Measurements
m_nameTree	NFD/daemon/table/name-tree.hpp	/^    const NameTree*                             m_nameTree;$/;"	m	class:nfd::NameTree::const_iterator
m_nameTree	NFD/daemon/table/pit.hpp	/^  NameTree& m_nameTree;$/;"	m	class:nfd::Pit
m_nameTree	NFD/daemon/table/strategy-choice.hpp	/^  NameTree& m_nameTree;$/;"	m	class:nfd::StrategyChoice
m_nameTree	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^  NameTree m_nameTree;$/;"	m	class:nfd::tests::FibEnumerationPublisherFixture
m_nameTreeEntry	NFD/daemon/table/fib-entry.hpp	/^  shared_ptr<name_tree::Entry> m_nameTreeEntry;$/;"	m	class:nfd::fib::Entry
m_nameTreeEntry	NFD/daemon/table/measurements-entry.hpp	/^  shared_ptr<name_tree::Entry> m_nameTreeEntry;$/;"	m	class:nfd::measurements::Entry
m_nameTreeEntry	NFD/daemon/table/pit-entry.hpp	/^  shared_ptr<name_tree::Entry> m_nameTreeEntry;$/;"	m	class:nfd::pit::Entry
m_nameTreeEntry	NFD/daemon/table/strategy-choice-entry.hpp	/^  shared_ptr<name_tree::Entry> m_nameTreeEntry;$/;"	m	class:nfd::strategy_choice::Entry
m_nameTreeIterator	NFD/daemon/table/fib.hpp	/^    NameTree::const_iterator m_nameTreeIterator;$/;"	m	class:nfd::Fib::const_iterator
m_nameTreeIterator	NFD/daemon/table/pit.hpp	/^    NameTree::const_iterator m_nameTreeIterator;$/;"	m	class:nfd::Pit::const_iterator
m_nameTreeIterator	NFD/daemon/table/strategy-choice.hpp	/^    NameTree::const_iterator m_nameTreeIterator;$/;"	m	class:nfd::StrategyChoice::const_iterator
m_nameTree_sit	NFD/daemon/fw/forwarder.hpp	/^  NameTree       m_nameTree_sit; \/\/nameTree for the SIT table$/;"	m	class:nfd::Forwarder
m_names	NFD/tests/daemon/table/name-tree.t.cpp	/^  std::unordered_set<Name> m_names;$/;"	m	class:nfd::tests::EnumerationVerifier	file:
m_ndn	model/ndn-global-router.hpp	/^  Ptr<L3Protocol> m_ndn;$/;"	m	class:ns3::ndn::GlobalRouter
m_ndnFactory	helper/ndn-stack-helper.hpp	/^  ObjectFactory m_ndnFactory;$/;"	m	class:ns3::ndn::StackHelper
m_needChannelStatusRetrieval	NFD/tools/nfd-status.cpp	/^  bool m_needChannelStatusRetrieval;$/;"	m	class:ndn::NfdStatus	file:
m_needFaceStatusRetrieval	NFD/tools/nfd-status.cpp	/^  bool m_needFaceStatusRetrieval;$/;"	m	class:ndn::NfdStatus	file:
m_needFibEnumerationRetrieval	NFD/tools/nfd-status.cpp	/^  bool m_needFibEnumerationRetrieval;$/;"	m	class:ndn::NfdStatus	file:
m_needRefreshCerts	ndn-cxx/src/security/key.hpp	/^  mutable bool m_needRefreshCerts;$/;"	m	class:ndn::security::Key
m_needRefreshIdentities	ndn-cxx/src/security/pib.hpp	/^  mutable bool m_needRefreshIdentities;$/;"	m	class:ndn::security::Pib
m_needRefreshKeys	ndn-cxx/src/security/identity.hpp	/^  mutable bool m_needRefreshKeys;$/;"	m	class:ndn::security::Identity
m_needRibStatusRetrieval	NFD/tools/nfd-status.cpp	/^  bool m_needRibStatusRetrieval;$/;"	m	class:ndn::NfdStatus	file:
m_needSetDefaultRoutes	helper/ndn-stack-helper.hpp	/^  bool m_needSetDefaultRoutes;$/;"	m	class:ns3::ndn::StackHelper
m_needStrategyChoiceRetrieval	NFD/tools/nfd-status.cpp	/^  bool m_needStrategyChoiceRetrieval;$/;"	m	class:ndn::NfdStatus	file:
m_needVersionRetrieval	NFD/tools/nfd-status.cpp	/^  bool m_needVersionRetrieval;$/;"	m	class:ndn::NfdStatus	file:
m_netDevice	model/ndn-net-device-face.hpp	/^  Ptr<NetDevice> m_netDevice; \/\/\/< \\brief Smart pointer to NetDevice$/;"	m	class:ns3::ndn::NetDeviceFace
m_netDeviceCallbacks	helper/ndn-stack-helper.hpp	/^  NetDeviceCallbackList m_netDeviceCallbacks;$/;"	m	class:ns3::ndn::StackHelper
m_networkMonitor	NFD/daemon/nfd.hpp	/^  ndn::util::NetworkMonitor         m_networkMonitor;$/;"	m	class:nfd::Nfd
m_networkMonitor	NFD/tools/ndn-autoconfig/main.cpp	/^  unique_ptr<util::NetworkMonitor> m_networkMonitor;$/;"	m	class:ndn::tools::NdnAutoconfig	file:
m_newIdentity	ndn-cxx/tests/unit-tests/security/identity-fixture.cpp	/^  Name m_newIdentity;$/;"	m	class:ndn::security::IdentityFixture	file:
m_next	NFD/daemon/face/ndnlp-sequence-generator.hpp	/^  uint64_t m_next;$/;"	m	class:nfd::ndnlp::SequenceGenerator
m_next	NFD/daemon/table/name-tree-entry.hpp	/^  Node* m_next; \/\/ Next Name Tree Node (to resolve hash collision)$/;"	m	class:nfd::name_tree::Node
m_next	utils/ndn-rtt-estimator.hpp	/^  SequenceNumber32 m_next; \/\/ Next expected sequence to be sent$/;"	m	class:ns3::ndn::RttEstimator
m_nextHopFaceId	ndn-cxx/src/management/nfd-local-control-header.hpp	/^  uint64_t m_nextHopFaceId;$/;"	m	class:ndn::nfd::LocalControlHeader
m_nextHopRecords	ndn-cxx/src/management/nfd-fib-entry.hpp	/^  std::list<NextHopRecord> m_nextHopRecords;$/;"	m	class:ndn::nfd::FibEntry
m_nextHops	NFD/daemon/table/fib-entry.hpp	/^  NextHopList m_nextHops;$/;"	m	class:nfd::fib::Entry
m_nextSegment	ndn-cxx/tools/ndncatchunks3.cpp	/^  size_t m_nextSegment;$/;"	m	class:ndn::Consumer	file:
m_nextStageOnFailure	NFD/tools/ndn-autoconfig/base.hpp	/^  NextStageCallback m_nextStageOnFailure;$/;"	m	class:ndn::tools::autoconfig::Base
m_next_id	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    int m_next_id;$/;"	m	class:websocket_endpoint	file:
m_next_id	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    int m_next_id;$/;"	m	class:websocket_endpoint	file:
m_next_id	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    int m_next_id;$/;"	m	class:websocket_endpoint	file:
m_next_id	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    int m_next_id;$/;"	m	class:websocket_endpoint	file:
m_next_sessionid	NFD/websocketpp/examples/associative_storage/associative_storage.cpp	/^    int m_next_sessionid;$/;"	m	class:print_server	file:
m_next_sessionid	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    int m_next_sessionid;$/;"	m	class:print_server	file:
m_nfd	NFD/daemon/main.cpp	/^  Nfd                     m_nfd;$/;"	m	class:nfd::NfdRunner	file:
m_nfdController	NFD/rib/remote-registrator.hpp	/^  ndn::nfd::Controller& m_nfdController;$/;"	m	class:nfd::rib::RemoteRegistrator
m_nfdController	NFD/rib/rib-manager.hpp	/^  ndn::nfd::Controller m_nfdController;$/;"	m	class:nfd::rib::RibManager
m_nfdController	ndn-cxx/src/face.hpp	/^  unique_ptr<nfd::Controller> m_nfdController;$/;"	m	class:ndn::Face
m_nfdFace	ndn-cxx/src/detail/face-impl.hpp	/^  shared_ptr<NfdFace> m_nfdFace;$/;"	m	class:ndn::Face::Impl
m_nfdKeyChain	NFD/daemon/main.cpp	/^  ndn::KeyChain           m_nfdKeyChain;$/;"	m	class:nfd::NfdRunner	file:
m_nfdVersion	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  std::string m_nfdVersion;$/;"	m	class:ndn::nfd::ForwarderStatus
m_noOnInterestFired	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^  bool m_noOnInterestFired;$/;"	m	class:nfd::tests::InternalFaceFixture	file:
m_node	NFD/daemon/table/name-tree-entry.hpp	/^  Node* m_node;$/;"	m	class:nfd::name_tree::Entry
m_node	model/ndn-app-face.hpp	/^  Ptr<Node> m_node;$/;"	m	class:ns3::ndn::AppFace
m_node	model/ndn-l3-protocol.hpp	/^  Ptr<Node> m_node; \/\/\/< \\brief node on which ndn stack is installed$/;"	m	class:ns3::ndn::L3Protocol
m_node	model/ndn-net-device-face.hpp	/^  Ptr<Node> m_node;$/;"	m	class:ns3::ndn::NetDeviceFace
m_node	utils/tracers/l2-tracer.hpp	/^  std::string m_node;$/;"	m	class:ns3::L2Tracer
m_node	utils/tracers/ndn-app-delay-tracer.hpp	/^  std::string m_node;$/;"	m	class:ns3::ndn::AppDelayTracer
m_node	utils/tracers/ndn-cs-tracer.hpp	/^  std::string m_node;$/;"	m	class:ns3::ndn::CsTracer
m_node	utils/tracers/ndn-l3-tracer.hpp	/^  std::string m_node;$/;"	m	class:ns3::ndn::L3Tracer
m_nodePtr	utils/tracers/l2-tracer.hpp	/^  Ptr<Node> m_nodePtr;$/;"	m	class:ns3::L2Tracer
m_nodePtr	utils/tracers/ndn-app-delay-tracer.hpp	/^  Ptr<Node> m_nodePtr;$/;"	m	class:ns3::ndn::AppDelayTracer
m_nodePtr	utils/tracers/ndn-cs-tracer.hpp	/^  Ptr<Node> m_nodePtr;$/;"	m	class:ns3::ndn::CsTracer
m_nodePtr	utils/tracers/ndn-l3-tracer.hpp	/^  Ptr<Node> m_nodePtr;$/;"	m	class:ns3::ndn::L3Tracer
m_nodes	utils/topology/annotated-topology-reader.hpp	/^  NodeContainer m_nodes;$/;"	m	class:ns3::AnnotatedTopologyReader
m_nonce	ndn-cxx/src/interest.hpp	/^  mutable Block m_nonce;$/;"	m	class:ndn::Interest
m_notAfter	ndn-cxx/src/security/certificate.hpp	/^  time::system_clock::TimePoint m_notAfter;$/;"	m	class:ndn::Certificate
m_notAfter	ndn-cxx/src/security/validity-period.hpp	/^  TimePoint m_notAfter;$/;"	m	class:ndn::security::ValidityPeriod
m_notBefore	ndn-cxx/src/security/certificate.hpp	/^  time::system_clock::TimePoint m_notBefore;$/;"	m	class:ndn::Certificate
m_notBefore	ndn-cxx/src/security/validity-period.hpp	/^  TimePoint m_notBefore;$/;"	m	class:ndn::security::ValidityPeriod
m_notificationStream	NFD/daemon/mgmt/face-manager.hpp	/^  NotificationStream<AppFace> m_notificationStream;$/;"	m	class:nfd::FaceManager
m_offTime	apps/ndn-consumer.hpp	/^  Time m_offTime;          \/\/\/< \\brief Time interval between packets$/;"	m	class:ns3::ndn::Consumer
m_oid	ndn-cxx/src/encoding/oid.hpp	/^  std::vector<int> m_oid;$/;"	m	class:ndn::OID
m_oid	ndn-cxx/src/security/certificate-subject-description.hpp	/^  OID m_oid;$/;"	m	class:ndn::CertificateSubjectDescription
m_oldContentStore	tests/other/ndn-test.cpp	/^  std::string m_oldContentStore;$/;"	m	class:ns3::Tester	file:
m_oldDefaultIdentity	ndn-cxx/tests/unit-tests/security/identity-fixture.cpp	/^  Name m_oldDefaultIdentity;$/;"	m	class:ndn::security::IdentityFixture	file:
m_onData	ndn-cxx/src/detail/pending-interest.hpp	/^  const OnData m_onData;$/;"	m	class:ndn::PendingInterest
m_onDataUnsolicited_count	NFD/tests/daemon/fw/forwarder.t.cpp	/^  int m_onDataUnsolicited_count;$/;"	m	class:nfd::tests::ScopeLocalhostIncomingTestForwarder	file:
m_onDataValidated	ndn-cxx/src/security/validation-request.hpp	/^  OnDataValidated m_onDataValidated;$/;"	m	class:ndn::ValidationRequest
m_onDataValidationFailed	ndn-cxx/src/security/validation-request.hpp	/^  OnDataValidationFailed m_onDataValidationFailed;$/;"	m	class:ndn::ValidationRequest
m_onError	ndn-cxx/src/util/dns.cpp	/^  ErrorCallback m_onError;$/;"	m	class:ndn::dns::Resolver	file:
m_onFaceCreatedCallback	NFD/daemon/face/websocket-channel.hpp	/^  FaceCreatedCallback m_onFaceCreatedCallback;$/;"	m	class:nfd::WebSocketChannel
m_onFail	NFD/tools/nfdc.hpp	/^    FailureCallback m_onFail;$/;"	m	class:nfdc::Nfdc::FaceIdFetcher
m_onInterestFired	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^  bool m_onInterestFired;$/;"	m	class:nfd::tests::InternalFaceFixture	file:
m_onSendBatchFromQueue	NFD/rib/rib.hpp	/^  function<void(RibUpdateBatch)> m_onSendBatchFromQueue;$/;"	m	class:nfd::rib::Rib
m_onSucceed	NFD/tools/nfdc.hpp	/^    SuccessCallback m_onSucceed;$/;"	m	class:nfdc::Nfdc::FaceIdFetcher
m_onSuccess	ndn-cxx/src/util/dns.cpp	/^  SuccessCallback m_onSuccess;$/;"	m	class:ndn::dns::Resolver	file:
m_onTimeout	ndn-cxx/src/detail/pending-interest.hpp	/^  const OnTimeout m_onTimeout;$/;"	m	class:ndn::PendingInterest
m_op	ndn-cxx/src/security/sec-rule-relative.hpp	/^  const std::string m_op;$/;"	m	class:ndn::SecRuleRelative
m_opcode	NFD/websocketpp/test/message_buffer/alloc.cpp	/^    websocketpp::frame::opcode::value   m_opcode;$/;"	m	struct:stub	file:
m_opcode	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    frame::opcode::value        m_opcode;$/;"	m	class:websocketpp::message_buffer::message
m_opcode	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    frame::opcode::value        m_opcode;$/;"	m	class:websocketpp::message_buffer::message
m_open	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    std::chrono::high_resolution_clock::time_point m_open;$/;"	m	class:perftest	file:
m_open	NFD/websocketpp/examples/telemetry_client/telemetry_client.cpp	/^    bool m_open;$/;"	m	class:telemetry_client	file:
m_open_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    open_handler            m_open_handler;$/;"	m	class:websocketpp::connection
m_open_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    open_handler                m_open_handler;$/;"	m	class:websocketpp::endpoint
m_open_handshake_timeout_dur	NFD/websocketpp/websocketpp/connection.hpp	/^    long                    m_open_handshake_timeout_dur;$/;"	m	class:websocketpp::connection
m_open_handshake_timeout_dur	NFD/websocketpp/websocketpp/endpoint.hpp	/^    long                        m_open_handshake_timeout_dur;$/;"	m	class:websocketpp::endpoint
m_optional	ndn-cxx/src/management/nfd-control-command.hpp	/^    std::vector<bool> m_optional;$/;"	m	class:ndn::nfd::ControlCommand::FieldValidator
m_options	ndn-cxx/src/detail/registered-prefix.hpp	/^  nfd::CommandOptions m_options;$/;"	m	class:ndn::RegisteredPrefix
m_origin	NFD/tools/nfdc.hpp	/^  uint64_t m_origin;$/;"	m	class:nfdc::Nfdc
m_origin	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  uint64_t            m_origin;$/;"	m	class:ndn::nfd::ControlParameters
m_origin	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  uint64_t m_origin;$/;"	m	class:ndn::nfd::Route
m_os	utils/tracers/l2-rate-tracer.hpp	/^  std::shared_ptr<std::ostream> m_os;$/;"	m	class:ns3::L2RateTracer
m_os	utils/tracers/ndn-app-delay-tracer.hpp	/^  shared_ptr<std::ostream> m_os;$/;"	m	class:ns3::ndn::AppDelayTracer
m_os	utils/tracers/ndn-cs-tracer.hpp	/^  shared_ptr<std::ostream> m_os;$/;"	m	class:ns3::ndn::CsTracer
m_os	utils/tracers/ndn-l3-rate-tracer.hpp	/^  shared_ptr<std::ostream> m_os;$/;"	m	class:ns3::ndn::L3RateTracer
m_otherTlvs	ndn-cxx/src/signature-info.hpp	/^  std::list<Block> m_otherTlvs;$/;"	m	class:ndn::SignatureInfo
m_out	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    std::ostream * m_out;$/;"	m	class:websocketpp::log::basic
m_out	utils/tracers/l2-tracer.hpp	/^    uint64_t m_out;$/;"	m	struct:ns3::L2Tracer::Stats
m_outData	model/ndn-l3-protocol.hpp	/^  TracedCallback<const Data&, const Face&> m_outData; \/\/\/< @brief trace of outgoing Data$/;"	m	class:ns3::ndn::L3Protocol
m_outData	utils/tracers/ndn-l3-tracer.hpp	/^    double m_outData;$/;"	m	struct:ns3::ndn::L3Tracer::Stats
m_outInterests	model/ndn-l3-protocol.hpp	/^    m_outInterests; \/\/\/< @brief Transmitted interests trace$/;"	m	class:ns3::ndn::L3Protocol
m_outInterests	utils/tracers/ndn-l3-tracer.hpp	/^    double m_outInterests;$/;"	m	struct:ns3::ndn::L3Tracer::Stats
m_outRecords	NFD/daemon/table/pit-entry.hpp	/^  OutRecordCollection m_outRecords;$/;"	m	class:nfd::pit::Entry
m_outSatisfiedInterests	utils/tracers/ndn-l3-tracer.hpp	/^    double m_outSatisfiedInterests;$/;"	m	struct:ns3::ndn::L3Tracer::Stats
m_outTimedOutInterests	utils/tracers/ndn-l3-tracer.hpp	/^    double m_outTimedOutInterests;$/;"	m	struct:ns3::ndn::L3Tracer::Stats
m_output	ndn-cxx/src/util/indented-stream.hpp	/^    std::ostream& m_output;$/;"	m	class:ndn::util::IndentedStream::StreamBuf
m_output_stream	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    std::ostream *  m_output_stream;$/;"	m	class:websocketpp::transport::iostream::connection
m_output_stream	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    std::ostream *  m_output_stream;$/;"	m	class:websocketpp::transport::iostream::endpoint
m_packet	model/ndn-header.hpp	/^  shared_ptr<const Pkt> m_packet;$/;"	m	class:ns3::ndn::PacketHeader
m_packet	utils/ndn-ns3-packet-tag.hpp	/^  Ptr<const Packet> m_packet;$/;"	m	class:ns3::ndn::Ns3PacketTag
m_parent	NFD/daemon/table/name-tree-entry.hpp	/^  shared_ptr<Entry> m_parent;     \/\/ Pointing to the parent entry.$/;"	m	class:nfd::name_tree::Entry
m_parent	NFD/rib/rib-entry.hpp	/^  shared_ptr<RibEntry> m_parent;$/;"	m	class:nfd::rib::RibEntry
m_partialMessages	NFD/daemon/face/ndnlp-partial-message-store.hpp	/^  std::unordered_map<uint64_t, PartialMessage> m_partialMessages;$/;"	m	class:nfd::ndnlp::PartialMessageStore
m_password	ndn-cxx/src/security/sec-tpm-osx.cpp	/^  string m_password;$/;"	m	class:ndn::SecTpmOsx::Impl	file:
m_passwordSet	ndn-cxx/src/security/sec-tpm-osx.cpp	/^  bool m_passwordSet;$/;"	m	class:ndn::SecTpmOsx::Impl	file:
m_path	ndn-cxx/src/security/validator-config.hpp	/^    boost::filesystem::path m_path;$/;"	m	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
m_path	ndn-cxx/src/util/config-file.hpp	/^  boost::filesystem::path m_path; \/\/ absolute path to active configuration file (if any)$/;"	m	class:ndn::ConfigFile
m_path	ndn-cxx/src/util/face-uri.hpp	/^  std::string m_path;$/;"	m	class:ndn::util::FaceUri
m_path	ndn-cxx/tests/unit-tests/security/pib-sqlite3.t.cpp	/^  boost::filesystem::path m_path;$/;"	m	class:ndn::security::tests::PibSqlite3TestFixture	file:
m_path	ndn-cxx/tests/unit-tests/util/sqlite3-statement.t.cpp	/^  boost::filesystem::path m_path;$/;"	m	class:ndn::util::tests::Sqlite3StatementTestFixture	file:
m_path	utils/topology/annotated-topology-reader.hpp	/^  std::string m_path;$/;"	m	class:ns3::AnnotatedTopologyReader
m_payload	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    std::string                 m_payload;$/;"	m	class:websocketpp::message_buffer::message
m_payload	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    std::string                 m_payload;$/;"	m	class:websocketpp::message_buffer::message
m_payloadSize	apps/ndn-consumer-window.hpp	/^  uint32_t m_payloadSize; \/\/ expected payload size$/;"	m	class:ns3::ndn::ConsumerWindow
m_payloads	NFD/daemon/face/ndnlp-partial-message-store.hpp	/^  std::vector<Block> m_payloads;$/;"	m	class:nfd::ndnlp::PartialMessage
m_pcap	NFD/daemon/face/ethernet-face.hpp	/^  unique_ptr<pcap_t, void(*)(pcap_t*)> m_pcap;$/;"	m	class:nfd::EthernetFace
m_pcap	examples/ndn-simple-with-pcap.cpp	/^  Ptr<PcapFileWrapper> m_pcap;$/;"	m	class:ns3::PcapWriter	file:
m_pendingInterestTable	ndn-cxx/src/detail/face-impl.hpp	/^  PendingInterestTable m_pendingInterestTable;$/;"	m	class:ndn::Face::Impl
m_period	utils/tracers/l2-rate-tracer.hpp	/^  Time m_period;$/;"	m	class:ns3::L2RateTracer
m_period	utils/tracers/ndn-cs-tracer.hpp	/^  Time m_period;$/;"	m	class:ns3::ndn::CsTracer
m_period	utils/tracers/ndn-l3-rate-tracer.hpp	/^  Time m_period;$/;"	m	class:ns3::ndn::L3RateTracer
m_permessage_deflate	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    permessage_deflate_type m_permessage_deflate;$/;"	m	class:websocketpp::processor::hybi13
m_persistency	NFD/daemon/face/face.hpp	/^  ndn::nfd::FacePersistency m_persistency;$/;"	m	class:nfd::Face
m_pib	ndn-cxx/src/security/key-chain.hpp	/^  std::unique_ptr<SecPublicInfo> m_pib;$/;"	m	class:ndn::security::KeyChain
m_pingEventId	NFD/daemon/face/websocket-face.hpp	/^  scheduler::EventId m_pingEventId;$/;"	m	class:nfd::WebSocketFace
m_pingInterval	NFD/daemon/face/websocket-channel.hpp	/^  time::milliseconds m_pingInterval;$/;"	m	class:nfd::WebSocketChannel
m_ping_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    ping_handler            m_ping_handler;$/;"	m	class:websocketpp::connection
m_ping_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    ping_handler                m_ping_handler;$/;"	m	class:websocketpp::endpoint
m_ping_timer	NFD/websocketpp/websocketpp/connection.hpp	/^    timer_ptr               m_ping_timer;$/;"	m	class:websocketpp::connection
m_pipeSize	ndn-cxx/tools/ndncatchunks3.cpp	/^  size_t m_pipeSize;$/;"	m	class:ndn::Consumer	file:
m_pit	NFD/daemon/fw/forwarder.hpp	/^  Pit            m_pit;$/;"	m	class:nfd::Forwarder
m_pit	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^  Pit& m_pit;$/;"	m	class:nfd::tests::TablesConfigSectionFixture	file:
m_pitEntries	NFD/daemon/table/name-tree-entry.hpp	/^  std::vector<shared_ptr<pit::Entry> > m_pitEntries;$/;"	m	class:nfd::name_tree::Entry
m_policy	NFD/daemon/table/cs.hpp	/^  unique_ptr<Policy> m_policy;$/;"	m	class:nfd::cs::Cs
m_policy	ndn-cxx/src/lp/cache-policy.hpp	/^  CachePolicyType m_policy;$/;"	m	class:ndn::lp::CachePolicyType::CachePolicy
m_policyName	NFD/daemon/table/cs-policy.hpp	/^  std::string m_policyName;$/;"	m	class:nfd::cs::Policy
m_pong_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    pong_handler            m_pong_handler;$/;"	m	class:websocketpp::connection
m_pong_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    pong_handler                m_pong_handler;$/;"	m	class:websocketpp::endpoint
m_pong_timeout_dur	NFD/websocketpp/websocketpp/connection.hpp	/^    long                    m_pong_timeout_dur;$/;"	m	class:websocketpp::connection
m_pong_timeout_dur	NFD/websocketpp/websocketpp/endpoint.hpp	/^    long                        m_pong_timeout_dur;$/;"	m	class:websocketpp::endpoint
m_pong_timeout_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    pong_timeout_handler    m_pong_timeout_handler;$/;"	m	class:websocketpp::connection
m_pong_timeout_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    pong_timeout_handler        m_pong_timeout_handler;$/;"	m	class:websocketpp::endpoint
m_port	NFD/websocketpp/websocketpp/uri.hpp	/^    uint16_t    m_port;$/;"	m	class:websocketpp::uri
m_port	ndn-cxx/src/transport/tcp-transport.hpp	/^  std::string m_port;$/;"	m	class:ndn::TcpTransport
m_port	ndn-cxx/src/util/face-uri.hpp	/^  std::string m_port;$/;"	m	class:ndn::util::FaceUri
m_postfix	apps/ndn-producer.hpp	/^  Name m_postfix;$/;"	m	class:ns3::ndn::Producer
m_prefix	NFD/core/notification-stream.hpp	/^  const Name m_prefix;$/;"	m	class:nfd::NotificationStream
m_prefix	NFD/core/segment-publisher.hpp	/^  const Name m_prefix;$/;"	m	class:nfd::SegmentPublisher
m_prefix	NFD/daemon/table/fib-entry.hpp	/^  Name m_prefix;$/;"	m	class:nfd::fib::Entry
m_prefix	NFD/daemon/table/name-tree-entry.hpp	/^  Name m_prefix;$/;"	m	class:nfd::name_tree::Entry
m_prefix	NFD/daemon/table/strategy-choice-entry.hpp	/^  Name m_prefix;$/;"	m	class:nfd::strategy_choice::Entry
m_prefix	NFD/tests/other/cs-benchmark.cpp	/^    Name m_prefix;$/;"	m	class:nfd::tests::CsBenchmarkFixture::SimpleNameGenerator	file:
m_prefix	apps/ndn-producer.hpp	/^  Name m_prefix;$/;"	m	class:ns3::ndn::Producer
m_prefix	ndn-cxx/src/detail/registered-prefix.hpp	/^  Name m_prefix;$/;"	m	class:ndn::RegisteredPrefix
m_prefix	ndn-cxx/src/interest-filter.hpp	/^  Name m_prefix;$/;"	m	class:ndn::InterestFilter
m_prefix	ndn-cxx/src/management/nfd-command-options.hpp	/^  Name m_prefix;$/;"	m	class:ndn::nfd::CommandOptions
m_prefix	ndn-cxx/src/management/nfd-fib-entry.hpp	/^  Name m_prefix;$/;"	m	class:ndn::nfd::FibEntry
m_prefix	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  Name m_prefix;$/;"	m	class:ndn::nfd::RibEntry
m_prefix	ndn-cxx/src/mgmt/status-dataset-context.hpp	/^  Name m_prefix;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_prefix	ndn-cxx/src/util/notification-stream.hpp	/^  const Name m_prefix;$/;"	m	class:ndn::util::NotificationStream
m_prefix	ndn-cxx/src/util/notification-subscriber.hpp	/^  Name m_prefix;$/;"	m	class:ndn::util::NotificationSubscriber
m_prefixName	NFD/tools/ndn-tlv-peek.cpp	/^  std::string m_prefixName;$/;"	m	class:ndntlvpeek::NdnTlvPeek	file:
m_prefixName	NFD/tools/ndn-tlv-poke.cpp	/^  ndn::Name m_prefixName;$/;"	m	class:ndntlvpoke::NdnTlvPoke	file:
m_prefixes	NFD/tools/ndn-autoconfig-server.cpp	/^  std::vector<Name> m_prefixes;$/;"	m	class:ndn::PrefixCollection	file:
m_prepared	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    bool                        m_prepared;$/;"	m	class:websocketpp::message_buffer::message
m_prev	NFD/daemon/table/name-tree-entry.hpp	/^  Node* m_prev; \/\/ Previous Name Tree Node (to resolve hash collision)$/;"	m	class:nfd::name_tree::Node
m_primaryBackrefManager	ndn-cxx/src/util/regex/regex-top-matcher.hpp	/^  shared_ptr<RegexBackrefManager> m_primaryBackrefManager;$/;"	m	class:ndn::RegexTopMatcher
m_primaryMatcher	ndn-cxx/src/util/regex/regex-top-matcher.hpp	/^  shared_ptr<RegexPatternListMatcher> m_primaryMatcher;$/;"	m	class:ndn::RegexTopMatcher
m_printEvent	utils/tracers/l2-rate-tracer.hpp	/^  EventId m_printEvent;$/;"	m	class:ns3::L2RateTracer
m_printEvent	utils/tracers/ndn-cs-tracer.hpp	/^  EventId m_printEvent;$/;"	m	class:ns3::ndn::CsTracer
m_printEvent	utils/tracers/ndn-l3-rate-tracer.hpp	/^  EventId m_printEvent;$/;"	m	class:ns3::ndn::L3RateTracer
m_processor	NFD/websocketpp/websocketpp/connection.hpp	/^    processor_ptr           m_processor;$/;"	m	class:websocketpp::connection
m_programName	NFD/tools/ndn-tlv-peek.cpp	/^  std::string m_programName;$/;"	m	class:ndntlvpeek::NdnTlvPeek	file:
m_programName	NFD/tools/ndn-tlv-poke.cpp	/^  std::string m_programName;$/;"	m	class:ndntlvpoke::NdnTlvPoke	file:
m_programName	NFD/tools/nfdc.hpp	/^  const char* m_programName;$/;"	m	class:nfdc::Nfdc
m_prohibitedEndpoints	NFD/daemon/face/tcp-factory.hpp	/^  std::set<tcp::Endpoint> m_prohibitedEndpoints;$/;"	m	class:nfd::TcpFactory
m_prohibitedEndpoints	NFD/daemon/face/udp-factory.hpp	/^  std::set<udp::Endpoint> m_prohibitedEndpoints;$/;"	m	class:nfd::UdpFactory
m_providerTable	ndn-cxx/src/util/face-uri.cpp	/^  CanonizeProviderTable& m_providerTable;$/;"	m	class:ndn::util::CanonizeProviderTableInitializer	file:
m_proxy	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    std::string m_proxy;$/;"	m	class:websocketpp::transport::asio::connection
m_proxy_data	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    lib::shared_ptr<proxy_data> m_proxy_data;$/;"	m	class:websocketpp::transport::asio::connection
m_pseudoMatchers	ndn-cxx/src/util/regex/regex-component-matcher.hpp	/^  std::vector<shared_ptr<RegexPseudoMatcher> > m_pseudoMatchers;$/;"	m	class:ndn::RegexComponentMatcher
m_ptr	ndn-cxx/src/util/in-memory-storage.hpp	/^    const Data* m_ptr;$/;"	m	class:ndn::util::InMemoryStorage::const_iterator
m_publicKeyName	ndn-cxx/src/security/identity-certificate.hpp	/^  Name m_publicKeyName;$/;"	m	class:ndn::IdentityCertificate
m_publisher	NFD/tests/core/segment-publisher.t.cpp	/^  SegmentPublisherTester<N> m_publisher;$/;"	m	class:nfd::tests::SegmentPublisherFixture	file:
m_publisher	NFD/tests/daemon/mgmt/channel-status-publisher.t.cpp	/^  ChannelStatusPublisher m_publisher;$/;"	m	class:nfd::tests::ChannelStatusPublisherFixture	file:
m_publisher	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^  FaceStatusPublisher m_publisher;$/;"	m	class:nfd::tests::FaceStatusPublisherFixture
m_publisher	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^  FibEnumerationPublisher m_publisher;$/;"	m	class:nfd::tests::FibEnumerationPublisherFixture
m_publisher	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^  StrategyChoicePublisher m_publisher;$/;"	m	class:nfd::tests::StrategyChoicePublisherFixture	file:
m_publisherPublicKeyLocator	ndn-cxx/src/selectors.hpp	/^  KeyLocator m_publisherPublicKeyLocator;$/;"	m	class:ndn::Selectors
m_q	apps/ndn-consumer-zipf-mandelbrot.hpp	/^  double m_q;                 \/\/ q in (k+q)^s$/;"	m	class:ns3::ndn::ConsumerZipfMandelbrot
m_queryName	NFD/daemon/table/cs-entry-impl.hpp	/^  Name m_queryName;$/;"	m	class:nfd::cs::EntryImpl
m_queue	NFD/daemon/table/cs-policy-lru.hpp	/^  Queue m_queue;$/;"	m	class:nfd::cs::lru::LruPolicy
m_queue	NFD/daemon/table/dead-nonce-list.hpp	/^  Queue& m_queue;$/;"	m	class:nfd::DeadNonceList
m_queue	utils/topology/rocketfuel-weights-reader.hpp	/^  std::string m_queue;$/;"	m	class:ns3::RocketfuelWeightsReader
m_queues	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^  Queue m_queues[QUEUE_MAX];$/;"	m	class:nfd::cs::priority_fifo::PriorityFifoPolicy
m_rand	apps/ndn-consumer.hpp	/^  Ptr<UniformRandomVariable> m_rand; \/\/\/< @brief nonce generator$/;"	m	class:ns3::ndn::Consumer
m_randVar	utils/topology/rocketfuel-map-reader.hpp	/^  Ptr<UniformRandomVariable> m_randVar;$/;"	m	class:ns3::RocketfuelMapReader
m_randX	utils/topology/annotated-topology-reader.hpp	/^  Ptr<UniformRandomVariable> m_randX;$/;"	m	class:ns3::AnnotatedTopologyReader
m_randY	utils/topology/annotated-topology-reader.hpp	/^  Ptr<UniformRandomVariable> m_randY;$/;"	m	class:ns3::AnnotatedTopologyReader
m_random	apps/ndn-consumer-cbr.hpp	/^  Ptr<RandomVariableStream> m_random;$/;"	m	class:ns3::ndn::ConsumerCbr
m_randomGenerator	examples/ndn-load-balancer/random-load-balancer-strategy.hpp	/^  boost::random::mt19937 m_randomGenerator;$/;"	m	class:nfd::fw::RandomLoadBalancerStrategy
m_randomType	apps/ndn-consumer-cbr.hpp	/^  std::string m_randomType;$/;"	m	class:ns3::ndn::ConsumerCbr
m_read	NFD/websocketpp/websocketpp/http/response.hpp	/^    size_t                          m_read;$/;"	m	class:websocketpp::http::parser::response
m_read_flag	NFD/websocketpp/websocketpp/connection.hpp	/^    bool m_read_flag;$/;"	m	class:websocketpp::connection
m_read_handler	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    read_handler        m_read_handler;$/;"	m	class:websocketpp::transport::asio::connection
m_read_handler	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    read_handler    m_read_handler;$/;"	m	class:websocketpp::transport::debug::connection
m_read_handler	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    read_handler    m_read_handler;$/;"	m	class:websocketpp::transport::iostream::connection
m_read_handler_allocator	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    handler_allocator   m_read_handler_allocator;$/;"	m	class:websocketpp::transport::asio::connection
m_read_mutex	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    mutex_type      m_read_mutex;$/;"	m	class:websocketpp::transport::iostream::connection
m_reading	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    bool            m_reading;$/;"	m	class:websocketpp::transport::debug::connection
m_reading	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    bool            m_reading;$/;"	m	class:websocketpp::transport::iostream::connection
m_ready	NFD/websocketpp/websocketpp/http/request.hpp	/^    bool                            m_ready;$/;"	m	class:websocketpp::http::parser::request
m_reason	NFD/tests/limited-io.hpp	/^  StopReason m_reason;$/;"	m	class:nfd::tests::LimitedIo
m_reason	ndn-cxx/src/lp/nack-header.hpp	/^  NackReason m_reason;$/;"	m	class:ndn::lp::NackReason::NackHeader
m_reassemblers	NFD/daemon/face/ethernet-face.hpp	/^  std::unordered_map<ethernet::Address, Reassembler> m_reassemblers;$/;"	m	class:nfd::EthernetFace
m_receiveCallback	ndn-cxx/src/transport/transport.hpp	/^  ReceiveCallback m_receiveCallback;$/;"	m	class:ndn::Transport
m_receiveDataConn	NFD/tests/daemon/face/face-history.hpp	/^  signal::ScopedConnection m_receiveDataConn;$/;"	m	class:nfd::tests::FaceHistory
m_receiveInterestConn	NFD/tests/daemon/face/face-history.hpp	/^  signal::ScopedConnection m_receiveInterestConn;$/;"	m	class:nfd::tests::FaceHistory
m_received	NFD/daemon/face/ndnlp-partial-message-store.hpp	/^  size_t m_received;$/;"	m	class:nfd::ndnlp::PartialMessage
m_receivedDatas	apps/ndn-app.hpp	/^    m_receivedDatas; \/\/\/< @brief App-level trace of received Data$/;"	m	class:ns3::ndn::App
m_receivedInterests	apps/ndn-app.hpp	/^    m_receivedInterests; \/\/\/< @brief App-level trace of received Interests$/;"	m	class:ns3::ndn::App
m_receivedNotification	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  bool m_receivedNotification;$/;"	m	class:nfd::tests::FaceFixture	file:
m_referenceEntries	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^  std::set<shared_ptr<fib::Entry> > m_referenceEntries;$/;"	m	class:nfd::tests::FibEnumerationPublisherFixture
m_referenceFaces	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  std::list<shared_ptr<Face> > m_referenceFaces;$/;"	m	class:nfd::tests::FaceQueryStatusPublisherFixture
m_referenceFaces	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^  std::list<shared_ptr<Face> > m_referenceFaces;$/;"	m	class:nfd::tests::FaceStatusPublisherFixture
m_referenceOspfRate	utils/topology/rocketfuel-map-reader.hpp	/^  const DataRate m_referenceOspfRate; \/\/ reference rate of OSPF metric calculation$/;"	m	class:ns3::RocketfuelMapReader
m_refreshInterval	NFD/rib/remote-registrator.hpp	/^  time::seconds m_refreshInterval;$/;"	m	class:nfd::rib::RemoteRegistrator
m_refreshPeriod	ndn-cxx/src/security/validator-config.hpp	/^    time::nanoseconds m_refreshPeriod;$/;"	m	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
m_regEntries	NFD/rib/remote-registrator.hpp	/^  RegisteredList m_regEntries;$/;"	m	class:nfd::rib::RemoteRegistrator
m_regex	ndn-cxx/src/security/conf/filter.hpp	/^  Regex m_regex;$/;"	m	class:ndn::security::conf::RegexNameFilter
m_regex	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  Regex m_regex;$/;"	m	class:ndn::security::conf::RegexKeyLocatorNameChecker
m_regexFilter	ndn-cxx/src/interest-filter.hpp	/^  shared_ptr<RegexPatternListMatcher> m_regexFilter;$/;"	m	class:ndn::InterestFilter
m_registeredFaces	NFD/rib/rib-manager.hpp	/^  FaceIdSet m_registeredFaces;$/;"	m	class:nfd::rib::RibManager
m_registeredPrefixTable	ndn-cxx/src/detail/face-impl.hpp	/^  RegisteredPrefixTable m_registeredPrefixTable;$/;"	m	class:ndn::Face::Impl
m_rejectPendingInterestHistory	NFD/tests/daemon/fw/strategy-tester.hpp	/^  std::vector<RejectPendingInterestArgs> m_rejectPendingInterestHistory;$/;"	m	class:nfd::fw::tests::StrategyTester
m_relation	ndn-cxx/src/security/conf/filter.hpp	/^  Relation m_relation;$/;"	m	class:ndn::security::conf::RelationNameFilter
m_relation	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  KeyLocatorChecker::Relation m_relation;$/;"	m	class:ndn::security::conf::RelationKeyLocatorNameChecker
m_reloadConfigEvent	NFD/daemon/nfd.hpp	/^  scheduler::ScopedEventId          m_reloadConfigEvent;$/;"	m	class:nfd::Nfd
m_reloadSignalSet	NFD/daemon/main.cpp	/^  boost::asio::signal_set m_reloadSignalSet;$/;"	m	class:nfd::NfdRunner	file:
m_remoteEndpoint	NFD/daemon/face/udp-channel.hpp	/^  udp::Endpoint m_remoteEndpoint;$/;"	m	class:nfd::UdpChannel
m_remoteRegistrator	NFD/rib/rib-manager.hpp	/^  RemoteRegistrator m_remoteRegistrator;$/;"	m	class:nfd::rib::RibManager
m_remoteUri	NFD/daemon/face/face.hpp	/^  const FaceUri m_remoteUri;$/;"	m	class:nfd::Face
m_remoteUri	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  std::string m_remoteUri;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_remoteUri	ndn-cxx/src/management/nfd-face-traits.hpp	/^  std::string m_remoteUri;$/;"	m	class:ndn::nfd::FaceTraits
m_remote_close_code	NFD/websocketpp/websocketpp/connection.hpp	/^    close::status::value    m_remote_close_code;$/;"	m	class:websocketpp::connection
m_remote_close_reason	NFD/websocketpp/websocketpp/connection.hpp	/^    std::string             m_remote_close_reason;$/;"	m	class:websocketpp::connection
m_remote_endpoint	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    std::string     m_remote_endpoint;$/;"	m	class:websocketpp::transport::debug::connection
m_remote_endpoint	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    std::string     m_remote_endpoint;$/;"	m	class:websocketpp::transport::iostream::connection
m_removeFaceInfoConn	NFD/daemon/fw/access-strategy.hpp	/^  signal::ScopedConnection m_removeFaceInfoConn;$/;"	m	class:nfd::fw::AccessStrategy
m_repeatMax	ndn-cxx/src/util/regex/regex-repeat-matcher.hpp	/^  size_t m_repeatMax;$/;"	m	class:ndn::RegexRepeatMatcher
m_repeatMin	ndn-cxx/src/util/regex/regex-repeat-matcher.hpp	/^  size_t m_repeatMin;$/;"	m	class:ndn::RegexRepeatMatcher
m_request	NFD/websocketpp/websocketpp/connection.hpp	/^    request_type            m_request;$/;"	m	class:websocketpp::connection
m_requestValidator	ndn-cxx/src/management/nfd-control-command.hpp	/^  FieldValidator m_requestValidator;$/;"	m	class:ndn::nfd::ControlCommand
m_requested_subprotocols	NFD/websocketpp/websocketpp/connection.hpp	/^    std::vector<std::string> m_requested_subprotocols;$/;"	m	class:websocketpp::connection
m_required	ndn-cxx/src/management/nfd-control-command.hpp	/^    std::vector<bool> m_required;$/;"	m	class:ndn::nfd::ControlCommand::FieldValidator
m_requiredPartitions	utils/topology/annotated-topology-reader.hpp	/^  uint32_t m_requiredPartitions;$/;"	m	class:ns3::AnnotatedTopologyReader
m_resolveTimeout	ndn-cxx/src/util/dns.cpp	/^  EventId m_resolveTimeout;$/;"	m	class:ndn::dns::Resolver	file:
m_resolver	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    resolver_ptr        m_resolver;$/;"	m	class:websocketpp::transport::asio::endpoint
m_resolver	ndn-cxx/src/util/dns.cpp	/^  BoostResolver m_resolver;$/;"	m	class:ndn::dns::Resolver	file:
m_resource	NFD/websocketpp/websocketpp/uri.hpp	/^    std::string m_resource;$/;"	m	class:websocketpp::uri
m_response	NFD/websocketpp/websocketpp/connection.hpp	/^    response_type           m_response;$/;"	m	class:websocketpp::connection
m_responseValidator	ndn-cxx/src/management/nfd-control-command.hpp	/^  FieldValidator m_responseValidator;$/;"	m	class:ndn::nfd::ControlCommand
m_retxEvent	apps/ndn-consumer.hpp	/^  EventId m_retxEvent; \/\/\/< @brief Event to check whether or not retransmission should be performed$/;"	m	class:ns3::ndn::Consumer
m_retxSeqs	apps/ndn-consumer.hpp	/^  RetxSeqsContainer m_retxSeqs; \/\/\/< \\brief ordered set of sequence numbers to be retransmitted$/;"	m	class:ns3::ndn::Consumer
m_retxSuppression	NFD/daemon/fw/access-strategy.hpp	/^  RetxSuppressionFixed m_retxSuppression;$/;"	m	class:nfd::fw::AccessStrategy
m_retxSuppression	NFD/daemon/fw/best-route-strategy2.hpp	/^  RetxSuppressionExponential m_retxSuppression;$/;"	m	class:nfd::fw::BestRouteStrategy2
m_retxTimer	apps/ndn-consumer.hpp	/^  Time m_retxTimer;    \/\/\/< @brief Currently estimated retransmission timer$/;"	m	class:ns3::ndn::Consumer
m_reuse_addr	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    bool                m_reuse_addr;$/;"	m	class:websocketpp::transport::asio::endpoint
m_rib	NFD/rib/fib-updater.hpp	/^  const Rib& m_rib;$/;"	m	class:nfd::rib::FibUpdater
m_rib	NFD/rib/remote-registrator.hpp	/^  Rib& m_rib;$/;"	m	class:nfd::rib::RemoteRegistrator
m_rib	NFD/rib/rib-status-publisher.hpp	/^  const Rib& m_rib;$/;"	m	class:nfd::rib::RibStatusPublisher
m_rib	NFD/rib/rib.hpp	/^  RibTable m_rib;$/;"	m	class:nfd::rib::Rib
m_ribManager	NFD/rib/nrd.hpp	/^  unique_ptr<RibManager> m_ribManager;$/;"	m	class:nfd::rib::Nrd
m_ribManager	model/ndn-l3-protocol.cpp	/^  shared_ptr<nfd::rib::RibManager> m_ribManager;$/;"	m	class:ns3::ndn::L3Protocol::Impl	file:
m_ribStatusPublisher	NFD/rib/rib-manager.hpp	/^  RibStatusPublisher m_ribStatusPublisher;$/;"	m	class:nfd::rib::RibManager
m_rng	NFD/websocketpp/websocketpp/connection.hpp	/^    rng_type & m_rng;$/;"	m	class:websocketpp::connection
m_rng	NFD/websocketpp/websocketpp/endpoint.hpp	/^    rng_type m_rng;$/;"	m	class:websocketpp::endpoint
m_rng	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    rng_type & m_rng;$/;"	m	class:websocketpp::processor::hybi13
m_rng	NFD/websocketpp/websocketpp/random/random_device.hpp	/^        lib::random_device m_rng;$/;"	m	class:websocketpp::random::random_device::int_generator
m_routablePrefixesData	NFD/tools/ndn-autoconfig-server.cpp	/^  shared_ptr<Data> m_routablePrefixesData;$/;"	m	class:ndn::NdnAutoconfigServer	file:
m_route	NFD/rib/rib-update.hpp	/^  Route m_route;$/;"	m	class:nfd::rib::RibUpdate
m_routes	NFD/rib/rib-entry.hpp	/^  RouteList m_routes;$/;"	m	class:nfd::rib::RibEntry
m_routes	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  RouteList m_routes;$/;"	m	class:ndn::nfd::RibEntry
m_rtt	NFD/daemon/fw/rtt-estimator.hpp	/^  double m_rtt;$/;"	m	class:nfd::RttEstimator
m_rtt	apps/ndn-consumer.hpp	/^  Ptr<RttEstimator> m_rtt; \/\/\/< @brief RTT estimator$/;"	m	class:ns3::ndn::Consumer
m_s	apps/ndn-consumer-zipf-mandelbrot.hpp	/^  double m_s;                 \/\/ s in (k+q)^s$/;"	m	class:ns3::ndn::ConsumerZipfMandelbrot
m_s2c_max_window_bits	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    uint8_t m_s2c_max_window_bits;$/;"	m	class:websocketpp::extensions::permessage_deflate::enabled
m_s2c_max_window_bits_mode	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    mode::value m_s2c_max_window_bits_mode;$/;"	m	class:websocketpp::extensions::permessage_deflate::enabled
m_s2c_no_context_takeover	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    bool m_s2c_no_context_takeover;$/;"	m	class:websocketpp::extensions::permessage_deflate::enabled
m_satisfiedInterests	model/ndn-l3-protocol.hpp	/^  TracedCallback<const nfd::pit::Entry&, const Face&\/*in face*\/, const Data&> m_satisfiedInterests;$/;"	m	class:ns3::ndn::L3Protocol
m_satisfiedInterests	utils/tracers/ndn-l3-tracer.hpp	/^    double m_satisfiedInterests;$/;"	m	struct:ns3::ndn::L3Tracer::Stats
m_savedBuf	NFD/tests/core/logger.t.cpp	/^  std::streambuf* m_savedBuf;$/;"	m	class:nfd::tests::LoggerFixture	file:
m_savedLevel	NFD/tests/core/logger.t.cpp	/^  LogLevel m_savedLevel;$/;"	m	class:nfd::tests::LoggerFixture	file:
m_scale	utils/topology/annotated-topology-reader.hpp	/^  double m_scale;$/;"	m	class:ns3::AnnotatedTopologyReader
m_scheduledCleaningTime	model/cs/content-store-with-freshness.hpp	/^  Time m_scheduledCleaningTime;$/;"	m	class:ns3::ndn::cs::ContentStoreWithFreshness
m_scheduledEvent	ndn-cxx/src/util/scheduler.hpp	/^  EventQueue::iterator m_scheduledEvent;$/;"	m	class:ndn::util::scheduler::Scheduler
m_scheduledTime	ndn-cxx/src/util/scheduler.hpp	/^    time::steady_clock::TimePoint m_scheduledTime;$/;"	m	struct:ndn::util::scheduler::Scheduler::EventInfo
m_scheduler	NFD/tools/ndn-autoconfig/main.cpp	/^  util::Scheduler m_scheduler;$/;"	m	class:ndn::tools::NdnAutoconfig	file:
m_scheduler	examples/ndn-cxx-simple/real-app.hpp	/^  ndn::Scheduler m_scheduler;$/;"	m	class:app::RealApp
m_scheduler	ndn-cxx/examples/consumer-with-timer.cpp	/^  Scheduler m_scheduler;$/;"	m	class:ndn::examples::ConsumerWithTimer	file:
m_scheduler	ndn-cxx/src/detail/face-impl.hpp	/^  util::Scheduler m_scheduler;$/;"	m	class:ndn::Face::Impl
m_scheduler	ndn-cxx/src/security/certificate-cache-ttl.hpp	/^  Scheduler m_scheduler;$/;"	m	class:ndn::CertificateCacheTtl
m_scheduler	ndn-cxx/src/util/dns.cpp	/^  Scheduler m_scheduler;$/;"	m	class:ndn::dns::Resolver	file:
m_scheduler	ndn-cxx/src/util/scheduler-scoped-event-id.hpp	/^  Scheduler* m_scheduler; \/\/ pointer to allow move semantics$/;"	m	class:ndn::util::scheduler::ScopedEventId
m_scheduler	tests/unit-tests/ndn-cxx/face.t.cpp	/^  ::ndn::Scheduler m_scheduler;$/;"	m	class:ns3::ndn::MultipleInterest	file:
m_scheme	NFD/websocketpp/websocketpp/uri.hpp	/^    std::string m_scheme;$/;"	m	class:websocketpp::uri
m_scheme	ndn-cxx/src/security/pib.hpp	/^  std::string m_scheme;$/;"	m	class:ndn::security::Pib
m_scheme	ndn-cxx/src/util/face-uri.hpp	/^  std::string m_scheme;$/;"	m	class:ndn::util::FaceUri
m_secondaryBackrefManager	ndn-cxx/src/util/regex/regex-top-matcher.hpp	/^  shared_ptr<RegexBackrefManager> m_secondaryBackrefManager;$/;"	m	class:ndn::RegexTopMatcher
m_secondaryMatcher	ndn-cxx/src/util/regex/regex-top-matcher.hpp	/^  shared_ptr<RegexPatternListMatcher> m_secondaryMatcher;$/;"	m	class:ndn::RegexTopMatcher
m_secure	NFD/websocketpp/websocketpp/processors/processor.hpp	/^    bool const m_secure;$/;"	m	class:websocketpp::processor::processor
m_secure	NFD/websocketpp/websocketpp/uri.hpp	/^    bool        m_secure;$/;"	m	class:websocketpp::uri
m_segmentNo	ndn-cxx/src/mgmt/status-dataset-context.hpp	/^  uint64_t m_segmentNo;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_selectedDelegationIndex	ndn-cxx/src/interest.hpp	/^  size_t m_selectedDelegationIndex;$/;"	m	class:ndn::Interest
m_selectors	ndn-cxx/src/interest.hpp	/^  Selectors m_selectors;$/;"	m	class:ndn::Interest
m_selfEventId	NFD/tests/core/scheduler.t.cpp	/^  EventId m_selfEventId;$/;"	m	class:nfd::tests::SelfCancelFixture	file:
m_sendEvent	apps/ndn-consumer.hpp	/^  EventId m_sendEvent; \/\/\/< @brief EventId of pending "send packet" event$/;"	m	class:ns3::ndn::Consumer
m_sendInterestHistory	NFD/tests/daemon/fw/strategy-tester.hpp	/^  std::vector<SendInterestArgs> m_sendInterestHistory;$/;"	m	class:nfd::fw::tests::StrategyTester
m_sendQueue	NFD/daemon/face/stream-face.hpp	/^  std::queue<Block> m_sendQueue;$/;"	m	class:nfd::StreamFace
m_sendSocket	NFD/daemon/face/multicast-udp-face.hpp	/^  protocol::socket m_sendSocket;$/;"	m	class:nfd::MulticastUdpFace
m_send_buffer	NFD/websocketpp/websocketpp/connection.hpp	/^    std::vector<transport::buffer> m_send_buffer;$/;"	m	class:websocketpp::connection
m_send_buffer_size	NFD/websocketpp/websocketpp/connection.hpp	/^    size_t m_send_buffer_size;$/;"	m	class:websocketpp::connection
m_send_queue	NFD/websocketpp/websocketpp/connection.hpp	/^    std::queue<message_ptr> m_send_queue;$/;"	m	class:websocketpp::connection
m_sentDatas	NFD/tests/daemon/face/dummy-face.hpp	/^  std::vector<Data> m_sentDatas;$/;"	m	class:nfd::tests::DummyFaceImpl
m_sentInterests	NFD/tests/daemon/face/dummy-face.hpp	/^  std::vector<Interest> m_sentInterests;$/;"	m	class:nfd::tests::DummyFaceImpl
m_seq	apps/ndn-consumer.hpp	/^  uint32_t m_seq;      \/\/\/< @brief currently requested sequence number$/;"	m	class:ns3::ndn::Consumer
m_seqFullDelay	apps/ndn-consumer.hpp	/^  SeqTimeoutsContainer m_seqFullDelay;$/;"	m	class:ns3::ndn::Consumer
m_seqLastDelay	apps/ndn-consumer.hpp	/^  SeqTimeoutsContainer m_seqLastDelay;$/;"	m	class:ns3::ndn::Consumer
m_seqMax	apps/ndn-consumer.hpp	/^  uint32_t m_seqMax;   \/\/\/< @brief maximum number of sequence number$/;"	m	class:ns3::ndn::Consumer
m_seqRetxCounts	apps/ndn-consumer.hpp	/^  std::map<uint32_t, uint32_t> m_seqRetxCounts;$/;"	m	class:ns3::ndn::Consumer
m_seqRng	apps/ndn-consumer-zipf-mandelbrot.hpp	/^  Ptr<UniformRandomVariable> m_seqRng; \/\/ RNG$/;"	m	class:ns3::ndn::ConsumerZipfMandelbrot
m_seqTimeouts	apps/ndn-consumer.hpp	/^  SeqTimeoutsContainer m_seqTimeouts; \/\/\/< \\brief multi-index for the set of SeqTimeout structs$/;"	m	class:ns3::ndn::Consumer
m_seqgen	NFD/daemon/face/ndnlp-slicer.hpp	/^  SequenceGenerator m_seqgen;$/;"	m	class:nfd::ndnlp::Slicer
m_sequenceNo	NFD/core/notification-stream.hpp	/^  uint64_t m_sequenceNo;$/;"	m	class:nfd::NotificationStream
m_sequenceNo	ndn-cxx/src/util/notification-stream.hpp	/^  uint64_t m_sequenceNo;$/;"	m	class:ndn::util::NotificationStream
m_server	NFD/daemon/face/websocket-channel.hpp	/^  websocket::Server m_server;$/;"	m	class:nfd::WebSocketChannel
m_server	NFD/daemon/face/websocket-face.hpp	/^  websocket::Server& m_server;$/;"	m	class:nfd::WebSocketFace
m_server	NFD/websocketpp/docs/simple_broadcast_server.cpp	/^    server m_server;$/;"	m	class:broadcast_server	file:
m_server	NFD/websocketpp/docs/simple_count_server_thread.cpp	/^    server m_server;$/;"	m	class:count_server	file:
m_server	NFD/websocketpp/examples/associative_storage/associative_storage.cpp	/^    server m_server;$/;"	m	class:print_server	file:
m_server	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    server m_server;$/;"	m	class:broadcast_server	file:
m_server	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    server m_server;$/;"	m	class:print_server	file:
m_server	NFD/websocketpp/examples/simple_broadcast_server/simple_broadcast_server.cpp	/^    server m_server;$/;"	m	class:broadcast_server	file:
m_server	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    std::string m_server;$/;"	m	class:connection_metadata	file:
m_server	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    std::string m_server;$/;"	m	class:connection_metadata	file:
m_server	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    std::string m_server;$/;"	m	class:connection_metadata	file:
m_server	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    std::string m_server;$/;"	m	class:connection_metadata	file:
m_server	NFD/websocketpp/websocketpp/processors/processor.hpp	/^    bool const m_server;$/;"	m	class:websocketpp::processor::processor
m_setInitialWindowOnTimeout	apps/ndn-consumer-window.hpp	/^  bool m_setInitialWindowOnTimeout;$/;"	m	class:ns3::ndn::ConsumerWindow
m_shouldEvaluatePit	tests/other/ndn-test.cpp	/^  bool m_shouldEvaluatePit;$/;"	m	class:ns3::Tester	file:
m_shouldSucceed	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^    bool m_shouldSucceed;$/;"	m	class:ndn::util::tests::CanonizeFixture::CanonizeTestCase	file:
m_shouldValidate	ndn-cxx/src/security/validator-config.hpp	/^  bool m_shouldValidate;$/;"	m	class:ndn::ValidatorConfig
m_shouldVisitChildren	NFD/daemon/table/name-tree.hpp	/^    bool                                        m_shouldVisitChildren;$/;"	m	class:nfd::NameTree::const_iterator
m_shrinkFactor	NFD/daemon/table/name-tree.hpp	/^  double                        m_shrinkFactor;$/;"	m	class:nfd::NameTree
m_shrinkLoadFactor	NFD/daemon/table/name-tree.hpp	/^  double                        m_shrinkLoadFactor;$/;"	m	class:nfd::NameTree
m_shrinkThreshold	NFD/daemon/table/name-tree.hpp	/^  size_t                        m_shrinkThreshold;$/;"	m	class:nfd::NameTree
m_shutdown_handler	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    shutdown_handler    m_shutdown_handler;$/;"	m	class:websocketpp::transport::debug::connection
m_shutdown_handler	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    shutdown_handler    m_shutdown_handler;$/;"	m	class:websocketpp::transport::iostream::connection
m_shutdown_handler	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    shutdown_handler m_shutdown_handler;$/;"	m	class:websocketpp::transport::iostream::endpoint
m_sigType	ndn-cxx/src/security/conf/checker.hpp	/^  uint32_t m_sigType;$/;"	m	class:ndn::security::conf::CustomizedChecker
m_sigType	ndn-cxx/src/security/conf/checker.hpp	/^  uint32_t m_sigType;$/;"	m	class:ndn::security::conf::FixedSignerChecker
m_signature	apps/ndn-producer.hpp	/^  uint32_t m_signature;$/;"	m	class:ns3::ndn::Producer
m_signature	ndn-cxx/src/data.hpp	/^  Signature m_signature;$/;"	m	class:ndn::Data
m_signedVerbDispatch	NFD/daemon/mgmt/face-manager.hpp	/^  const SignedVerbDispatchTable m_signedVerbDispatch;$/;"	m	class:nfd::FaceManager
m_signedVerbDispatch	NFD/daemon/mgmt/fib-manager.hpp	/^  const SignedVerbDispatchTable m_signedVerbDispatch;$/;"	m	class:nfd::FibManager
m_signedVerbDispatch	NFD/rib/rib-manager.hpp	/^  const SignedVerbDispatchTable m_signedVerbDispatch;$/;"	m	class:nfd::rib::RibManager
m_signerExpand	ndn-cxx/src/security/sec-rule-relative.hpp	/^  const std::string m_signerExpand;$/;"	m	class:ndn::SecRuleRelative
m_signerNameRegex	ndn-cxx/src/security/sec-rule-relative.hpp	/^  Regex m_signerNameRegex;$/;"	m	class:ndn::SecRuleRelative
m_signerRegex	ndn-cxx/src/security/sec-rule-relative.hpp	/^  const std::string m_signerRegex;$/;"	m	class:ndn::SecRuleRelative
m_signerRegex	ndn-cxx/src/security/sec-rule-specific.hpp	/^  shared_ptr<Regex> m_signerRegex;$/;"	m	class:ndn::SecRuleSpecific
m_signers	ndn-cxx/src/security/conf/checker.hpp	/^  SignerList m_signers;$/;"	m	class:ndn::security::conf::FixedSignerChecker
m_signingInfo	ndn-cxx/src/management/nfd-command-options.hpp	/^  security::SigningInfo m_signingInfo;$/;"	m	class:ndn::nfd::CommandOptions
m_signingInfo	ndn-cxx/src/mgmt/dispatcher.hpp	/^  security::SigningInfo m_signingInfo;$/;"	m	class:ndn::mgmt::Dispatcher
m_simulationTime	tests/other/ndn-test.cpp	/^  Time m_simulationTime;$/;"	m	class:ns3::Tester	file:
m_sit	NFD/daemon/fw/forwarder.hpp	/^  Fib            m_sit;$/;"	m	class:nfd::Forwarder
m_size	NFD/websocketpp/test/message_buffer/alloc.cpp	/^    size_t                              m_size;$/;"	m	struct:stub	file:
m_size	ndn-cxx/src/encoding/block.hpp	/^  uint32_t m_size;$/;"	m	class:ndn::Block
m_size	ndn-cxx/src/security/key-params.hpp	/^  uint32_t m_size;$/;"	m	class:ndn::SimplePublicKeyParams
m_size	ndn-cxx/src/security/key-params.hpp	/^  uint32_t m_size;$/;"	m	class:ndn::SimpleSymmetricKeyParams
m_size	utils/trie/multi-policy.hpp	/^        size_t m_size;$/;"	m	struct:ns3::ndn::ndnSIM::multi_policy_traits::policy::type::max_size_setter
m_slicer	NFD/daemon/face/ethernet-face.hpp	/^  unique_ptr<ndnlp::Slicer> m_slicer;$/;"	m	class:nfd::EthernetFace
m_slots	ndn-cxx/src/util/signal-signal.hpp	/^  SlotList m_slots;$/;"	m	class:ndn::util::signal::Signal
m_socket	NFD/daemon/face/datagram-face.hpp	/^  typename protocol::socket m_socket;$/;"	m	class:nfd::DatagramFace
m_socket	NFD/daemon/face/ethernet-face.hpp	/^  boost::asio::posix::stream_descriptor m_socket;$/;"	m	class:nfd::EthernetFace
m_socket	NFD/daemon/face/stream-face.hpp	/^  typename protocol::socket m_socket;$/;"	m	class:nfd::StreamFace
m_socket	NFD/daemon/face/udp-channel.hpp	/^  boost::asio::ip::udp::socket m_socket;$/;"	m	class:nfd::UdpChannel
m_socket	NFD/daemon/face/unix-stream-channel.hpp	/^  boost::asio::local::stream_protocol::socket m_socket;$/;"	m	class:nfd::UnixStreamChannel
m_socket	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    socket_ptr          m_socket;$/;"	m	class:websocketpp::transport::asio::basic_socket::connection
m_socket	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    socket_ptr          m_socket;$/;"	m	class:websocketpp::transport::asio::tls_socket::connection
m_socket	ndn-cxx/src/transport/stream-transport.hpp	/^  typename Protocol::socket m_socket;$/;"	m	class:ndn::StreamTransportImpl
m_socket_init	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    std::chrono::high_resolution_clock::time_point m_socket_init;$/;"	m	class:perftest	file:
m_socket_init_handler	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    socket_init_handler m_socket_init_handler;$/;"	m	class:websocketpp::transport::asio::basic_socket::connection
m_socket_init_handler	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    socket_init_handler m_socket_init_handler;$/;"	m	class:websocketpp::transport::asio::basic_socket::endpoint
m_socket_init_handler	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    socket_init_handler m_socket_init_handler;$/;"	m	class:websocketpp::transport::asio::tls_socket::connection
m_socket_init_handler	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    socket_init_handler m_socket_init_handler;$/;"	m	class:websocketpp::transport::asio::tls_socket::endpoint
m_srcAddress	NFD/daemon/face/ethernet-face.hpp	/^  ethernet::Address m_srcAddress;$/;"	m	class:nfd::EthernetFace
m_stage1	NFD/tools/ndn-autoconfig/main.cpp	/^  autoconfig::MulticastDiscovery m_stage1;$/;"	m	class:ndn::tools::NdnAutoconfig	file:
m_stage2	NFD/tools/ndn-autoconfig/main.cpp	/^  autoconfig::GuessFromSearchDomains m_stage2;$/;"	m	class:ndn::tools::NdnAutoconfig	file:
m_stage3	NFD/tools/ndn-autoconfig/main.cpp	/^  autoconfig::GuessFromIdentityName m_stage3;$/;"	m	class:ndn::tools::NdnAutoconfig	file:
m_staleTime	NFD/daemon/table/cs-entry.hpp	/^  time::steady_clock::TimePoint m_staleTime;$/;"	m	class:nfd::cs::Entry
m_start	NFD/daemon/face/ndnlp-sequence-generator.hpp	/^  uint64_t m_start;$/;"	m	class:nfd::ndnlp::SequenceBlock
m_start	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    std::chrono::high_resolution_clock::time_point m_start;$/;"	m	class:perftest	file:
m_start	NFD/websocketpp/test/http/parser_perf.cpp	/^    std::chrono::steady_clock::time_point m_start;$/;"	m	class:scoped_timer	file:
m_startStagesEvent	NFD/tools/ndn-autoconfig/main.cpp	/^  util::scheduler::ScopedEventId m_startStagesEvent;$/;"	m	class:ndn::tools::NdnAutoconfig	file:
m_startTimestamp	NFD/daemon/mgmt/status-server.hpp	/^  time::system_clock::TimePoint m_startTimestamp;$/;"	m	class:nfd::StatusServer
m_startTimestamp	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  time::system_clock::TimePoint m_startTimestamp;$/;"	m	class:ndn::nfd::ForwarderStatus
m_state	NFD/websocketpp/websocketpp/connection.hpp	/^    session::state::value   m_state;$/;"	m	class:websocketpp::connection
m_state	NFD/websocketpp/websocketpp/http/response.hpp	/^    state                           m_state;$/;"	m	class:websocketpp::http::parser::response
m_state	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    state m_state;$/;"	m	class:websocketpp::processor::hybi00
m_state	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    state m_state;$/;"	m	class:websocketpp::processor::hybi13
m_state	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    state               m_state;$/;"	m	class:websocketpp::transport::asio::endpoint
m_state	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    state               m_state;$/;"	m	class:websocketpp::transport::asio::basic_socket::connection
m_state	NFD/websocketpp/websocketpp/utf8_validator.hpp	/^    uint32_t    m_state;$/;"	m	class:websocketpp::utf8_validator::validator
m_state	ndn-cxx/src/mgmt/status-dataset-context.hpp	/^  State m_state;$/;"	m	class:ndn::mgmt::StatusDatasetContext
m_staticContainer	ndn-cxx/src/security/validator-config.hpp	/^  TrustAnchorContainer m_staticContainer;$/;"	m	class:ndn::ValidatorConfig
m_static_channels	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    level const m_static_channels;$/;"	m	class:websocketpp::log::basic
m_stats	utils/tracers/l2-rate-tracer.hpp	/^  mutable std::tuple<Stats, Stats, Stats, Stats> m_stats;$/;"	m	class:ns3::L2RateTracer
m_stats	utils/tracers/ndn-cs-tracer.hpp	/^  cs::Stats m_stats;$/;"	m	class:ns3::ndn::CsTracer
m_stats	utils/tracers/ndn-l3-rate-tracer.hpp	/^  mutable std::map<shared_ptr<const Face>, std::tuple<Stats, Stats, Stats, Stats>> m_stats;$/;"	m	class:ns3::ndn::L3RateTracer
m_status	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    std::string m_status;$/;"	m	class:connection_metadata	file:
m_status	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    std::string m_status;$/;"	m	class:connection_metadata	file:
m_status	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    std::string m_status;$/;"	m	class:connection_metadata	file:
m_status	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    std::string m_status;$/;"	m	class:connection_metadata	file:
m_statusServer	NFD/daemon/nfd.hpp	/^  unique_ptr<StatusServer>          m_statusServer;$/;"	m	class:nfd::Nfd
m_statusServer	model/ndn-l3-protocol.cpp	/^  shared_ptr<nfd::StatusServer> m_statusServer;$/;"	m	class:ns3::ndn::L3Protocol::Impl	file:
m_status_code	NFD/websocketpp/websocketpp/http/response.hpp	/^    status_code::value              m_status_code;$/;"	m	class:websocketpp::http::parser::response
m_status_msg	NFD/websocketpp/websocketpp/http/response.hpp	/^    std::string                     m_status_msg;$/;"	m	class:websocketpp::http::parser::response
m_stepLimit	ndn-cxx/src/security/validator-config.hpp	/^  size_t m_stepLimit;$/;"	m	class:ndn::ValidatorConfig
m_stepLimit	ndn-cxx/src/security/validator-regex.hpp	/^  int m_stepLimit;$/;"	m	class:ndn::ValidatorRegex
m_stmt	ndn-cxx/src/util/sqlite3-statement.hpp	/^  sqlite3_stmt* m_stmt;$/;"	m	class:ndn::util::Sqlite3Statement
m_store	ndn-cxx/tools/ndnputchunks3.cpp	/^  std::vector< shared_ptr<Data> > m_store;$/;"	m	class:ndn::Producer	file:
m_store	ndn-cxx/tools/ndnsec/util.hpp	/^    T* m_store;$/;"	m	class:AccumulatorType
m_stragglerTimer	NFD/daemon/table/pit-entry.hpp	/^  scheduler::EventId m_stragglerTimer;$/;"	m	class:nfd::pit::Entry
m_strand	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    strand_ptr      m_strand;$/;"	m	class:websocketpp::transport::asio::connection
m_strand	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    strand_ptr          m_strand;$/;"	m	class:websocketpp::transport::asio::tls_socket::connection
m_strategy	NFD/daemon/table/measurements-accessor.hpp	/^  const fw::Strategy* m_strategy;$/;"	m	class:nfd::MeasurementsAccessor
m_strategy	NFD/daemon/table/strategy-choice-entry.hpp	/^  fw::Strategy* m_strategy;$/;"	m	class:nfd::strategy_choice::Entry
m_strategy	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  Name                m_strategy;$/;"	m	class:ndn::nfd::ControlParameters
m_strategy	ndn-cxx/src/management/nfd-strategy-choice.hpp	/^  Name m_strategy; \/\/ strategy for the namespace$/;"	m	class:ndn::nfd::StrategyChoice
m_strategy	tests/other/ndn-test.cpp	/^  std::string m_strategy;$/;"	m	class:ns3::Tester	file:
m_strategyChoice	NFD/daemon/fw/forwarder.hpp	/^  StrategyChoice m_strategyChoice;$/;"	m	class:nfd::Forwarder
m_strategyChoice	NFD/daemon/mgmt/strategy-choice-manager.hpp	/^  StrategyChoice& m_strategyChoice;$/;"	m	class:nfd::StrategyChoiceManager
m_strategyChoice	NFD/daemon/mgmt/strategy-choice-publisher.hpp	/^  const StrategyChoice& m_strategyChoice;$/;"	m	class:nfd::StrategyChoicePublisher
m_strategyChoice	NFD/daemon/mgmt/tables-config-section.hpp	/^  StrategyChoice& m_strategyChoice;$/;"	m	class:nfd::TablesConfigSection
m_strategyChoice	NFD/daemon/table/measurements-accessor.hpp	/^  const StrategyChoice& m_strategyChoice;$/;"	m	class:nfd::MeasurementsAccessor
m_strategyChoice	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  StrategyChoice& m_strategyChoice;$/;"	m	class:nfd::tests::StrategyChoiceManagerFixture	file:
m_strategyChoice	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^  StrategyChoice& m_strategyChoice;$/;"	m	class:nfd::tests::StrategyChoicePublisherFixture	file:
m_strategyChoice	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^  StrategyChoice& m_strategyChoice;$/;"	m	class:nfd::tests::TablesConfigSectionFixture	file:
m_strategyChoiceEntry	NFD/daemon/table/name-tree-entry.hpp	/^  shared_ptr<strategy_choice::Entry> m_strategyChoiceEntry;$/;"	m	class:nfd::name_tree::Entry
m_strategyChoiceManager	NFD/daemon/nfd.hpp	/^  unique_ptr<StrategyChoiceManager> m_strategyChoiceManager;$/;"	m	class:nfd::Nfd
m_strategyChoiceManager	model/ndn-l3-protocol.cpp	/^  shared_ptr<nfd::StrategyChoiceManager> m_strategyChoiceManager;$/;"	m	class:ns3::ndn::L3Protocol::Impl	file:
m_strategyInstances	NFD/daemon/table/strategy-choice.hpp	/^  StrategyInstanceTable m_strategyInstances;$/;"	m	class:nfd::StrategyChoice
m_streams	ndn-cxx/src/mgmt/dispatcher.hpp	/^  std::unordered_map<Name, uint64_t> m_streams;$/;"	m	class:ndn::mgmt::Dispatcher
m_subBlocks	ndn-cxx/src/encoding/block.hpp	/^  mutable element_container m_subBlocks;$/;"	m	class:ndn::Block
m_subTreeRoot	NFD/daemon/table/name-tree.hpp	/^    shared_ptr<name_tree::Entry>                m_subTreeRoot;$/;"	m	class:nfd::NameTree::const_iterator
m_subjectDescriptionList	ndn-cxx/src/security/certificate.hpp	/^  SubjectDescriptionList m_subjectDescriptionList;$/;"	m	class:ndn::Certificate
m_subprotocol	NFD/websocketpp/websocketpp/connection.hpp	/^    std::string             m_subprotocol;$/;"	m	class:websocketpp::connection
m_subscriptions	NFD/core/config-file.hpp	/^  SubscriptionTable m_subscriptions;$/;"	m	class:nfd::ConfigFile
m_supportedPrivileges	NFD/daemon/mgmt/command-validator.hpp	/^  std::set<std::string> m_supportedPrivileges;$/;"	m	class:nfd::CommandValidator
m_table	NFD/daemon/table/cs.hpp	/^  Table m_table;$/;"	m	class:nfd::cs::Cs
m_table	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  FaceTable m_table;$/;"	m	class:nfd::tests::FaceQueryStatusPublisherFixture
m_table	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^  FaceTable m_table;$/;"	m	class:nfd::tests::FaceStatusPublisherFixture
m_tablesConfig	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^  TablesConfigSection m_tablesConfig;$/;"	m	class:nfd::tests::TablesConfigSectionFixture	file:
m_tags	ndn-cxx/src/tag-host.hpp	/^  mutable std::map<size_t, shared_ptr<Tag>> m_tags;$/;"	m	class:ndn::TagHost
m_tcp_post_init_handler	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    tcp_init_handler    m_tcp_post_init_handler;$/;"	m	class:websocketpp::transport::asio::connection
m_tcp_post_init_handler	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    tcp_init_handler    m_tcp_post_init_handler;$/;"	m	class:websocketpp::transport::asio::endpoint
m_tcp_pre_init_handler	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    tcp_init_handler    m_tcp_pre_init_handler;$/;"	m	class:websocketpp::transport::asio::connection
m_tcp_pre_init_handler	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    tcp_init_handler    m_tcp_pre_init_handler;$/;"	m	class:websocketpp::transport::asio::endpoint
m_terminal	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    bool                        m_terminal;$/;"	m	class:websocketpp::message_buffer::message
m_terminationSignalSet	NFD/daemon/main.cpp	/^  boost::asio::signal_set m_terminationSignalSet;$/;"	m	class:nfd::NfdRunner	file:
m_terminationSignalSet	NFD/tools/ndn-autoconfig/main.cpp	/^  boost::asio::signal_set m_terminationSignalSet;$/;"	m	class:ndn::tools::NdnAutoconfig	file:
m_termination_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    termination_handler     m_termination_handler;$/;"	m	class:websocketpp::connection
m_testKeyChain	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  ndn::KeyChain m_testKeyChain;$/;"	m	class:nfd::tests::FaceListFixture	file:
m_testKeyChain	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  ndn::KeyChain m_testKeyChain;$/;"	m	class:nfd::tests::FaceQueryListFixture	file:
m_testKeyChain	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  ndn::KeyChain m_testKeyChain;$/;"	m	class:nfd::tests::TestFaceManagerCommon	file:
m_tester1	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  CommandValidatorTester m_tester1;$/;"	m	class:nfd::tests::TwoValidatorFixture	file:
m_tester2	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  CommandValidatorTester m_tester2;$/;"	m	class:nfd::tests::TwoValidatorFixture	file:
m_text	ndn-cxx/src/mgmt/control-response.hpp	/^  std::string m_text;$/;"	m	class:ndn::mgmt::ControlResponse
m_thread	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    websocketpp::lib::shared_ptr<websocketpp::lib::thread> m_thread;$/;"	m	class:websocket_endpoint	file:
m_thread	NFD/websocketpp/tutorials/utility_client/step3.cpp	/^    websocketpp::lib::shared_ptr<websocketpp::lib::thread> m_thread;$/;"	m	class:websocket_endpoint	file:
m_thread	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    websocketpp::lib::shared_ptr<websocketpp::lib::thread> m_thread;$/;"	m	class:websocket_endpoint	file:
m_thread	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    websocketpp::lib::shared_ptr<websocketpp::lib::thread> m_thread;$/;"	m	class:websocket_endpoint	file:
m_thread	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    websocketpp::lib::shared_ptr<websocketpp::lib::thread> m_thread;$/;"	m	class:websocket_endpoint	file:
m_timedOutInterests	model/ndn-l3-protocol.hpp	/^  TracedCallback<const nfd::pit::Entry&> m_timedOutInterests;$/;"	m	class:ns3::ndn::L3Protocol
m_timedOutInterests	utils/tracers/ndn-l3-tracer.hpp	/^    double m_timedOutInterests;$/;"	m	struct:ns3::ndn::L3Tracer::Stats
m_timeout	NFD/tests/limited-io.hpp	/^  scheduler::EventId m_timeout;$/;"	m	class:nfd::tests::LimitedIo
m_timeout	NFD/tools/ndn-tlv-peek.cpp	/^  ndn::time::milliseconds m_timeout;$/;"	m	class:ndntlvpeek::NdnTlvPeek	file:
m_timeout	NFD/tools/ndn-tlv-poke.cpp	/^  ndn::time::milliseconds m_timeout;$/;"	m	class:ndntlvpoke::NdnTlvPoke	file:
m_timeout	ndn-cxx/src/management/nfd-command-options.hpp	/^  time::milliseconds m_timeout;$/;"	m	class:ndn::nfd::CommandOptions
m_timeoutEvent	ndn-cxx/src/detail/pending-interest.hpp	/^  util::scheduler::ScopedEventId m_timeoutEvent;$/;"	m	class:ndn::PendingInterest
m_timer	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^    server::timer_ptr m_timer;$/;"	m	class:telemetry_server	file:
m_timer_handler	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    timer_handler m_timer_handler;$/;"	m	class:websocketpp::transport::debug::connection
m_tls_init	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    std::chrono::high_resolution_clock::time_point m_tls_init;$/;"	m	class:perftest	file:
m_tls_init_handler	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    tls_init_handler    m_tls_init_handler;$/;"	m	class:websocketpp::transport::asio::tls_socket::connection
m_tls_init_handler	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    tls_init_handler m_tls_init_handler;$/;"	m	class:websocketpp::transport::asio::tls_socket::endpoint
m_toolName	NFD/tools/nfd-status.cpp	/^  std::string m_toolName;$/;"	m	class:ndn::NfdStatus	file:
m_topLevelPrefixes	ndn-cxx/src/mgmt/dispatcher.hpp	/^  std::unordered_map<Name, TopPrefixEntry> m_topLevelPrefixes;$/;"	m	class:ndn::mgmt::Dispatcher
m_totalLength	NFD/daemon/face/ndnlp-partial-message-store.hpp	/^  size_t m_totalLength;$/;"	m	class:nfd::ndnlp::PartialMessage
m_totalPayloadLength	NFD/tests/core/segment-publisher.t.cpp	/^  size_t m_totalPayloadLength;$/;"	m	class:nfd::tests::SegmentPublisherTester	file:
m_totalSize	ndn-cxx/tools/ndncatchunks3.cpp	/^  size_t m_totalSize;$/;"	m	class:ndn::Consumer	file:
m_tpm	ndn-cxx/src/security/key-chain.hpp	/^  std::unique_ptr<SecTpm> m_tpm;$/;"	m	class:ndn::security::KeyChain
m_tpmLocator	ndn-cxx/tests/unit-tests/security/dummy-keychain.hpp	/^  std::string m_tpmLocator;$/;"	m	class:ndn::security::DummyPublicInfo
m_tpmLocator	utils/dummy-keychain.hpp	/^  std::string m_tpmLocator;$/;"	m	class:ndn::security::DummyPublicInfo
m_transmissionQueue	ndn-cxx/src/transport/stream-transport.hpp	/^  TransmissionQueue m_transmissionQueue;$/;"	m	class:ndn::StreamTransportImpl
m_transmittedDatas	apps/ndn-app.hpp	/^    m_transmittedDatas; \/\/\/< @brief App-level trace of transmitted Data$/;"	m	class:ns3::ndn::App
m_transmittedInterests	apps/ndn-app.hpp	/^    m_transmittedInterests; \/\/\/< @brief App-level trace of transmitted Interests$/;"	m	class:ns3::ndn::App
m_transport	ndn-cxx/src/transport/stream-transport.hpp	/^  BaseTransport& m_transport;$/;"	m	class:ndn::StreamTransportImpl
m_transport	ndn-cxx/src/util/dummy-client-face.hpp	/^  shared_ptr<Transport> m_transport;$/;"	m	class:ndn::util::DummyClientFace
m_trustAnchors	ndn-cxx/src/security/validator-regex.hpp	/^  std::map<Name, shared_ptr<IdentityCertificate> > m_trustAnchors;$/;"	m	class:ndn::ValidatorRegex
m_trustAnchorsForInterest	ndn-cxx/src/util/command-interest-validator.hpp	/^  std::map<Name, PublicKey> m_trustAnchorsForInterest;$/;"	m	class:ndn::CommandInterestValidator
m_trustScopeForInterest	ndn-cxx/src/util/command-interest-validator.hpp	/^  std::list<SecRuleSpecific> m_trustScopeForInterest;$/;"	m	class:ndn::CommandInterestValidator
m_type	NFD/daemon/table/name-tree.hpp	/^    NameTree::IteratorType                      m_type;$/;"	m	class:nfd::NameTree::const_iterator
m_type	ndn-cxx/src/encoding/block.hpp	/^  uint32_t m_type;$/;"	m	class:ndn::Block
m_type	ndn-cxx/src/key-locator.hpp	/^  Type m_type;$/;"	m	class:ndn::KeyLocator
m_type	ndn-cxx/src/meta-info.hpp	/^  uint32_t m_type;$/;"	m	class:ndn::MetaInfo
m_type	ndn-cxx/src/security/public-key.hpp	/^  KeyType m_type;$/;"	m	class:ndn::PublicKey
m_type	ndn-cxx/src/security/signing-info.hpp	/^  SignerType m_type;$/;"	m	class:ndn::security::SigningInfo
m_type	ndn-cxx/src/signature-info.hpp	/^  int32_t m_type;$/;"	m	class:ndn::SignatureInfo
m_type	ndn-cxx/src/util/regex/regex-matcher.hpp	/^  const RegexExprType m_type;$/;"	m	class:ndn::RegexMatcher
m_typeRef	ndn-cxx/src/security/sec-tpm-osx.cpp	/^  T m_typeRef;$/;"	m	class:ndn::CFReleaser	file:
m_unixSocket	ndn-cxx/src/transport/unix-transport.hpp	/^  std::string m_unixSocket;$/;"	m	class:ndn::UnixTransport
m_unknownSectionCallback	NFD/core/config-file.hpp	/^  UnknownConfigSectionHandler m_unknownSectionCallback;$/;"	m	class:nfd::ConfigFile
m_unsatisfyTimer	NFD/daemon/table/pit-entry.hpp	/^  scheduler::EventId m_unsatisfyTimer;$/;"	m	class:nfd::pit::Entry
m_unsignedVerbDispatch	NFD/daemon/mgmt/face-manager.hpp	/^  const UnsignedVerbDispatchTable m_unsignedVerbDispatch;$/;"	m	class:nfd::FaceManager
m_unsignedVerbDispatch	NFD/daemon/mgmt/fib-manager.hpp	/^  const UnsignedVerbDispatchTable m_unsignedVerbDispatch;$/;"	m	class:nfd::FibManager
m_unsignedVerbDispatch	NFD/rib/rib-manager.hpp	/^  const UnsignedVerbDispatchTable m_unsignedVerbDispatch;$/;"	m	class:nfd::rib::RibManager
m_updateBatches	NFD/rib/rib.hpp	/^  UpdateQueue m_updateBatches;$/;"	m	class:nfd::rib::Rib
m_updates	NFD/rib/rib-update-batch.hpp	/^  RibUpdateList m_updates;$/;"	m	class:nfd::rib::RibUpdateBatch
m_updates	utils/trie/aggregate-stats-policy.hpp	/^      uint64_t m_updates;$/;"	m	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
m_updatesForBatchFaceId	NFD/rib/fib-updater.hpp	/^  FibUpdateList m_updatesForBatchFaceId;$/;"	m	class:nfd::rib::FibUpdater
m_updatesForNonBatchFaceId	NFD/rib/fib-updater.hpp	/^  FibUpdateList m_updatesForNonBatchFaceId;$/;"	m	class:nfd::rib::FibUpdater
m_uri	NFD/daemon/face/channel.hpp	/^  FaceUri m_uri;$/;"	m	class:nfd::Channel
m_uri	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    std::string m_uri;$/;"	m	class:connection_metadata	file:
m_uri	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    std::string m_uri;$/;"	m	class:connection_metadata	file:
m_uri	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    std::string m_uri;$/;"	m	class:connection_metadata	file:
m_uri	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    std::string m_uri;$/;"	m	class:connection_metadata	file:
m_uri	NFD/websocketpp/websocketpp/connection.hpp	/^    uri_ptr                 m_uri;$/;"	m	class:websocketpp::connection
m_uri	NFD/websocketpp/websocketpp/http/request.hpp	/^    std::string                     m_uri;$/;"	m	class:websocketpp::http::parser::request
m_uri	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  std::string         m_uri;$/;"	m	class:ndn::nfd::ControlParameters
m_uriScheme	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  std::string m_uriScheme;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_user_agent	NFD/websocketpp/websocketpp/connection.hpp	/^    std::string const       m_user_agent;$/;"	m	class:websocketpp::connection::std
m_user_agent	NFD/websocketpp/websocketpp/endpoint.hpp	/^    std::string                 m_user_agent;$/;"	m	class:websocketpp::endpoint
m_uttf	NFD/tests/limited-io.hpp	/^  UnitTestTimeFixture* m_uttf;$/;"	m	class:nfd::tests::LimitedIo
m_v4Scheme	ndn-cxx/src/util/face-uri.cpp	/^  std::string m_v4Scheme;$/;"	m	class:ndn::util::IpHostCanonizeProvider	file:
m_v6Scheme	ndn-cxx/src/util/face-uri.cpp	/^  std::string m_v6Scheme;$/;"	m	class:ndn::util::IpHostCanonizeProvider	file:
m_valid	NFD/websocketpp/websocketpp/uri.hpp	/^    bool        m_valid;$/;"	m	class:websocketpp::uri
m_validate_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    validate_handler        m_validate_handler;$/;"	m	class:websocketpp::connection
m_validate_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    validate_handler            m_validate_handler;$/;"	m	class:websocketpp::endpoint
m_validated	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  bool m_validated;$/;"	m	class:nfd::tests::CommandValidatorTester	file:
m_validationFailed	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  bool m_validationFailed;$/;"	m	class:nfd::tests::CommandValidatorTester	file:
m_validator	NFD/daemon/mgmt/command-validator.hpp	/^  ndn::CommandInterestValidator m_validator;$/;"	m	class:nfd::CommandValidator
m_validator	NFD/daemon/mgmt/internal-face.hpp	/^  CommandValidator m_validator;$/;"	m	class:nfd::InternalFace
m_validator	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    utf8_validator::validator m_validator;$/;"	m	class:websocketpp::processor::hybi00
m_value	NFD/daemon/face/face-counters.hpp	/^  rep m_value;$/;"	m	class:nfd::ByteCounter
m_value	NFD/daemon/face/face-counters.hpp	/^  rep m_value;$/;"	m	class:nfd::PacketCounter
m_value	ndn-cxx/src/security/certificate-subject-description.hpp	/^  std::string m_value;$/;"	m	class:ndn::CertificateSubjectDescription
m_value	ndn-cxx/src/signature.hpp	/^  mutable Block m_value;$/;"	m	class:ndn::Signature
m_value_begin	ndn-cxx/src/encoding/block.hpp	/^  Buffer::const_iterator m_value_begin;$/;"	m	class:ndn::Block
m_value_end	ndn-cxx/src/encoding/block.hpp	/^  Buffer::const_iterator m_value_end;$/;"	m	class:ndn::Block
m_variance	NFD/daemon/fw/rtt-estimator.hpp	/^  double m_variance;$/;"	m	class:nfd::RttEstimator
m_variance	utils/ndn-rtt-mean-deviation.hpp	/^  Time m_variance; \/\/ Current variance$/;"	m	class:ns3::ndn::RttMeanDeviation
m_verb	ndn-cxx/src/management/nfd-control-command.hpp	/^  name::Component m_verb;$/;"	m	class:ndn::nfd::ControlCommand
m_verifyPolicies	ndn-cxx/src/security/validator-regex.hpp	/^  RuleList m_verifyPolicies;$/;"	m	class:ndn::ValidatorRegex
m_verifySegment	ndn-cxx/src/util/segment-fetcher.hpp	/^  VerifySegment m_verifySegment;$/;"	m	class:ndn::util::SegmentFetcher
m_version	NFD/websocketpp/websocketpp/http/parser.hpp	/^    std::string m_version;$/;"	m	class:websocketpp::http::parser::parser
m_vertices	helper/boost-graph-ndn-global-routing-helper.hpp	/^  std::list<Vertice> m_vertices;$/;"	m	class:boost::NdnGlobalRouterGraph
m_virtualPayloadSize	apps/ndn-producer.hpp	/^  uint32_t m_virtualPayloadSize;$/;"	m	class:ns3::ndn::Producer
m_was_clean	NFD/websocketpp/websocketpp/connection.hpp	/^    bool m_was_clean;$/;"	m	class:websocketpp::connection
m_whatMessage	NFD/core/privilege-helper.hpp	/^    const std::string m_whatMessage;$/;"	m	class:nfd::PrivilegeHelper::Error
m_whiteList	NFD/tools/nfd-autoreg.cpp	/^  std::vector<Network> m_whiteList;$/;"	m	class:ndn::nfd_autoreg::AutoregServer	file:
m_willRemoveEntry	model/cs/content-store-with-stats.hpp	/^  TracedCallback<Ptr<const Entry>, Time> m_willRemoveEntry;$/;"	m	class:ns3::ndn::cs::ContentStoreWithStats
m_willRemoveEntry	model/cs/custom-policies/lifetime-stats-policy.hpp	/^        m_willRemoveEntry;$/;"	m	class:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy::type
m_window	apps/ndn-consumer-window.hpp	/^  TracedValue<uint32_t> m_window;$/;"	m	class:ns3::ndn::ConsumerWindow
m_wire	ndn-cxx/src/data.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::Data
m_wire	ndn-cxx/src/exclude.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::Exclude
m_wire	ndn-cxx/src/interest.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::Interest
m_wire	ndn-cxx/src/key-locator.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::KeyLocator
m_wire	ndn-cxx/src/lp/cache-policy.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::lp::CachePolicyType::CachePolicy
m_wire	ndn-cxx/src/lp/nack-header.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::lp::NackReason::NackHeader
m_wire	ndn-cxx/src/lp/packet.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::lp::Packet
m_wire	ndn-cxx/src/management/nfd-channel-status.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::ChannelStatus
m_wire	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::ControlParameters
m_wire	ndn-cxx/src/management/nfd-face-event-notification.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::FaceEventNotification
m_wire	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::FaceQueryFilter
m_wire	ndn-cxx/src/management/nfd-face-status.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::FaceStatus
m_wire	ndn-cxx/src/management/nfd-fib-entry.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::FibEntry
m_wire	ndn-cxx/src/management/nfd-fib-entry.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::NextHopRecord
m_wire	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::ForwarderStatus
m_wire	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::RibEntry
m_wire	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::Route
m_wire	ndn-cxx/src/management/nfd-strategy-choice.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::nfd::StrategyChoice
m_wire	ndn-cxx/src/meta-info.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::MetaInfo
m_wire	ndn-cxx/src/mgmt/control-response.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::mgmt::ControlResponse
m_wire	ndn-cxx/src/security/additional-description.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::security::AdditionalDescription
m_wire	ndn-cxx/src/security/secured-bag.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::SecuredBag
m_wire	ndn-cxx/src/security/validity-period.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::security::ValidityPeriod
m_wire	ndn-cxx/src/selectors.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::Selectors
m_wire	ndn-cxx/src/signature-info.hpp	/^  mutable Block m_wire;$/;"	m	class:ndn::SignatureInfo
m_work	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    work_ptr            m_work;$/;"	m	class:websocketpp::transport::asio::endpoint
m_write_flag	NFD/websocketpp/websocketpp/connection.hpp	/^    bool m_write_flag;$/;"	m	class:websocketpp::connection
m_write_frame_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    write_frame_handler     m_write_frame_handler;$/;"	m	class:websocketpp::connection
m_write_handler	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    write_handler       m_write_handler;$/;"	m	class:websocketpp::transport::asio::connection
m_write_handler	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    write_handler   m_write_handler;$/;"	m	class:websocketpp::transport::debug::connection
m_write_handler	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    write_handler   m_write_handler;$/;"	m	class:websocketpp::transport::iostream::connection
m_write_handler	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    write_handler   m_write_handler;$/;"	m	class:websocketpp::transport::iostream::endpoint
m_write_handler_allocator	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    handler_allocator   m_write_handler_allocator;$/;"	m	class:websocketpp::transport::asio::connection
m_write_lock	NFD/websocketpp/websocketpp/connection.hpp	/^    mutex_type              m_write_lock;$/;"	m	class:websocketpp::connection
main	NFD/daemon/main.cpp	/^main(int argc, char** argv)$/;"	f
main	NFD/tools/ndn-autoconfig-server.cpp	/^main(int argc, char** argv)$/;"	f
main	NFD/tools/ndn-autoconfig-server.cpp	/^main(int argc, char** argv)$/;"	f	namespace:ndn
main	NFD/tools/ndn-autoconfig/main.cpp	/^main(int argc, char** argv)$/;"	f
main	NFD/tools/ndn-tlv-peek.cpp	/^main(int argc, char* argv[])$/;"	f
main	NFD/tools/ndn-tlv-poke.cpp	/^main(int argc, char* argv[])$/;"	f
main	NFD/tools/nfd-autoreg.cpp	/^  main(int argc, char* argv[])$/;"	f	class:ndn::nfd_autoreg::AutoregServer
main	NFD/tools/nfd-autoreg.cpp	/^main(int argc, char* argv[])$/;"	f
main	NFD/tools/nfd-status.cpp	/^int main(int argc, char* argv[])$/;"	f
main	NFD/tools/nfdc.cpp	/^main(int argc, char** argv)$/;"	f
main	NFD/websocketpp/docs/simple_broadcast_server.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/docs/simple_count_server_thread.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/examples/associative_storage/associative_storage.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/examples/dev/main.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/examples/echo_server/echo_server.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/examples/echo_server_both/echo_server_both.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/examples/echo_server_tls/echo_server_tls.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/examples/handler_switch/handler_switch.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/examples/iostream_server/iostream_server.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/examples/print_server/print_server.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/examples/simple_broadcast_server/simple_broadcast_server.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/examples/sip_client/sip_client.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	NFD/websocketpp/examples/subprotocol_server/subprotocol_server.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/examples/telemetry_client/telemetry_client.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	NFD/websocketpp/examples/testee_client/testee_client.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^int main(int argc, char * argv[]) {$/;"	f
main	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/test/http/parser_perf.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/tutorials/utility_client/step1.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/tutorials/utility_client/step2.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/tutorials/utility_client/step3.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^int main() {$/;"	f
main	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^int main() {$/;"	f
main	examples/ndn-congestion-alt-topo-plugin.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-congestion-alt-topo-plugin.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-congestion-topo-plugin.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-congestion-topo-plugin.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-csma.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-csma.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-custom-apps.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-custom-apps.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-cxx-simple.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-cxx-simple.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-different-strategy-per-prefix.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-four-node-link-failure.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-four-node-link-failure.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-grid-multiple-strategies.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-grid-topo-plugin-loss.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-grid-topo-plugin-loss.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-grid-topo-plugin-red-queues.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-grid-topo-plugin-red-queues.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-grid-topo-plugin.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-grid-topo-plugin.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-grid.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-grid.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-load-balancer.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-simple-mpi.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-simple-mpi.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-simple-wifi.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-simple-wifi.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-simple-with-content-freshness.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-simple-with-content-freshness.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-simple-with-different-sizes-content-store.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-simple-with-different-sizes-content-store.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-simple-with-pcap.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-simple-with-pcap.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-simple.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-simple.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-tree-app-delay-tracer.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-tree-app-delay-tracer.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-tree-cs-tracers.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-tree-cs-tracers.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-tree-tracers.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-tree-tracers.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-tree-with-l2tracer.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-tree-with-l2tracer.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-triangle-calculate-routes.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-triangle-calculate-routes.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	examples/ndn-zipf-mandelbrot.cpp	/^main(int argc, char* argv[])$/;"	f
main	examples/ndn-zipf-mandelbrot.cpp	/^main(int argc, char* argv[])$/;"	f	namespace:ns3
main	ndn-cxx/examples/consumer-with-timer.cpp	/^main(int argc, char** argv)$/;"	f
main	ndn-cxx/examples/consumer.cpp	/^main(int argc, char** argv)$/;"	f
main	ndn-cxx/examples/producer.cpp	/^main(int argc, char** argv)$/;"	f
main	ndn-cxx/tools/ndncatchunks3.cpp	/^main(int argc, char** argv)$/;"	f
main	ndn-cxx/tools/ndncatchunks3.cpp	/^main(int argc, char** argv)$/;"	f	namespace:ndn
main	ndn-cxx/tools/ndnputchunks3.cpp	/^main(int argc, char** argv)$/;"	f
main	ndn-cxx/tools/ndnputchunks3.cpp	/^main(int argc, char** argv)$/;"	f	namespace:ndn
main	ndn-cxx/tools/ndnsec/main.cpp	/^main(int argc, char** argv)$/;"	f
main	ndn-cxx/tools/tlvdump.cpp	/^int main(int argc, const char *argv[])$/;"	f
main	tests/other/ndn-test.cpp	/^main(int argc, char* argv[])$/;"	f
maintainMapping	ndn-cxx/src/security/sec-tpm-file.cpp	/^  maintainMapping(const string& keyName)$/;"	f	class:ndn::SecTpmFile::Impl
major_version	NFD/websocketpp/websocketpp/version.hpp	/^static int const major_version = 0;$/;"	m	namespace:websocketpp
makeAcceptAllAuthorization	ndn-cxx/src/mgmt/dispatcher.cpp	/^makeAcceptAllAuthorization()$/;"	f	namespace:ndn::mgmt
makeBinaryBlock	ndn-cxx/src/encoding/block-helpers.cpp	/^makeBinaryBlock(uint32_t type, const char* value, size_t length)$/;"	f	namespace:ndn::encoding
makeBinaryBlock	ndn-cxx/src/encoding/block-helpers.cpp	/^makeBinaryBlock(uint32_t type, const uint8_t* value, size_t length)$/;"	f	namespace:ndn::encoding
makeBinaryBlock	ndn-cxx/src/encoding/block-helpers.hpp	/^makeBinaryBlock(uint32_t type, Iterator first, Iterator last)$/;"	f	namespace:ndn::encoding
makeBlock	NFD/tests/daemon/face/ndnlp.t.cpp	/^  makeBlock(size_t valueLength)$/;"	f	class:nfd::ndnlp::tests::ReassembleFixture
makeBlock	ndn-cxx/src/encoding/block-helpers.hpp	/^  makeBlock(uint32_t type, Iterator first, Iterator last)$/;"	f	class:ndn::encoding::DataBlockFast
makeBlock	ndn-cxx/src/encoding/block-helpers.hpp	/^  makeBlock(uint32_t type, Iterator first, Iterator last)$/;"	f	class:ndn::encoding::DataBlockSlow
makeData	NFD/tests/test-common.hpp	/^makeData(const Name& name)$/;"	f	namespace:nfd::tests
makeData	ndn-cxx/tests/unit-tests/make-interest-data.hpp	/^makeData(const Name& name)$/;"	f	namespace:ndn::util
makeData	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^  makeData(const Name& baseName, uint64_t segment, bool isFinal)$/;"	f	class:ndn::util::tests::Fixture
makeDataWorkload	NFD/tests/other/cs-benchmark.cpp	/^  makeDataWorkload(size_t count, const NameGenerator& genName = SimpleNameGenerator())$/;"	f	class:nfd::tests::CsBenchmarkFixture
makeDefaultPolicy	NFD/daemon/table/cs.cpp	/^makeDefaultPolicy()$/;"	f	namespace:nfd::cs
makeDefaultStrategy	NFD/daemon/fw/strategy-registry.cpp	/^makeDefaultStrategy(Forwarder& forwarder)$/;"	f	namespace:nfd::fw
makeDummyClientFace	ndn-cxx/src/util/dummy-client-face.cpp	/^makeDummyClientFace(boost::asio::io_service& ioService,$/;"	f	namespace:ndn::util
makeDummyClientFace	ndn-cxx/src/util/dummy-client-face.cpp	/^makeDummyClientFace(const DummyClientFace::Options& options)$/;"	f	namespace:ndn::util
makeEmptyBlock	ndn-cxx/src/encoding/block-helpers.cpp	/^makeEmptyBlock(uint32_t type)$/;"	f	namespace:ndn::encoding
makeEntry	NFD/daemon/table/dead-nonce-list.cpp	/^DeadNonceList::makeEntry(const Name& name, uint32_t nonce)$/;"	f	class:nfd::DeadNonceList
makeFace	NFD/tests/daemon/face/unix-stream.t.cpp	/^  makeFace(UnixStreamFace::protocol::socket socket)$/;"	f	class:nfd::tests::EndToEndFixture
makeInterest	NFD/tests/test-common.hpp	/^makeInterest(const Name& name)$/;"	f	namespace:nfd::tests
makeInterest	ndn-cxx/tests/unit-tests/make-interest-data.hpp	/^makeInterest(const Name& name)$/;"	f	namespace:ndn::util
makeInterestWorkload	NFD/tests/other/cs-benchmark.cpp	/^  makeInterestWorkload(size_t count, const NameGenerator& genName = SimpleNameGenerator())$/;"	f	class:nfd::tests::CsBenchmarkFixture
makeNestedBlock	ndn-cxx/src/encoding/block-helpers.hpp	/^makeNestedBlock(uint32_t type, const U& value)$/;"	f	namespace:ndn::encoding
makeNonNegativeIntegerBlock	ndn-cxx/src/encoding/block-helpers.cpp	/^makeNonNegativeIntegerBlock(uint32_t type, uint64_t value)$/;"	f	namespace:ndn::encoding
makeSigningInfoFromIdentityCertificate	ndn-cxx/src/management/nfd-command-options.cpp	/^makeSigningInfoFromIdentityCertificate(const Name& certificateName)$/;"	f	namespace:ndn::nfd
makeStringBlock	ndn-cxx/src/encoding/block-helpers.cpp	/^makeStringBlock(uint32_t type, const std::string& value)$/;"	f	namespace:ndn::encoding
makeTestAuthorization	ndn-cxx/tests/unit-tests/mgmt/dispatcher.t.cpp	/^makeTestAuthorization()$/;"	f	namespace:ndn::mgmt::tests
make_custom_alloc_handler	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^inline custom_alloc_handler<Handler> make_custom_alloc_handler($/;"	f	namespace:websocketpp::transport::asio
make_error_code	NFD/websocketpp/websocketpp/error.hpp	/^inline lib::error_code make_error_code(error::value e) {$/;"	f	namespace:websocketpp::error
make_error_code	NFD/websocketpp/websocketpp/extensions/extension.hpp	/^inline lib::error_code make_error_code(error::value e) {$/;"	f	namespace:websocketpp::extensions::error
make_error_code	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^lib::error_code make_error_code(error::value e) {$/;"	f	namespace:websocketpp::extensions::permessage_deflate::error
make_error_code	NFD/websocketpp/websocketpp/processors/base.hpp	/^inline lib::error_code make_error_code(error::processor_errors e) {$/;"	f	namespace:websocketpp::processor::error
make_error_code	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^inline lib::error_code make_error_code(error::value e) {$/;"	f	namespace:websocketpp::transport::asio::error
make_error_code	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^inline lib::error_code make_error_code(error::value e) {$/;"	f	namespace:websocketpp::transport::asio::socket
make_error_code	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^inline lib::error_code make_error_code(error::value e) {$/;"	f	namespace:websocketpp::transport::error
make_error_code	NFD/websocketpp/websocketpp/transport/debug/base.hpp	/^inline lib::error_code make_error_code(error::value e) {$/;"	f	namespace:websocketpp::transport::debug::error
make_error_code	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^inline lib::error_code make_error_code(error::value e) {$/;"	f	namespace:websocketpp::transport::iostream::error
make_error_code	NFD/websocketpp/websocketpp/transport/stub/base.hpp	/^inline lib::error_code make_error_code(error::value e) {$/;"	f	namespace:websocketpp::transport::stub::error
make_name_color_writer	utils/topology/rocketfuel-map-reader.cpp	/^make_name_color_writer(Names n, Colors c)$/;"	f	namespace:ns3
make_name_writer	utils/topology/annotated-topology-reader.cpp	/^make_name_writer(Names n)$/;"	f	namespace:ns3
manager	NFD/tests/rib/rib-manager.t.cpp	/^  shared_ptr<RibManager> manager;$/;"	m	class:nfd::rib::tests::RibManagerFixture	file:
managerFailureCallback	NFD/rib/rib.hpp	/^    const Rib::UpdateFailureCallback managerFailureCallback;$/;"	m	struct:nfd::rib::Rib::UpdateQueueItem
managerSuccessCallback	NFD/rib/rib.hpp	/^    const Rib::UpdateSuccessCallback managerSuccessCallback;$/;"	m	struct:nfd::rib::Rib::UpdateQueueItem
mark	NFD/daemon/table/dead-nonce-list.cpp	/^DeadNonceList::mark()$/;"	f	class:nfd::DeadNonceList
masked_copy	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    void masked_copy (std::string const & i, std::string & o,$/;"	f	class:websocketpp::processor::hybi13
masking_forbidden	NFD/websocketpp/websocketpp/processors/base.hpp	/^    masking_forbidden,$/;"	e	enum:websocketpp::processor::error::processor_errors
masking_key_type	NFD/websocketpp/websocketpp/frame.hpp	/^typedef uint32_converter masking_key_type;$/;"	t	namespace:websocketpp::frame
masking_required	NFD/websocketpp/websocketpp/processors/base.hpp	/^    masking_required,$/;"	e	enum:websocketpp::processor::error::processor_errors
match	ndn-cxx/src/security/conf/filter.hpp	/^  match(const Data& data)$/;"	f	class:ndn::security::conf::Filter
match	ndn-cxx/src/security/conf/filter.hpp	/^  match(const Interest& interest)$/;"	f	class:ndn::security::conf::Filter
match	ndn-cxx/src/security/conf/rule.hpp	/^  match(const Packet& packet)$/;"	f	class:ndn::security::conf::Rule
match	ndn-cxx/src/util/regex/regex-component-matcher.hpp	/^RegexComponentMatcher::match(const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexComponentMatcher
match	ndn-cxx/src/util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::match(const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexComponentSetMatcher
match	ndn-cxx/src/util/regex/regex-matcher.hpp	/^RegexMatcher::match(const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexMatcher
match	ndn-cxx/src/util/regex/regex-repeat-matcher.hpp	/^RegexRepeatMatcher::match(const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexRepeatMatcher
match	ndn-cxx/src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::match(const Name& name)$/;"	f	class:ndn::RegexTopMatcher
match	ndn-cxx/src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::match(const Name& name, size_t, size_t)$/;"	f	class:ndn::RegexTopMatcher
matchDataName	ndn-cxx/src/security/sec-rule-relative.cpp	/^SecRuleRelative::matchDataName(const Data& data)$/;"	f	class:ndn::SecRuleRelative
matchDataName	ndn-cxx/src/security/sec-rule-specific.cpp	/^SecRuleSpecific::matchDataName(const Data& data)$/;"	f	class:ndn::SecRuleSpecific
matchName	ndn-cxx/src/security/conf/filter.hpp	/^  matchName(const Name& name)$/;"	f	class:ndn::security::conf::RegexNameFilter
matchName	ndn-cxx/src/security/conf/filter.hpp	/^  matchName(const Name& name)$/;"	f	class:ndn::security::conf::RelationNameFilter
matchSignerName	ndn-cxx/src/security/sec-rule-relative.cpp	/^SecRuleRelative::matchSignerName(const Data& data)$/;"	f	class:ndn::SecRuleRelative
matchSignerName	ndn-cxx/src/security/sec-rule-specific.cpp	/^SecRuleSpecific::matchSignerName(const Data& data)$/;"	f	class:ndn::SecRuleSpecific
matchesData	ndn-cxx/src/interest.cpp	/^Interest::matchesData(const Data& data) const$/;"	f	class:ndn::Interest
matchesName	ndn-cxx/src/interest.cpp	/^Interest::matchesName(const Name& name) const$/;"	f	class:ndn::Interest
max	helper/boost-graph-ndn-global-routing-helper.hpp	/^  max()$/;"	f	class:std::numeric_limits
maxInterval	NFD/daemon/fw/ncc-strategy.hpp	/^    time::microseconds maxInterval;$/;"	m	class:nfd::fw::NccStrategy::PitEntryInfo
max_body_size	NFD/websocketpp/websocketpp/http/constants.hpp	/^    size_t const max_body_size = 32000000;$/;"	m	namespace:websocketpp::http
max_c2s_max_window_bits	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^static uint8_t const max_c2s_max_window_bits = 15;$/;"	m	namespace:websocketpp::extensions::permessage_deflate
max_extended_header_length	NFD/websocketpp/websocketpp/frame.hpp	/^    static unsigned int const max_extended_header_length = 12;$/;"	m	namespace:websocketpp::frame::limits
max_header_length	NFD/websocketpp/websocketpp/frame.hpp	/^    static unsigned int const max_header_length = 14;$/;"	m	namespace:websocketpp::frame::limits
max_header_size	NFD/websocketpp/websocketpp/http/constants.hpp	/^    size_t const max_header_size = 16000;$/;"	m	namespace:websocketpp::http
max_http_body_size	NFD/websocketpp/websocketpp/config/core.hpp	/^    static const size_t max_http_body_size = 32000000;$/;"	m	struct:websocketpp::config::core
max_http_body_size	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    static const size_t max_http_body_size = 32000000;$/;"	m	struct:websocketpp::config::core_client
max_http_body_size	NFD/websocketpp/websocketpp/config/debug.hpp	/^    static const size_t max_http_body_size = 32000000;$/;"	m	struct:websocketpp::config::debug_core
max_http_body_size	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    static const size_t max_http_body_size = 32000000;$/;"	m	struct:websocketpp::config::minimal_server
max_message_size	NFD/websocketpp/test/processors/hybi00.cpp	/^    static const size_t max_message_size = 16000000;$/;"	m	struct:stub_config	file:
max_message_size	NFD/websocketpp/test/processors/hybi07.cpp	/^    static const size_t max_message_size = 16000000;$/;"	m	struct:stub_config	file:
max_message_size	NFD/websocketpp/test/processors/hybi08.cpp	/^    static const size_t max_message_size = 16000000;$/;"	m	struct:stub_config	file:
max_message_size	NFD/websocketpp/test/processors/hybi13.cpp	/^    static const size_t max_message_size = 16000000;$/;"	m	struct:stub_config	file:
max_message_size	NFD/websocketpp/test/processors/hybi13.cpp	/^    static const size_t max_message_size = 16000000;$/;"	m	struct:stub_config_ext	file:
max_message_size	NFD/websocketpp/websocketpp/config/core.hpp	/^    static const size_t max_message_size = 32000000;$/;"	m	struct:websocketpp::config::core
max_message_size	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    static const size_t max_message_size = 32000000;$/;"	m	struct:websocketpp::config::core_client
max_message_size	NFD/websocketpp/websocketpp/config/debug.hpp	/^    static const size_t max_message_size = 32000000;$/;"	m	struct:websocketpp::config::debug_core
max_message_size	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    static const size_t max_message_size = 32000000;$/;"	m	struct:websocketpp::config::minimal_server
max_s2c_max_window_bits	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^static uint8_t const max_s2c_max_window_bits = 15;$/;"	m	namespace:websocketpp::extensions::permessage_deflate
max_size_	model/cs/custom-policies/freshness-policy.hpp	/^      size_t max_size_;$/;"	m	class:ns3::ndn::ndnSIM::freshness_policy_traits::policy::type
max_size_	model/cs/custom-policies/lifetime-stats-policy.hpp	/^      size_t max_size_;$/;"	m	class:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy::type
max_size_	model/cs/custom-policies/probability-policy.hpp	/^      size_t max_size_;$/;"	m	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
max_size_	utils/trie/fifo-policy.hpp	/^      size_t max_size_;$/;"	m	class:ns3::ndn::ndnSIM::fifo_policy_traits::policy::type
max_size_	utils/trie/lfu-policy.hpp	/^      size_t max_size_;$/;"	m	class:ns3::ndn::ndnSIM::lfu_policy_traits::policy::type
max_size_	utils/trie/lru-policy.hpp	/^      size_t max_size_;$/;"	m	class:ns3::ndn::ndnSIM::lru_policy_traits::policy::type
max_size_	utils/trie/payload-policy.hpp	/^      size_t max_size_;$/;"	m	class:ns3::ndn::ndnSIM::payload_policy_traits::policy::type
max_size_	utils/trie/persistent-policy.hpp	/^      size_t max_size_;$/;"	m	class:ns3::ndn::ndnSIM::persistent_policy_traits::policy::type
max_size_	utils/trie/random-policy.hpp	/^      size_t max_size_;$/;"	m	class:ns3::ndn::ndnSIM::random_policy_traits::policy::type
max_size_setter	utils/trie/multi-policy.hpp	/^        max_size_setter(policy_container& container, size_t size)$/;"	f	struct:ns3::ndn::ndnSIM::multi_policy_traits::policy::type::max_size_setter
max_size_setter	utils/trie/multi-policy.hpp	/^      struct max_size_setter {$/;"	s	class:ns3::ndn::ndnSIM::multi_policy_traits::policy::type
maxb2bBandwidth	utils/topology/rocketfuel-map-reader.hpp	/^  string maxb2bBandwidth;$/;"	m	struct:ns3::RocketfuelParams
maxb2bDelay	utils/topology/rocketfuel-map-reader.hpp	/^  string maxb2bDelay;$/;"	m	struct:ns3::RocketfuelParams
maxb2gBandwidth	utils/topology/rocketfuel-map-reader.hpp	/^  string maxb2gBandwidth;$/;"	m	struct:ns3::RocketfuelParams
maxb2gDelay	utils/topology/rocketfuel-map-reader.hpp	/^  string maxb2gDelay;$/;"	m	struct:ns3::RocketfuelParams
maxg2cBandwidth	utils/topology/rocketfuel-map-reader.hpp	/^  string maxg2cBandwidth;$/;"	m	struct:ns3::RocketfuelParams
maxg2cDelay	utils/topology/rocketfuel-map-reader.hpp	/^  string maxg2cDelay;$/;"	m	struct:ns3::RocketfuelParams
md5	NFD/websocketpp/websocketpp/common/md5.hpp	/^namespace md5 {$/;"	n	namespace:websocketpp
md5_append	NFD/websocketpp/websocketpp/common/md5.hpp	/^void md5_append(md5_state_t *pms, md5_byte_t const * data, size_t nbytes) {$/;"	f	namespace:websocketpp::md5
md5_byte_t	NFD/websocketpp/websocketpp/common/md5.hpp	/^typedef unsigned char md5_byte_t; \/* 8-bit byte *\/$/;"	t	namespace:websocketpp::md5
md5_finish	NFD/websocketpp/websocketpp/common/md5.hpp	/^void md5_finish(md5_state_t *pms, md5_byte_t digest[16]) {$/;"	f	namespace:websocketpp::md5
md5_hash_hex	NFD/websocketpp/websocketpp/common/md5.hpp	/^inline std::string md5_hash_hex(std::string const & input) {$/;"	f	namespace:websocketpp::md5
md5_hash_string	NFD/websocketpp/websocketpp/common/md5.hpp	/^inline std::string md5_hash_string(std::string const & s) {$/;"	f	namespace:websocketpp::md5
md5_init	NFD/websocketpp/websocketpp/common/md5.hpp	/^void md5_init(md5_state_t *pms) {$/;"	f	namespace:websocketpp::md5
md5_process	NFD/websocketpp/websocketpp/common/md5.hpp	/^static void md5_process(md5_state_t *pms, md5_byte_t const * data \/*[64]*\/) {$/;"	f	namespace:websocketpp::md5
md5_state_s	NFD/websocketpp/websocketpp/common/md5.hpp	/^typedef struct md5_state_s {$/;"	s	namespace:websocketpp::md5
md5_state_t	NFD/websocketpp/websocketpp/common/md5.hpp	/^} md5_state_t;$/;"	t	namespace:websocketpp::md5	typeref:struct:websocketpp::md5::md5_state_s
md5_word_t	NFD/websocketpp/websocketpp/common/md5.hpp	/^typedef unsigned int md5_word_t; \/* 32-bit word *\/$/;"	t	namespace:websocketpp::md5
measurements	NFD/daemon/table/fib.hpp	/^namespace measurements {$/;"	n	namespace:nfd
measurements	NFD/daemon/table/measurements-entry.cpp	/^namespace measurements {$/;"	n	namespace:nfd	file:
measurements	NFD/daemon/table/measurements-entry.hpp	/^namespace measurements {$/;"	n	namespace:nfd
measurements	NFD/daemon/table/measurements.hpp	/^namespace measurements {$/;"	n	namespace:nfd
measurements	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^  Measurements& measurements;$/;"	m	class:nfd::tests::MeasurementsAccessorFixture	file:
member_hook	utils/trie/trie.hpp	/^                                        &trie::unordered_set_member_hook_> member_hook;$/;"	t	class:ns3::ndn::ndnSIM::trie
message	NFD/websocketpp/websocketpp/error.hpp	/^    std::string message(int value) const {$/;"	f	class:websocketpp::error::category
message	NFD/websocketpp/websocketpp/extensions/extension.hpp	/^    std::string message(int value) const {$/;"	f	class:websocketpp::extensions::error::category
message	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    std::string message(int value) const {$/;"	f	class:websocketpp::extensions::permessage_deflate::error::category
message	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    message(const con_msg_man_ptr manager)$/;"	f	class:websocketpp::message_buffer::message
message	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    message(const con_msg_man_ptr manager, frame::opcode::value op, size_t size = 128)$/;"	f	class:websocketpp::message_buffer::message
message	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^class message {$/;"	c	namespace:websocketpp::message_buffer
message	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    message(con_msg_man_ptr manager, size_t size = 128)$/;"	f	class:websocketpp::message_buffer::message
message	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^class message {$/;"	c	namespace:websocketpp::message_buffer
message	NFD/websocketpp/websocketpp/processors/base.hpp	/^    std::string message(int value) const {$/;"	f	class:websocketpp::processor::error::processor_category
message	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^    std::string message(int value) const {$/;"	f	class:websocketpp::transport::asio::error::category
message	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^    std::string message(int value) const {$/;"	f	class:websocketpp::transport::asio::socket::socket_category
message	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    std::string message(int value) const {$/;"	f	class:websocketpp::transport::error::category
message	NFD/websocketpp/websocketpp/transport/debug/base.hpp	/^    std::string message(int value) const {$/;"	f	class:websocketpp::transport::debug::error::category
message	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^    std::string message(int value) const {$/;"	f	class:websocketpp::transport::iostream::error::category
message	NFD/websocketpp/websocketpp/transport/stub/base.hpp	/^    std::string message(int value) const {$/;"	f	class:websocketpp::transport::stub::error::category
message_buffer	NFD/websocketpp/websocketpp/message_buffer/alloc.hpp	/^namespace message_buffer {$/;"	n	namespace:websocketpp
message_buffer	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^namespace message_buffer {$/;"	n	namespace:websocketpp
message_buffer	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^namespace message_buffer {$/;"	n	namespace:websocketpp
message_deleter	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^void message_deleter(T* msg) {$/;"	f	namespace:websocketpp::message_buffer
message_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef lib::function<void(connection_hdl,message_ptr)> message_handler;$/;"	t	class:websocketpp::connection
message_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    typedef typename connection_type::message_handler message_handler;$/;"	t	class:websocketpp::endpoint
message_header	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const message_header = 0x20;$/;"	m	struct:websocketpp::log::alevel
message_payload	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const message_payload = 0x40;$/;"	m	struct:websocketpp::log::alevel
message_ptr	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^typedef websocketpp::config::asio_tls_client::message_type::ptr message_ptr;$/;"	t	file:
message_ptr	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^typedef server::message_ptr message_ptr;$/;"	t	file:
message_ptr	NFD/websocketpp/examples/echo_server/echo_server.cpp	/^typedef server::message_ptr message_ptr;$/;"	t	file:
message_ptr	NFD/websocketpp/examples/echo_server_tls/echo_server_tls.cpp	/^typedef websocketpp::config::asio::message_type::ptr message_ptr;$/;"	t	file:
message_ptr	NFD/websocketpp/examples/iostream_server/iostream_server.cpp	/^typedef server::message_ptr message_ptr;$/;"	t	file:
message_ptr	NFD/websocketpp/examples/sip_client/sip_client.cpp	/^typedef websocketpp::config::asio_client::message_type::ptr message_ptr;$/;"	t	file:
message_ptr	NFD/websocketpp/examples/testee_client/testee_client.cpp	/^typedef websocketpp::config::asio_client::message_type::ptr message_ptr;$/;"	t	file:
message_ptr	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^typedef server::message_ptr message_ptr;$/;"	t	file:
message_ptr	NFD/websocketpp/test/connection/connection_tu2.hpp	/^typedef websocketpp::config::core::message_type::ptr message_ptr;$/;"	t
message_ptr	NFD/websocketpp/test/processors/hybi00.cpp	/^typedef stub_config::message_type::ptr message_ptr;$/;"	t	file:
message_ptr	NFD/websocketpp/test/processors/hybi13.cpp	/^typedef stub_config::message_type::ptr message_ptr;$/;"	t	file:
message_ptr	NFD/websocketpp/test/roles/server.cpp	/^typedef websocketpp::config::core::message_type::ptr message_ptr;$/;"	t	file:
message_ptr	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef typename message_type::ptr message_ptr;$/;"	t	class:websocketpp::connection
message_ptr	NFD/websocketpp/websocketpp/endpoint.hpp	/^    typedef typename connection_type::message_ptr message_ptr;$/;"	t	class:websocketpp::endpoint
message_ptr	NFD/websocketpp/websocketpp/message_buffer/alloc.hpp	/^    typedef typename message::ptr message_ptr;$/;"	t	class:websocketpp::message_buffer::alloc::con_msg_manager
message_ptr	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    typedef typename message::ptr message_ptr;$/;"	t	class:websocketpp::message_buffer::alloc::con_msg_manager
message_ptr	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    typedef typename message_type::ptr message_ptr;$/;"	t	class:websocketpp::processor::hybi00
message_ptr	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    typedef typename message_type::ptr message_ptr;$/;"	t	class:websocketpp::processor::hybi13
message_ptr	NFD/websocketpp/websocketpp/processors/processor.hpp	/^    typedef typename config::message_type::ptr message_ptr;$/;"	t	class:websocketpp::processor::processor
message_too_big	NFD/websocketpp/websocketpp/close.hpp	/^    static value const message_too_big = 1009;$/;"	m	namespace:websocketpp::close::status
message_too_big	NFD/websocketpp/websocketpp/processors/base.hpp	/^    message_too_big,$/;"	e	enum:websocketpp::processor::error::processor_errors
message_type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^    typedef base::message_type message_type;$/;"	t	struct:debug_custom	file:
message_type	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    typedef core::message_type message_type;$/;"	t	struct:custom_config	file:
message_type	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^    typedef core::message_type message_type;$/;"	t	struct:testee_config	file:
message_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::message_type message_type;$/;"	t	struct:debug_config_client	file:
message_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::message_type message_type;$/;"	t	struct:stub_config	file:
message_type	NFD/websocketpp/test/endpoint/endpoint.cpp	/^    typedef core::message_type message_type;$/;"	t	struct:stub_config	file:
message_type	NFD/websocketpp/test/processors/hybi00.cpp	/^        <websocketpp::message_buffer::alloc::con_msg_manager> message_type;$/;"	t	struct:stub_config	file:
message_type	NFD/websocketpp/test/processors/hybi07.cpp	/^        <websocketpp::message_buffer::alloc::con_msg_manager> message_type;$/;"	t	struct:stub_config	file:
message_type	NFD/websocketpp/test/processors/hybi08.cpp	/^        <websocketpp::message_buffer::alloc::con_msg_manager> message_type;$/;"	t	struct:stub_config	file:
message_type	NFD/websocketpp/test/processors/hybi13.cpp	/^        <websocketpp::message_buffer::alloc::con_msg_manager> message_type;$/;"	t	struct:stub_config	file:
message_type	NFD/websocketpp/test/processors/hybi13.cpp	/^        <websocketpp::message_buffer::alloc::con_msg_manager> message_type;$/;"	t	struct:stub_config_ext	file:
message_type	NFD/websocketpp/test/roles/client.cpp	/^    typedef core::message_type message_type;$/;"	t	struct:stub_config	file:
message_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::message_type message_type;$/;"	t	struct:config	file:
message_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::message_type message_type;$/;"	t	struct:config_tls	file:
message_type	NFD/websocketpp/websocketpp/config/asio.hpp	/^    typedef base::message_type message_type;$/;"	t	struct:websocketpp::config::asio_tls
message_type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^    typedef base::message_type message_type;$/;"	t	struct:websocketpp::config::asio_tls_client
message_type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^    typedef base::message_type message_type;$/;"	t	struct:websocketpp::config::asio
message_type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^    typedef base::message_type message_type;$/;"	t	struct:websocketpp::config::asio_client
message_type	NFD/websocketpp/websocketpp/config/core.hpp	/^        message_type;$/;"	t	struct:websocketpp::config::core
message_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        message_type;$/;"	t	struct:websocketpp::config::core_client
message_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^        message_type;$/;"	t	struct:websocketpp::config::debug_core
message_type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^    typedef base::message_type message_type;$/;"	t	struct:websocketpp::config::debug_asio_tls
message_type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^    typedef base::message_type message_type;$/;"	t	struct:websocketpp::config::debug_asio
message_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        message_type;$/;"	t	struct:websocketpp::config::minimal_server
message_type	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef typename config::message_type message_type;$/;"	t	class:websocketpp::connection
message_type	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    typedef typename config::message_type message_type;$/;"	t	class:websocketpp::processor::hybi00
message_type	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    typedef typename config::message_type message_type;$/;"	t	class:websocketpp::processor::hybi13
method	NFD/websocketpp/websocketpp/http/parser.hpp	/^        method,$/;"	e	enum:websocketpp::http::parser::state::value
method_not_allowed	NFD/websocketpp/websocketpp/http/constants.hpp	/^            method_not_allowed = 405,$/;"	e	enum:websocketpp::http::status_code::value
metric	helper/ndn-scenario-helper.hpp	/^    int32_t metric;$/;"	m	struct:ns3::ndn::ScenarioHelper::RouteInfo
mgmt	ndn-cxx/src/mgmt/control-parameters.hpp	/^namespace mgmt {$/;"	n	namespace:ndn
mgmt	ndn-cxx/src/mgmt/control-response.cpp	/^namespace mgmt {$/;"	n	namespace:ndn	file:
mgmt	ndn-cxx/src/mgmt/control-response.hpp	/^namespace mgmt {$/;"	n	namespace:ndn
mgmt	ndn-cxx/src/mgmt/dispatcher.cpp	/^namespace mgmt {$/;"	n	namespace:ndn	file:
mgmt	ndn-cxx/src/mgmt/dispatcher.hpp	/^namespace mgmt {$/;"	n	namespace:ndn
mgmt	ndn-cxx/src/mgmt/status-dataset-context.cpp	/^namespace mgmt {$/;"	n	namespace:ndn	file:
mgmt	ndn-cxx/src/mgmt/status-dataset-context.hpp	/^namespace mgmt {$/;"	n	namespace:ndn
mgmt	ndn-cxx/tests/unit-tests/mgmt/dispatcher.t.cpp	/^namespace mgmt {$/;"	n	namespace:ndn	file:
mgmt	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^namespace mgmt {$/;"	n	namespace:ndn	file:
min_c2s_max_window_bits	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^static uint8_t const min_c2s_max_window_bits = 8;$/;"	m	namespace:websocketpp::extensions::permessage_deflate
min_s2c_max_window_bits	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^static uint8_t const min_s2c_max_window_bits = 8;$/;"	m	namespace:websocketpp::extensions::permessage_deflate
minb2bBandwidth	utils/topology/rocketfuel-map-reader.hpp	/^  string minb2bBandwidth;$/;"	m	struct:ns3::RocketfuelParams
minb2bDelay	utils/topology/rocketfuel-map-reader.hpp	/^  string minb2bDelay;$/;"	m	struct:ns3::RocketfuelParams
minb2gBandwidth	utils/topology/rocketfuel-map-reader.hpp	/^  string minb2gBandwidth;$/;"	m	struct:ns3::RocketfuelParams
minb2gDelay	utils/topology/rocketfuel-map-reader.hpp	/^  string minb2gDelay;$/;"	m	struct:ns3::RocketfuelParams
ming2cBandwidth	utils/topology/rocketfuel-map-reader.hpp	/^  string ming2cBandwidth;$/;"	m	struct:ns3::RocketfuelParams
ming2cDelay	utils/topology/rocketfuel-map-reader.hpp	/^  string ming2cDelay;$/;"	m	struct:ns3::RocketfuelParams
minimal_client	NFD/websocketpp/websocketpp/config/minimal_client.hpp	/^typedef minimal_server minimal_client;$/;"	t	namespace:websocketpp::config
minimal_server	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^struct minimal_server {$/;"	s	namespace:websocketpp::config
minimum_outgoing_window_bits	NFD/websocketpp/websocketpp/config/core.hpp	/^        static const uint8_t minimum_outgoing_window_bits = 8;$/;"	m	struct:websocketpp::config::core::permessage_deflate_config
minimum_outgoing_window_bits	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        static const uint8_t minimum_outgoing_window_bits = 8;$/;"	m	struct:websocketpp::config::core_client::permessage_deflate_config
minimum_outgoing_window_bits	NFD/websocketpp/websocketpp/config/debug.hpp	/^        static const uint8_t minimum_outgoing_window_bits = 8;$/;"	m	struct:websocketpp::config::debug_core::permessage_deflate_config
minimum_outgoing_window_bits	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        static const uint8_t minimum_outgoing_window_bits = 8;$/;"	m	struct:websocketpp::config::minimal_server::permessage_deflate_config
minor_version	NFD/websocketpp/websocketpp/version.hpp	/^static int const minor_version = 5;$/;"	m	namespace:websocketpp
missing_required_header	NFD/websocketpp/websocketpp/processors/base.hpp	/^    missing_required_header,$/;"	e	enum:websocketpp::processor::error::processor_errors
missing_tls_init_handler	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^        missing_tls_init_handler,$/;"	e	enum:websocketpp::transport::asio::socket::error::value
mock_con	NFD/websocketpp/test/transport/asio/timers.cpp	/^    mock_con(bool a, config::alog_type& b, config::elog_type& c) : base(a,b,c) {}$/;"	f	struct:mock_con
mock_con	NFD/websocketpp/test/transport/asio/timers.cpp	/^struct mock_con: public websocketpp::transport::asio::connection<config> {$/;"	s	file:
mock_endpoint	NFD/websocketpp/test/transport/asio/timers.cpp	/^    mock_endpoint() {$/;"	f	struct:mock_endpoint
mock_endpoint	NFD/websocketpp/test/transport/asio/timers.cpp	/^struct mock_endpoint : public websocketpp::transport::asio::endpoint<config> {$/;"	s	file:
mode	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^namespace mode {$/;"	n	namespace:websocketpp::extensions::permessage_deflate
modify	utils/trie/trie-with-policy.hpp	/^  modify(iterator position, Modifier mod)$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
modifyChildrensInheritedRoutes	NFD/rib/fib-updater.cpp	/^FibUpdater::modifyChildrensInheritedRoutes(const Rib::RibEntryList& children,$/;"	f	class:nfd::rib::FibUpdater
modifyInheritedRoutes	NFD/rib/rib.cpp	/^Rib::modifyInheritedRoutes(const RibUpdateList& inheritedRoutes)$/;"	f	class:nfd::rib::Rib
monotonic_deadline_timer	ndn-cxx/src/util/monotonic_deadline_timer.hpp	/^typedef boost::asio::basic_deadline_timer<time::steady_clock> monotonic_deadline_timer;$/;"	t	namespace:ndn
moveStaleEventId	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^  scheduler::EventId moveStaleEventId;$/;"	m	struct:nfd::cs::priority_fifo::EntryInfo
moveToStaleQueue	NFD/daemon/table/cs-policy-priority-fifo.cpp	/^PriorityFifoPolicy::moveToStaleQueue(iterator i)$/;"	f	class:nfd::cs::priority_fifo::PriorityFifoPolicy
moved_permanently	NFD/websocketpp/websocketpp/http/constants.hpp	/^            moved_permanently = 301,$/;"	e	enum:websocketpp::http::status_code::value
msg	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    server::message_ptr msg;$/;"	m	struct:action	file:
msg_ftr	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    uint8_t const msg_ftr;$/;"	m	class:websocketpp::processor::hybi00
msg_hdr	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    uint8_t const msg_hdr;$/;"	m	class:websocketpp::processor::hybi00
msg_manager	NFD/websocketpp/test/processors/hybi00.cpp	/^    stub_config::con_msg_manager_type::ptr msg_manager;$/;"	m	struct:processor_setup	file:
msg_manager	NFD/websocketpp/test/processors/hybi13.cpp	/^    con_msg_manager_type::ptr msg_manager;$/;"	m	struct:processor_setup	file:
msg_manager	NFD/websocketpp/test/processors/hybi13.cpp	/^    con_msg_manager_type::ptr msg_manager;$/;"	m	struct:processor_setup_ext	file:
msg_manager_ptr	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    typedef typename config::con_msg_manager_type::ptr msg_manager_ptr;$/;"	t	class:websocketpp::processor::hybi00
msg_manager_ptr	NFD/websocketpp/websocketpp/processors/hybi07.hpp	/^    typedef typename config::con_msg_manager_type::ptr msg_manager_ptr;$/;"	t	class:websocketpp::processor::hybi07
msg_manager_ptr	NFD/websocketpp/websocketpp/processors/hybi08.hpp	/^    typedef typename config::con_msg_manager_type::ptr msg_manager_ptr;$/;"	t	class:websocketpp::processor::hybi08
msg_manager_ptr	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    typedef typename msg_manager_type::ptr msg_manager_ptr;$/;"	t	class:websocketpp::processor::hybi13
msg_manager_type	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    typedef typename config::con_msg_manager_type msg_manager_type;$/;"	t	class:websocketpp::processor::hybi13
msg_metadata	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^        msg_metadata() {}$/;"	f	struct:websocketpp::processor::hybi13::msg_metadata
msg_metadata	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^        msg_metadata(message_ptr m, frame::masking_key_type p)$/;"	f	struct:websocketpp::processor::hybi13::msg_metadata
msg_metadata	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^        msg_metadata(message_ptr m, size_t p) : msg_ptr(m),prepared_key(p) {}$/;"	f	struct:websocketpp::processor::hybi13::msg_metadata
msg_metadata	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    struct msg_metadata {$/;"	s	class:websocketpp::processor::hybi13
msg_ptr	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^        message_ptr msg_ptr;        \/\/ pointer to the message data buffer$/;"	m	struct:websocketpp::processor::hybi13::msg_metadata
multi_policy_container	utils/trie/detail/multi-policy-container.hpp	/^  multi_policy_container(Base& base)$/;"	f	struct:ns3::ndn::ndnSIM::detail::multi_policy_container
multi_policy_container	utils/trie/detail/multi-policy-container.hpp	/^struct multi_policy_container$/;"	s	namespace:ns3::ndn::ndnSIM::detail
multi_policy_traits	utils/trie/multi-policy.hpp	/^struct multi_policy_traits {$/;"	s	namespace:ns3::ndn::ndnSIM
multi_type_container	utils/trie/detail/multi-type-container.hpp	/^struct multi_type_container$/;"	s	namespace:ns3::ndn::ndnSIM::detail
multicast	NFD/daemon/fw/access-strategy.cpp	/^AccessStrategy::multicast(shared_ptr<pit::Entry> pitEntry, shared_ptr<fib::Entry> fibEntry,$/;"	f	class:nfd::fw::AccessStrategy
multiple_choices	NFD/websocketpp/websocketpp/http/constants.hpp	/^            multiple_choices = 300,$/;"	e	enum:websocketpp::http::status_code::value
mutex_type	NFD/websocketpp/websocketpp/concurrency/basic.hpp	/^    typedef lib::mutex mutex_type;$/;"	t	class:websocketpp::concurrency::basic
mutex_type	NFD/websocketpp/websocketpp/concurrency/none.hpp	/^    typedef none_impl::fake_mutex mutex_type;$/;"	t	class:websocketpp::concurrency::none
mutex_type	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef typename concurrency_type::mutex_type mutex_type;$/;"	t	class:websocketpp::connection
mutex_type	NFD/websocketpp/websocketpp/endpoint.hpp	/^    typedef typename concurrency_type::mutex_type mutex_type;$/;"	t	class:websocketpp::endpoint
mutex_type	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    typedef typename concurrency::mutex_type mutex_type;$/;"	t	class:websocketpp::log::basic
mutex_type	NFD/websocketpp/websocketpp/random/random_device.hpp	/^        typedef typename concurrency::mutex_type mutex_type;$/;"	t	class:websocketpp::random::random_device::int_generator
mutex_type	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    typedef typename concurrency_type::mutex_type mutex_type;$/;"	t	class:websocketpp::transport::debug::connection
mutex_type	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    typedef typename concurrency_type::mutex_type mutex_type;$/;"	t	class:websocketpp::transport::iostream::connection
mutex_type	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    typedef typename concurrency_type::mutex_type mutex_type;$/;"	t	class:websocketpp::transport::stub::connection
my_equal	NFD/websocketpp/websocketpp/utilities.hpp	/^    my_equal(std::locale const & loc ) : m_loc(loc) {}$/;"	f	struct:websocketpp::utility::my_equal
my_equal	NFD/websocketpp/websocketpp/utilities.hpp	/^struct my_equal {$/;"	s	namespace:websocketpp::utility
nData	ndn-cxx/tests/integrated/face.cpp	/^  uint32_t nData;$/;"	m	class:ndn::tests::FacesFixture	file:
nDatas	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^  uint32_t nDatas;$/;"	m	class:ndn::util::tests::Fixture	file:
nErrors	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^  uint32_t nErrors;$/;"	m	class:ndn::util::tests::Fixture	file:
nFinishedRegs	NFD/tools/ndn-autoconfig/multicast-discovery.hpp	/^  size_t nFinishedRegs;$/;"	m	class:ndn::tools::autoconfig::MulticastDiscovery
nInInterests	ndn-cxx/tests/integrated/face.cpp	/^  uint32_t nInInterests;$/;"	m	class:ndn::tests::FacesFixture	file:
nInInterests2	ndn-cxx/tests/integrated/face.cpp	/^  uint32_t nInInterests2;$/;"	m	class:ndn::tests::FacesFixture	file:
nRegFailures	ndn-cxx/tests/integrated/face.cpp	/^  uint32_t nRegFailures;$/;"	m	class:ndn::tests::FacesFixture	file:
nRegSuccesses	ndn-cxx/tests/integrated/face.cpp	/^  uint64_t nRegSuccesses;$/;"	m	class:ndn::tests::FacesFixture3	file:
nRequestedRegs	NFD/tools/ndn-autoconfig/multicast-discovery.hpp	/^  size_t nRequestedRegs;$/;"	m	class:ndn::tools::autoconfig::MulticastDiscovery
nTimeouts	ndn-cxx/tests/integrated/face.cpp	/^  uint32_t nTimeouts;$/;"	m	class:ndn::tests::FacesFixture	file:
nUnregFailures	ndn-cxx/tests/integrated/face.cpp	/^  uint64_t nUnregFailures;$/;"	m	class:ndn::tests::FacesFixture3	file:
nUnregSuccesses	ndn-cxx/tests/integrated/face.cpp	/^  uint64_t nUnregSuccesses;$/;"	m	class:ndn::tests::FacesFixture3	file:
name	NFD/core/network-interface.hpp	/^  std::string name;$/;"	m	class:nfd::NetworkInterfaceInfo
name	NFD/rib/fib-update.hpp	/^  Name name;$/;"	m	class:nfd::rib::FibUpdate
name	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^  Name name;$/;"	m	class:nfd::tests::PeriodicalInsertionFixture	file:
name	NFD/websocketpp/examples/associative_storage/associative_storage.cpp	/^    std::string name;$/;"	m	struct:connection_data	file:
name	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    std::string name;$/;"	m	struct:connection_data	file:
name	helper/ndn-scenario-helper.hpp	/^    std::string name;$/;"	m	struct:ns3::ndn::ScenarioHelper::AppInfo
name	ndn-cxx/src/name-component.cpp	/^namespace name {$/;"	n	namespace:ndn	file:
name	ndn-cxx/src/name-component.hpp	/^namespace name {$/;"	n	namespace:ndn
name1	ndn-cxx/tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^  Name name1;$/;"	m	class:ndn::tests::CertificateCacheFixture	file:
name2	ndn-cxx/tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^  Name name2;$/;"	m	class:ndn::tests::CertificateCacheFixture	file:
name_color_writer	utils/topology/rocketfuel-map-reader.cpp	/^  name_color_writer(Names _names, Colors _colors)$/;"	f	class:ns3::name_color_writer
name_color_writer	utils/topology/rocketfuel-map-reader.cpp	/^class name_color_writer {$/;"	c	namespace:ns3	file:
name_getter	utils/trie/multi-policy.hpp	/^    name_getter(std::string& name)$/;"	f	struct:ns3::ndn::ndnSIM::multi_policy_traits::name_getter
name_getter	utils/trie/multi-policy.hpp	/^  struct name_getter {$/;"	s	struct:ns3::ndn::ndnSIM::multi_policy_traits
name_tree	NFD/daemon/table/fib-entry.hpp	/^namespace name_tree {$/;"	n	namespace:nfd
name_tree	NFD/daemon/table/measurements-entry.hpp	/^namespace name_tree {$/;"	n	namespace:nfd
name_tree	NFD/daemon/table/name-tree-entry.cpp	/^namespace name_tree {$/;"	n	namespace:nfd	file:
name_tree	NFD/daemon/table/name-tree-entry.hpp	/^namespace name_tree {$/;"	n	namespace:nfd
name_tree	NFD/daemon/table/name-tree.cpp	/^namespace name_tree {$/;"	n	namespace:nfd	file:
name_tree	NFD/daemon/table/name-tree.hpp	/^namespace name_tree {$/;"	n	namespace:nfd
name_tree	NFD/daemon/table/pit-entry.hpp	/^namespace name_tree {$/;"	n	namespace:nfd
name_tree	NFD/daemon/table/strategy-choice-entry.hpp	/^namespace name_tree {$/;"	n	namespace:nfd
name_writer	utils/topology/annotated-topology-reader.cpp	/^  name_writer(Names _names)$/;"	f	class:ns3::name_writer
name_writer	utils/topology/annotated-topology-reader.cpp	/^class name_writer {$/;"	c	namespace:ns3	file:
names	utils/topology/annotated-topology-reader.cpp	/^  Names names;$/;"	m	class:ns3::name_writer	file:
names	utils/topology/rocketfuel-map-reader.cpp	/^  Names names;$/;"	m	class:ns3::name_color_writer	file:
ndn	NFD/tools/ndn-autoconfig-server.cpp	/^namespace ndn {$/;"	n	file:
ndn	NFD/tools/ndn-autoconfig/base-dns.cpp	/^namespace ndn {$/;"	n	file:
ndn	NFD/tools/ndn-autoconfig/base-dns.hpp	/^namespace ndn {$/;"	n
ndn	NFD/tools/ndn-autoconfig/base.cpp	/^namespace ndn {$/;"	n	file:
ndn	NFD/tools/ndn-autoconfig/base.hpp	/^namespace ndn {$/;"	n
ndn	NFD/tools/ndn-autoconfig/guess-from-identity-name.cpp	/^namespace ndn {$/;"	n	file:
ndn	NFD/tools/ndn-autoconfig/guess-from-identity-name.hpp	/^namespace ndn {$/;"	n
ndn	NFD/tools/ndn-autoconfig/guess-from-search-domains.cpp	/^namespace ndn {$/;"	n	file:
ndn	NFD/tools/ndn-autoconfig/guess-from-search-domains.hpp	/^namespace ndn {$/;"	n
ndn	NFD/tools/ndn-autoconfig/main.cpp	/^namespace ndn {$/;"	n	file:
ndn	NFD/tools/ndn-autoconfig/multicast-discovery.cpp	/^namespace ndn {$/;"	n	file:
ndn	NFD/tools/ndn-autoconfig/multicast-discovery.hpp	/^namespace ndn {$/;"	n
ndn	NFD/tools/nfd-autoreg.cpp	/^namespace ndn {$/;"	n	file:
ndn	NFD/tools/nfd-status.cpp	/^namespace ndn {$/;"	n	file:
ndn	apps/ndn-app.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	apps/ndn-app.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	apps/ndn-consumer-batches.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	apps/ndn-consumer-batches.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	apps/ndn-consumer-cbr.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	apps/ndn-consumer-cbr.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	apps/ndn-consumer-window.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	apps/ndn-consumer-window.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	apps/ndn-consumer-zipf-mandelbrot.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	apps/ndn-consumer-zipf-mandelbrot.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	apps/ndn-consumer.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	apps/ndn-consumer.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	apps/ndn-producer.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	apps/ndn-producer.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	helper/ndn-app-helper.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	helper/ndn-app-helper.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	helper/ndn-face-container.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	helper/ndn-face-container.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	helper/ndn-fib-helper.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	helper/ndn-fib-helper.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	helper/ndn-global-routing-helper.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	helper/ndn-global-routing-helper.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	helper/ndn-link-control-helper.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	helper/ndn-link-control-helper.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	helper/ndn-scenario-helper.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	helper/ndn-scenario-helper.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	helper/ndn-stack-helper.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	helper/ndn-stack-helper.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	helper/ndn-strategy-choice-helper.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	helper/ndn-strategy-choice-helper.hpp	/^namespace ndn {$/;"	n
ndn	helper/ndn-strategy-choice-helper.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/cs/content-store-impl.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	model/cs/content-store-impl.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/cs/content-store-nocache.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	model/cs/content-store-nocache.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/cs/content-store-with-freshness.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	model/cs/content-store-with-freshness.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/cs/content-store-with-probability.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	model/cs/content-store-with-probability.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/cs/content-store-with-stats.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	model/cs/content-store-with-stats.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/cs/custom-policies/freshness-policy.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/cs/custom-policies/lifetime-stats-policy.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/cs/custom-policies/probability-policy.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/cs/ndn-content-store.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	model/cs/ndn-content-store.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/ndn-app-face.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	model/ndn-app-face.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/ndn-common.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	model/ndn-common.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/ndn-face.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/ndn-global-router.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	model/ndn-global-router.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/ndn-header.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	model/ndn-header.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/ndn-l3-protocol.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	model/ndn-l3-protocol.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/ndn-net-device-face.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	model/ndn-net-device-face.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	model/ndn-ns3.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	model/ndn-ns3.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	ndn-cxx/examples/consumer-with-timer.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/examples/consumer.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/examples/producer.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/common.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/data.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/data.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/destination-flag.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/destination-flag.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/detail/container-with-on-empty-signal.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/detail/face-impl.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/detail/interest-filter-record.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/detail/pending-interest.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/detail/registered-prefix.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/encoding/block-helpers.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/encoding/block-helpers.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/encoding/block.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/encoding/block.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/encoding/buffer-stream.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/encoding/buffer.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/encoding/buffer.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/encoding/cryptopp/asn_ext.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/encoding/cryptopp/asn_ext.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/encoding/encoder.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/encoding/encoder.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/encoding/encoding-buffer-fwd.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/encoding/encoding-buffer.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/encoding/estimator.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/encoding/estimator.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/encoding/nfd-constants.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/encoding/nfd-constants.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/encoding/oid.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/encoding/oid.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/encoding/tlv-nfd.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/encoding/tlv-security.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/encoding/tlv.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/exclude.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/exclude.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/face.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/face.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/interest-filter.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/interest-filter.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/interest.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/interest.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/key-locator.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/key-locator.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/link.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/link.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/lp/cache-policy.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/lp/cache-policy.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/lp/detail/field-decl.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/lp/detail/field-info.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/lp/detail/field-info.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/lp/field.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/lp/fields.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/lp/nack-header.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/lp/nack-header.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/lp/nack.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/lp/nack.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/lp/packet.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/lp/packet.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/lp/sequence.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/lp/tlv.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-channel-status.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/management/nfd-channel-status.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-command-options.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/management/nfd-command-options.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-control-command.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/management/nfd-control-command.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-control-parameters.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/management/nfd-control-parameters.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-control-response.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-controller.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/management/nfd-controller.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-face-event-notification.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/management/nfd-face-event-notification.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-face-monitor.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-face-status.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/management/nfd-face-status.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-face-traits.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-fib-entry.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/management/nfd-fib-entry.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-local-control-header.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-rib-entry.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/management/nfd-rib-entry.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-rib-flags.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/management/nfd-strategy-choice.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/management/nfd-strategy-choice.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/meta-info.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/meta-info.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/mgmt/control-parameters.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/mgmt/control-response.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/mgmt/control-response.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/mgmt/dispatcher.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/mgmt/dispatcher.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/mgmt/status-dataset-context.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/mgmt/status-dataset-context.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/name-component.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/name-component.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/name.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/name.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/additional-description.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/additional-description.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/certificate-cache-ttl.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/certificate-cache-ttl.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/certificate-cache.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/certificate-container.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/certificate-container.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/certificate-extension.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/certificate-extension.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/certificate-subject-description.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/certificate-subject-description.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/certificate.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/certificate.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/conf/checker.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/conf/common.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/conf/filter.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/conf/rule.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/digest-sha256.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/digest-sha256.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/identity-certificate.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/identity-certificate.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/identity-container.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/identity-container.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/identity.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/identity.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/key-chain.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/key-chain.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/key-container.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/key-container.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/key-params.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/key-params.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/key.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/key.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/pib-impl.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/pib-memory.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/pib-memory.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/pib-sqlite3.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/pib-sqlite3.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/pib.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/pib.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/public-key.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/public-key.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/sec-public-info-sqlite3.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/sec-public-info.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/sec-public-info.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/sec-rule-relative.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/sec-rule-relative.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/sec-rule-specific.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/sec-rule-specific.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/sec-rule.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/sec-tpm-file.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/sec-tpm-file.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/sec-tpm-osx.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/sec-tpm-osx.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/sec-tpm.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/sec-tpm.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/secured-bag.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/secured-bag.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/security-common.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/signature-sha256-with-ecdsa.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/signature-sha256-with-ecdsa.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/signature-sha256-with-rsa.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/signature-sha256-with-rsa.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/signing-helpers.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/signing-helpers.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/signing-info.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/signing-info.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/validation-request.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/validator-config.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/validator-config.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/validator-null.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/validator-regex.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/validator-regex.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/validator.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/validator.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/security/validity-period.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/security/validity-period.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/selectors.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/selectors.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/signature-info.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/signature-info.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/signature.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/signature.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/tag-host.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/tag.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/transport/stream-transport.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/transport/tcp-transport.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/transport/tcp-transport.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/transport/transport.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/transport/unix-transport.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/transport/unix-transport.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/command-interest-generator.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/command-interest-validator.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/concepts.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/config-file.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/config-file.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/crypto.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/crypto.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/digest.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/digest.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/dns.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/dns.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/dummy-client-face.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/dummy-client-face.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/ethernet.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/ethernet.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/event-emitter.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/face-uri.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/face-uri.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/in-memory-storage-entry.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/in-memory-storage-entry.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/in-memory-storage-fifo.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/in-memory-storage-fifo.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/in-memory-storage-lfu.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/in-memory-storage-lfu.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/in-memory-storage-lru.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/in-memory-storage-lru.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/in-memory-storage-persistent.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/in-memory-storage-persistent.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/in-memory-storage.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/in-memory-storage.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/indented-stream.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/indented-stream.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/io.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/monotonic_deadline_timer.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/network-monitor.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/network-monitor.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/notification-stream.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/notification-subscriber.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/random.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/random.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/regex.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/regex/regex-backref-manager.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/regex/regex-backref-matcher.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/regex/regex-component-matcher.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/regex/regex-component-set-matcher.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/regex/regex-matcher.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/regex/regex-pattern-list-matcher.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/regex/regex-pseudo-matcher.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/regex/regex-repeat-matcher.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/regex/regex-top-matcher.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/regex/regex-top-matcher.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/scheduler-scoped-event-id.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/scheduler-scoped-event-id.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/scheduler.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/scheduler.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/segment-fetcher.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/segment-fetcher.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/signal-connection.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/signal-connection.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/signal-emit.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/signal-scoped-connection.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/signal-scoped-connection.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/signal-signal.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/sqlite3-statement.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/sqlite3-statement.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/string-helper.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/string-helper.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/time-custom-clock.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/time-unit-test-clock.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/time-unit-test-clock.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/src/util/time.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/src/util/time.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/tests/identity-management-fixture.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/identity-management-fixture.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/tests/integrated/face.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/integrated/network-monitor.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/data.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/encoding/block-helpers.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/encoding/encoder.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/encoding/estimator.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/encoding/tlv.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/exclude.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/face.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/identity-management-time-fixture.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/identity-management-time-fixture.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/tests/unit-tests/interest.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/key-locator.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/link.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/lp/cache-policy.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/lp/nack-header.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/lp/nack.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/make-interest-data.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/tests/unit-tests/management/nfd-channel-status.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/management/nfd-command-options.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/management/nfd-control-command.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/management/nfd-control-parameters.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/management/nfd-control-response.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/management/nfd-face-event-notification.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/management/nfd-face-query-filter.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/management/nfd-face-status.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/management/nfd-fib-entry.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/management/nfd-forwarder-status.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/management/nfd-strategy-choice.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/meta-info.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/mgmt/dispatcher.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/name.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/ndebug.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/network-configuration-detector.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/network-configuration-detector.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/tests/unit-tests/security/additional-info.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/certificate-container.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/certificate.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/digest-sha256.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/dummy-keychain.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/tests/unit-tests/security/identity-container.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/identity-fixture.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/identity-management-fixture.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/identity.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/key-chain.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/key-container.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/key-params.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/key.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/pib-data-fixture.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/tests/unit-tests/security/pib-impl.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/pib-memory.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/pib-sqlite3.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/pib.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/public-key.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/sec-rule-relative.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/sec-rule-specific.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/sec-tpm-file.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/sec-tpm-osx.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/signing-helpers.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/signing-info.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/validator.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/security/validity-period.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/signature-info.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/tag-host.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/transport/tcp-transport.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/transport/transport-fixture.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/tests/unit-tests/transport/unix-transport.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/unit-test-time-fixture.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/tests/unit-tests/util/concepts.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/config-file.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/digest.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/dns.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/ethernet.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/in-memory-storage-fifo.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/in-memory-storage-lfu.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/in-memory-storage-lru.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/in-memory-storage-persistent.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/indented-stream.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/io.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/notification-stream.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/random.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/regex.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/simple-notification.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/tests/unit-tests/util/sqlite3-statement.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/string-helper.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/test-home-environment-fixture.hpp	/^namespace ndn {$/;"	n
ndn	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/time-unit-test-clock.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/util/time.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tests/unit-tests/version.t.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tools/ndncatchunks3.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tools/ndnputchunks3.cpp	/^namespace ndn {$/;"	n	file:
ndn	ndn-cxx/tools/tlvdump.cpp	/^namespace ndn {$/;"	n	file:
ndn	tests/unit-tests/helper/ndn-face-container.t.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	tests/unit-tests/helper/ndn-fib-helper.t.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	tests/unit-tests/helper/ndn-global-routing-helper.t.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	tests/unit-tests/helper/ndn-link-control-helper.t.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	tests/unit-tests/helper/ndn-strategy-choice-helper.t.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	tests/unit-tests/model/ndn-header.t.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	tests/unit-tests/model/ndn-l3-protocol.t.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	tests/unit-tests/model/ndn-net-device-face.t.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	tests/unit-tests/model/ndn-ns3.t.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	tests/unit-tests/ndn-cxx/face.t.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	tests/unit-tests/tests-common.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	tests/unit-tests/utils/tracers/ndn-app-delay-tracer.t.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	utils/dummy-keychain.cpp	/^namespace ndn {$/;"	n	file:
ndn	utils/dummy-keychain.hpp	/^namespace ndn {$/;"	n
ndn	utils/ndn-fw-hop-count-tag.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	utils/ndn-fw-hop-count-tag.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/ndn-ns3-packet-tag.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/ndn-rtt-estimator.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	utils/ndn-rtt-estimator.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/ndn-rtt-mean-deviation.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	utils/ndn-rtt-mean-deviation.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/ndn-time.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	utils/ndn-time.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/tracers/ndn-app-delay-tracer.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	utils/tracers/ndn-app-delay-tracer.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/tracers/ndn-cs-tracer.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	utils/tracers/ndn-cs-tracer.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/tracers/ndn-l3-rate-tracer.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	utils/tracers/ndn-l3-rate-tracer.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/tracers/ndn-l3-tracer.cpp	/^namespace ndn {$/;"	n	namespace:ns3	file:
ndn	utils/tracers/ndn-l3-tracer.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/trie/aggregate-stats-policy.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/trie/counting-policy.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/trie/detail/functor-hook.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/trie/detail/multi-policy-container.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/trie/detail/multi-type-container.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/trie/empty-policy.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/trie/fifo-policy.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/trie/lfu-policy.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/trie/lru-policy.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/trie/multi-policy.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/trie/payload-policy.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/trie/payload-with-policy.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/trie/persistent-policy.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/trie/random-policy.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/trie/trie-with-policy.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndn	utils/trie/trie.hpp	/^namespace ndn {$/;"	n	namespace:ns3
ndnHelper	helper/ndn-scenario-helper.hpp	/^  StackHelper ndnHelper;$/;"	m	class:ns3::ndn::ScenarioHelper
ndnSIM	model/cs/custom-policies/freshness-policy.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	model/cs/custom-policies/lifetime-stats-policy.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	model/cs/custom-policies/probability-policy.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	utils/trie/aggregate-stats-policy.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	utils/trie/counting-policy.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	utils/trie/detail/functor-hook.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	utils/trie/detail/multi-policy-container.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	utils/trie/detail/multi-type-container.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	utils/trie/empty-policy.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	utils/trie/fifo-policy.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	utils/trie/lfu-policy.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	utils/trie/lru-policy.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	utils/trie/multi-policy.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	utils/trie/payload-policy.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	utils/trie/payload-with-policy.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	utils/trie/persistent-policy.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	utils/trie/random-policy.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	utils/trie/trie-with-policy.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndnSIM	utils/trie/trie.hpp	/^namespace ndnSIM {$/;"	n	namespace:ns3::ndn
ndn_digestSha256	ndn-cxx/src/util/crypto.cpp	/^void ndn_digestSha256(const uint8_t* data, size_t dataLength, uint8_t* digest)$/;"	f	namespace:ndn
ndn_global_router_graph_category	helper/boost-graph-ndn-global-routing-helper.hpp	/^class ndn_global_router_graph_category : public virtual vertex_list_graph_tag,$/;"	c	namespace:boost
ndnlp	NFD/daemon/face/ndnlp-data.cpp	/^namespace ndnlp {$/;"	n	namespace:nfd	file:
ndnlp	NFD/daemon/face/ndnlp-data.hpp	/^namespace ndnlp {$/;"	n	namespace:nfd
ndnlp	NFD/daemon/face/ndnlp-partial-message-store.cpp	/^namespace ndnlp {$/;"	n	namespace:nfd	file:
ndnlp	NFD/daemon/face/ndnlp-partial-message-store.hpp	/^namespace ndnlp {$/;"	n	namespace:nfd
ndnlp	NFD/daemon/face/ndnlp-sequence-generator.cpp	/^namespace ndnlp {$/;"	n	namespace:nfd	file:
ndnlp	NFD/daemon/face/ndnlp-sequence-generator.hpp	/^namespace ndnlp {$/;"	n	namespace:nfd
ndnlp	NFD/daemon/face/ndnlp-slicer.cpp	/^namespace ndnlp {$/;"	n	namespace:nfd	file:
ndnlp	NFD/daemon/face/ndnlp-slicer.hpp	/^namespace ndnlp {$/;"	n	namespace:nfd
ndnlp	NFD/tests/daemon/face/ndnlp.t.cpp	/^namespace ndnlp {$/;"	n	namespace:nfd	file:
ndnsec_cert_dump	ndn-cxx/tools/ndnsec/cert-dump.hpp	/^ndnsec_cert_dump(int argc, char** argv)$/;"	f
ndnsec_cert_gen	ndn-cxx/tools/ndnsec/cert-gen.hpp	/^ndnsec_cert_gen(int argc, char** argv)$/;"	f
ndnsec_cert_install	ndn-cxx/tools/ndnsec/cert-install.hpp	/^ndnsec_cert_install(int argc, char** argv)$/;"	f
ndnsec_cert_revoke	ndn-cxx/tools/ndnsec/cert-revoke.hpp	/^ndnsec_cert_revoke(int argc, char** argv)$/;"	f
ndnsec_delete	ndn-cxx/tools/ndnsec/delete.hpp	/^ndnsec_delete(int argc, char** argv)$/;"	f
ndnsec_dsk_gen	ndn-cxx/tools/ndnsec/dsk-gen.hpp	/^ndnsec_dsk_gen(int argc, char** argv)$/;"	f
ndnsec_export	ndn-cxx/tools/ndnsec/export.hpp	/^ndnsec_export(int argc, char** argv)$/;"	f
ndnsec_get_default	ndn-cxx/tools/ndnsec/get-default.hpp	/^ndnsec_get_default(int argc, char** argv)$/;"	f
ndnsec_import	ndn-cxx/tools/ndnsec/import.hpp	/^ndnsec_import(int argc, char** argv)$/;"	f
ndnsec_key_gen	ndn-cxx/tools/ndnsec/key-gen.hpp	/^ndnsec_key_gen(int argc, char** argv)$/;"	f
ndnsec_list	ndn-cxx/tools/ndnsec/list.hpp	/^ndnsec_list(int argc, char** argv)$/;"	f
ndnsec_op_tool	ndn-cxx/tools/ndnsec/op-tool.hpp	/^ndnsec_op_tool(int argc, char** argv)$/;"	f
ndnsec_set_acl	ndn-cxx/tools/ndnsec/set-acl.hpp	/^ndnsec_set_acl(int argc, char** argv)$/;"	f
ndnsec_set_default	ndn-cxx/tools/ndnsec/set-default.hpp	/^ndnsec_set_default(int argc, char** argv)$/;"	f
ndnsec_sig_verify	ndn-cxx/tools/ndnsec/sig-verify.hpp	/^ndnsec_sig_verify(int argc, char** argv)$/;"	f
ndnsec_sign_req	ndn-cxx/tools/ndnsec/sign-req.hpp	/^ndnsec_sign_req(int argc, char** argv)$/;"	f
ndnsec_unlock_tpm	ndn-cxx/tools/ndnsec/unlock-tpm.hpp	/^ndnsec_unlock_tpm(int argc, char** argv)$/;"	f
ndntlvpeek	NFD/tools/ndn-tlv-peek.cpp	/^namespace ndntlvpeek {$/;"	n	file:
ndntlvpoke	NFD/tools/ndn-tlv-poke.cpp	/^namespace ndntlvpoke {$/;"	n	file:
negotiate	NFD/websocketpp/websocketpp/extensions/permessage_deflate/disabled.hpp	/^    err_str_pair negotiate(http::attribute_list const &) {$/;"	f	class:websocketpp::extensions::permessage_deflate::disabled
negotiate	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    err_str_pair negotiate(http::attribute_list const & offer) {$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
negotiate_c2s_max_window_bits	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    void negotiate_c2s_max_window_bits(std::string const & value,$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
negotiate_c2s_no_context_takeover	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    void negotiate_c2s_no_context_takeover(std::string const & value,$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
negotiate_extensions	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    err_str_pair negotiate_extensions(request_type const & req) {$/;"	f	class:websocketpp::processor::hybi13
negotiate_extensions	NFD/websocketpp/websocketpp/processors/processor.hpp	/^    virtual err_str_pair negotiate_extensions(request_type const &) {$/;"	f	class:websocketpp::processor::processor
negotiate_s2c_max_window_bits	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    void negotiate_s2c_max_window_bits(std::string const & value,$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
negotiate_s2c_no_context_takeover	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    void negotiate_s2c_no_context_takeover(std::string const & value,$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
nestedBlock	ndn-cxx/src/encoding/block-helpers.hpp	/^nestedBlock(uint32_t type, const U& value)$/;"	f	namespace:ndn::encoding
net	NFD/websocketpp/websocketpp/common/network.hpp	/^namespace net {$/;"	n	namespace:websocketpp::lib
network_authentication_required	NFD/websocketpp/websocketpp/http/constants.hpp	/^            network_authentication_required = 511$/;"	e	enum:websocketpp::http::status_code::value
nextBlock	NFD/daemon/face/ndnlp-sequence-generator.cpp	/^SequenceGenerator::nextBlock(size_t count)$/;"	f	class:nfd::ndnlp::SequenceGenerator
nfd	NFD/common.hpp	/^namespace nfd {$/;"	n
nfd	NFD/core/algorithm.hpp	/^namespace nfd {$/;"	n
nfd	NFD/core/config-file.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/core/config-file.hpp	/^namespace nfd {$/;"	n
nfd	NFD/core/global-io.hpp	/^namespace nfd {$/;"	n
nfd	NFD/core/logger.hpp	/^namespace nfd {$/;"	n
nfd	NFD/core/network-interface.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/core/network-interface.hpp	/^namespace nfd {$/;"	n
nfd	NFD/core/network.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/core/network.hpp	/^namespace nfd {$/;"	n
nfd	NFD/core/notification-stream.hpp	/^namespace nfd {$/;"	n
nfd	NFD/core/privilege-helper.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/core/privilege-helper.hpp	/^namespace nfd {$/;"	n
nfd	NFD/core/random.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/core/random.hpp	/^namespace nfd {$/;"	n
nfd	NFD/core/scheduler.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/core/scheduler.hpp	/^namespace nfd {$/;"	n
nfd	NFD/core/segment-publisher.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/channel.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/channel.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/datagram-face.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/ethernet-face.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/ethernet-face.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/ethernet-factory.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/ethernet-factory.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/face-counters.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/face.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/face.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/local-face.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/multicast-udp-face.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/multicast-udp-face.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/ndnlp-data.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/ndnlp-data.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/ndnlp-partial-message-store.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/ndnlp-partial-message-store.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/ndnlp-sequence-generator.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/ndnlp-sequence-generator.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/ndnlp-slicer.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/ndnlp-slicer.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/ndnlp-tlv.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/null-face.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/null-face.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/protocol-factory.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/stream-face.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/tcp-channel.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/tcp-channel.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/tcp-face.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/tcp-face.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/tcp-factory.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/tcp-factory.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/udp-channel.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/udp-channel.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/udp-face.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/udp-face.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/udp-factory.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/udp-factory.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/unix-stream-channel.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/unix-stream-channel.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/unix-stream-face.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/unix-stream-face.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/unix-stream-factory.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/unix-stream-factory.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/websocket-channel.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/websocket-channel.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/websocket-face.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/websocket-face.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/face/websocket-factory.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/face/websocket-factory.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/access-strategy.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/fw/access-strategy.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/best-route-strategy.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/fw/best-route-strategy.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/best-route-strategy2.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/fw/best-route-strategy2.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/broadcast-strategy.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/fw/broadcast-strategy.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/client-control-strategy.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/fw/client-control-strategy.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/face-table.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/fw/face-table.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/forwarder-counters.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/forwarder.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/fw/forwarder.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/multicast-strategy.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/fw/multicast-strategy.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/ncc-strategy.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/fw/ncc-strategy.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/retx-suppression-exponential.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/fw/retx-suppression-exponential.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/retx-suppression-fixed.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/fw/retx-suppression-fixed.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/retx-suppression.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/fw/retx-suppression.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/rtt-estimator.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/fw/rtt-estimator.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/strategy-info.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/strategy-registry.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/fw/strategy-registry.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/fw/strategy.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/fw/strategy.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/main.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/mgmt/app-face.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/mgmt/channel-status-publisher.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/mgmt/channel-status-publisher.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/mgmt/command-validator.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/mgmt/command-validator.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/mgmt/face-manager.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/mgmt/face-manager.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/mgmt/face-query-status-publisher.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/mgmt/face-query-status-publisher.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/mgmt/face-status-publisher.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/mgmt/face-status-publisher.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/mgmt/fib-enumeration-publisher.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/mgmt/fib-enumeration-publisher.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/mgmt/fib-manager.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/mgmt/fib-manager.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/mgmt/general-config-section.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/mgmt/general-config-section.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/mgmt/internal-face.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/mgmt/internal-face.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/mgmt/manager-base.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/mgmt/manager-base.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/mgmt/status-server.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/mgmt/status-server.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/mgmt/strategy-choice-manager.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/mgmt/strategy-choice-manager.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/mgmt/strategy-choice-publisher.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/mgmt/strategy-choice-publisher.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/mgmt/tables-config-section.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/mgmt/tables-config-section.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/nfd.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/nfd.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/cs-entry-impl.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/cs-entry-impl.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/cs-entry.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/cs-entry.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/cs-internal.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/cs-policy-lru.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/cs-policy-lru.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/cs-policy-priority-fifo.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/cs-policy.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/cs-policy.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/cs.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/cs.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/dead-nonce-list.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/dead-nonce-list.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/fib-entry.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/fib-entry.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/fib-nexthop.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/fib-nexthop.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/fib.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/fib.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/measurements-accessor.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/measurements-accessor.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/measurements-entry.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/measurements-entry.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/measurements.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/measurements.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/name-tree-entry.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/name-tree-entry.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/name-tree.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/name-tree.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/pit-entry.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/pit-entry.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/pit-face-record.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/pit-face-record.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/pit-in-record.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/pit-in-record.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/pit-out-record.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/pit-out-record.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/pit.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/pit.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/strategy-choice-entry.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/strategy-choice-entry.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/strategy-choice.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/strategy-choice.hpp	/^namespace nfd {$/;"	n
nfd	NFD/daemon/table/strategy-info-host.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/daemon/table/strategy-info-host.hpp	/^namespace nfd {$/;"	n
nfd	NFD/rib/fib-update.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/rib/fib-update.hpp	/^namespace nfd {$/;"	n
nfd	NFD/rib/fib-updater.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/rib/fib-updater.hpp	/^namespace nfd {$/;"	n
nfd	NFD/rib/nrd.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/rib/nrd.hpp	/^namespace nfd {$/;"	n
nfd	NFD/rib/remote-registrator.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/rib/remote-registrator.hpp	/^namespace nfd {$/;"	n
nfd	NFD/rib/rib-entry.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/rib/rib-entry.hpp	/^namespace nfd {$/;"	n
nfd	NFD/rib/rib-manager.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/rib/rib-manager.hpp	/^namespace nfd {$/;"	n
nfd	NFD/rib/rib-status-publisher.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/rib/rib-status-publisher.hpp	/^namespace nfd {$/;"	n
nfd	NFD/rib/rib-update-batch.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/rib/rib-update-batch.hpp	/^namespace nfd {$/;"	n
nfd	NFD/rib/rib-update.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/rib/rib-update.hpp	/^namespace nfd {$/;"	n
nfd	NFD/rib/rib.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/rib/rib.hpp	/^namespace nfd {$/;"	n
nfd	NFD/rib/route.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/rib/route.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/core/algorithm.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/core/config-file.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/core/global-io.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/core/logger.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/core/ndebug.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/core/network-interface.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/core/network.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/core/notification-stream.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/core/privilege-helper.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/core/random.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/core/scheduler.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/core/segment-publisher.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/core/simple-notification.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/core/version.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/face/dummy-face.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/daemon/face/dummy-stream-sender.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/daemon/face/ethernet.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/face/face-counters.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/face/face-history.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/daemon/face/face.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/face/ndnlp.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/face/null-face.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/face/packet-datasets.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/face/packet-datasets.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/daemon/face/tcp.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/face/udp.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/face/unix-stream.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/face/websocket.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/fw/access-strategy.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/fw/best-route-strategy2.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/fw/broadcast-strategy.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/fw/client-control-strategy.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/fw/dummy-strategy.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/daemon/fw/face-table.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/fw/forwarder.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/fw/multicast-strategy.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/fw/ncc-strategy.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/fw/retx-suppression.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/fw/rtt-estimator.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/fw/strategy-tester.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/daemon/fw/strategy.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/fw/topology-tester.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/daemon/mgmt/channel-status-common.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/daemon/mgmt/channel-status-publisher.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/daemon/mgmt/face-query-status-publisher.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/daemon/mgmt/face-status-publisher.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/daemon/mgmt/fib-enumeration-publisher.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/mgmt/general-config-section.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/mgmt/manager-base.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/mgmt/status-server.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/mgmt/validation-common.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/mgmt/validation-common.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/daemon/table/cs-policy-lru.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/table/cs-policy-priority-fifo.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/table/cs.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/table/fib.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/table/measurements.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/table/name-tree.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/table/pit.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/table/strategy-choice.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/daemon/table/strategy-info-host.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/global-configuration.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/identity-management-fixture.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/identity-management-fixture.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/limited-io.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/limited-io.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/other/cs-benchmark.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/rib/fib-updates-common.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/rib/fib-updates-new-face.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/rib/fib-updates-new-namespace.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/rib/fib-updates-update-face.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/rib/remote-registrator.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/rib/rib-manager.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/rib/rib-status-publisher-common.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/rib/rib-status-publisher.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/rib/rib-test-common.hpp	/^namespace nfd {$/;"	n
nfd	NFD/tests/rib/rib-update.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/rib/rib.t.cpp	/^namespace nfd {$/;"	n	file:
nfd	NFD/tests/test-common.hpp	/^namespace nfd {$/;"	n
nfd	examples/ndn-load-balancer/random-load-balancer-strategy.cpp	/^namespace nfd {$/;"	n	file:
nfd	examples/ndn-load-balancer/random-load-balancer-strategy.hpp	/^namespace nfd {$/;"	n
nfd	helper/ndn-strategy-choice-helper.hpp	/^namespace nfd {$/;"	n
nfd	helper/ndn-strategy-choice-helper.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	model/ndn-common.hpp	/^namespace nfd {$/;"	n
nfd	model/ndn-face.hpp	/^namespace nfd {$/;"	n
nfd	model/ndn-l3-protocol.hpp	/^namespace nfd {$/;"	n
nfd	ndn-cxx/src/encoding/nfd-constants.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/src/encoding/nfd-constants.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/encoding/tlv-nfd.hpp	/^namespace nfd {$/;"	n	namespace:ndn::tlv
nfd	ndn-cxx/src/face.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-channel-status.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/src/management/nfd-channel-status.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-command-options.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/src/management/nfd-command-options.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-control-command.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/src/management/nfd-control-command.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-control-parameters.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/src/management/nfd-control-parameters.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-control-response.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-controller.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/src/management/nfd-controller.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-face-event-notification.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/src/management/nfd-face-event-notification.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-face-monitor.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/src/management/nfd-face-query-filter.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-face-status.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/src/management/nfd-face-status.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-face-traits.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-fib-entry.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/src/management/nfd-fib-entry.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/src/management/nfd-forwarder-status.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-local-control-header.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-rib-entry.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/src/management/nfd-rib-entry.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-rib-flags.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/src/management/nfd-strategy-choice.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/src/management/nfd-strategy-choice.hpp	/^namespace nfd {$/;"	n	namespace:ndn
nfd	ndn-cxx/tests/unit-tests/management/nfd-channel-status.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/tests/unit-tests/management/nfd-command-options.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/tests/unit-tests/management/nfd-control-command.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/tests/unit-tests/management/nfd-control-parameters.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/tests/unit-tests/management/nfd-control-response.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/tests/unit-tests/management/nfd-face-event-notification.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/tests/unit-tests/management/nfd-face-query-filter.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/tests/unit-tests/management/nfd-face-status.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/tests/unit-tests/management/nfd-fib-entry.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/tests/unit-tests/management/nfd-forwarder-status.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	ndn-cxx/tests/unit-tests/management/nfd-strategy-choice.t.cpp	/^namespace nfd {$/;"	n	namespace:ndn	file:
nfd	utils/tracers/ndn-l3-tracer.hpp	/^namespace nfd {$/;"	n
nfd_autoreg	NFD/tools/nfd-autoreg.cpp	/^namespace nfd_autoreg {$/;"	n	namespace:ndn	file:
nfdc	NFD/tools/nfdc.cpp	/^namespace nfdc {$/;"	n	file:
nfdc	NFD/tools/nfdc.hpp	/^namespace nfdc {$/;"	n
noCallbacksFired	NFD/tests/core/config-file.t.cpp	/^  noCallbacksFired() const$/;"	f	class:nfd::tests::DummySubscriber
no_content	NFD/websocketpp/websocketpp/http/constants.hpp	/^            no_content = 204,$/;"	e	enum:websocketpp::http::status_code::value
no_incoming_buffers	NFD/websocketpp/websocketpp/error.hpp	/^    no_incoming_buffers,$/;"	e	enum:websocketpp::error::value
no_outgoing_buffers	NFD/websocketpp/websocketpp/error.hpp	/^    no_outgoing_buffers,$/;"	e	enum:websocketpp::error::value
no_protocol_support	NFD/websocketpp/websocketpp/processors/base.hpp	/^    no_protocol_support,$/;"	e	enum:websocketpp::processor::error::processor_errors
no_status	NFD/websocketpp/websocketpp/close.hpp	/^    static value const no_status = 1005;$/;"	m	namespace:websocketpp::close::status
nocase_compare	NFD/websocketpp/websocketpp/utilities.hpp	/^    struct nocase_compare$/;"	s	struct:websocketpp::utility::ci_less
node	helper/ndn-scenario-helper.hpp	/^    std::string node;$/;"	m	struct:ns3::ndn::ScenarioHelper::AppInfo
node1	helper/ndn-scenario-helper.hpp	/^    std::string node1;$/;"	m	struct:ns3::ndn::ScenarioHelper::RouteInfo
node2	helper/ndn-scenario-helper.hpp	/^    std::string node2;$/;"	m	struct:ns3::ndn::ScenarioHelper::RouteInfo
nodeProperty	utils/topology/rocketfuel-map-reader.hpp	/^      nodeProperty;$/;"	t	class:ns3::RocketfuelMapReader
nodeWriter	utils/topology/rocketfuel-map-reader.cpp	/^nodeWriter(std::ostream& os, NodeContainer& m)$/;"	f	namespace:ns3
node_map_t	utils/topology/rocketfuel-map-reader.hpp	/^  typedef map<string, Traits::vertex_descriptor> node_map_t;$/;"	t	class:ns3::RocketfuelMapReader
node_type_t	utils/topology/rocketfuel-map-reader.hpp	/^  enum node_type_t { UNKNOWN = 0, CLIENT = 1, GATEWAY = 2, BACKBONE = 3 };$/;"	g	class:ns3::RocketfuelMapReader
nodes	helper/ndn-scenario-helper.hpp	/^  std::map<std::string, Ptr<Node>> nodes;$/;"	m	class:ns3::ndn::ScenarioHelper
noexcept	ndn-cxx/src/util/ethernet.hpp	/^  operator()(const ndn::util::ethernet::Address& a) const noexcept;$/;"	m	struct:std::hash
noexcept	ndn-cxx/src/util/scheduler-scoped-event-id.hpp	/^  ScopedEventId(ScopedEventId&& other) noexcept;$/;"	m	class:ndn::util::scheduler::ScopedEventId
noexcept	ndn-cxx/src/util/signal-scoped-connection.hpp	/^  ScopedConnection(ScopedConnection&& other) noexcept;$/;"	m	class:ndn::util::signal::ScopedConnection
noexcept	ndn-cxx/src/util/time.hpp	/^  from_time_t(std::time_t t) noexcept;$/;"	m	class:ndn::time::system_clock
noexcept	ndn-cxx/src/util/time.hpp	/^  now() noexcept;$/;"	m	class:ndn::time::steady_clock
noexcept	ndn-cxx/src/util/time.hpp	/^  now() noexcept;$/;"	m	class:ndn::time::system_clock
noexcept	ndn-cxx/src/util/time.hpp	/^  to_time_t(const time_point& t) noexcept;$/;"	m	class:ndn::time::system_clock
nonNegativeIntegerBlock	ndn-cxx/src/encoding/block-helpers.hpp	/^nonNegativeIntegerBlock(uint32_t type, uint64_t value)$/;"	f	namespace:ndn::encoding
non_authoritative_information	NFD/websocketpp/websocketpp/http/constants.hpp	/^            non_authoritative_information = 203,$/;"	e	enum:websocketpp::http::status_code::value
non_minimal_encoding	NFD/websocketpp/websocketpp/processors/base.hpp	/^    non_minimal_encoding,$/;"	e	enum:websocketpp::processor::error::processor_errors
non_pointer_traits	utils/trie/trie.hpp	/^struct non_pointer_traits {$/;"	s	namespace:ns3::ndn::ndnSIM
none	NFD/websocketpp/websocketpp/concurrency/none.hpp	/^class none {$/;"	c	namespace:websocketpp::concurrency
none	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const none = 0x0;$/;"	m	struct:websocketpp::log::alevel
none	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const none = 0x0;$/;"	m	struct:websocketpp::log::elevel
none	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static value const none = 0;$/;"	m	struct:websocketpp::log::channel_type_hint
none	NFD/websocketpp/websocketpp/random/none.hpp	/^namespace none {$/;"	n	namespace:websocketpp::random
none_impl	NFD/websocketpp/websocketpp/concurrency/none.hpp	/^namespace none_impl {$/;"	n	namespace:websocketpp::concurrency
nop	ndn-cxx/src/util/face-uri.cpp	/^nop()$/;"	f	namespace:ndn::util
normal	NFD/websocketpp/websocketpp/close.hpp	/^    static value const normal = 1000;$/;"	m	namespace:websocketpp::close::status
not_acceptable	NFD/websocketpp/websocketpp/http/constants.hpp	/^            not_acceptable = 406,$/;"	e	enum:websocketpp::http::status_code::value
not_extended	NFD/websocketpp/websocketpp/http/constants.hpp	/^            not_extended = 510,$/;"	e	enum:websocketpp::http::status_code::value
not_found	NFD/websocketpp/websocketpp/http/constants.hpp	/^            not_found = 404,$/;"	e	enum:websocketpp::http::status_code::value
not_implemented	NFD/websocketpp/websocketpp/http/constants.hpp	/^            not_implemented = 501,$/;"	e	enum:websocketpp::http::status_code::value
not_implemented	NFD/websocketpp/websocketpp/processors/base.hpp	/^    not_implemented,$/;"	e	enum:websocketpp::processor::error::processor_errors
not_implemented	NFD/websocketpp/websocketpp/transport/debug/base.hpp	/^    not_implemented,$/;"	e	enum:websocketpp::transport::debug::error::value
not_implemented	NFD/websocketpp/websocketpp/transport/stub/base.hpp	/^    not_implemented$/;"	e	enum:websocketpp::transport::stub::error::value
not_modified	NFD/websocketpp/websocketpp/http/constants.hpp	/^            not_modified = 304,$/;"	e	enum:websocketpp::http::status_code::value
notificationConn	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  util::signal::Connection notificationConn;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
notificationStream	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  util::NotificationStream<SimpleNotification> notificationStream;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
now	ndn-cxx/src/util/monotonic_deadline_timer.hpp	/^  now()$/;"	f	struct:boost::asio::time_traits
npos	ndn-cxx/src/name.cpp	/^const size_t Name::npos = std::numeric_limits<size_t>::max();$/;"	m	class:ndn::Name	file:
npos	ndn-cxx/src/name.hpp	/^  static const size_t npos;$/;"	m	class:ndn::Name
ns3	NFD/core/scheduler.cpp	/^namespace ns3 {$/;"	n	file:
ns3	apps/ndn-app.cpp	/^namespace ns3 {$/;"	n	file:
ns3	apps/ndn-app.hpp	/^namespace ns3 {$/;"	n
ns3	apps/ndn-consumer-batches.cpp	/^namespace ns3 {$/;"	n	file:
ns3	apps/ndn-consumer-batches.hpp	/^namespace ns3 {$/;"	n
ns3	apps/ndn-consumer-cbr.cpp	/^namespace ns3 {$/;"	n	file:
ns3	apps/ndn-consumer-cbr.hpp	/^namespace ns3 {$/;"	n
ns3	apps/ndn-consumer-window.cpp	/^namespace ns3 {$/;"	n	file:
ns3	apps/ndn-consumer-window.hpp	/^namespace ns3 {$/;"	n
ns3	apps/ndn-consumer-zipf-mandelbrot.cpp	/^namespace ns3 {$/;"	n	file:
ns3	apps/ndn-consumer-zipf-mandelbrot.hpp	/^namespace ns3 {$/;"	n
ns3	apps/ndn-consumer.cpp	/^namespace ns3 {$/;"	n	file:
ns3	apps/ndn-consumer.hpp	/^namespace ns3 {$/;"	n
ns3	apps/ndn-producer.cpp	/^namespace ns3 {$/;"	n	file:
ns3	apps/ndn-producer.hpp	/^namespace ns3 {$/;"	n
ns3	examples/ndn-congestion-alt-topo-plugin.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-congestion-topo-plugin.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-csma.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-custom-apps.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-custom-apps/custom-app.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-custom-apps/custom-app.hpp	/^namespace ns3 {$/;"	n
ns3	examples/ndn-custom-apps/hijacker.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-custom-apps/hijacker.hpp	/^namespace ns3 {$/;"	n
ns3	examples/ndn-cxx-simple.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-cxx-simple/real-app-starter.hpp	/^namespace ns3 {$/;"	n
ns3	examples/ndn-four-node-link-failure.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-grid-topo-plugin-loss.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-grid-topo-plugin-red-queues.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-grid-topo-plugin.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-grid.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-simple-mpi.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-simple-wifi.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-simple-with-content-freshness.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-simple-with-content-freshness/one-interest-requester.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-simple-with-content-freshness/one-interest-requester.hpp	/^namespace ns3 {$/;"	n
ns3	examples/ndn-simple-with-different-sizes-content-store.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-simple-with-pcap.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-simple.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-tree-app-delay-tracer.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-tree-cs-tracers.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-tree-tracers.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-tree-with-l2tracer.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-triangle-calculate-routes.cpp	/^namespace ns3 {$/;"	n	file:
ns3	examples/ndn-zipf-mandelbrot.cpp	/^namespace ns3 {$/;"	n	file:
ns3	helper/ndn-app-helper.cpp	/^namespace ns3 {$/;"	n	file:
ns3	helper/ndn-app-helper.hpp	/^namespace ns3 {$/;"	n
ns3	helper/ndn-face-container.cpp	/^namespace ns3 {$/;"	n	file:
ns3	helper/ndn-face-container.hpp	/^namespace ns3 {$/;"	n
ns3	helper/ndn-fib-helper.cpp	/^namespace ns3 {$/;"	n	file:
ns3	helper/ndn-fib-helper.hpp	/^namespace ns3 {$/;"	n
ns3	helper/ndn-global-routing-helper.cpp	/^namespace ns3 {$/;"	n	file:
ns3	helper/ndn-global-routing-helper.hpp	/^namespace ns3 {$/;"	n
ns3	helper/ndn-link-control-helper.cpp	/^namespace ns3 {$/;"	n	file:
ns3	helper/ndn-link-control-helper.hpp	/^namespace ns3 {$/;"	n
ns3	helper/ndn-scenario-helper.cpp	/^namespace ns3 {$/;"	n	file:
ns3	helper/ndn-scenario-helper.hpp	/^namespace ns3 {$/;"	n
ns3	helper/ndn-stack-helper.cpp	/^namespace ns3 {$/;"	n	file:
ns3	helper/ndn-stack-helper.hpp	/^namespace ns3 {$/;"	n
ns3	helper/ndn-strategy-choice-helper.cpp	/^namespace ns3 {$/;"	n	file:
ns3	helper/ndn-strategy-choice-helper.hpp	/^namespace ns3 {$/;"	n
ns3	model/cs/content-store-impl.cpp	/^namespace ns3 {$/;"	n	file:
ns3	model/cs/content-store-impl.hpp	/^namespace ns3 {$/;"	n
ns3	model/cs/content-store-nocache.cpp	/^namespace ns3 {$/;"	n	file:
ns3	model/cs/content-store-nocache.hpp	/^namespace ns3 {$/;"	n
ns3	model/cs/content-store-with-freshness.cpp	/^namespace ns3 {$/;"	n	file:
ns3	model/cs/content-store-with-freshness.hpp	/^namespace ns3 {$/;"	n
ns3	model/cs/content-store-with-probability.cpp	/^namespace ns3 {$/;"	n	file:
ns3	model/cs/content-store-with-probability.hpp	/^namespace ns3 {$/;"	n
ns3	model/cs/content-store-with-stats.cpp	/^namespace ns3 {$/;"	n	file:
ns3	model/cs/content-store-with-stats.hpp	/^namespace ns3 {$/;"	n
ns3	model/cs/custom-policies/freshness-policy.hpp	/^namespace ns3 {$/;"	n
ns3	model/cs/custom-policies/lifetime-stats-policy.hpp	/^namespace ns3 {$/;"	n
ns3	model/cs/custom-policies/probability-policy.hpp	/^namespace ns3 {$/;"	n
ns3	model/cs/ndn-content-store.cpp	/^namespace ns3 {$/;"	n	file:
ns3	model/cs/ndn-content-store.hpp	/^namespace ns3 {$/;"	n
ns3	model/ndn-app-face.cpp	/^namespace ns3 {$/;"	n	file:
ns3	model/ndn-app-face.hpp	/^namespace ns3 {$/;"	n
ns3	model/ndn-common.cpp	/^namespace ns3 {$/;"	n	file:
ns3	model/ndn-common.hpp	/^namespace ns3 {$/;"	n
ns3	model/ndn-face.hpp	/^namespace ns3 {$/;"	n
ns3	model/ndn-global-router.cpp	/^namespace ns3 {$/;"	n	file:
ns3	model/ndn-global-router.hpp	/^namespace ns3 {$/;"	n
ns3	model/ndn-header.cpp	/^namespace ns3 {$/;"	n	file:
ns3	model/ndn-header.hpp	/^namespace ns3 {$/;"	n
ns3	model/ndn-l3-protocol.cpp	/^namespace ns3 {$/;"	n	file:
ns3	model/ndn-l3-protocol.hpp	/^namespace ns3 {$/;"	n
ns3	model/ndn-net-device-face.cpp	/^namespace ns3 {$/;"	n	file:
ns3	model/ndn-net-device-face.hpp	/^namespace ns3 {$/;"	n
ns3	model/ndn-ns3.cpp	/^namespace ns3 {$/;"	n	file:
ns3	model/ndn-ns3.hpp	/^namespace ns3 {$/;"	n
ns3	ndn-cxx/src/util/scheduler.cpp	/^namespace ns3 {$/;"	n	file:
ns3	tests/other/ndn-test.cpp	/^namespace ns3 {$/;"	n	file:
ns3	tests/unit-tests/helper/ndn-face-container.t.cpp	/^namespace ns3 {$/;"	n	file:
ns3	tests/unit-tests/helper/ndn-fib-helper.t.cpp	/^namespace ns3 {$/;"	n	file:
ns3	tests/unit-tests/helper/ndn-global-routing-helper.t.cpp	/^namespace ns3 {$/;"	n	file:
ns3	tests/unit-tests/helper/ndn-link-control-helper.t.cpp	/^namespace ns3 {$/;"	n	file:
ns3	tests/unit-tests/helper/ndn-strategy-choice-helper.t.cpp	/^namespace ns3 {$/;"	n	file:
ns3	tests/unit-tests/model/ndn-header.t.cpp	/^namespace ns3 {$/;"	n	file:
ns3	tests/unit-tests/model/ndn-l3-protocol.t.cpp	/^namespace ns3 {$/;"	n	file:
ns3	tests/unit-tests/model/ndn-net-device-face.t.cpp	/^namespace ns3 {$/;"	n	file:
ns3	tests/unit-tests/model/ndn-ns3.t.cpp	/^namespace ns3 {$/;"	n	file:
ns3	tests/unit-tests/ndn-cxx/face.t.cpp	/^namespace ns3 {$/;"	n	file:
ns3	tests/unit-tests/tests-common.hpp	/^namespace ns3 {$/;"	n
ns3	tests/unit-tests/utils/tracers/ndn-app-delay-tracer.t.cpp	/^namespace ns3 {$/;"	n	file:
ns3	utils/batches.cpp	/^namespace ns3 {$/;"	n	file:
ns3	utils/batches.hpp	/^namespace ns3 {$/;"	n
ns3	utils/ndn-fw-hop-count-tag.cpp	/^namespace ns3 {$/;"	n	file:
ns3	utils/ndn-fw-hop-count-tag.hpp	/^namespace ns3 {$/;"	n
ns3	utils/ndn-ns3-packet-tag.hpp	/^namespace ns3 {$/;"	n
ns3	utils/ndn-rtt-estimator.cpp	/^namespace ns3 {$/;"	n	file:
ns3	utils/ndn-rtt-estimator.hpp	/^namespace ns3 {$/;"	n
ns3	utils/ndn-rtt-mean-deviation.cpp	/^namespace ns3 {$/;"	n	file:
ns3	utils/ndn-rtt-mean-deviation.hpp	/^namespace ns3 {$/;"	n
ns3	utils/ndn-time.cpp	/^namespace ns3 {$/;"	n	file:
ns3	utils/ndn-time.hpp	/^namespace ns3 {$/;"	n
ns3	utils/topology/annotated-topology-reader.cpp	/^namespace ns3 {$/;"	n	file:
ns3	utils/topology/annotated-topology-reader.hpp	/^namespace ns3 {$/;"	n
ns3	utils/topology/rocketfuel-map-reader.cpp	/^namespace ns3 {$/;"	n	file:
ns3	utils/topology/rocketfuel-map-reader.hpp	/^namespace ns3 {$/;"	n
ns3	utils/topology/rocketfuel-weights-reader.cpp	/^namespace ns3 {$/;"	n	file:
ns3	utils/topology/rocketfuel-weights-reader.hpp	/^namespace ns3 {$/;"	n
ns3	utils/tracers/l2-rate-tracer.cpp	/^namespace ns3 {$/;"	n	file:
ns3	utils/tracers/l2-rate-tracer.hpp	/^namespace ns3 {$/;"	n
ns3	utils/tracers/l2-tracer.cpp	/^namespace ns3 {$/;"	n	file:
ns3	utils/tracers/l2-tracer.hpp	/^namespace ns3 {$/;"	n
ns3	utils/tracers/ndn-app-delay-tracer.cpp	/^namespace ns3 {$/;"	n	file:
ns3	utils/tracers/ndn-app-delay-tracer.hpp	/^namespace ns3 {$/;"	n
ns3	utils/tracers/ndn-cs-tracer.cpp	/^namespace ns3 {$/;"	n	file:
ns3	utils/tracers/ndn-cs-tracer.hpp	/^namespace ns3 {$/;"	n
ns3	utils/tracers/ndn-l3-rate-tracer.cpp	/^namespace ns3 {$/;"	n	file:
ns3	utils/tracers/ndn-l3-rate-tracer.hpp	/^namespace ns3 {$/;"	n
ns3	utils/tracers/ndn-l3-tracer.cpp	/^namespace ns3 {$/;"	n	file:
ns3	utils/tracers/ndn-l3-tracer.hpp	/^namespace ns3 {$/;"	n
ns3	utils/trie/aggregate-stats-policy.hpp	/^namespace ns3 {$/;"	n
ns3	utils/trie/counting-policy.hpp	/^namespace ns3 {$/;"	n
ns3	utils/trie/detail/functor-hook.hpp	/^namespace ns3 {$/;"	n
ns3	utils/trie/detail/multi-policy-container.hpp	/^namespace ns3 {$/;"	n
ns3	utils/trie/detail/multi-type-container.hpp	/^namespace ns3 {$/;"	n
ns3	utils/trie/empty-policy.hpp	/^namespace ns3 {$/;"	n
ns3	utils/trie/fifo-policy.hpp	/^namespace ns3 {$/;"	n
ns3	utils/trie/lfu-policy.hpp	/^namespace ns3 {$/;"	n
ns3	utils/trie/lru-policy.hpp	/^namespace ns3 {$/;"	n
ns3	utils/trie/multi-policy.hpp	/^namespace ns3 {$/;"	n
ns3	utils/trie/payload-policy.hpp	/^namespace ns3 {$/;"	n
ns3	utils/trie/payload-with-policy.hpp	/^namespace ns3 {$/;"	n
ns3	utils/trie/persistent-policy.hpp	/^namespace ns3 {$/;"	n
ns3	utils/trie/random-policy.hpp	/^namespace ns3 {$/;"	n
ns3	utils/trie/trie-with-policy.hpp	/^namespace ns3 {$/;"	n
ns3	utils/trie/trie.hpp	/^namespace ns3 {$/;"	n
ns3_rand_	model/cs/custom-policies/probability-policy.hpp	/^      Ptr<UniformRandomVariable> ns3_rand_;$/;"	m	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
nt	NFD/tests/daemon/table/name-tree.t.cpp	/^  NameTree nt;$/;"	m	class:nfd::tests::EnumerationFixture	file:
num_vertices	helper/boost-graph-ndn-global-routing-helper.hpp	/^num_vertices(const NdnGlobalRouterGraph& g)$/;"	f	namespace:boost
numeric_limits	helper/boost-graph-ndn-global-routing-helper.hpp	/^class numeric_limits<std::tuple<std::shared_ptr<nfd::Face>, uint32_t, double>>$/;"	c	namespace:std
oid	ndn-cxx/src/encoding/oid.cpp	/^namespace oid {$/;"	n	namespace:ndn	file:
oid	ndn-cxx/src/encoding/oid.hpp	/^namespace oid {$/;"	n	namespace:ndn
ok	NFD/websocketpp/websocketpp/http/constants.hpp	/^            ok = 200,$/;"	e	enum:websocketpp::http::status_code::value
omit_handshake	NFD/websocketpp/websocketpp/close.hpp	/^    static value const omit_handshake = 1;$/;"	m	namespace:websocketpp::close::status
onA	NFD/tests/core/config-file.t.cpp	/^  onA(const ConfigSection& section, bool isDryRun)$/;"	f	class:nfd::tests::DummySubscriber
onAction	NFD/tests/daemon/fw/strategy-tester.hpp	/^  signal::Signal<StrategyTester<S>> onAction;$/;"	m	class:nfd::fw::tests::StrategyTester
onAdd	NFD/daemon/fw/face-table.hpp	/^  signal::Signal<FaceTable, shared_ptr<Face>> onAdd;$/;"	m	class:nfd::FaceTable
onAddFace	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::onAddFace(shared_ptr<Face> face)$/;"	f	class:nfd::FaceManager
onB	NFD/tests/core/config-file.t.cpp	/^  onB(const ConfigSection& section, bool isDryRun)$/;"	f	class:nfd::tests::DummySubscriber
onCanonizeFailure	NFD/tools/ndn-autoconfig/base.cpp	/^Base::onCanonizeFailure(const std::string& reason)$/;"	f	class:ndn::tools::autoconfig::Base
onCanonizeFailure	NFD/tools/nfdc.cpp	/^Nfdc::FaceIdFetcher::onCanonizeFailure(const std::string& reason)$/;"	f	class:nfdc::Nfdc::FaceIdFetcher
onCanonizeFailure	NFD/tools/nfdc.cpp	/^Nfdc::onCanonizeFailure(const std::string& reason)$/;"	f	class:nfdc::Nfdc
onCanonizeFailure	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^  onCanonizeFailure(shared_ptr<CanonizeTestCase> tc, const std::string& reason)$/;"	f	class:ndn::util::tests::CanonizeFixture	file:
onCanonizeSuccess	NFD/tools/ndn-autoconfig/base.cpp	/^Base::onCanonizeSuccess(const util::FaceUri& canonicalUri)$/;"	f	class:ndn::tools::autoconfig::Base
onCanonizeSuccess	NFD/tools/nfdc.cpp	/^Nfdc::FaceIdFetcher::onCanonizeSuccess(const ndn::util::FaceUri& canonicalUri)$/;"	f	class:nfdc::Nfdc::FaceIdFetcher
onCanonizeSuccess	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^  onCanonizeSuccess(shared_ptr<CanonizeTestCase> tc, const FaceUri& canonicalUri)$/;"	f	class:ndn::util::tests::CanonizeFixture	file:
onCertFailed	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::onCertFailed(const shared_ptr<const Data>& signCertificate,$/;"	f	class:ndn::ValidatorConfig
onCertValidated	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::onCertValidated(const shared_ptr<const Data>& signCertificate,$/;"	f	class:ndn::ValidatorConfig
onCertificateValidated	ndn-cxx/src/security/validator-regex.cpp	/^ValidatorRegex::onCertificateValidated(const shared_ptr<const Data>& signCertificate,$/;"	f	class:ndn::ValidatorRegex
onCertificateValidationFailed	ndn-cxx/src/security/validator-regex.cpp	/^ValidatorRegex::onCertificateValidationFailed(const shared_ptr<const Data>& signCertificate,$/;"	f	class:ndn::ValidatorRegex
onChanged	ndn-cxx/src/data.cpp	/^Data::onChanged()$/;"	f	class:ndn::Data
onCommandError	NFD/rib/rib-manager.cpp	/^RibManager::onCommandError(uint32_t code, const std::string& error,$/;"	f	class:nfd::rib::RibManager
onCommandFail	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^  onCommandFail(uint32_t code, const std::string& reason)$/;"	f	class:ndn::nfd::tests::CommandFixture	file:
onCommandSucceed	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^  onCommandSucceed(const ControlParameters& parameters)$/;"	f	class:ndn::nfd::tests::CommandFixture	file:
onCommandValidated	NFD/rib/rib-manager.cpp	/^RibManager::onCommandValidated(const shared_ptr<const Interest>& request)$/;"	f	class:nfd::rib::RibManager
onCommandValidationFailed	NFD/daemon/mgmt/manager-base.cpp	/^ManagerBase::onCommandValidationFailed(const shared_ptr<const Interest>& command,$/;"	f	class:nfd::ManagerBase
onCommandValidationFailed	NFD/rib/rib-manager.cpp	/^RibManager::onCommandValidationFailed(const shared_ptr<const Interest>& request,$/;"	f	class:nfd::rib::RibManager
onConfig	NFD/daemon/mgmt/command-validator.cpp	/^CommandValidator::onConfig(const ConfigSection& section,$/;"	f	class:nfd::CommandValidator
onConfig	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::onConfig(const ConfigSection& configSection,$/;"	f	class:nfd::FaceManager
onConfig	NFD/daemon/mgmt/general-config-section.cpp	/^onConfig(const ConfigSection& configSection,$/;"	f	namespace:nfd::general
onConfig	NFD/daemon/mgmt/tables-config-section.cpp	/^TablesConfigSection::onConfig(const ConfigSection& configSection,$/;"	f	class:nfd::TablesConfigSection
onConfig	NFD/rib/rib-manager.cpp	/^RibManager::onConfig(const ConfigSection& configSection,$/;"	f	class:nfd::rib::RibManager
onConfigRule	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::onConfigRule(const security::conf::ConfigSection& configSection,$/;"	f	class:ndn::ValidatorConfig
onConfigTrustAnchor	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::onConfigTrustAnchor(const security::conf::ConfigSection& configSection,$/;"	f	class:ndn::ValidatorConfig
onConnectFailed	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::onConnectFailed(const Name& requestName, const std::string& reason)$/;"	f	class:nfd::FaceManager
onConnectFailed	NFD/tests/daemon/face/tcp.t.cpp	/^  onConnectFailed(const std::string& reason)$/;"	f	class:nfd::tests::FaceCreateTimeoutFixture
onConnectFailed	NFD/tests/daemon/face/tcp.t.cpp	/^  onConnectFailed(const std::string& reason)$/;"	f	class:nfd::tests::SimpleEndToEndFixture
onConnectFailed	NFD/tests/daemon/face/unix-stream.t.cpp	/^  onConnectFailed(const std::string& reason)$/;"	f	class:nfd::tests::SimpleEndToEndFixture
onContentStoreHit	NFD/daemon/fw/forwarder.cpp	/^Forwarder::onContentStoreHit(const Face& inFace,$/;"	f	class:nfd::Forwarder
onContentStoreMiss	NFD/daemon/fw/forwarder.cpp	/^Forwarder::onContentStoreMiss(const Face& inFace,$/;"	f	class:nfd::Forwarder
onControlHeaderError	NFD/rib/rib-manager.cpp	/^RibManager::onControlHeaderError(uint32_t code, const std::string& reason)$/;"	f	class:nfd::rib::RibManager
onControlHeaderSuccess	NFD/rib/rib-manager.cpp	/^RibManager::onControlHeaderSuccess()$/;"	f	class:nfd::rib::RibManager
onCreated	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::onCreated(const Name& requestName,$/;"	f	class:nfd::FaceManager
onData	NFD/daemon/fw/forwarder.hpp	/^Forwarder::onData(Face& face, const Data& data)$/;"	f	class:nfd::Forwarder
onData	NFD/tools/ndn-tlv-peek.cpp	/^  onData(const ndn::Interest& interest, ndn::Data& data)$/;"	f	class:ndntlvpeek::NdnTlvPeek
onData	ndn-cxx/examples/consumer-with-timer.cpp	/^  onData(const Interest& interest, const Data& data)$/;"	f	class:ndn::examples::ConsumerWithTimer	file:
onData	ndn-cxx/examples/consumer.cpp	/^  onData(const Interest& interest, const Data& data)$/;"	f	class:ndn::examples::Consumer	file:
onData	ndn-cxx/src/security/validator.cpp	/^Validator::onData(const Interest& interest,$/;"	f	class:ndn::Validator
onData	ndn-cxx/tests/integrated/face.cpp	/^  onData()$/;"	f	class:ndn::tests::FacesFixture
onData	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^  onData(const ConstBufferPtr& data)$/;"	f	class:ndn::util::tests::Fixture
onData	ndn-cxx/tools/ndncatchunks3.cpp	/^Consumer::onData(Data& data)$/;"	f	class:ndn::Consumer
onDataUnsolicited	NFD/daemon/fw/forwarder.cpp	/^Forwarder::onDataUnsolicited(Face& inFace, const Data& data)$/;"	f	class:nfd::Forwarder
onDataUnsolicited	NFD/tests/daemon/fw/forwarder.t.cpp	/^  onDataUnsolicited(Face& inFace, const Data& data)$/;"	f	class:nfd::tests::ScopeLocalhostIncomingTestForwarder
onDecodeError	ndn-cxx/src/util/notification-subscriber.hpp	/^  signal::Signal<NotificationSubscriber, Data> onDecodeError;$/;"	m	class:ndn::util::NotificationSubscriber
onDnsFailure	ndn-cxx/src/util/face-uri.cpp	/^  onDnsFailure(shared_ptr<FaceUri> faceUri, const FaceUri::CanonizeFailureCallback& onFailure,$/;"	f	class:ndn::util::IpHostCanonizeProvider	file:
onDnsSuccess	ndn-cxx/src/util/face-uri.cpp	/^  onDnsSuccess(shared_ptr<FaceUri> faceUri,$/;"	f	class:ndn::util::IpHostCanonizeProvider	file:
onEmpty	ndn-cxx/src/detail/container-with-on-empty-signal.hpp	/^  util::Signal<ContainerWithOnEmptySignal<T>> onEmpty;$/;"	m	class:ndn::ContainerWithOnEmptySignal
onError	NFD/tools/nfdc.cpp	/^Nfdc::onError(uint32_t code, const std::string& error, const std::string& message)$/;"	f	class:nfdc::Nfdc
onError	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^  onError(uint32_t errorCode)$/;"	f	class:ndn::util::tests::Fixture
onErrorFetch	NFD/tools/nfd-status.cpp	/^  onErrorFetch(uint32_t errorCode, const std::string& errorMsg)$/;"	f	class:ndn::NfdStatus
onFaceCreateError	NFD/tools/nfdc.cpp	/^Nfdc::FaceIdFetcher::onFaceCreateError(uint32_t code,$/;"	f	class:nfdc::Nfdc::FaceIdFetcher
onFaceCreated	NFD/tests/daemon/face/tcp.t.cpp	/^  onFaceCreated(const shared_ptr<Face>& face)$/;"	f	class:nfd::tests::SimpleEndToEndFixture
onFaceCreated	NFD/tests/daemon/face/tcp.t.cpp	/^  onFaceCreated(const shared_ptr<Face>& newFace)$/;"	f	class:nfd::tests::FaceCreateTimeoutFixture
onFaceCreated	NFD/tests/daemon/face/unix-stream.t.cpp	/^  onFaceCreated(const shared_ptr<Face>& face)$/;"	f	class:nfd::tests::SimpleEndToEndFixture
onFaceDestroyedEvent	NFD/rib/rib-manager.cpp	/^RibManager::onFaceDestroyedEvent(uint64_t faceId)$/;"	f	class:nfd::rib::RibManager
onFaceRequest	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::onFaceRequest(const Interest& request)$/;"	f	class:nfd::FaceManager
onFail	NFD/daemon/face/face.hpp	/^  signal::Signal<Face, std::string\/*reason*\/> onFail;$/;"	m	class:nfd::Face
onFail	NFD/tests/daemon/face/tcp.t.cpp	/^  onFail(const shared_ptr<Face>& face)$/;"	f	class:nfd::tests::SimpleEndToEndFixture
onFail	NFD/tests/daemon/face/unix-stream.t.cpp	/^  onFail(const shared_ptr<Face>& face)$/;"	f	class:nfd::tests::SimpleEndToEndFixture
onFailure	NFD/tests/rib/fib-updates-common.hpp	/^  onFailure()$/;"	f	class:nfd::rib::tests::FibUpdatesFixture
onFailure	ndn-cxx/tests/unit-tests/util/dns.t.cpp	/^  onFailure(bool isValid)$/;"	f	class:ndn::util::tests::DnsFixture
onFetchFaceStatusTimeout	NFD/rib/rib-manager.cpp	/^RibManager::onFetchFaceStatusTimeout()$/;"	f	class:nfd::rib::RibManager
onFibRequest	NFD/daemon/mgmt/fib-manager.cpp	/^FibManager::onFibRequest(const Interest& request)$/;"	f	class:nfd::FibManager
onFibUpdateFailure	NFD/rib/rib.cpp	/^Rib::onFibUpdateFailure(const Rib::UpdateFailureCallback& onFailure,$/;"	f	class:nfd::rib::Rib
onFibUpdateSuccess	NFD/rib/rib.cpp	/^Rib::onFibUpdateSuccess(const RibUpdateBatch& batch,$/;"	f	class:nfd::rib::Rib
onHubConnectError	NFD/tools/ndn-autoconfig/base.cpp	/^Base::onHubConnectError(uint32_t code, const std::string& error)$/;"	f	class:ndn::tools::autoconfig::Base
onHubConnectSuccess	NFD/tools/ndn-autoconfig/base.cpp	/^Base::onHubConnectSuccess(const nfd::ControlParameters& resp)$/;"	f	class:ndn::tools::autoconfig::Base
onHubInterest	NFD/tools/ndn-autoconfig-server.cpp	/^  onHubInterest(const Name& name, const Interest& interest)$/;"	f	class:ndn::NdnAutoconfigServer
onIncomingData	NFD/daemon/fw/forwarder.cpp	/^Forwarder::onIncomingData(Face& inFace, const Data& data)$/;"	f	class:nfd::Forwarder
onIncomingInterest	NFD/daemon/fw/forwarder.cpp	/^Forwarder::onIncomingInterest(Face& inFace, const Interest& interest)$/;"	f	class:nfd::Forwarder
onInterest	NFD/daemon/fw/forwarder.hpp	/^Forwarder::onInterest(Face& face, const Interest& interest)$/;"	f	class:nfd::Forwarder
onInterest	NFD/daemon/mgmt/status-server.cpp	/^StatusServer::onInterest(const Interest& interest) const$/;"	f	class:nfd::StatusServer
onInterest	NFD/tools/ndn-tlv-poke.cpp	/^  onInterest(const ndn::Name& name,$/;"	f	class:ndntlvpoke::NdnTlvPoke
onInterest	ndn-cxx/examples/producer.cpp	/^  onInterest(const InterestFilter& filter, const Interest& interest)$/;"	f	class:ndn::examples::Producer	file:
onInterest	ndn-cxx/tests/integrated/face.cpp	/^  onInterest(Face& face,$/;"	f	class:ndn::tests::FacesFixture
onInterest	ndn-cxx/tools/ndnputchunks3.cpp	/^  onInterest(const Interest& interest)$/;"	f	class:ndn::Producer
onInterest2	ndn-cxx/tests/integrated/face.cpp	/^  onInterest2(Face& face,$/;"	f	class:ndn::tests::FacesFixture
onInterestFinalize	NFD/daemon/fw/forwarder.cpp	/^Forwarder::onInterestFinalize(shared_ptr<pit::Entry> pitEntry, bool isSatisfied,$/;"	f	class:nfd::Forwarder
onInterestLoop	NFD/daemon/fw/forwarder.cpp	/^Forwarder::onInterestLoop(Face& inFace, const Interest& interest,$/;"	f	class:nfd::Forwarder
onInterestRegex	ndn-cxx/tests/integrated/face.cpp	/^  onInterestRegex(Face& face,$/;"	f	class:ndn::tests::FacesFixture
onInterestRegexError	ndn-cxx/tests/integrated/face.cpp	/^  onInterestRegexError(Face& face,$/;"	f	class:ndn::tests::FacesFixture
onInterestReject	NFD/daemon/fw/forwarder.cpp	/^Forwarder::onInterestReject(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::Forwarder
onInterestUnsatisfied	NFD/daemon/fw/forwarder.cpp	/^Forwarder::onInterestUnsatisfied(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::Forwarder
onLocalhopRequest	NFD/rib/rib-manager.cpp	/^RibManager::onLocalhopRequest(const Interest& request)$/;"	f	class:nfd::rib::RibManager
onLocalhostRequest	NFD/rib/rib-manager.cpp	/^RibManager::onLocalhostRequest(const Interest& request)$/;"	f	class:nfd::rib::RibManager
onNetworkStateChanged	ndn-cxx/src/util/network-monitor.hpp	/^  Signal<NetworkMonitor> onNetworkStateChanged;$/;"	m	class:ndn::util::NetworkMonitor
onNotification	NFD/rib/rib-manager.cpp	/^RibManager::onNotification(const FaceEventNotification& notification)$/;"	f	class:nfd::rib::RibManager
onNotification	NFD/tools/nfd-autoreg.cpp	/^  onNotification(const FaceEventNotification& notification)$/;"	f	class:ndn::nfd_autoreg::AutoregServer
onNotification	ndn-cxx/src/util/notification-subscriber.hpp	/^  signal::Signal<NotificationSubscriber, Notification> onNotification;$/;"	m	class:ndn::util::NotificationSubscriber
onNrdCommandPrefixAddNextHopError	NFD/rib/rib-manager.cpp	/^RibManager::onNrdCommandPrefixAddNextHopError(const Name& name, const std::string& msg)$/;"	f	class:nfd::rib::RibManager
onNrdCommandPrefixAddNextHopSuccess	NFD/rib/rib-manager.cpp	/^RibManager::onNrdCommandPrefixAddNextHopSuccess(const Name& prefix,$/;"	f	class:nfd::rib::RibManager
onObtainFaceIdFailure	NFD/tools/nfdc.cpp	/^Nfdc::onObtainFaceIdFailure(const std::string& message)$/;"	f	class:nfdc::Nfdc
onOutgoingData	NFD/daemon/fw/forwarder.cpp	/^Forwarder::onOutgoingData(const Data& data, Face& outFace)$/;"	f	class:nfd::Forwarder
onOutgoingInterest	NFD/daemon/fw/forwarder.cpp	/^Forwarder::onOutgoingInterest(shared_ptr<pit::Entry> pitEntry, Face& outFace,$/;"	f	class:nfd::Forwarder
onPrefixRegistrationError	NFD/tools/ndn-autoconfig/base.cpp	/^Base::onPrefixRegistrationError(uint32_t code, const std::string& error)$/;"	f	class:ndn::tools::autoconfig::Base
onPrefixRegistrationSuccess	NFD/tools/ndn-autoconfig/base.cpp	/^Base::onPrefixRegistrationSuccess(const nfd::ControlParameters& commandSuccessResult)$/;"	f	class:ndn::tools::autoconfig::Base
onQueryFailure	NFD/tools/nfdc.cpp	/^Nfdc::FaceIdFetcher::onQueryFailure(uint32_t errorCode,$/;"	f	class:nfdc::Nfdc::FaceIdFetcher
onQuerySuccess	NFD/tools/nfdc.cpp	/^Nfdc::FaceIdFetcher::onQuerySuccess(const ndn::ConstBufferPtr& data,$/;"	f	class:nfdc::Nfdc::FaceIdFetcher
onReceive	NFD/daemon/face/ndnlp-partial-message-store.hpp	/^  signal::Signal<PartialMessageStore, Block> onReceive;$/;"	m	class:nfd::ndnlp::PartialMessageStore
onReceiveData	NFD/daemon/face/face.hpp	/^  signal::Signal<Face, Data> onReceiveData;$/;"	m	class:nfd::Face
onReceiveData	NFD/tests/daemon/face/tcp.t.cpp	/^  onReceiveData(const Data& data)$/;"	f	class:nfd::tests::SimpleEndToEndFixture
onReceiveData	NFD/tests/daemon/face/unix-stream.t.cpp	/^  onReceiveData(const Data& data)$/;"	f	class:nfd::tests::SimpleEndToEndFixture
onReceiveData	model/ndn-app-face.cpp	/^AppFace::onReceiveData(const Data& data)$/;"	f	class:ns3::ndn::AppFace
onReceiveInterest	NFD/daemon/face/face.hpp	/^  signal::Signal<Face, Interest> onReceiveInterest;$/;"	m	class:nfd::Face
onReceiveInterest	NFD/tests/daemon/face/tcp.t.cpp	/^  onReceiveInterest(const Interest& interest)$/;"	f	class:nfd::tests::SimpleEndToEndFixture
onReceiveInterest	NFD/tests/daemon/face/unix-stream.t.cpp	/^  onReceiveInterest(const Interest& interest)$/;"	f	class:nfd::tests::SimpleEndToEndFixture
onReceiveInterest	model/ndn-app-face.cpp	/^AppFace::onReceiveInterest(const Interest& interest)$/;"	f	class:ns3::ndn::AppFace
onRegFailed	ndn-cxx/tests/integrated/face.cpp	/^  onRegFailed()$/;"	f	class:ndn::tests::FacesFixture
onRegFailure	NFD/rib/remote-registrator.cpp	/^RemoteRegistrator::onRegFailure(uint32_t code, const std::string& reason,$/;"	f	class:nfd::rib::RemoteRegistrator
onRegSucceeded	ndn-cxx/tests/integrated/face.cpp	/^  onRegSucceeded()$/;"	f	class:ndn::tests::FacesFixture3
onRegSuccess	NFD/rib/remote-registrator.cpp	/^RemoteRegistrator::onRegSuccess(const ControlParameters& parameters,$/;"	f	class:nfd::rib::RemoteRegistrator
onRegSuccess	NFD/rib/rib-manager.cpp	/^RibManager::onRegSuccess(const shared_ptr<const Interest>& request,$/;"	f	class:nfd::rib::RibManager
onRegisterCommandFailure	NFD/tools/nfd-autoreg.cpp	/^  onRegisterCommandFailure(uint64_t faceId, const Name& prefix,$/;"	f	class:ndn::nfd_autoreg::AutoregServer
onRegisterCommandSuccess	NFD/tools/nfd-autoreg.cpp	/^  onRegisterCommandSuccess(uint64_t faceId, const Name& prefix)$/;"	f	class:ndn::nfd_autoreg::AutoregServer
onRegisterFailed	NFD/tools/ndn-autoconfig-server.cpp	/^  onRegisterFailed(const Name& prefix, const std::string& reason)$/;"	f	class:ndn::NdnAutoconfigServer
onRegisterFailed	NFD/tools/ndn-tlv-poke.cpp	/^  onRegisterFailed(const ndn::Name& prefix, const std::string& reason)$/;"	f	class:ndntlvpoke::NdnTlvPoke
onRegisterFailed	ndn-cxx/examples/producer.cpp	/^  onRegisterFailed(const Name& prefix, const std::string& reason)$/;"	f	class:ndn::examples::Producer	file:
onRegisterFailed	ndn-cxx/tools/ndnputchunks3.cpp	/^  onRegisterFailed(const Name& prefix, const std::string& reason)$/;"	f	class:ndn::Producer
onRegisterFailure	NFD/tools/ndn-autoconfig/multicast-discovery.cpp	/^MulticastDiscovery::onRegisterFailure(uint32_t code, const std::string& error)$/;"	f	class:ndn::tools::autoconfig::MulticastDiscovery
onRegisterSuccess	NFD/tools/ndn-autoconfig/multicast-discovery.cpp	/^MulticastDiscovery::onRegisterSuccess()$/;"	f	class:ndn::tools::autoconfig::MulticastDiscovery
onRemove	NFD/daemon/fw/face-table.hpp	/^  signal::Signal<FaceTable, shared_ptr<Face>> onRemove;$/;"	m	class:nfd::FaceTable
onRemoveFace	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::onRemoveFace(shared_ptr<Face> face)$/;"	f	class:nfd::FaceManager
onResolveError	ndn-cxx/src/util/dns.cpp	/^  onResolveError(const std::string& errorInfo, const shared_ptr<Resolver>& self)$/;"	f	class:ndn::dns::Resolver
onResolveSuccess	ndn-cxx/src/util/dns.cpp	/^  onResolveSuccess(const boost::system::error_code& error,$/;"	f	class:ndn::dns::Resolver
onRibUpdateFailure	NFD/rib/rib-manager.cpp	/^RibManager::onRibUpdateFailure(const RibUpdate& update, uint32_t code, const std::string& error)$/;"	f	class:nfd::rib::RibManager
onRibUpdateSuccess	NFD/rib/rib-manager.cpp	/^RibManager::onRibUpdateSuccess(const RibUpdate& update)$/;"	f	class:nfd::rib::RibManager
onRoutablePrefixesInterest	NFD/tools/ndn-autoconfig-server.cpp	/^  onRoutablePrefixesInterest(const Name& name, const Interest& interest)$/;"	f	class:ndn::NdnAutoconfigServer
onRouteExpiration	NFD/rib/rib.cpp	/^Rib::onRouteExpiration(const Name& prefix, const Route& route)$/;"	f	class:nfd::rib::Rib
onSegmentReceived	ndn-cxx/src/util/segment-fetcher.cpp	/^SegmentFetcher::onSegmentReceived(const Interest& origInterest,$/;"	f	class:ndn::util::SegmentFetcher
onSendBatchFromQueue	NFD/tests/rib/fib-updates-common.hpp	/^  onSendBatchFromQueue(const RibUpdateBatch& batch)$/;"	f	class:nfd::rib::tests::FibUpdatesFixture
onSendBatchFromQueue	NFD/tests/rib/rib-manager.t.cpp	/^  onSendBatchFromQueue(const RibUpdateBatch& batch, const ControlParameters parameters)$/;"	f	class:nfd::rib::tests::RibManagerFixture
onSendBlock	ndn-cxx/src/util/dummy-client-face.cpp	/^  Signal<Transport, Block> onSendBlock;$/;"	m	class:ndn::util::DummyClientFace::Transport	file:
onSendData	NFD/daemon/face/face.hpp	/^  signal::Signal<Face, Data> onSendData;$/;"	m	class:nfd::Face
onSendData	ndn-cxx/src/util/dummy-client-face.hpp	/^  Signal<DummyClientFace, Data> onSendData;$/;"	m	class:ndn::util::DummyClientFace
onSendFinished	NFD/tests/daemon/face/dummy-stream-sender.hpp	/^  onSendFinished(const boost::system::error_code& error, bool isFinal)$/;"	f	class:nfd::tests::DummyStreamSender
onSendInterest	NFD/daemon/face/face.hpp	/^  signal::Signal<Face, Interest> onSendInterest;$/;"	m	class:nfd::Face
onSendInterest	ndn-cxx/src/util/dummy-client-face.hpp	/^  Signal<DummyClientFace, Interest> onSendInterest;$/;"	m	class:ndn::util::DummyClientFace
onSetStrategyFailure	NFD/tools/ndn-autoconfig/multicast-discovery.cpp	/^MulticastDiscovery::onSetStrategyFailure(const std::string& error)$/;"	f	class:ndn::tools::autoconfig::MulticastDiscovery
onStrategyChoiceRequest	NFD/daemon/mgmt/strategy-choice-manager.cpp	/^StrategyChoiceManager::onStrategyChoiceRequest(const Interest& request)$/;"	f	class:nfd::StrategyChoiceManager
onSuccess	NFD/tests/rib/fib-updates-common.hpp	/^  onSuccess()$/;"	f	class:nfd::rib::tests::FibUpdatesFixture
onSuccess	NFD/tools/ndn-autoconfig/multicast-discovery.cpp	/^MulticastDiscovery::onSuccess(Data& data)$/;"	f	class:ndn::tools::autoconfig::MulticastDiscovery
onSuccess	NFD/tools/nfdc.cpp	/^Nfdc::onSuccess(const ControlParameters& commandSuccessResult, const std::string& message)$/;"	f	class:nfdc::Nfdc
onSuccess	ndn-cxx/tests/unit-tests/util/dns.t.cpp	/^  onSuccess(const dns::IpAddress& resolvedAddress,$/;"	f	class:ndn::util::tests::DnsFixture
onSuccessfullConnect	NFD/tests/daemon/face/dummy-stream-sender.hpp	/^  onSuccessfullConnect(const boost::system::error_code& error)$/;"	f	class:nfd::tests::DummyStreamSender
onTimeout	NFD/tools/ndn-tlv-peek.cpp	/^  onTimeout(const ndn::Interest& interest)$/;"	f	class:ndntlvpeek::NdnTlvPeek
onTimeout	NFD/tools/nfd-status.cpp	/^  onTimeout()$/;"	f	class:ndn::NfdStatus
onTimeout	ndn-cxx/examples/consumer-with-timer.cpp	/^  onTimeout(const Interest& interest)$/;"	f	class:ndn::examples::ConsumerWithTimer	file:
onTimeout	ndn-cxx/examples/consumer.cpp	/^  onTimeout(const Interest& interest)$/;"	f	class:ndn::examples::Consumer	file:
onTimeout	ndn-cxx/src/security/validator.cpp	/^Validator::onTimeout(const Interest& interest,$/;"	f	class:ndn::Validator
onTimeout	ndn-cxx/src/util/notification-subscriber.hpp	/^  signal::Signal<NotificationSubscriber> onTimeout;$/;"	m	class:ndn::util::NotificationSubscriber
onTimeout	ndn-cxx/tests/integrated/face.cpp	/^  onTimeout()$/;"	f	class:ndn::tests::FacesFixture
onTimeout	ndn-cxx/tools/ndncatchunks3.cpp	/^Consumer::onTimeout(const Interest& interest)$/;"	f	class:ndn::Consumer
onUnRegSuccess	NFD/rib/rib-manager.cpp	/^RibManager::onUnRegSuccess(const shared_ptr<const Interest>& request,$/;"	f	class:nfd::rib::RibManager
onUnregFailed	ndn-cxx/tests/integrated/face.cpp	/^  onUnregFailed()$/;"	f	class:ndn::tests::FacesFixture3
onUnregFailure	NFD/rib/remote-registrator.cpp	/^RemoteRegistrator::onUnregFailure(uint32_t code, const std::string& reason,$/;"	f	class:nfd::rib::RemoteRegistrator
onUnregSucceeded	ndn-cxx/tests/integrated/face.cpp	/^  onUnregSucceeded()$/;"	f	class:ndn::tests::FacesFixture3
onUnregSuccess	NFD/rib/remote-registrator.cpp	/^RemoteRegistrator::onUnregSuccess(const ControlParameters& parameters,$/;"	f	class:nfd::rib::RemoteRegistrator
onUpdateError	NFD/rib/fib-updater.cpp	/^FibUpdater::onUpdateError(const FibUpdate update,$/;"	f	class:nfd::rib::FibUpdater
onUpdateSuccess	NFD/rib/fib-updater.cpp	/^FibUpdater::onUpdateSuccess(const FibUpdate update,$/;"	f	class:nfd::rib::FibUpdater
onValidated	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  onValidated(const shared_ptr<const Interest>& interest)$/;"	f	class:nfd::tests::CommandValidatorTester
onValidated	ndn-cxx/tests/unit-tests/security/validator.t.cpp	/^onValidated(const shared_ptr<const Data>& data)$/;"	f	namespace:ndn::tests
onValidatedFaceRequest	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::onValidatedFaceRequest(const shared_ptr<const Interest>& request)$/;"	f	class:nfd::FaceManager
onValidatedFibRequest	NFD/daemon/mgmt/fib-manager.cpp	/^FibManager::onValidatedFibRequest(const shared_ptr<const Interest>& request)$/;"	f	class:nfd::FibManager
onValidatedStrategyChoiceRequest	NFD/daemon/mgmt/strategy-choice-manager.cpp	/^StrategyChoiceManager::onValidatedStrategyChoiceRequest(const shared_ptr<const Interest>& request)$/;"	f	class:nfd::StrategyChoiceManager
onValidationFailed	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  onValidationFailed(const shared_ptr<const Interest>& interest, const std::string& info)$/;"	f	class:nfd::tests::CommandValidatorTester
onValidationFailed	ndn-cxx/tests/unit-tests/security/validator.t.cpp	/^onValidationFailed(const shared_ptr<const Data>& data, const string& failureInfo)$/;"	f	namespace:ndn::tests
on_close	NFD/websocketpp/docs/simple_broadcast_server.cpp	/^    void on_close(connection_hdl hdl) {$/;"	f	class:broadcast_server
on_close	NFD/websocketpp/docs/simple_count_server_thread.cpp	/^    void on_close(connection_hdl hdl) {$/;"	f	class:count_server
on_close	NFD/websocketpp/examples/associative_storage/associative_storage.cpp	/^    void on_close(connection_hdl hdl) {$/;"	f	class:print_server
on_close	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    void on_close(connection_hdl hdl) {$/;"	f	class:broadcast_server
on_close	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    void on_close(websocketpp::connection_hdl) {$/;"	f	class:perftest
on_close	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^void on_close(websocketpp::connection_hdl) {$/;"	f
on_close	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    void on_close(connection_hdl hdl) {$/;"	f	class:print_server
on_close	NFD/websocketpp/examples/simple_broadcast_server/simple_broadcast_server.cpp	/^    void on_close(connection_hdl hdl) {$/;"	f	class:broadcast_server
on_close	NFD/websocketpp/examples/telemetry_client/telemetry_client.cpp	/^    void on_close(websocketpp::connection_hdl) {$/;"	f	class:telemetry_client
on_close	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^    void on_close(connection_hdl hdl) {$/;"	f	class:telemetry_server
on_close	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    void on_close(client * c, websocketpp::connection_hdl hdl) {$/;"	f	class:connection_metadata
on_close	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    void on_close(client * c, websocketpp::connection_hdl hdl) {$/;"	f	class:connection_metadata
on_close	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    void on_close(client * c, websocketpp::connection_hdl hdl) {$/;"	f	class:connection_metadata
on_fail	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    void on_fail(websocketpp::connection_hdl hdl) {$/;"	f	class:perftest
on_fail	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^void on_fail(server* s, websocketpp::connection_hdl hdl) {$/;"	f
on_fail	NFD/websocketpp/examples/telemetry_client/telemetry_client.cpp	/^    void on_fail(websocketpp::connection_hdl) {$/;"	f	class:telemetry_client
on_fail	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    void on_fail(client * c, websocketpp::connection_hdl hdl) {$/;"	f	class:connection_metadata
on_fail	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    void on_fail(client * c, websocketpp::connection_hdl hdl) {$/;"	f	class:connection_metadata
on_fail	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    void on_fail(client * c, websocketpp::connection_hdl hdl) {$/;"	f	class:connection_metadata
on_fail	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    void on_fail(client * c, websocketpp::connection_hdl hdl) {$/;"	f	class:connection_metadata
on_http	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^void on_http(server* s, websocketpp::connection_hdl hdl) {$/;"	f
on_http	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^    void on_http(connection_hdl hdl) {$/;"	f	class:telemetry_server
on_message	NFD/websocketpp/docs/simple_broadcast_server.cpp	/^    void on_message(connection_hdl hdl, server::message_ptr msg) {$/;"	f	class:broadcast_server
on_message	NFD/websocketpp/examples/associative_storage/associative_storage.cpp	/^    void on_message(connection_hdl hdl, server::message_ptr msg) {$/;"	f	class:print_server
on_message	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    void on_message(connection_hdl hdl, server::message_ptr msg) {$/;"	f	class:broadcast_server
on_message	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    void on_message(websocketpp::connection_hdl hdl, message_ptr) {$/;"	f	class:perftest
on_message	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^void on_message(server* s, websocketpp::connection_hdl hdl, message_ptr msg) {$/;"	f
on_message	NFD/websocketpp/examples/echo_server/echo_handler.hpp	/^    void on_message(connection_ptr con, std::string msg) {$/;"	f	class:echo_handler
on_message	NFD/websocketpp/examples/echo_server/echo_server.cpp	/^void on_message(server* s, websocketpp::connection_hdl hdl, message_ptr msg) {$/;"	f
on_message	NFD/websocketpp/examples/echo_server_both/echo_server_both.cpp	/^void on_message(EndpointType* s, websocketpp::connection_hdl hdl,$/;"	f
on_message	NFD/websocketpp/examples/echo_server_tls/echo_server_tls.cpp	/^void on_message(server* s, websocketpp::connection_hdl hdl, message_ptr msg) {$/;"	f
on_message	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    void on_message(connection_hdl hdl, server::message_ptr msg) {$/;"	f	class:print_server
on_message	NFD/websocketpp/examples/iostream_server/iostream_server.cpp	/^void on_message(server* s, websocketpp::connection_hdl hdl, message_ptr msg) {$/;"	f
on_message	NFD/websocketpp/examples/print_server/print_server.cpp	/^void on_message(websocketpp::connection_hdl, server::message_ptr msg) {$/;"	f
on_message	NFD/websocketpp/examples/simple_broadcast_server/simple_broadcast_server.cpp	/^    void on_message(connection_hdl hdl, server::message_ptr msg) {$/;"	f	class:broadcast_server
on_message	NFD/websocketpp/examples/sip_client/sip_client.cpp	/^void on_message(client* c, websocketpp::connection_hdl hdl, message_ptr msg) {$/;"	f
on_message	NFD/websocketpp/examples/testee_client/testee_client.cpp	/^void on_message(client* c, websocketpp::connection_hdl hdl, message_ptr msg) {$/;"	f
on_message	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^void on_message(server* s, websocketpp::connection_hdl hdl, message_ptr msg) {$/;"	f
on_message	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    void on_message(websocketpp::connection_hdl, client::message_ptr msg) {$/;"	f	class:connection_metadata
on_message	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    void on_message(websocketpp::connection_hdl, client::message_ptr msg) {$/;"	f	class:connection_metadata
on_open	NFD/websocketpp/docs/simple_broadcast_server.cpp	/^    void on_open(connection_hdl hdl) {$/;"	f	class:broadcast_server
on_open	NFD/websocketpp/docs/simple_count_server_thread.cpp	/^    void on_open(connection_hdl hdl) {$/;"	f	class:count_server
on_open	NFD/websocketpp/examples/associative_storage/associative_storage.cpp	/^    void on_open(connection_hdl hdl) {$/;"	f	class:print_server
on_open	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    void on_open(connection_hdl hdl) {$/;"	f	class:broadcast_server
on_open	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    void on_open(websocketpp::connection_hdl hdl) {$/;"	f	class:perftest
on_open	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    void on_open(connection_hdl hdl) {$/;"	f	class:print_server
on_open	NFD/websocketpp/examples/simple_broadcast_server/simple_broadcast_server.cpp	/^    void on_open(connection_hdl hdl) {$/;"	f	class:broadcast_server
on_open	NFD/websocketpp/examples/sip_client/sip_client.cpp	/^void on_open(client* c, websocketpp::connection_hdl hdl) {$/;"	f
on_open	NFD/websocketpp/examples/telemetry_client/telemetry_client.cpp	/^    void on_open(websocketpp::connection_hdl) {$/;"	f	class:telemetry_client
on_open	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^    void on_open(connection_hdl hdl) {$/;"	f	class:telemetry_server
on_open	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    void on_open(client * c, websocketpp::connection_hdl hdl) {$/;"	f	class:connection_metadata
on_open	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    void on_open(client * c, websocketpp::connection_hdl hdl) {$/;"	f	class:connection_metadata
on_open	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    void on_open(client * c, websocketpp::connection_hdl hdl) {$/;"	f	class:connection_metadata
on_open	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    void on_open(client * c, websocketpp::connection_hdl hdl) {$/;"	f	class:connection_metadata
on_open_print	NFD/websocketpp/test/connection/connection.cpp	/^void on_open_print(server* s, websocketpp::connection_hdl hdl)$/;"	f
on_ping	NFD/websocketpp/test/transport/integration.cpp	/^bool on_ping(server * s, websocketpp::connection_hdl, std::string) {$/;"	f
on_socket_init	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    void on_socket_init(websocketpp::connection_hdl) {$/;"	f	class:perftest
on_socket_init	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^void on_socket_init(websocketpp::connection_hdl, boost::asio::ip::tcp::socket & s) {$/;"	f
on_timer	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^    void on_timer(websocketpp::lib::error_code const & ec) {$/;"	f	class:telemetry_server
on_tls_init	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    context_ptr on_tls_init(websocketpp::connection_hdl) {$/;"	f	class:perftest
on_tls_init	NFD/websocketpp/examples/echo_server_both/echo_server_both.cpp	/^context_ptr on_tls_init(websocketpp::connection_hdl hdl) {$/;"	f
on_tls_init	NFD/websocketpp/examples/echo_server_tls/echo_server_tls.cpp	/^context_ptr on_tls_init(websocketpp::connection_hdl hdl) {$/;"	f
on_tls_init	NFD/websocketpp/test/transport/asio/timers.cpp	/^context_ptr on_tls_init(websocketpp::connection_hdl) {$/;"	f
opcode	NFD/websocketpp/websocketpp/frame.hpp	/^namespace opcode {$/;"	n	namespace:websocketpp::frame
open	NFD/websocketpp/websocketpp/connection.hpp	/^        open = 1,$/;"	e	enum:websocketpp::session::state::value
open	ndn-cxx/src/util/config-file.cpp	/^ConfigFile::open()$/;"	f	class:ndn::ConfigFile
open_func_subprotocol	NFD/websocketpp/test/roles/server.cpp	/^void open_func_subprotocol(server* s, std::string* out, websocketpp::connection_hdl hdl) {$/;"	f
open_handler	NFD/websocketpp/websocketpp/connection.hpp	/^typedef lib::function<void(connection_hdl)> open_handler;$/;"	t	namespace:websocketpp
open_handshake_timeout	NFD/websocketpp/websocketpp/error.hpp	/^    open_handshake_timeout,$/;"	e	enum:websocketpp::error::value
operation_aborted	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    operation_aborted,$/;"	e	enum:websocketpp::transport::error::value
operation_canceled	NFD/websocketpp/websocketpp/error.hpp	/^    operation_canceled,$/;"	e	enum:websocketpp::error::value
operation_not_supported	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    operation_not_supported,$/;"	e	enum:websocketpp::transport::error::value
operator !	ndn-cxx/src/security/identity.cpp	/^Identity::operator!() const$/;"	f	class:ndn::security::Identity
operator !	ndn-cxx/src/security/key.cpp	/^Key::operator!() const$/;"	f	class:ndn::security::Key
operator !=	NFD/core/network.hpp	/^  operator!=(const Network& rhs) const$/;"	f	class:nfd::Network
operator !=	NFD/daemon/table/fib.hpp	/^Fib::const_iterator::operator!=(const Fib::const_iterator& other) const$/;"	f	class:nfd::Fib::const_iterator
operator !=	NFD/daemon/table/name-tree.hpp	/^NameTree::const_iterator::operator!=(const NameTree::const_iterator& other) const$/;"	f	class:nfd::NameTree::const_iterator
operator !=	NFD/daemon/table/pit.hpp	/^Pit::const_iterator::operator!=(const Pit::const_iterator& other) const$/;"	f	class:nfd::Pit::const_iterator
operator !=	NFD/daemon/table/strategy-choice.hpp	/^StrategyChoice::const_iterator::operator!=(const StrategyChoice::const_iterator& other) const$/;"	f	class:nfd::StrategyChoice::const_iterator
operator !=	model/ndn-global-router.hpp	/^operator!=(const GlobalRouter::Incidency& a, const GlobalRouter::Incidency& b)$/;"	f	namespace:ns3::ndn
operator !=	ndn-cxx/src/data.cpp	/^Data::operator!=(const Data& other) const$/;"	f	class:ndn::Data
operator !=	ndn-cxx/src/encoding/block.cpp	/^Block::operator!=(const Block& other) const$/;"	f	class:ndn::Block
operator !=	ndn-cxx/src/encoding/oid.hpp	/^  operator!=(const OID& oid) const$/;"	f	class:ndn::OID
operator !=	ndn-cxx/src/exclude.hpp	/^Exclude::operator!=(const Exclude& other) const$/;"	f	class:ndn::Exclude
operator !=	ndn-cxx/src/interest.hpp	/^  operator!=(const Interest& other) const$/;"	f	class:ndn::Interest
operator !=	ndn-cxx/src/key-locator.hpp	/^  operator!=(const KeyLocator& other) const$/;"	f	class:ndn::KeyLocator
operator !=	ndn-cxx/src/meta-info.hpp	/^MetaInfo::operator!=(const MetaInfo& other) const$/;"	f	class:ndn::MetaInfo
operator !=	ndn-cxx/src/name-component.hpp	/^  operator!=(const Component& other) const$/;"	f	class:ndn::name::Component
operator !=	ndn-cxx/src/name.hpp	/^  operator!=(const Name& name) const$/;"	f	class:ndn::Name
operator !=	ndn-cxx/src/security/additional-description.cpp	/^AdditionalDescription::operator!=(const AdditionalDescription& other) const$/;"	f	class:ndn::security::AdditionalDescription
operator !=	ndn-cxx/src/security/certificate-container.cpp	/^CertificateContainer::const_iterator::operator!=(const const_iterator& other)$/;"	f	class:ndn::security::CertificateContainer::const_iterator
operator !=	ndn-cxx/src/security/identity-container.cpp	/^IdentityContainer::const_iterator::operator!=(const const_iterator& other)$/;"	f	class:ndn::security::IdentityContainer::const_iterator
operator !=	ndn-cxx/src/security/key-container.cpp	/^KeyContainer::const_iterator::operator!=(const const_iterator& other)$/;"	f	class:ndn::security::KeyContainer::const_iterator
operator !=	ndn-cxx/src/security/public-key.hpp	/^  operator!=(const PublicKey& key) const$/;"	f	class:ndn::PublicKey
operator !=	ndn-cxx/src/security/validity-period.cpp	/^ValidityPeriod::operator!=(const ValidityPeriod& other) const$/;"	f	class:ndn::security::ValidityPeriod
operator !=	ndn-cxx/src/selectors.hpp	/^  operator!=(const Selectors& other) const$/;"	f	class:ndn::Selectors
operator !=	ndn-cxx/src/signature-info.hpp	/^  operator!=(const SignatureInfo& rhs) const$/;"	f	class:ndn::SignatureInfo
operator !=	ndn-cxx/src/signature.hpp	/^  operator!=(const Signature& other) const$/;"	f	class:ndn::Signature
operator !=	ndn-cxx/src/util/digest.hpp	/^  operator!=(Digest<Hash>& digest)$/;"	f	class:ndn::util::Digest
operator !=	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::operator!=(const FaceUri& rhs) const$/;"	f	class:ndn::util::FaceUri
operator !=	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator!=(const const_iterator& rhs)$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator !=	ndn-cxx/src/util/signal-connection.cpp	/^Connection::operator!=(const Connection& other) const$/;"	f	class:ndn::util::signal::Connection
operator !=	utils/trie/trie.hpp	/^  operator!=(trie_iterator<Trie, NonConstTrie>& other)$/;"	f	class:ns3::ndn::ndnSIM::trie_iterator
operator !=	utils/trie/trie.hpp	/^  operator!=(trie_iterator<const Trie, NonConstTrie>& other) const$/;"	f	class:ns3::ndn::ndnSIM::trie_iterator
operator !=	utils/trie/trie.hpp	/^  operator!=(trie_point_iterator<Trie>& other)$/;"	f	class:ns3::ndn::ndnSIM::trie_point_iterator
operator !=	utils/trie/trie.hpp	/^  operator!=(trie_point_iterator<const Trie>& other) const$/;"	f	class:ns3::ndn::ndnSIM::trie_point_iterator
operator ()	NFD/daemon/table/cs-policy-lru.hpp	/^  operator()(const iterator& a, const iterator& b) const$/;"	f	struct:nfd::cs::lru::EntryItComparator
operator ()	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^  operator()(const iterator& a, const iterator& b) const$/;"	f	struct:nfd::cs::priority_fifo::EntryItComparator
operator ()	NFD/daemon/table/cs.hpp	/^    operator()(const EntryImpl& entry) const$/;"	f	struct:nfd::cs::Cs::EntryFromEntryImpl
operator ()	NFD/daemon/table/measurements.hpp	/^  operator()(const Entry& entry)$/;"	f	class:nfd::measurements::AnyEntry
operator ()	NFD/daemon/table/measurements.hpp	/^  operator()(const Entry& entry)$/;"	f	class:nfd::measurements::EntryWithStrategyInfo
operator ()	NFD/daemon/table/name-tree.hpp	/^  operator()(const Entry& entry)$/;"	f	struct:nfd::name_tree::AnyEntry
operator ()	NFD/daemon/table/name-tree.hpp	/^  operator()(const Entry& entry)$/;"	f	struct:nfd::name_tree::AnyEntrySubTree
operator ()	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^  operator()(const std::string& filename,$/;"	f	class:nfd::tests::IgnoreNotTablesSection
operator ()	NFD/tests/other/cs-benchmark.cpp	/^    operator()(size_t i) const$/;"	f	class:nfd::tests::CsBenchmarkFixture::SimpleNameGenerator
operator ()	NFD/websocketpp/websocketpp/random/none.hpp	/^        int_type operator()() {$/;"	f	class:websocketpp::random::none::int_generator
operator ()	NFD/websocketpp/websocketpp/random/random_device.hpp	/^        int_type operator()() {$/;"	f	class:websocketpp::random::random_device::int_generator
operator ()	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^  void operator()(Arg1 arg1)$/;"	f	class:websocketpp::transport::asio::custom_alloc_handler
operator ()	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^  void operator()(Arg1 arg1, Arg2 arg2)$/;"	f	class:websocketpp::transport::asio::custom_alloc_handler
operator ()	NFD/websocketpp/websocketpp/utilities.hpp	/^        bool operator() (unsigned char const & c1, unsigned char const & c2) const {$/;"	f	struct:websocketpp::utility::ci_less::nocase_compare
operator ()	NFD/websocketpp/websocketpp/utilities.hpp	/^    bool operator() (std::string const & s1, std::string const & s2) const {$/;"	f	struct:websocketpp::utility::ci_less
operator ()	NFD/websocketpp/websocketpp/utilities.hpp	/^    bool operator()(charT ch1, charT ch2) {$/;"	f	struct:websocketpp::utility::my_equal
operator ()	helper/boost-graph-ndn-global-routing-helper.hpp	/^  operator()(property_traits<EdgeWeights>::reference a, uint32_t b) const$/;"	f	struct:boost::WeightCompare
operator ()	helper/boost-graph-ndn-global-routing-helper.hpp	/^  operator()(std::tuple<std::shared_ptr<nfd::Face>, uint32_t, double> a,$/;"	f	struct:boost::WeightCombine
operator ()	helper/boost-graph-ndn-global-routing-helper.hpp	/^  operator()(std::tuple<std::shared_ptr<nfd::Face>, uint32_t, double> a,$/;"	f	struct:boost::WeightCompare
operator ()	helper/boost-graph-ndn-global-routing-helper.hpp	/^  operator()(uint32_t a, property_traits<EdgeWeights>::reference b) const$/;"	f	struct:boost::WeightCombine
operator ()	helper/boost-graph-ndn-global-routing-helper.hpp	/^  operator()(uint32_t a, uint32_t b) const$/;"	f	struct:boost::WeightCompare
operator ()	model/cs/content-store-impl.hpp	/^  operator()(const name::Component& comp) const$/;"	f	struct:ns3::ndn::cs::isNotExcluded
operator ()	model/cs/custom-policies/freshness-policy.hpp	/^      operator()(const Key& a, const Key& b) const$/;"	f	struct:ns3::ndn::ndnSIM::freshness_policy_traits::policy::MemberHookLess
operator ()	model/ndn-l3-protocol.cpp	/^  operator()(const std::string& filename, const std::string& sectionName,$/;"	f	class:ns3::ndn::IgnoreSections
operator ()	ndn-cxx/src/detail/interest-filter-record.hpp	/^  operator()(const shared_ptr<InterestFilterRecord>& interestFilterId) const$/;"	f	class:ndn::MatchInterestFilterId
operator ()	ndn-cxx/src/detail/pending-interest.hpp	/^  operator()(const shared_ptr<const PendingInterest>& pendingInterest) const$/;"	f	class:ndn::MatchPendingInterestId
operator ()	ndn-cxx/src/detail/registered-prefix.hpp	/^  operator()(const shared_ptr<RegisteredPrefix>& registeredPrefix) const$/;"	f	class:ndn::MatchRegisteredPrefixId
operator ()	ndn-cxx/src/lp/detail/field-info.cpp	/^  operator()(FieldInfo* info, T)$/;"	f	struct:ndn::lp::detail::ExtractFieldInfo
operator ()	ndn-cxx/src/name.cpp	/^hash<ndn::Name>::operator()(const ndn::Name& name) const$/;"	f	class:std::hash
operator ()	ndn-cxx/src/util/dns.hpp	/^  operator()(const boost::asio::ip::address& address)$/;"	f	struct:ndn::dns::AnyAddress
operator ()	ndn-cxx/src/util/dns.hpp	/^  operator()(const boost::asio::ip::address& address)$/;"	f	struct:ndn::dns::Ipv4Only
operator ()	ndn-cxx/src/util/dns.hpp	/^  operator()(const boost::asio::ip::address& address)$/;"	f	struct:ndn::dns::Ipv6Only
operator ()	ndn-cxx/src/util/event-emitter.hpp	/^EventEmitter<TArgs...>::operator()(const TArgs&...args) const$/;"	f	class:ndn::util::EventEmitter
operator ()	ndn-cxx/src/util/face-uri.cpp	/^  operator()(CP*)$/;"	f	class:ndn::util::CanonizeProviderTableInitializer
operator ()	ndn-cxx/src/util/segment-fetcher.hpp	/^  operator()(const Data& data) const$/;"	f	class:ndn::util::DontVerifySegment
operator ()	ndn-cxx/src/util/signal-signal.hpp	/^Signal<Owner, TArgs...>::operator()(const TArgs&... args)$/;"	f	class:ndn::util::signal::Signal
operator ()	ndn-cxx/src/util/signal-signal.hpp	/^Signal<Owner, TArgs...>::operator()(const TArgs&... args, const DummyExtraArg&)$/;"	f	class:ndn::util::signal::Signal
operator ()	utils/topology/annotated-topology-reader.cpp	/^  operator()(std::ostream& out, const VertexOrEdge& v) const$/;"	f	class:ns3::name_writer
operator ()	utils/topology/rocketfuel-map-reader.cpp	/^  operator()(std::ostream& out, const VertexOrEdge& v) const$/;"	f	class:ns3::name_color_writer
operator ()	utils/trie/lfu-policy.hpp	/^      operator()(const Key& a, const Key& b) const$/;"	f	struct:ns3::ndn::ndnSIM::lfu_policy_traits::policy::MemberHookLess
operator ()	utils/trie/multi-policy.hpp	/^        operator()(U index)$/;"	f	struct:ns3::ndn::ndnSIM::multi_policy_traits::policy::type::max_size_setter
operator ()	utils/trie/multi-policy.hpp	/^    operator()(U index)$/;"	f	struct:ns3::ndn::ndnSIM::multi_policy_traits::name_getter
operator ()	utils/trie/random-policy.hpp	/^      operator()(const Key& a, const Key& b) const$/;"	f	struct:ns3::ndn::ndnSIM::random_policy_traits::policy::MemberHookLess
operator ()	utils/trie/trie.hpp	/^    operator()(D* array)$/;"	f	struct:ns3::ndn::ndnSIM::trie::array_disposer
operator ()	utils/trie/trie.hpp	/^    operator()(trie* delete_this)$/;"	f	struct:ns3::ndn::ndnSIM::trie::trie_delete_disposer
operator *	NFD/daemon/table/fib.hpp	/^Fib::const_iterator::operator*() const$/;"	f	class:nfd::Fib::const_iterator
operator *	NFD/daemon/table/name-tree.hpp	/^NameTree::const_iterator::operator*() const$/;"	f	class:nfd::NameTree::const_iterator
operator *	NFD/daemon/table/pit.hpp	/^Pit::const_iterator::operator*() const$/;"	f	class:nfd::Pit::const_iterator
operator *	NFD/daemon/table/strategy-choice.hpp	/^StrategyChoice::const_iterator::operator*() const$/;"	f	class:nfd::StrategyChoice::const_iterator
operator *	ndn-cxx/src/security/certificate-container.cpp	/^CertificateContainer::const_iterator::operator*()$/;"	f	class:ndn::security::CertificateContainer::const_iterator
operator *	ndn-cxx/src/security/identity-container.cpp	/^IdentityContainer::const_iterator::operator*()$/;"	f	class:ndn::security::IdentityContainer::const_iterator
operator *	ndn-cxx/src/security/key-container.cpp	/^KeyContainer::const_iterator::operator*()$/;"	f	class:ndn::security::KeyContainer::const_iterator
operator *	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator*()$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator *	utils/trie/trie.hpp	/^  Trie& operator*()$/;"	f	class:ns3::ndn::ndnSIM::trie_iterator
operator *	utils/trie/trie.hpp	/^  Trie& operator*()$/;"	f	class:ns3::ndn::ndnSIM::trie_point_iterator
operator *	utils/trie/trie.hpp	/^  const Trie& operator*() const$/;"	f	class:ns3::ndn::ndnSIM::trie_iterator
operator *	utils/trie/trie.hpp	/^  const Trie& operator*() const$/;"	f	class:ns3::ndn::ndnSIM::trie_point_iterator
operator ++	NFD/daemon/face/face-counters.hpp	/^  operator++()$/;"	f	class:nfd::PacketCounter
operator ++	NFD/daemon/table/fib.hpp	/^Fib::const_iterator::operator++()$/;"	f	class:nfd::Fib::const_iterator
operator ++	NFD/daemon/table/fib.hpp	/^Fib::const_iterator::operator++(int)$/;"	f	class:nfd::Fib::const_iterator
operator ++	NFD/daemon/table/name-tree.cpp	/^NameTree::const_iterator::operator++()$/;"	f	class:nfd::NameTree::const_iterator
operator ++	NFD/daemon/table/name-tree.hpp	/^NameTree::const_iterator::operator++(int)$/;"	f	class:nfd::NameTree::const_iterator
operator ++	NFD/daemon/table/pit.hpp	/^Pit::const_iterator::operator++()$/;"	f	class:nfd::Pit::const_iterator
operator ++	NFD/daemon/table/pit.hpp	/^Pit::const_iterator::operator++(int)$/;"	f	class:nfd::Pit::const_iterator
operator ++	NFD/daemon/table/strategy-choice.hpp	/^StrategyChoice::const_iterator::operator++()$/;"	f	class:nfd::StrategyChoice::const_iterator
operator ++	NFD/daemon/table/strategy-choice.hpp	/^StrategyChoice::const_iterator::operator++(int)$/;"	f	class:nfd::StrategyChoice::const_iterator
operator ++	ndn-cxx/src/security/certificate-container.cpp	/^CertificateContainer::const_iterator::operator++()$/;"	f	class:ndn::security::CertificateContainer::const_iterator
operator ++	ndn-cxx/src/security/certificate-container.cpp	/^CertificateContainer::const_iterator::operator++(int)$/;"	f	class:ndn::security::CertificateContainer::const_iterator
operator ++	ndn-cxx/src/security/identity-container.cpp	/^IdentityContainer::const_iterator::operator++()$/;"	f	class:ndn::security::IdentityContainer::const_iterator
operator ++	ndn-cxx/src/security/identity-container.cpp	/^IdentityContainer::const_iterator::operator++(int)$/;"	f	class:ndn::security::IdentityContainer::const_iterator
operator ++	ndn-cxx/src/security/key-container.cpp	/^KeyContainer::const_iterator::operator++()$/;"	f	class:ndn::security::KeyContainer::const_iterator
operator ++	ndn-cxx/src/security/key-container.cpp	/^KeyContainer::const_iterator::operator++(int)$/;"	f	class:ndn::security::KeyContainer::const_iterator
operator ++	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator++()$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator ++	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator++(int)$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator ++	utils/trie/trie.hpp	/^  operator++()$/;"	f	class:ns3::ndn::ndnSIM::trie_iterator
operator ++	utils/trie/trie.hpp	/^  operator++()$/;"	f	class:ns3::ndn::ndnSIM::trie_point_iterator
operator ++	utils/trie/trie.hpp	/^  operator++(int)$/;"	f	class:ns3::ndn::ndnSIM::trie_iterator
operator ++	utils/trie/trie.hpp	/^  operator++(int)$/;"	f	class:ns3::ndn::ndnSIM::trie_point_iterator
operator +=	NFD/daemon/face/face-counters.hpp	/^  operator+=(rep n)$/;"	f	class:nfd::ByteCounter
operator +=	ndn-cxx/src/util/event-emitter.hpp	/^EventEmitter<TArgs...>::operator+=(const Handler& handler)$/;"	f	class:ndn::util::EventEmitter
operator ->	NFD/daemon/table/fib.hpp	/^Fib::const_iterator::operator->() const$/;"	f	class:nfd::Fib::const_iterator
operator ->	NFD/daemon/table/name-tree.hpp	/^NameTree::const_iterator::operator->() const$/;"	f	class:nfd::NameTree::const_iterator
operator ->	NFD/daemon/table/pit.hpp	/^Pit::const_iterator::operator->() const$/;"	f	class:nfd::Pit::const_iterator
operator ->	NFD/daemon/table/strategy-choice.hpp	/^StrategyChoice::const_iterator::operator->() const$/;"	f	class:nfd::StrategyChoice::const_iterator
operator ->	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator->()$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator ->	utils/trie/trie.hpp	/^  Trie* operator->()$/;"	f	class:ns3::ndn::ndnSIM::trie_iterator
operator ->	utils/trie/trie.hpp	/^  Trie* operator->()$/;"	f	class:ns3::ndn::ndnSIM::trie_point_iterator
operator ->	utils/trie/trie.hpp	/^  const Trie* operator->() const$/;"	f	class:ns3::ndn::ndnSIM::trie_iterator
operator ->	utils/trie/trie.hpp	/^  const Trie* operator->() const$/;"	f	class:ns3::ndn::ndnSIM::trie_point_iterator
operator <	NFD/daemon/table/cs-entry-impl.cpp	/^EntryImpl::operator<(const EntryImpl& other) const$/;"	f	class:nfd::cs::EntryImpl
operator <	ndn-cxx/src/name-component.hpp	/^  operator<(const Component& other) const$/;"	f	class:ndn::name::Component
operator <	ndn-cxx/src/name.hpp	/^  operator<(const Name& other) const$/;"	f	class:ndn::Name
operator <	ndn-cxx/src/util/scheduler.hpp	/^    operator <(const EventInfo& other) const$/;"	f	struct:ndn::util::scheduler::Scheduler::EventInfo
operator <<	NFD/core/network.cpp	/^operator<<(std::ostream& os, const Network& network)$/;"	f	namespace:nfd
operator <<	NFD/rib/fib-update.hpp	/^operator<<(std::ostream& os, const FibUpdate& update)$/;"	f	namespace:nfd::rib
operator <<	NFD/rib/rib-entry.cpp	/^operator<<(std::ostream& os, const RibEntry& entry)$/;"	f	namespace:nfd::rib
operator <<	NFD/rib/rib-update.cpp	/^operator<<(std::ostream& os, const RibUpdate& update)$/;"	f	namespace:nfd::rib
operator <<	NFD/rib/rib-update.cpp	/^operator<<(std::ostream& os, const RibUpdate::Action action)$/;"	f	namespace:nfd::rib
operator <<	NFD/rib/rib.cpp	/^operator<<(std::ostream& os, const Rib& rib)$/;"	f	namespace:nfd::rib
operator <<	NFD/rib/route.cpp	/^operator<<(std::ostream& os, const Route& route)$/;"	f	namespace:nfd::rib
operator <<	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^std::ostream & operator<< (std::ostream & out, connection_metadata const & data) {$/;"	f
operator <<	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^std::ostream & operator<< (std::ostream & out, connection_metadata const & data) {$/;"	f
operator <<	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^std::ostream & operator<< (std::ostream & out, connection_metadata const & data) {$/;"	f
operator <<	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^std::ostream & operator<< (std::ostream & out, connection_metadata const & data) {$/;"	f
operator <<	model/cs/ndn-content-store.hpp	/^operator<<(std::ostream& os, const ContentStore& cs)$/;"	f	namespace:ns3::ndn
operator <<	model/ndn-face.hpp	/^operator<<(std::ostream& os, const Face& face)$/;"	f	namespace:nfd
operator <<	ndn-cxx/src/data.cpp	/^operator<<(std::ostream& os, const Data& data)$/;"	f	namespace:ndn
operator <<	ndn-cxx/src/encoding/nfd-constants.cpp	/^operator<<(std::ostream& os, FacePersistency facePersistency)$/;"	f	namespace:ndn::nfd
operator <<	ndn-cxx/src/encoding/nfd-constants.cpp	/^operator<<(std::ostream& os, FaceScope faceScope)$/;"	f	namespace:ndn::nfd
operator <<	ndn-cxx/src/encoding/nfd-constants.cpp	/^operator<<(std::ostream& os, LinkType linkType)$/;"	f	namespace:ndn::nfd
operator <<	ndn-cxx/src/exclude.cpp	/^operator<<(std::ostream& os, const Exclude& exclude)$/;"	f	namespace:ndn
operator <<	ndn-cxx/src/interest-filter.cpp	/^operator<<(std::ostream& os, const InterestFilter& filter)$/;"	f	namespace:ndn
operator <<	ndn-cxx/src/interest.cpp	/^operator<<(std::ostream& os, const Interest& interest)$/;"	f	namespace:ndn
operator <<	ndn-cxx/src/lp/cache-policy.cpp	/^operator<<(std::ostream& os, CachePolicyType policy)$/;"	f	namespace:ndn::lp
operator <<	ndn-cxx/src/lp/nack-header.cpp	/^operator<<(std::ostream& os, NackReason reason)$/;"	f	namespace:ndn::lp
operator <<	ndn-cxx/src/management/nfd-control-parameters.cpp	/^operator<<(std::ostream& os, const ControlParameters& parameters)$/;"	f	namespace:ndn::nfd
operator <<	ndn-cxx/src/management/nfd-face-event-notification.cpp	/^operator<<(std::ostream& os, const FaceEventNotification& notification)$/;"	f	namespace:ndn::nfd
operator <<	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^operator<<(std::ostream& os, const FaceQueryFilter& filter)$/;"	f	namespace:ndn::nfd
operator <<	ndn-cxx/src/management/nfd-face-status.cpp	/^operator<<(std::ostream& os, const FaceStatus& status)$/;"	f	namespace:ndn::nfd
operator <<	ndn-cxx/src/management/nfd-rib-entry.cpp	/^operator<<(std::ostream& os, const RibEntry& entry)$/;"	f	namespace:ndn::nfd
operator <<	ndn-cxx/src/management/nfd-rib-entry.cpp	/^operator<<(std::ostream& os, const Route& route)$/;"	f	namespace:ndn::nfd
operator <<	ndn-cxx/src/meta-info.cpp	/^operator<<(std::ostream& os, const MetaInfo& info)$/;"	f	namespace:ndn
operator <<	ndn-cxx/src/mgmt/control-response.cpp	/^operator<<(std::ostream& os, const ControlResponse& response)$/;"	f	namespace:ndn::mgmt
operator <<	ndn-cxx/src/name-component.hpp	/^operator<<(std::ostream& os, const Component& component)$/;"	f	namespace:ndn::name
operator <<	ndn-cxx/src/name.cpp	/^operator<<(std::ostream& os, const Name& name)$/;"	f	namespace:ndn
operator <<	ndn-cxx/src/security/additional-description.cpp	/^operator<<(std::ostream& os, const AdditionalDescription& other)$/;"	f	namespace:ndn::security
operator <<	ndn-cxx/src/security/certificate.cpp	/^operator<<(std::ostream& os, const Certificate& cert)$/;"	f	namespace:ndn
operator <<	ndn-cxx/src/security/public-key.cpp	/^operator<<(std::ostream& os, const PublicKey& key)$/;"	f	namespace:ndn
operator <<	ndn-cxx/src/security/validity-period.cpp	/^operator<<(std::ostream& os, const ValidityPeriod& period)$/;"	f	namespace:ndn::security
operator <<	ndn-cxx/src/util/digest.cpp	/^Digest<Hash>::operator<<(Digest<Hash>& src)$/;"	f	class:ndn::util::Digest
operator <<	ndn-cxx/src/util/digest.cpp	/^Digest<Hash>::operator<<(const Block& block)$/;"	f	class:ndn::util::Digest
operator <<	ndn-cxx/src/util/digest.cpp	/^Digest<Hash>::operator<<(const std::string& str)$/;"	f	class:ndn::util::Digest
operator <<	ndn-cxx/src/util/digest.cpp	/^Digest<Hash>::operator<<(uint64_t value)$/;"	f	class:ndn::util::Digest
operator <<	ndn-cxx/src/util/digest.cpp	/^operator<<(std::ostream& os, Digest<Hash>& digest)$/;"	f	namespace:ndn::util
operator <<	ndn-cxx/src/util/ethernet.cpp	/^operator<<(std::ostream& o, const Address& a)$/;"	f	namespace:ndn::util::ethernet
operator <<	ndn-cxx/src/util/face-uri.cpp	/^operator<<(std::ostream& os, const FaceUri& uri)$/;"	f	namespace:ndn::util
operator <<	ndn-cxx/src/util/regex/regex-matcher.hpp	/^operator<<(std::ostream& os, const RegexMatcher& regex)$/;"	f	namespace:ndn
operator <<	utils/batches.cpp	/^operator<<(std::ostream& os, const Batches& batch)$/;"	f	namespace:ns3
operator <<	utils/tracers/l2-tracer.hpp	/^operator<<(std::ostream& os, const L2Tracer& tracer)$/;"	f	namespace:ns3
operator <<	utils/tracers/ndn-cs-tracer.hpp	/^operator<<(std::ostream& os, const CsTracer& tracer)$/;"	f	namespace:ns3::ndn
operator <<	utils/tracers/ndn-l3-tracer.hpp	/^operator<<(std::ostream& os, const L3Tracer& tracer)$/;"	f	namespace:ns3::ndn
operator <<	utils/trie/trie.hpp	/^operator<<(std::ostream& os, const trie<FullKey, PayloadTraits, PolicyHook>& trie_node)$/;"	f	namespace:ns3::ndn::ndnSIM
operator <=	ndn-cxx/src/name-component.hpp	/^  operator<=(const Component& other) const$/;"	f	class:ndn::name::Component
operator <=	ndn-cxx/src/name.hpp	/^  operator<=(const Name& other) const$/;"	f	class:ndn::Name
operator <=	ndn-cxx/src/util/scheduler.hpp	/^    operator <=(const EventInfo& other) const$/;"	f	struct:ndn::util::scheduler::Scheduler::EventInfo
operator =	NFD/core/scheduler.cpp	/^ScopedEventId::operator=(const EventId& event)$/;"	f	class:nfd::scheduler::ScopedEventId
operator =	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    endpoint& operator= (const endpoint && rhs) {$/;"	f	class:websocketpp::transport::asio::endpoint
operator =	helper/ndn-face-container.cpp	/^FaceContainer::operator= (const FaceContainer &other)$/;"	f	class:ns3::ndn::FaceContainer
operator =	ndn-cxx/src/security/sec-tpm-osx.cpp	/^  operator=(const CFReleaser& inReleaser)$/;"	f	class:ndn::CFReleaser
operator =	ndn-cxx/src/security/sec-tpm-osx.cpp	/^  operator=(const T& typeRef)$/;"	f	class:ndn::CFReleaser
operator =	ndn-cxx/src/util/scheduler-scoped-event-id.cpp	/^ScopedEventId::operator=(const EventId& event)$/;"	f	class:ndn::util::scheduler::ScopedEventId
operator =	ndn-cxx/src/util/signal-scoped-connection.cpp	/^ScopedConnection::operator=(const Connection& connection)$/;"	f	class:ndn::util::signal::ScopedConnection
operator ==	NFD/core/network.hpp	/^  operator==(const Network& rhs) const$/;"	f	class:nfd::Network
operator ==	NFD/daemon/table/fib.hpp	/^Fib::const_iterator::operator==(const Fib::const_iterator& other) const$/;"	f	class:nfd::Fib::const_iterator
operator ==	NFD/daemon/table/name-tree.hpp	/^NameTree::const_iterator::operator==(const NameTree::const_iterator& other) const$/;"	f	class:nfd::NameTree::const_iterator
operator ==	NFD/daemon/table/pit.hpp	/^Pit::const_iterator::operator==(const Pit::const_iterator& other) const$/;"	f	class:nfd::Pit::const_iterator
operator ==	NFD/daemon/table/strategy-choice.hpp	/^StrategyChoice::const_iterator::operator==(const StrategyChoice::const_iterator& other) const$/;"	f	class:nfd::StrategyChoice::const_iterator
operator ==	NFD/rib/fib-update.hpp	/^  operator==(const FibUpdate& other) const$/;"	f	class:nfd::rib::FibUpdate
operator ==	NFD/rib/route.cpp	/^Route::operator==(const Route& other) const$/;"	f	class:nfd::rib::Route
operator ==	model/ndn-global-router.hpp	/^operator==(const GlobalRouter::Incidency& a, const GlobalRouter::Incidency& b)$/;"	f	namespace:ns3::ndn
operator ==	ndn-cxx/src/data.cpp	/^Data::operator==(const Data& other) const$/;"	f	class:ndn::Data
operator ==	ndn-cxx/src/encoding/block.cpp	/^Block::operator==(const Block& other) const$/;"	f	class:ndn::Block
operator ==	ndn-cxx/src/encoding/oid.hpp	/^  operator==(const OID& oid) const$/;"	f	class:ndn::OID
operator ==	ndn-cxx/src/exclude.cpp	/^Exclude::operator==(const Exclude& other) const$/;"	f	class:ndn::Exclude
operator ==	ndn-cxx/src/interest.hpp	/^  operator==(const Interest& other) const$/;"	f	class:ndn::Interest
operator ==	ndn-cxx/src/key-locator.cpp	/^KeyLocator::operator==(const KeyLocator& other) const$/;"	f	class:ndn::KeyLocator
operator ==	ndn-cxx/src/meta-info.hpp	/^MetaInfo::operator==(const MetaInfo& other) const$/;"	f	class:ndn::MetaInfo
operator ==	ndn-cxx/src/name-component.hpp	/^  operator==(const Component& other) const$/;"	f	class:ndn::name::Component
operator ==	ndn-cxx/src/name.hpp	/^  operator==(const Name& name) const$/;"	f	class:ndn::Name
operator ==	ndn-cxx/src/security/additional-description.cpp	/^AdditionalDescription::operator==(const AdditionalDescription& other) const$/;"	f	class:ndn::security::AdditionalDescription
operator ==	ndn-cxx/src/security/certificate-container.cpp	/^CertificateContainer::const_iterator::operator==(const const_iterator& other)$/;"	f	class:ndn::security::CertificateContainer::const_iterator
operator ==	ndn-cxx/src/security/identity-container.cpp	/^IdentityContainer::const_iterator::operator==(const const_iterator& other)$/;"	f	class:ndn::security::IdentityContainer::const_iterator
operator ==	ndn-cxx/src/security/key-container.cpp	/^KeyContainer::const_iterator::operator==(const const_iterator& other)$/;"	f	class:ndn::security::KeyContainer::const_iterator
operator ==	ndn-cxx/src/security/public-key.hpp	/^  operator==(const PublicKey& key) const$/;"	f	class:ndn::PublicKey
operator ==	ndn-cxx/src/security/validity-period.cpp	/^ValidityPeriod::operator==(const ValidityPeriod& other) const$/;"	f	class:ndn::security::ValidityPeriod
operator ==	ndn-cxx/src/selectors.cpp	/^Selectors::operator==(const Selectors& other) const$/;"	f	class:ndn::Selectors
operator ==	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::operator==(const SignatureInfo& rhs) const$/;"	f	class:ndn::SignatureInfo
operator ==	ndn-cxx/src/signature.hpp	/^  operator==(const Signature& other) const$/;"	f	class:ndn::Signature
operator ==	ndn-cxx/src/util/digest.cpp	/^Digest<Hash>::operator==(Digest<Hash>& digest)$/;"	f	class:ndn::util::Digest
operator ==	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::operator==(const FaceUri& rhs) const$/;"	f	class:ndn::util::FaceUri
operator ==	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::const_iterator::operator==(const const_iterator& rhs)$/;"	f	class:ndn::util::InMemoryStorage::const_iterator
operator ==	ndn-cxx/src/util/signal-connection.cpp	/^Connection::operator==(const Connection& other) const$/;"	f	class:ndn::util::signal::Connection
operator ==	utils/trie/trie.hpp	/^  operator==(trie_iterator<Trie, NonConstTrie>& other)$/;"	f	class:ns3::ndn::ndnSIM::trie_iterator
operator ==	utils/trie/trie.hpp	/^  operator==(trie_iterator<const Trie, NonConstTrie>& other) const$/;"	f	class:ns3::ndn::ndnSIM::trie_iterator
operator ==	utils/trie/trie.hpp	/^  operator==(trie_point_iterator<Trie>& other)$/;"	f	class:ns3::ndn::ndnSIM::trie_point_iterator
operator ==	utils/trie/trie.hpp	/^  operator==(trie_point_iterator<const Trie>& other) const$/;"	f	class:ns3::ndn::ndnSIM::trie_point_iterator
operator ==	utils/trie/trie.hpp	/^operator==(const trie<FullKey, PayloadTraits, PolicyHook>& a,$/;"	f	namespace:ns3::ndn::ndnSIM
operator >	ndn-cxx/src/name-component.hpp	/^  operator>(const Component& other) const$/;"	f	class:ndn::name::Component
operator >	ndn-cxx/src/name.hpp	/^  operator>(const Name& other) const$/;"	f	class:ndn::Name
operator >=	ndn-cxx/src/name-component.hpp	/^  operator>=(const Component& other) const$/;"	f	class:ndn::name::Component
operator >=	ndn-cxx/src/name.hpp	/^  operator>=(const Name& other) const$/;"	f	class:ndn::Name
operator >>	NFD/core/network.cpp	/^operator>>(std::istream& is, Network& network)$/;"	f	namespace:nfd
operator >>	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    friend std::istream & operator>> (std::istream & in, type & t) {$/;"	f	class:websocketpp::transport::iostream::connection
operator >>	ndn-cxx/src/name.cpp	/^operator>>(std::istream& is, Name& name)$/;"	f	namespace:ndn
operator >>	utils/batches.cpp	/^operator>>(std::istream& is, Batches& batch)$/;"	f	namespace:ns3
operator []	NFD/daemon/face/ndnlp-sequence-generator.hpp	/^SequenceBlock::operator[](size_t pos) const$/;"	f	class:nfd::ndnlp::SequenceBlock
operator []	ndn-cxx/src/name.hpp	/^  operator[](ssize_t i) const$/;"	f	class:ndn::Name
operator bool	ndn-cxx/src/security/identity.cpp	/^Identity::operator bool() const$/;"	f	class:ndn::security::Identity
operator bool	ndn-cxx/src/security/key.cpp	/^Key::operator bool() const$/;"	f	class:ndn::security::Key
operator bool	ndn-cxx/src/signature.hpp	/^  operator bool() const$/;"	f	class:ndn::Signature
operator boost::asio::const_buffer	ndn-cxx/src/encoding/block.cpp	/^Block::operator boost::asio::const_buffer() const$/;"	f	class:ndn::Block
operator const Name&	ndn-cxx/src/interest-filter.hpp	/^  operator const Name&() const$/;"	f	class:ndn::InterestFilter
operator const Scheduler::EventQueue::iterator&	ndn-cxx/src/util/scheduler.cpp	/^  operator const Scheduler::EventQueue::iterator&() const$/;"	f	struct:ndn::util::scheduler::EventIdImpl
operator rep	NFD/daemon/face/face-counters.hpp	/^  operator rep() const$/;"	f	class:nfd::ByteCounter
operator rep	NFD/daemon/face/face-counters.hpp	/^  operator rep() const$/;"	f	class:nfd::PacketCounter
operator sqlite3_stmt*	ndn-cxx/src/util/sqlite3-statement.cpp	/^Sqlite3Statement::operator sqlite3_stmt*()$/;"	f	class:ndn::util::Sqlite3Statement
optional	ndn-cxx/src/management/nfd-control-command.hpp	/^    optional(ControlParameterField field)$/;"	f	class:ndn::nfd::ControlCommand::FieldValidator
origin	NFD/rib/route.hpp	/^  uint64_t origin;$/;"	m	class:nfd::rib::Route
out_degree	helper/boost-graph-ndn-global-routing-helper.hpp	/^out_degree(graph_traits<NdnGlobalRouterGraph>::vertex_descriptor u, const NdnGlobalRouterGraph& g)$/;"	f	namespace:boost
out_edge_iterator	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef ns3::ndn::GlobalRouter::IncidencyList::iterator out_edge_iterator;$/;"	t	struct:boost::graph_traits
out_edges	helper/boost-graph-ndn-global-routing-helper.hpp	/^out_edges(graph_traits<NdnGlobalRouterGraph>::vertex_descriptor u, const NdnGlobalRouterGraph& g)$/;"	f	namespace:boost
output_stream_required	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^    output_stream_required,$/;"	e	enum:websocketpp::transport::iostream::error::value
p	NFD/websocketpp/test/processors/hybi00.cpp	/^    websocketpp::processor::hybi00<stub_config> p;$/;"	m	struct:processor_setup	file:
p	NFD/websocketpp/test/processors/hybi13.cpp	/^    websocketpp::processor::hybi13<stub_config> p;$/;"	m	struct:processor_setup	file:
p	NFD/websocketpp/test/processors/hybi13.cpp	/^    websocketpp::processor::hybi13<stub_config_ext> p;$/;"	m	struct:processor_setup_ext	file:
parameter_list	NFD/websocketpp/websocketpp/http/constants.hpp	/^    typedef std::vector< std::pair<std::string,attribute_list> > parameter_list;$/;"	t	namespace:websocketpp::http
params	helper/ndn-scenario-helper.hpp	/^    std::initializer_list<std::pair<std::string, std::string>> params;$/;"	m	struct:ns3::ndn::ScenarioHelper::AppInfo
parent_	utils/trie/trie.hpp	/^  trie* parent_; \/\/ to make cleaning effective$/;"	m	class:ns3::ndn::ndnSIM::trie
parent_trie	model/cs/custom-policies/freshness-policy.hpp	/^      typedef Container parent_trie;$/;"	t	class:ns3::ndn::ndnSIM::freshness_policy_traits::policy::type
parent_trie	model/cs/custom-policies/lifetime-stats-policy.hpp	/^      typedef Container parent_trie;$/;"	t	class:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy::type
parent_trie	model/cs/custom-policies/probability-policy.hpp	/^      typedef Container parent_trie;$/;"	t	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
parent_trie	utils/trie/aggregate-stats-policy.hpp	/^      typedef Container parent_trie;$/;"	t	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
parent_trie	utils/trie/counting-policy.hpp	/^      typedef Container parent_trie;$/;"	t	class:ns3::ndn::ndnSIM::counting_policy_traits::policy::type
parent_trie	utils/trie/fifo-policy.hpp	/^      typedef Container parent_trie;$/;"	t	class:ns3::ndn::ndnSIM::fifo_policy_traits::policy::type
parent_trie	utils/trie/lfu-policy.hpp	/^      typedef Container parent_trie;$/;"	t	class:ns3::ndn::ndnSIM::lfu_policy_traits::policy::type
parent_trie	utils/trie/lru-policy.hpp	/^      typedef Container parent_trie;$/;"	t	class:ns3::ndn::ndnSIM::lru_policy_traits::policy::type
parent_trie	utils/trie/multi-policy.hpp	/^      typedef Container parent_trie;$/;"	t	class:ns3::ndn::ndnSIM::multi_policy_traits::policy::type
parent_trie	utils/trie/payload-policy.hpp	/^      typedef Container parent_trie;$/;"	t	class:ns3::ndn::ndnSIM::payload_policy_traits::policy::type
parent_trie	utils/trie/persistent-policy.hpp	/^      typedef Container parent_trie;$/;"	t	class:ns3::ndn::ndnSIM::persistent_policy_traits::policy::type
parent_trie	utils/trie/random-policy.hpp	/^      typedef Container parent_trie;$/;"	t	class:ns3::ndn::ndnSIM::random_policy_traits::policy::type
parent_trie	utils/trie/trie-with-policy.hpp	/^  typedef trie<FullKey, PayloadTraits, typename PolicyTraits::policy_hook_type> parent_trie;$/;"	t	class:ns3::ndn::ndnSIM::trie_with_policy
parse	NFD/core/config-file.cpp	/^ConfigFile::parse(const ConfigSection& config, bool isDryRun, const std::string& filename)$/;"	f	class:nfd::ConfigFile
parse	NFD/core/config-file.cpp	/^ConfigFile::parse(const std::string& filename, bool isDryRun)$/;"	f	class:nfd::ConfigFile
parse	NFD/core/config-file.cpp	/^ConfigFile::parse(const std::string& input, bool isDryRun, const std::string& filename)$/;"	f	class:nfd::ConfigFile
parse	NFD/core/config-file.cpp	/^ConfigFile::parse(std::istream& input, bool isDryRun, const std::string& filename)$/;"	f	class:nfd::ConfigFile
parse	ndn-cxx/src/encoding/block.cpp	/^Block::parse() const$/;"	f	class:ndn::Block
parse	ndn-cxx/src/util/config-file.cpp	/^ConfigFile::parse()$/;"	f	class:ndn::ConfigFile
parse	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::parse(const std::string& uri)$/;"	f	class:ndn::util::FaceUri
parseBlocksFromStream	ndn-cxx/tools/tlvdump.cpp	/^parseBlocksFromStream(std::istream& is)$/;"	f	namespace:ndn
parseConfig	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  parseConfig(const std::string configuration, bool isDryRun)$/;"	f	class:nfd::tests::FaceManagerFixture
parseRepetition	ndn-cxx/src/util/regex/regex-repeat-matcher.hpp	/^RegexRepeatMatcher::parseRepetition()$/;"	f	class:ndn::RegexRepeatMatcher
parseSrvRr	NFD/tools/ndn-autoconfig/base-dns.cpp	/^BaseDns::parseSrvRr(const QueryAnswer& queryAnswer, int answerSize)$/;"	f	class:ndn::tools::autoconfig::BaseDns
parseUri	ndn-cxx/src/security/key-chain.cpp	/^parseUri(const std::string& uri)$/;"	f	namespace:ndn::security
parseYesNo	NFD/daemon/mgmt/face-manager.hpp	/^FaceManager::parseYesNo(const ConfigSection::const_iterator& i,$/;"	f	class:nfd::FaceManager
parse_parameter_list	NFD/websocketpp/websocketpp/http/impl/parser.hpp	/^inline bool parser::parse_parameter_list(std::string const & in,$/;"	f	class:websocketpp::http::parser::parser
parser	NFD/websocketpp/websocketpp/http/impl/parser.hpp	/^namespace parser {$/;"	n	namespace:websocketpp::http
parser	NFD/websocketpp/websocketpp/http/impl/request.hpp	/^namespace parser {$/;"	n	namespace:websocketpp::http
parser	NFD/websocketpp/websocketpp/http/impl/response.hpp	/^namespace parser {$/;"	n	namespace:websocketpp::http
parser	NFD/websocketpp/websocketpp/http/parser.hpp	/^    parser()$/;"	f	class:websocketpp::http::parser::parser
parser	NFD/websocketpp/websocketpp/http/parser.hpp	/^class parser {$/;"	c	namespace:websocketpp::http::parser
parser	NFD/websocketpp/websocketpp/http/parser.hpp	/^namespace parser {$/;"	n	namespace:websocketpp::http
parser	NFD/websocketpp/websocketpp/http/request.hpp	/^namespace parser {$/;"	n	namespace:websocketpp::http
parser	NFD/websocketpp/websocketpp/http/response.hpp	/^namespace parser {$/;"	n	namespace:websocketpp::http
partialEnumerate	NFD/daemon/table/name-tree.cpp	/^NameTree::partialEnumerate(const Name& prefix,$/;"	f	class:nfd::NameTree
partial_content	NFD/websocketpp/websocketpp/http/constants.hpp	/^            partial_content = 206,$/;"	e	enum:websocketpp::http::status_code::value
passPacket	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  passPacket()$/;"	f	struct:ndn::tests::FacesFixture
pass_through	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^    pass_through,$/;"	e	enum:websocketpp::transport::asio::error::value
pass_through	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^        pass_through,$/;"	e	enum:websocketpp::transport::asio::socket::error::value
pass_through	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    pass_through,$/;"	e	enum:websocketpp::transport::error::value
patch_version	NFD/websocketpp/websocketpp/version.hpp	/^static int const patch_version = 1;$/;"	m	namespace:websocketpp
pause	ndn-cxx/src/transport/stream-transport.hpp	/^  pause()$/;"	f	class:ndn::StreamTransportImpl
pause	ndn-cxx/src/transport/tcp-transport.cpp	/^TcpTransport::pause()$/;"	f	class:ndn::TcpTransport
pause	ndn-cxx/src/transport/unix-transport.cpp	/^UnixTransport::pause()$/;"	f	class:ndn::UnixTransport
pause	ndn-cxx/src/util/dummy-client-face.cpp	/^  pause()$/;"	f	class:ndn::util::DummyClientFace::Transport
pause_reading	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^lib::error_code connection<config>::pause_reading() {$/;"	f	class:websocketpp::connection
pause_reading	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^void endpoint<connection,config>::pause_reading(connection_hdl hdl) {$/;"	f	class:websocketpp::endpoint
pause_reading	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^void endpoint<connection,config>::pause_reading(connection_hdl hdl, lib::error_code & ec)$/;"	f	class:websocketpp::endpoint
payload	NFD/daemon/face/ndnlp-data.hpp	/^  Block payload;$/;"	m	class:nfd::ndnlp::NdnlpData
payload	utils/trie/trie.hpp	/^  payload() const$/;"	f	class:ns3::ndn::ndnSIM::trie
payload	utils/trie/trie.hpp	/^  payload()$/;"	f	class:ns3::ndn::ndnSIM::trie
payload_	utils/trie/trie.hpp	/^  typename PayloadTraits::storage_type payload_;$/;"	m	class:ns3::ndn::ndnSIM::trie
payload_policy_traits	utils/trie/payload-policy.hpp	/^struct payload_policy_traits {$/;"	s	namespace:ns3::ndn::ndnSIM
payload_size_basic	NFD/websocketpp/websocketpp/frame.hpp	/^    static uint8_t const payload_size_basic = 125;$/;"	m	namespace:websocketpp::frame::limits
payload_size_code_16bit	NFD/websocketpp/websocketpp/frame.hpp	/^static uint8_t const payload_size_code_16bit = 0x7E; \/\/ 126$/;"	m	namespace:websocketpp::frame
payload_size_code_64bit	NFD/websocketpp/websocketpp/frame.hpp	/^static uint8_t const payload_size_code_64bit = 0x7F; \/\/ 127$/;"	m	namespace:websocketpp::frame
payload_size_extended	NFD/websocketpp/websocketpp/frame.hpp	/^    static uint16_t const payload_size_extended = 0xFFFF; \/\/ 2^16, 65535$/;"	m	namespace:websocketpp::frame::limits
payload_size_jumbo	NFD/websocketpp/websocketpp/frame.hpp	/^    static uint64_t const payload_size_jumbo = 0x7FFFFFFFFFFFFFFFLL;\/\/2^63$/;"	m	namespace:websocketpp::frame::limits
payload_traits	utils/trie/trie.hpp	/^  typedef PayloadTraits payload_traits;$/;"	t	class:ns3::ndn::ndnSIM::trie
payload_type	utils/trie/trie.hpp	/^  typedef Payload payload_type;  \/\/ general type of the payload$/;"	t	struct:ns3::ndn::ndnSIM::pointer_payload_traits
payload_type	utils/trie/trie.hpp	/^  typedef Payload payload_type;$/;"	t	struct:ns3::ndn::ndnSIM::non_pointer_traits
payload_type	utils/trie/trie.hpp	/^  typedef Payload payload_type;$/;"	t	struct:ns3::ndn::ndnSIM::smart_pointer_payload_traits
payload_violation	NFD/websocketpp/websocketpp/error.hpp	/^    payload_violation,$/;"	e	enum:websocketpp::error::value
payload_with_index	utils/trie/payload-with-policy.hpp	/^  inline payload_with_index()$/;"	f	class:ns3::ndn::ndnSIM::payload_with_index
payload_with_index	utils/trie/payload-with-policy.hpp	/^class payload_with_index {$/;"	c	namespace:ns3::ndn::ndnSIM
payment_required	NFD/websocketpp/websocketpp/http/constants.hpp	/^            payment_required = 402,$/;"	e	enum:websocketpp::http::status_code::value
pcapInit	NFD/daemon/face/ethernet-face.cpp	/^EthernetFace::pcapInit()$/;"	f	class:nfd::EthernetFace
pcap_t	NFD/daemon/face/ethernet-face.hpp	/^typedef pcap pcap_t;$/;"	t
perftest	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    perftest () {$/;"	f	class:perftest
perftest	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^class perftest {$/;"	c	file:
period	ndn-cxx/src/util/time.hpp	/^  typedef duration::period                 period;$/;"	t	class:ndn::time::system_clock
period	ndn-cxx/src/util/time.hpp	/^  typedef duration::period period;$/;"	t	class:ndn::time::steady_clock
permessage_deflate	NFD/websocketpp/websocketpp/extensions/permessage_deflate/disabled.hpp	/^namespace permessage_deflate {$/;"	n	namespace:websocketpp::extensions
permessage_deflate	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^namespace permessage_deflate {$/;"	n	namespace:websocketpp::extensions
permessage_deflate_config	NFD/websocketpp/test/processors/hybi07.cpp	/^    struct permessage_deflate_config {$/;"	s	struct:stub_config	file:
permessage_deflate_config	NFD/websocketpp/test/processors/hybi08.cpp	/^    struct permessage_deflate_config {$/;"	s	struct:stub_config	file:
permessage_deflate_config	NFD/websocketpp/test/processors/hybi13.cpp	/^    struct permessage_deflate_config {$/;"	s	struct:stub_config	file:
permessage_deflate_config	NFD/websocketpp/test/processors/hybi13.cpp	/^    struct permessage_deflate_config {$/;"	s	struct:stub_config_ext	file:
permessage_deflate_config	NFD/websocketpp/websocketpp/config/core.hpp	/^    struct permessage_deflate_config {$/;"	s	struct:websocketpp::config::core
permessage_deflate_config	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    struct permessage_deflate_config {$/;"	s	struct:websocketpp::config::core_client
permessage_deflate_config	NFD/websocketpp/websocketpp/config/debug.hpp	/^    struct permessage_deflate_config {$/;"	s	struct:websocketpp::config::debug_core
permessage_deflate_config	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    struct permessage_deflate_config {$/;"	s	struct:websocketpp::config::minimal_server
permessage_deflate_type	NFD/websocketpp/test/processors/hybi07.cpp	/^        <permessage_deflate_config> permessage_deflate_type;$/;"	t	struct:stub_config	file:
permessage_deflate_type	NFD/websocketpp/test/processors/hybi08.cpp	/^        <permessage_deflate_config> permessage_deflate_type;$/;"	t	struct:stub_config	file:
permessage_deflate_type	NFD/websocketpp/test/processors/hybi13.cpp	/^        <permessage_deflate_config> permessage_deflate_type;$/;"	t	struct:stub_config	file:
permessage_deflate_type	NFD/websocketpp/test/processors/hybi13.cpp	/^        <permessage_deflate_config> permessage_deflate_type;$/;"	t	struct:stub_config_ext	file:
permessage_deflate_type	NFD/websocketpp/websocketpp/config/core.hpp	/^        <permessage_deflate_config> permessage_deflate_type;$/;"	t	struct:websocketpp::config::core
permessage_deflate_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        <permessage_deflate_config> permessage_deflate_type;$/;"	t	struct:websocketpp::config::core_client
permessage_deflate_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^        <permessage_deflate_config> permessage_deflate_type;$/;"	t	struct:websocketpp::config::debug_core
permessage_deflate_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        <permessage_deflate_config> permessage_deflate_type;$/;"	t	struct:websocketpp::config::minimal_server
permessage_deflate_type	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    typedef typename config::permessage_deflate_type permessage_deflate_type;$/;"	t	class:websocketpp::processor::hybi13
persistent_policy_traits	utils/trie/persistent-policy.hpp	/^struct persistent_policy_traits {$/;"	s	namespace:ns3::ndn::ndnSIM
ping	NFD/websocketpp/websocketpp/frame.hpp	/^        ping = 0x9,$/;"	e	enum:websocketpp::frame::opcode::value
ping	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::ping(std::string const & payload) {$/;"	f	class:websocketpp::connection
ping	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::ping(std::string const& payload, lib::error_code& ec) {$/;"	f	class:websocketpp::connection
ping	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^void endpoint<connection,config>::ping(connection_hdl hdl, std::string const & payload)$/;"	f	class:websocketpp::endpoint
ping	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^void endpoint<connection,config>::ping(connection_hdl hdl, std::string const &$/;"	f	class:websocketpp::endpoint
ping_handler	NFD/websocketpp/websocketpp/connection.hpp	/^typedef lib::function<bool(connection_hdl,std::string)> ping_handler;$/;"	t	namespace:websocketpp
ping_on_open	NFD/websocketpp/test/transport/integration.cpp	/^void ping_on_open(T * c, std::string payload, websocketpp::connection_hdl hdl) {$/;"	f
pit	NFD/daemon/table/fib.hpp	/^namespace pit {$/;"	n	namespace:nfd
pit	NFD/daemon/table/measurements.hpp	/^namespace pit {$/;"	n	namespace:nfd
pit	NFD/daemon/table/pit-entry.cpp	/^namespace pit {$/;"	n	namespace:nfd	file:
pit	NFD/daemon/table/pit-entry.hpp	/^namespace pit {$/;"	n	namespace:nfd
pit	NFD/daemon/table/pit-face-record.cpp	/^namespace pit {$/;"	n	namespace:nfd	file:
pit	NFD/daemon/table/pit-face-record.hpp	/^namespace pit {$/;"	n	namespace:nfd
pit	NFD/daemon/table/pit-in-record.cpp	/^namespace pit {$/;"	n	namespace:nfd	file:
pit	NFD/daemon/table/pit-in-record.hpp	/^namespace pit {$/;"	n	namespace:nfd
pit	NFD/daemon/table/pit-out-record.cpp	/^namespace pit {$/;"	n	namespace:nfd	file:
pit	NFD/daemon/table/pit-out-record.hpp	/^namespace pit {$/;"	n	namespace:nfd
pit	NFD/daemon/table/pit.cpp	/^namespace pit {$/;"	n	namespace:nfd	file:
pit	NFD/daemon/table/pit.hpp	/^namespace pit {$/;"	n	namespace:nfd
pit	NFD/tests/daemon/table/pit.t.cpp	/^namespace pit {$/;"	n	namespace:nfd	file:
pit	model/ndn-l3-protocol.hpp	/^namespace pit {$/;"	n	namespace:nfd
pit	utils/tracers/ndn-l3-tracer.hpp	/^namespace pit {$/;"	n	namespace:nfd
placeholders2TestFunction	ndn-cxx/tests/unit-tests/util/placeholders2.t.cpp	/^placeholders2TestFunction(int i)$/;"	f
placeholders2TestMain	ndn-cxx/tests/unit-tests/util/placeholders2.t.cpp	/^placeholders2TestMain()$/;"	f
placeholdersTestFunction	ndn-cxx/tests/unit-tests/util/placeholders.t.cpp	/^placeholdersTestFunction(int i)$/;"	f
placeholdersTestMain	ndn-cxx/tests/unit-tests/util/placeholders.t.cpp	/^placeholdersTestMain()$/;"	f
plain	NFD/websocketpp/websocketpp/http/parser.hpp	/^        plain,$/;"	e	enum:websocketpp::http::parser::body_encoding::value
pms	NFD/daemon/face/ethernet-face.hpp	/^    unique_ptr<ndnlp::PartialMessageStore> pms;$/;"	m	struct:nfd::EthernetFace::Reassembler
pms	NFD/tests/daemon/face/ndnlp.t.cpp	/^  ndnlp::PartialMessageStore pms;$/;"	m	class:nfd::ndnlp::tests::ReassembleFixture	file:
point_iterator	utils/trie/trie.hpp	/^  typedef trie_point_iterator<trie> point_iterator;$/;"	t	class:ns3::ndn::ndnSIM::trie
pointer	ndn-cxx/src/name.hpp	/^  typedef Component*              pointer;$/;"	t	class:ndn::Name
pointer	utils/trie/detail/functor-hook.hpp	/^  typedef value_type* pointer;$/;"	t	struct:ns3::ndn::ndnSIM::detail::FunctorHook
pointer_payload_traits	utils/trie/trie.hpp	/^struct pointer_payload_traits {$/;"	s	namespace:ns3::ndn::ndnSIM
policies	utils/trie/multi-policy.hpp	/^      policies;$/;"	t	struct:ns3::ndn::ndnSIM::multi_policy_traits::policy
policies_range	utils/trie/multi-policy.hpp	/^      policies_range;$/;"	t	struct:ns3::ndn::ndnSIM::multi_policy_traits::policy
policy	model/cs/custom-policies/freshness-policy.hpp	/^  struct policy {$/;"	s	struct:ns3::ndn::ndnSIM::freshness_policy_traits
policy	model/cs/custom-policies/lifetime-stats-policy.hpp	/^  struct policy {$/;"	s	struct:ns3::ndn::ndnSIM::lifetime_stats_policy_traits
policy	model/cs/custom-policies/probability-policy.hpp	/^  struct policy {$/;"	s	struct:ns3::ndn::ndnSIM::probability_policy_traits
policy	utils/trie/aggregate-stats-policy.hpp	/^  struct policy {$/;"	s	struct:ns3::ndn::ndnSIM::aggregate_stats_policy_traits
policy	utils/trie/counting-policy.hpp	/^  struct policy {$/;"	s	struct:ns3::ndn::ndnSIM::counting_policy_traits
policy	utils/trie/empty-policy.hpp	/^  struct policy {$/;"	s	struct:ns3::ndn::ndnSIM::empty_policy_traits
policy	utils/trie/fifo-policy.hpp	/^  struct policy {$/;"	s	struct:ns3::ndn::ndnSIM::fifo_policy_traits
policy	utils/trie/lfu-policy.hpp	/^  struct policy {$/;"	s	struct:ns3::ndn::ndnSIM::lfu_policy_traits
policy	utils/trie/lru-policy.hpp	/^  struct policy {$/;"	s	struct:ns3::ndn::ndnSIM::lru_policy_traits
policy	utils/trie/multi-policy.hpp	/^  struct policy {$/;"	s	struct:ns3::ndn::ndnSIM::multi_policy_traits
policy	utils/trie/payload-policy.hpp	/^  struct policy {$/;"	s	struct:ns3::ndn::ndnSIM::payload_policy_traits
policy	utils/trie/persistent-policy.hpp	/^  struct policy {$/;"	s	struct:ns3::ndn::ndnSIM::persistent_policy_traits
policy	utils/trie/random-policy.hpp	/^  struct policy {$/;"	s	struct:ns3::ndn::ndnSIM::random_policy_traits
policy_	utils/trie/payload-with-policy.hpp	/^  mutable index_container policy_;$/;"	m	class:ns3::ndn::ndnSIM::payload_with_index
policy_	utils/trie/trie-with-policy.hpp	/^  mutable policy_container policy_;$/;"	m	class:ns3::ndn::ndnSIM::trie_with_policy
policy_base	model/cs/custom-policies/freshness-policy.hpp	/^      typedef policy policy_base; \/\/ to get access to get_freshness methods from outside$/;"	t	class:ns3::ndn::ndnSIM::freshness_policy_traits::policy::type
policy_base	model/cs/custom-policies/lifetime-stats-policy.hpp	/^      typedef policy policy_base; \/\/ to get access to get_time methods from outside$/;"	t	class:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy::type
policy_base	model/cs/custom-policies/probability-policy.hpp	/^      typedef policy policy_base; \/\/ to get access to get_freshness methods from outside$/;"	t	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
policy_base	utils/trie/lfu-policy.hpp	/^      typedef policy policy_base; \/\/ to get access to get_order methods from outside$/;"	t	class:ns3::ndn::ndnSIM::lfu_policy_traits::policy::type
policy_base	utils/trie/multi-policy.hpp	/^      typedef policy policy_base; \/\/ to get access to get_time methods from outside$/;"	t	class:ns3::ndn::ndnSIM::multi_policy_traits::policy::type
policy_base	utils/trie/random-policy.hpp	/^      typedef policy policy_base; \/\/ to get access to get_order methods from outside$/;"	t	class:ns3::ndn::ndnSIM::random_policy_traits::policy::type
policy_container	model/cs/custom-policies/freshness-policy.hpp	/^                                       Hook> policy_container;$/;"	t	struct:ns3::ndn::ndnSIM::freshness_policy_traits::policy
policy_container	model/cs/custom-policies/lifetime-stats-policy.hpp	/^    typedef typename boost::intrusive::list<Container, Hook> policy_container;$/;"	t	struct:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy
policy_container	model/cs/custom-policies/probability-policy.hpp	/^    typedef typename boost::intrusive::list<Container, Hook> policy_container;$/;"	t	struct:ns3::ndn::ndnSIM::probability_policy_traits::policy
policy_container	utils/trie/counting-policy.hpp	/^    typedef typename boost::intrusive::list<Container, Hook> policy_container;$/;"	t	struct:ns3::ndn::ndnSIM::counting_policy_traits::policy
policy_container	utils/trie/fifo-policy.hpp	/^    typedef typename boost::intrusive::list<Container, Hook> policy_container;$/;"	t	struct:ns3::ndn::ndnSIM::fifo_policy_traits::policy
policy_container	utils/trie/lfu-policy.hpp	/^                                       Hook> policy_container;$/;"	t	struct:ns3::ndn::ndnSIM::lfu_policy_traits::policy
policy_container	utils/trie/lru-policy.hpp	/^    typedef typename boost::intrusive::list<Container, Hook> policy_container;$/;"	t	struct:ns3::ndn::ndnSIM::lru_policy_traits::policy
policy_container	utils/trie/multi-policy.hpp	/^    typedef detail::multi_policy_container<Base, policies> policy_container;$/;"	t	struct:ns3::ndn::ndnSIM::multi_policy_traits::policy
policy_container	utils/trie/payload-policy.hpp	/^    typedef typename boost::intrusive::list<Container, Hook> policy_container;$/;"	t	struct:ns3::ndn::ndnSIM::payload_policy_traits::policy
policy_container	utils/trie/persistent-policy.hpp	/^    typedef typename boost::intrusive::list<Container, Hook> policy_container;$/;"	t	struct:ns3::ndn::ndnSIM::persistent_policy_traits::policy
policy_container	utils/trie/random-policy.hpp	/^                                       Hook> policy_container;$/;"	t	struct:ns3::ndn::ndnSIM::random_policy_traits::policy
policy_container	utils/trie/trie-with-policy.hpp	/^      policy_container;$/;"	t	class:ns3::ndn::ndnSIM::trie_with_policy
policy_hook_	utils/trie/trie.hpp	/^  PolicyHook policy_hook_;$/;"	m	class:ns3::ndn::ndnSIM::trie
policy_hook_type	model/cs/custom-policies/freshness-policy.hpp	/^  struct policy_hook_type : public boost::intrusive::set_member_hook<> {$/;"	s	struct:ns3::ndn::ndnSIM::freshness_policy_traits
policy_hook_type	model/cs/custom-policies/lifetime-stats-policy.hpp	/^  struct policy_hook_type : public boost::intrusive::list_member_hook<> {$/;"	s	struct:ns3::ndn::ndnSIM::lifetime_stats_policy_traits
policy_hook_type	model/cs/custom-policies/probability-policy.hpp	/^  struct policy_hook_type : public boost::intrusive::list_member_hook<> {$/;"	s	struct:ns3::ndn::ndnSIM::probability_policy_traits
policy_hook_type	utils/trie/aggregate-stats-policy.hpp	/^  struct policy_hook_type {$/;"	s	struct:ns3::ndn::ndnSIM::aggregate_stats_policy_traits
policy_hook_type	utils/trie/counting-policy.hpp	/^  struct policy_hook_type : public boost::intrusive::list_member_hook<> {$/;"	s	struct:ns3::ndn::ndnSIM::counting_policy_traits
policy_hook_type	utils/trie/empty-policy.hpp	/^  typedef void* policy_hook_type;$/;"	t	struct:ns3::ndn::ndnSIM::empty_policy_traits
policy_hook_type	utils/trie/fifo-policy.hpp	/^  struct policy_hook_type : public boost::intrusive::list_member_hook<> {$/;"	s	struct:ns3::ndn::ndnSIM::fifo_policy_traits
policy_hook_type	utils/trie/lfu-policy.hpp	/^  struct policy_hook_type : public boost::intrusive::set_member_hook<> {$/;"	s	struct:ns3::ndn::ndnSIM::lfu_policy_traits
policy_hook_type	utils/trie/lru-policy.hpp	/^  struct policy_hook_type : public boost::intrusive::list_member_hook<> {$/;"	s	struct:ns3::ndn::ndnSIM::lru_policy_traits
policy_hook_type	utils/trie/multi-policy.hpp	/^    typename boost::mpl::transform1<policy_traits, getHook>::type> policy_hook_type;$/;"	t	struct:ns3::ndn::ndnSIM::multi_policy_traits
policy_hook_type	utils/trie/payload-policy.hpp	/^  struct policy_hook_type : public boost::intrusive::set_member_hook<> {$/;"	s	struct:ns3::ndn::ndnSIM::payload_policy_traits
policy_hook_type	utils/trie/persistent-policy.hpp	/^  struct policy_hook_type : public boost::intrusive::list_member_hook<> {$/;"	s	struct:ns3::ndn::ndnSIM::persistent_policy_traits
policy_hook_type	utils/trie/random-policy.hpp	/^  struct policy_hook_type : public boost::intrusive::set_member_hook<> {$/;"	s	struct:ns3::ndn::ndnSIM::random_policy_traits
policy_traits	utils/trie/multi-policy.hpp	/^  typedef Policies policy_traits;$/;"	t	struct:ns3::ndn::ndnSIM::multi_policy_traits
policy_violation	NFD/websocketpp/websocketpp/close.hpp	/^    static value const policy_violation = 1008;$/;"	m	namespace:websocketpp::close::status
policy_wrap	utils/trie/detail/multi-policy-container.hpp	/^  policy_wrap(Base& base)$/;"	f	struct:ns3::ndn::ndnSIM::detail::policy_wrap
policy_wrap	utils/trie/detail/multi-policy-container.hpp	/^struct policy_wrap {$/;"	s	namespace:ns3::ndn::ndnSIM::detail
poll	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    std::size_t poll() {$/;"	f	class:websocketpp::transport::asio::endpoint
pollCfLoop	ndn-cxx/src/util/network-monitor.cpp	/^  pollCfLoop()$/;"	f	class:ndn::util::NetworkMonitor::Impl	file:
poll_one	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    std::size_t poll_one() {$/;"	f	class:websocketpp::transport::asio::endpoint
pong	NFD/websocketpp/websocketpp/frame.hpp	/^        pong = 0xA,$/;"	e	enum:websocketpp::frame::opcode::value
pong	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::pong(std::string const & payload) {$/;"	f	class:websocketpp::connection
pong	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::pong(std::string const& payload, lib::error_code& ec) {$/;"	f	class:websocketpp::connection
pong	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^void endpoint<connection,config>::pong(connection_hdl hdl, std::string const & payload)$/;"	f	class:websocketpp::endpoint
pong	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^void endpoint<connection,config>::pong(connection_hdl hdl, std::string const & payload,$/;"	f	class:websocketpp::endpoint
pong_handler	NFD/websocketpp/websocketpp/connection.hpp	/^typedef lib::function<void(connection_hdl,std::string)> pong_handler;$/;"	t	namespace:websocketpp
pong_timeout_handler	NFD/websocketpp/websocketpp/connection.hpp	/^typedef lib::function<void(connection_hdl,std::string)> pong_timeout_handler;$/;"	t	namespace:websocketpp
pool	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^namespace pool {$/;"	n	namespace:websocketpp::message_buffer
popRef	ndn-cxx/src/util/regex/regex-backref-manager.hpp	/^RegexBackrefManager::popRef()$/;"	f	class:ndn::RegexBackrefManager
postNotification	NFD/core/notification-stream.hpp	/^  postNotification(const T& notification)$/;"	f	class:nfd::NotificationStream
postNotification	ndn-cxx/src/mgmt/dispatcher.cpp	/^Dispatcher::postNotification(const Block& notification, const PartialName& relPrefix)$/;"	f	class:ndn::mgmt::Dispatcher
postNotification	ndn-cxx/src/util/notification-stream.hpp	/^  postNotification(const Notification& notification)$/;"	f	class:ndn::util::NotificationStream
post_init	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void post_init() {$/;"	f	class:websocketpp::transport::asio::connection
post_init	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    void post_init(init_handler callback) {$/;"	f	class:websocketpp::transport::asio::basic_socket::connection
post_init	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    void post_init(init_handler callback) {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
preCertificateValidation	ndn-cxx/src/security/validator.hpp	/^  preCertificateValidation(const Data& data)$/;"	f	class:ndn::Validator
pre_init	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    void pre_init(init_handler callback) {$/;"	f	class:websocketpp::transport::asio::basic_socket::connection
pre_init	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    void pre_init(init_handler callback) {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
pre_init_handler	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^typedef lib::function<void (lib::error_code const & ec)> pre_init_handler;$/;"	t	namespace:websocketpp::transport::asio
precondition_failed	NFD/websocketpp/websocketpp/http/constants.hpp	/^            precondition_failed = 412,$/;"	e	enum:websocketpp::http::status_code::value
precondition_required	NFD/websocketpp/websocketpp/http/constants.hpp	/^            precondition_required = 428,$/;"	e	enum:websocketpp::http::status_code::value
predicate_NameTreeEntry_hasFibEntry	NFD/daemon/table/fib.cpp	/^predicate_NameTreeEntry_hasFibEntry(const name_tree::Entry& entry)$/;"	f	namespace:nfd
predicate_NextHop_eligible	NFD/daemon/fw/best-route-strategy2.cpp	/^predicate_NextHop_eligible(const shared_ptr<pit::Entry>& pitEntry,$/;"	f	namespace:nfd::fw
predicate_PitEntry_canForwardTo_NextHop	NFD/daemon/fw/best-route-strategy.cpp	/^predicate_PitEntry_canForwardTo_NextHop(shared_ptr<pit::Entry> pitEntry,$/;"	f	namespace:nfd::fw
prediction	NFD/daemon/fw/ncc-strategy.hpp	/^    time::microseconds prediction;$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
prefix	helper/ndn-scenario-helper.hpp	/^    Name prefix;$/;"	m	struct:ns3::ndn::ScenarioHelper::RouteInfo
prepareSignatureInfo	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::prepareSignatureInfo(const SigningInfo& params)$/;"	f	class:ndn::security::KeyChain
prepareUnsignedIdentityCertificate	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::prepareUnsignedIdentityCertificate(const Name& keyName,$/;"	f	class:ndn::security::KeyChain
prepare_body	NFD/websocketpp/websocketpp/http/impl/parser.hpp	/^inline bool parser::prepare_body() {$/;"	f	class:websocketpp::http::parser::parser
prepare_close	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    lib::error_code prepare_close(close::status::value, std::string const &, $/;"	f	class:websocketpp::processor::hybi00
prepare_close	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    virtual lib::error_code prepare_close(close::status::value code,$/;"	f	class:websocketpp::processor::hybi13
prepare_control	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    lib::error_code prepare_control(frame::opcode::value op,$/;"	f	class:websocketpp::processor::hybi13
prepare_data_frame	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    virtual lib::error_code prepare_data_frame(message_ptr in, message_ptr out)$/;"	f	class:websocketpp::processor::hybi00
prepare_data_frame	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    virtual lib::error_code prepare_data_frame(message_ptr in, message_ptr out)$/;"	f	class:websocketpp::processor::hybi13
prepare_header	NFD/websocketpp/websocketpp/frame.hpp	/^inline std::string prepare_header(const basic_header &h, const$/;"	f	namespace:websocketpp::frame
prepare_masking_key	NFD/websocketpp/websocketpp/frame.hpp	/^inline size_t prepare_masking_key(const masking_key_type& key) {$/;"	f	namespace:websocketpp::frame
prepare_ping	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    lib::error_code prepare_ping(std::string const &, message_ptr) const$/;"	f	class:websocketpp::processor::hybi00
prepare_ping	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    lib::error_code prepare_ping(std::string const & in, message_ptr out) const {$/;"	f	class:websocketpp::processor::hybi13
prepare_pong	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    lib::error_code prepare_pong(std::string const &, message_ptr) const$/;"	f	class:websocketpp::processor::hybi00
prepare_pong	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    lib::error_code prepare_pong(std::string const & in, message_ptr out) const {$/;"	f	class:websocketpp::processor::hybi13
prepared_key	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^        size_t      prepared_key;   \/\/ prepared masking key$/;"	m	struct:websocketpp::processor::hybi13::msg_metadata
prependBlock	ndn-cxx/src/encoding/block-helpers.hpp	/^prependBlock(EncodingImpl<TAG>& encoder, const Block& block)$/;"	f	namespace:ndn::encoding
prependBlock	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::prependBlock(const Block& block)$/;"	f	class:ndn::encoding::Encoder
prependBlock	ndn-cxx/src/encoding/estimator.cpp	/^Estimator::prependBlock(const Block& block)$/;"	f	class:ndn::encoding::Estimator
prependBooleanBlock	ndn-cxx/src/encoding/block-helpers.hpp	/^prependBooleanBlock(EncodingImpl<TAG>& encoder, uint32_t type)$/;"	f	namespace:ndn::encoding
prependByte	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::prependByte(uint8_t value)$/;"	f	class:ndn::encoding::Encoder
prependByte	ndn-cxx/src/encoding/estimator.cpp	/^Estimator::prependByte(uint8_t value)$/;"	f	class:ndn::encoding::Estimator
prependByteArray	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::prependByteArray(const uint8_t* array, size_t length)$/;"	f	class:ndn::encoding::Encoder
prependByteArray	ndn-cxx/src/encoding/estimator.cpp	/^Estimator::prependByteArray(const uint8_t* array, size_t length)$/;"	f	class:ndn::encoding::Estimator
prependByteArrayBlock	ndn-cxx/src/encoding/block-helpers.hpp	/^prependByteArrayBlock(EncodingImpl<TAG>& encoder,$/;"	f	namespace:ndn::encoding
prependByteArrayBlock	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::prependByteArrayBlock(uint32_t type, const uint8_t* array, size_t arraySize)$/;"	f	class:ndn::encoding::Encoder
prependByteArrayBlock	ndn-cxx/src/encoding/estimator.cpp	/^Estimator::prependByteArrayBlock(uint32_t type, const uint8_t* array, size_t arraySize)$/;"	f	class:ndn::encoding::Estimator
prependEmptyBlock	ndn-cxx/src/encoding/block-helpers.cpp	/^prependEmptyBlock(EncodingImpl<TAG>& encoder, uint32_t type)$/;"	f	namespace:ndn::encoding
prependNestedBlock	ndn-cxx/src/encoding/block-helpers.hpp	/^prependNestedBlock(EncodingImpl<TAG>& encoder, uint32_t type, const U& value)$/;"	f	namespace:ndn::encoding
prependNonNegativeInteger	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::prependNonNegativeInteger(uint64_t varNumber)$/;"	f	class:ndn::encoding::Encoder
prependNonNegativeInteger	ndn-cxx/src/encoding/estimator.cpp	/^Estimator::prependNonNegativeInteger(uint64_t varNumber)$/;"	f	class:ndn::encoding::Estimator
prependNonNegativeIntegerBlock	ndn-cxx/src/encoding/block-helpers.cpp	/^prependNonNegativeIntegerBlock(EncodingImpl<TAG>& encoder, uint32_t type, uint64_t value)$/;"	f	namespace:ndn::encoding
prependRange	ndn-cxx/src/encoding/encoder.hpp	/^Encoder::prependRange(Iterator first, Iterator last)$/;"	f	class:ndn::encoding::Encoder
prependRange	ndn-cxx/src/encoding/estimator.hpp	/^Estimator::prependRange(Iterator first, Iterator last)$/;"	f	class:ndn::encoding::Estimator
prependStringBlock	ndn-cxx/src/encoding/block-helpers.cpp	/^prependStringBlock(EncodingImpl<TAG>& encoder, uint32_t type, const std::string& value)$/;"	f	namespace:ndn::encoding
prependVarNumber	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::prependVarNumber(uint64_t varNumber)$/;"	f	class:ndn::encoding::Encoder
prependVarNumber	ndn-cxx/src/encoding/estimator.cpp	/^Estimator::prependVarNumber(uint64_t varNumber)$/;"	f	class:ndn::encoding::Estimator
prerelease_flag	NFD/websocketpp/websocketpp/version.hpp	/^static char const prerelease_flag[] = "";$/;"	m	namespace:websocketpp
previousFace	NFD/daemon/fw/ncc-strategy.hpp	/^    weak_ptr<Face> previousFace;$/;"	m	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
print	NFD/core/network.cpp	/^Network::print(std::ostream& os) const$/;"	f	class:nfd::Network
printCache	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::printCache(std::ostream& os) const$/;"	f	class:ndn::util::InMemoryStorage
printCertificate	ndn-cxx/src/security/certificate.cpp	/^Certificate::printCertificate(std::ostream& oss, const std::string& indent) const$/;"	f	class:ndn::Certificate
printCertificate	ndn-cxx/tools/ndnsec/list.hpp	/^printCertificate(ndn::KeyChain& keyChain,$/;"	f
printHeader	tests/other/ndn-test.cpp	/^Tester::printHeader(std::ostream& os)$/;"	f	class:ns3::Tester
printHex	ndn-cxx/src/util/string-helper.cpp	/^printHex(std::ostream& os, const Buffer& buffer, bool isUpperCase\/* = true*\/)$/;"	f	namespace:ndn
printHex	ndn-cxx/src/util/string-helper.cpp	/^printHex(std::ostream& os, const uint8_t* buffer, size_t length, bool isUpperCase\/* = true*\/)$/;"	f	namespace:ndn
printIdentity	ndn-cxx/tools/ndnsec/list.hpp	/^printIdentity(ndn::KeyChain& keyChain,$/;"	f
printKey	ndn-cxx/tools/ndnsec/list.hpp	/^printKey(ndn::KeyChain& keyChain,$/;"	f
printModules	NFD/daemon/main.cpp	/^  printModules(std::ostream& os)$/;"	f	class:nfd::NfdRunner
printStats	tests/other/ndn-test.cpp	/^Tester::printStats(std::ostream& os, Time nextPrintTime, double beginRealTime)$/;"	f	class:ns3::Tester
printTypeInfo	ndn-cxx/tools/tlvdump.cpp	/^printTypeInfo(uint32_t type)$/;"	f	namespace:ndn
printUsage	NFD/daemon/main.cpp	/^  printUsage(std::ostream& os, const std::string& programName)$/;"	f	class:nfd::NfdRunner
printXmlFooter	NFD/tools/nfd-status.cpp	/^  printXmlFooter()$/;"	f	class:ndn::NfdStatus	file:
printXmlHeader	NFD/tools/nfd-status.cpp	/^  printXmlHeader()$/;"	f	class:ndn::NfdStatus	file:
print_server	NFD/websocketpp/examples/associative_storage/associative_storage.cpp	/^    print_server() : m_next_sessionid(1) {$/;"	f	class:print_server
print_server	NFD/websocketpp/examples/associative_storage/associative_storage.cpp	/^class print_server {$/;"	c	file:
print_server	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    print_server() : m_next_sessionid(1) {$/;"	f	class:print_server
print_server	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^class print_server {$/;"	c	file:
priority_fifo	NFD/daemon/table/cs-policy-priority-fifo.cpp	/^namespace priority_fifo {$/;"	n	namespace:nfd::cs	file:
priority_fifo	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^namespace priority_fifo {$/;"	n	namespace:nfd::cs
privateKey_	ndn-cxx/tests/unit-tests/data.t.cpp	/^  CryptoPP::RSA::PrivateKey privateKey_;$/;"	m	class:ndn::tests::TestDataFixture	file:
probability_	model/cs/custom-policies/probability-policy.hpp	/^      double probability_;$/;"	m	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
probability_policy_container	model/cs/content-store-with-probability.hpp	/^  typedef typename super::policy_container::template index<0>::type probability_policy_container;$/;"	t	class:ns3::ndn::cs::ContentStoreWithProbability
probability_policy_traits	model/cs/custom-policies/probability-policy.hpp	/^struct probability_policy_traits {$/;"	s	namespace:ns3::ndn::ndnSIM
process	NFD/core/config-file.cpp	/^ConfigFile::process(bool isDryRun, const std::string& filename)$/;"	f	class:nfd::ConfigFile
process	NFD/websocketpp/websocketpp/http/impl/request.hpp	/^inline void request::process(std::string::iterator begin, std::string::iterator$/;"	f	class:websocketpp::http::parser::request
process	NFD/websocketpp/websocketpp/http/impl/response.hpp	/^inline void response::process(std::string::iterator begin,$/;"	f	class:websocketpp::http::parser::response
processAll	ndn-cxx/src/transport/stream-transport.hpp	/^  processAll(uint8_t* buffer, size_t& offset, size_t nBytesAvailable)$/;"	f	class:ndn::StreamTransportImpl
processAuthorizedControlCommandInterest	ndn-cxx/src/mgmt/dispatcher.cpp	/^Dispatcher::processAuthorizedControlCommandInterest(const std::string& requester,$/;"	f	class:ndn::mgmt::Dispatcher
processAuthorizedStatusDatasetInterest	ndn-cxx/src/mgmt/dispatcher.cpp	/^Dispatcher::processAuthorizedStatusDatasetInterest(const std::string& requester,$/;"	f	class:ndn::mgmt::Dispatcher
processCommandResponse	ndn-cxx/src/management/nfd-controller.cpp	/^Controller::processCommandResponse(const Data& data,$/;"	f	class:ndn::nfd::Controller
processControlCommandInterest	ndn-cxx/src/mgmt/dispatcher.cpp	/^Dispatcher::processControlCommandInterest(const Name& prefix,$/;"	f	class:ndn::mgmt::Dispatcher
processErrorCode	NFD/daemon/face/datagram-face.hpp	/^DatagramFace<T, U>::processErrorCode(const boost::system::error_code& error)$/;"	f	class:nfd::DatagramFace
processErrorCode	NFD/daemon/face/ethernet-face.cpp	/^EthernetFace::processErrorCode(const boost::system::error_code& error)$/;"	f	class:nfd::EthernetFace
processErrorCode	NFD/daemon/face/stream-face.hpp	/^StreamFace<T, U>::processErrorCode(const boost::system::error_code& error)$/;"	f	class:nfd::StreamFace
processEvents	ndn-cxx/src/face.cpp	/^Face::processEvents(const time::milliseconds& timeout\/* = time::milliseconds::zero()*\/,$/;"	f	class:ndn::Face
processFaceStatusDataset	NFD/tools/nfd-autoreg.cpp	/^  processFaceStatusDataset(const shared_ptr<ndn::OBufferStream>& buffer)$/;"	f	class:ndn::nfd_autoreg::AutoregServer
processIncomingPacket	NFD/daemon/face/ethernet-face.cpp	/^EthernetFace::processIncomingPacket(const pcap_pkthdr* header, const uint8_t* packet)$/;"	f	class:nfd::EthernetFace
processInterest	NFD/daemon/mgmt/internal-face.cpp	/^InternalFace::processInterest(const shared_ptr<const Interest>& interest)$/;"	f	class:nfd::InternalFace
processInterestFilters	ndn-cxx/src/detail/face-impl.hpp	/^  processInterestFilters(const Interest& interest)$/;"	f	class:ndn::Face::Impl
processSectionStrategyChoice	NFD/daemon/mgmt/tables-config-section.cpp	/^TablesConfigSection::processSectionStrategyChoice(const ConfigSection& configSection,$/;"	f	class:nfd::TablesConfigSection
processStatusDatasetInterest	ndn-cxx/src/mgmt/dispatcher.cpp	/^Dispatcher::processStatusDatasetInterest(const Name& prefix,$/;"	f	class:ndn::mgmt::Dispatcher
process_body	NFD/websocketpp/websocketpp/http/impl/parser.hpp	/^inline size_t parser::process_body(char const * buf, size_t len) {$/;"	f	class:websocketpp::http::parser::parser
process_body	NFD/websocketpp/websocketpp/http/impl/response.hpp	/^inline size_t response::process_body(char const * buf, size_t len) {$/;"	f	class:websocketpp::http::parser::response
process_control_frame	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::process_control_frame(typename config::message_type::ptr msg)$/;"	f	class:websocketpp::connection
process_handshake	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    lib::error_code process_handshake(request_type const & req,$/;"	f	class:websocketpp::processor::hybi00
process_handshake	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    lib::error_code process_handshake(request_type const & request, $/;"	f	class:websocketpp::processor::hybi13
process_handshake_key	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    lib::error_code process_handshake_key(std::string & key) const {$/;"	f	class:websocketpp::processor::hybi13
process_handshake_request	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^lib::error_code connection<config>::process_handshake_request() {$/;"	f	class:websocketpp::connection
process_header	NFD/websocketpp/websocketpp/http/impl/parser.hpp	/^inline void parser::process_header(std::string::iterator begin,$/;"	f	class:websocketpp::http::parser::parser
process_messages	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    void process_messages() {$/;"	f	class:broadcast_server
process_payload_bytes	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    size_t process_payload_bytes(uint8_t * buf, size_t len, lib::error_code& ec)$/;"	f	class:websocketpp::processor::hybi13
processor	NFD/websocketpp/websocketpp/processors/base.hpp	/^namespace processor {$/;"	n	namespace:websocketpp
processor	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^namespace processor {$/;"	n	namespace:websocketpp
processor	NFD/websocketpp/websocketpp/processors/hybi07.hpp	/^namespace processor {$/;"	n	namespace:websocketpp
processor	NFD/websocketpp/websocketpp/processors/hybi08.hpp	/^namespace processor {$/;"	n	namespace:websocketpp
processor	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^namespace processor {$/;"	n	namespace:websocketpp
processor	NFD/websocketpp/websocketpp/processors/processor.hpp	/^    explicit processor(bool secure, bool p_is_server)$/;"	f	class:websocketpp::processor::processor
processor	NFD/websocketpp/websocketpp/processors/processor.hpp	/^class processor {$/;"	c	namespace:websocketpp::processor
processor	NFD/websocketpp/websocketpp/processors/processor.hpp	/^namespace processor {$/;"	n	namespace:websocketpp
processor_category	NFD/websocketpp/websocketpp/processors/base.hpp	/^    processor_category() {}$/;"	f	class:websocketpp::processor::error::processor_category
processor_category	NFD/websocketpp/websocketpp/processors/base.hpp	/^class processor_category : public lib::error_category {$/;"	c	namespace:websocketpp::processor::error
processor_errors	NFD/websocketpp/websocketpp/processors/base.hpp	/^enum processor_errors {$/;"	g	namespace:websocketpp::processor::error
processor_ptr	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef lib::shared_ptr<processor_type> processor_ptr;$/;"	t	class:websocketpp::connection
processor_setup	NFD/websocketpp/test/processors/hybi00.cpp	/^    processor_setup(bool server)$/;"	f	struct:processor_setup
processor_setup	NFD/websocketpp/test/processors/hybi00.cpp	/^struct processor_setup {$/;"	s	file:
processor_setup	NFD/websocketpp/test/processors/hybi13.cpp	/^    processor_setup(bool server)$/;"	f	struct:processor_setup
processor_setup	NFD/websocketpp/test/processors/hybi13.cpp	/^struct processor_setup {$/;"	s	file:
processor_setup_ext	NFD/websocketpp/test/processors/hybi13.cpp	/^    processor_setup_ext(bool server)$/;"	f	struct:processor_setup_ext
processor_setup_ext	NFD/websocketpp/test/processors/hybi13.cpp	/^struct processor_setup_ext {$/;"	s	file:
processor_type	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef processor::processor<config> processor_type;$/;"	t	class:websocketpp::connection
prohibitAllIpv4Endpoints	NFD/daemon/face/tcp-factory.cpp	/^TcpFactory::prohibitAllIpv4Endpoints(const uint16_t port)$/;"	f	class:nfd::TcpFactory
prohibitAllIpv4Endpoints	NFD/daemon/face/udp-factory.cpp	/^UdpFactory::prohibitAllIpv4Endpoints(const uint16_t port)$/;"	f	class:nfd::UdpFactory
prohibitAllIpv6Endpoints	NFD/daemon/face/tcp-factory.cpp	/^TcpFactory::prohibitAllIpv6Endpoints(const uint16_t port)$/;"	f	class:nfd::TcpFactory
prohibitAllIpv6Endpoints	NFD/daemon/face/udp-factory.cpp	/^UdpFactory::prohibitAllIpv6Endpoints(const uint16_t port)$/;"	f	class:nfd::UdpFactory
prohibitEndpoint	NFD/daemon/face/tcp-factory.cpp	/^TcpFactory::prohibitEndpoint(const tcp::Endpoint& endpoint)$/;"	f	class:nfd::TcpFactory
prohibitEndpoint	NFD/daemon/face/udp-factory.cpp	/^UdpFactory::prohibitEndpoint(const udp::Endpoint& endpoint)$/;"	f	class:nfd::UdpFactory
propagateTimer	NFD/daemon/fw/ncc-strategy.hpp	/^    scheduler::EventId propagateTimer;$/;"	m	class:nfd::fw::NccStrategy::PitEntryInfo
property_map	helper/boost-graph-ndn-global-routing-helper.hpp	/^struct property_map<NdnGlobalRouterGraph, edge_weight_t> {$/;"	s	namespace:boost
property_map	helper/boost-graph-ndn-global-routing-helper.hpp	/^struct property_map<NdnGlobalRouterGraph, vertex_index_t> {$/;"	s	namespace:boost
property_traits	helper/boost-graph-ndn-global-routing-helper.hpp	/^struct property_traits<EdgeWeights> {$/;"	s	namespace:boost
property_traits	helper/boost-graph-ndn-global-routing-helper.hpp	/^struct property_traits<VertexIds> {$/;"	s	namespace:boost
property_traits	helper/boost-graph-ndn-global-routing-helper.hpp	/^struct property_traits<reference_wrapper<DistancesMap>> {$/;"	s	namespace:boost
property_traits	helper/boost-graph-ndn-global-routing-helper.hpp	/^struct property_traits<reference_wrapper<PredecessorsMap>> {$/;"	s	namespace:boost
protocol	NFD/daemon/face/datagram-face.hpp	/^  typedef Protocol protocol;$/;"	t	class:nfd::DatagramFace
protocol	NFD/daemon/face/stream-face.hpp	/^  typedef Protocol protocol;$/;"	t	class:nfd::StreamFace
protocol_error	NFD/websocketpp/websocketpp/close.hpp	/^    static value const protocol_error = 1002;$/;"	m	namespace:websocketpp::close::status
protocol_violation	NFD/websocketpp/websocketpp/processors/base.hpp	/^    protocol_violation,$/;"	e	enum:websocketpp::processor::error::processor_errors
proxy_authentication_required	NFD/websocketpp/websocketpp/http/constants.hpp	/^            proxy_authentication_required = 407,$/;"	e	enum:websocketpp::http::status_code::value
proxy_data	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^        proxy_data() : timeout_proxy(config::timeout_proxy) {}$/;"	f	struct:websocketpp::transport::asio::connection::proxy_data
proxy_data	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    struct proxy_data {$/;"	s	class:websocketpp::transport::asio::connection
proxy_failed	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^    proxy_failed,$/;"	e	enum:websocketpp::transport::asio::error::value
proxy_init	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    lib::error_code proxy_init(std::string const & authority) {$/;"	f	class:websocketpp::transport::asio::connection
proxy_invalid	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^    proxy_invalid,$/;"	e	enum:websocketpp::transport::asio::error::value
proxy_read	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void proxy_read(init_handler callback) {$/;"	f	class:websocketpp::transport::asio::connection
proxy_write	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void proxy_write() {$/;"	f	class:websocketpp::transport::asio::connection
prune	utils/trie/trie.hpp	/^  prune()$/;"	f	class:ns3::ndn::ndnSIM::trie
prune_node	utils/trie/trie.hpp	/^  prune_node()$/;"	f	class:ns3::ndn::ndnSIM::trie
ptr	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    typedef websocketpp::lib::shared_ptr<connection_metadata> ptr;$/;"	t	class:connection_metadata	file:
ptr	NFD/websocketpp/test/message_buffer/alloc.cpp	/^    typedef websocketpp::lib::shared_ptr<stub> ptr;$/;"	t	struct:stub	file:
ptr	NFD/websocketpp/test/message_buffer/message.cpp	/^    typedef websocketpp::lib::shared_ptr<stub> ptr;$/;"	t	struct:stub	file:
ptr	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    typedef websocketpp::lib::shared_ptr<type> ptr;$/;"	t	struct:stub_con	file:
ptr	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    typedef websocketpp::lib::shared_ptr<connection_metadata> ptr;$/;"	t	class:connection_metadata	file:
ptr	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    typedef websocketpp::lib::shared_ptr<connection_metadata> ptr;$/;"	t	class:connection_metadata	file:
ptr	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    typedef websocketpp::lib::shared_ptr<connection_metadata> ptr;$/;"	t	class:connection_metadata	file:
ptr	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef lib::shared_ptr<type> ptr;$/;"	t	class:websocketpp::connection
ptr	NFD/websocketpp/websocketpp/http/request.hpp	/^    typedef lib::shared_ptr<type> ptr;$/;"	t	class:websocketpp::http::parser::request
ptr	NFD/websocketpp/websocketpp/http/response.hpp	/^    typedef lib::shared_ptr<type> ptr;$/;"	t	class:websocketpp::http::parser::response
ptr	NFD/websocketpp/websocketpp/message_buffer/alloc.hpp	/^    typedef lib::shared_ptr<con_msg_manager> ptr;$/;"	t	class:websocketpp::message_buffer::alloc::con_msg_manager
ptr	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    typedef lib::shared_ptr<message> ptr;$/;"	t	class:websocketpp::message_buffer::message
ptr	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    typedef lib::shared_ptr<con_msg_manager> ptr;$/;"	t	class:websocketpp::message_buffer::alloc::con_msg_manager
ptr	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    typedef lib::shared_ptr<message> ptr;$/;"	t	class:websocketpp::message_buffer::message
ptr	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    typedef lib::shared_ptr<type> ptr;$/;"	t	class:websocketpp::transport::asio::connection
ptr	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    typedef lib::shared_ptr<type> ptr;$/;"	t	class:websocketpp::transport::asio::basic_socket::connection
ptr	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    typedef lib::shared_ptr<type> ptr;$/;"	t	class:websocketpp::transport::asio::tls_socket::connection
ptr	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    typedef lib::shared_ptr<type> ptr;$/;"	t	class:websocketpp::transport::debug::connection
ptr	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^    typedef lib::shared_ptr<type> ptr;$/;"	t	class:websocketpp::transport::debug::endpoint
ptr	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    typedef lib::shared_ptr<type> ptr;$/;"	t	class:websocketpp::transport::iostream::connection
ptr	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    typedef lib::shared_ptr<type> ptr;$/;"	t	class:websocketpp::transport::iostream::endpoint
ptr	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    typedef lib::shared_ptr<type> ptr;$/;"	t	class:websocketpp::transport::stub::connection
ptr	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^    typedef lib::shared_ptr<type> ptr;$/;"	t	class:websocketpp::transport::stub::endpoint
publicKey_	ndn-cxx/tests/unit-tests/data.t.cpp	/^  CryptoPP::RSA::PublicKey  publicKey_;$/;"	m	class:ndn::tests::TestDataFixture	file:
publish	NFD/core/segment-publisher.hpp	/^  publish()$/;"	f	class:nfd::SegmentPublisher
publishSegment	NFD/core/segment-publisher.hpp	/^  publishSegment(shared_ptr<Data>& data)$/;"	f	class:nfd::SegmentPublisher
publisherFace	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  shared_ptr<DummyClientFace> publisherFace;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
publisherKeyChain	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  ndn::KeyChain publisherKeyChain;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
pureSign	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::pureSign(const uint8_t* buf, size_t size,$/;"	f	class:ndn::security::KeyChain
pushRef	ndn-cxx/src/util/regex/regex-backref-manager.hpp	/^RegexBackrefManager::pushRef(const shared_ptr<RegexMatcher>& matcher)$/;"	f	class:ndn::RegexBackrefManager
push_back	ndn-cxx/src/encoding/block.cpp	/^Block::push_back(const Block& element)$/;"	f	class:ndn::Block
push_back	ndn-cxx/src/name.hpp	/^  push_back(const T& component)$/;"	f	class:ndn::Name
put	NFD/daemon/mgmt/internal-face.cpp	/^InternalFace::put(const Data& data)$/;"	f	class:nfd::InternalFace
put	helper/boost-graph-ndn-global-routing-helper.hpp	/^put(reference_wrapper<M> mapp, K a, V p)$/;"	f	namespace:boost
put	ndn-cxx/src/face.cpp	/^Face::put(const Data& data)$/;"	f	class:ndn::Face
querySrvRr	NFD/tools/ndn-autoconfig/base-dns.cpp	/^BaseDns::querySrvRr(const std::string& fqdn)$/;"	f	class:ndn::tools::autoconfig::BaseDns
querySrvRrSearch	NFD/tools/ndn-autoconfig/base-dns.cpp	/^BaseDns::querySrvRrSearch()$/;"	f	class:ndn::tools::autoconfig::BaseDns
queueIt	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^  QueueIt queueIt;$/;"	m	struct:nfd::cs::priority_fifo::EntryInfo
queueType	NFD/daemon/table/cs-policy-priority-fifo.hpp	/^  QueueType queueType;$/;"	m	struct:nfd::cs::priority_fifo::EntryInfo
raise	NFD/core/privilege-helper.cpp	/^PrivilegeHelper::raise()$/;"	f	class:nfd::PrivilegeHelper
random	NFD/websocketpp/websocketpp/random/none.hpp	/^namespace random {$/;"	n	namespace:websocketpp
random	NFD/websocketpp/websocketpp/random/random_device.hpp	/^namespace random {$/;"	n	namespace:websocketpp
random	ndn-cxx/src/util/random.cpp	/^namespace random {$/;"	n	namespace:ndn	file:
random	ndn-cxx/src/util/random.hpp	/^namespace random {$/;"	n	namespace:ndn
randomOrder	utils/trie/random-policy.hpp	/^    uint32_t randomOrder;$/;"	m	struct:ns3::ndn::ndnSIM::random_policy_traits::policy_hook_type
random_device	NFD/websocketpp/websocketpp/random/random_device.hpp	/^namespace random_device {$/;"	n	namespace:websocketpp::random
random_policy_traits	utils/trie/random-policy.hpp	/^struct random_policy_traits {$/;"	s	namespace:ns3::ndn::ndnSIM
raw	NFD/websocketpp/websocketpp/http/impl/request.hpp	/^inline std::string request::raw() const {$/;"	f	class:websocketpp::http::parser::request
raw	NFD/websocketpp/websocketpp/http/impl/response.hpp	/^inline std::string response::raw() const {$/;"	f	class:websocketpp::http::parser::response
raw_head	NFD/websocketpp/websocketpp/http/impl/request.hpp	/^inline std::string request::raw_head() const {$/;"	f	class:websocketpp::http::parser::request
raw_headers	NFD/websocketpp/websocketpp/http/impl/parser.hpp	/^inline std::string parser::raw_headers() const {$/;"	f	class:websocketpp::http::parser::parser
rbegin	ndn-cxx/src/exclude.hpp	/^Exclude::rbegin() const$/;"	f	class:ndn::Exclude
rbegin	ndn-cxx/src/name.hpp	/^  rbegin() const$/;"	f	class:ndn::Name
read	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    void read(std::istream &in) {$/;"	f	class:websocketpp::transport::iostream::connection
read	model/ndn-header.cpp	/^  read(char* buf, std::streamsize nMaxRead)$/;"	f	class:ns3::ndn::Ns3BufferIteratorSource
readConfig	NFD/tests/rib/remote-registrator.t.cpp	/^  readConfig(bool isSetRetry = false)$/;"	f	class:nfd::rib::tests::RemoteRegistratorFixture
readDataOffset1	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  size_t readDataOffset1;$/;"	m	struct:ndn::tests::FacesFixture	file:
readDataOffset2	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  size_t readDataOffset2;$/;"	m	struct:ndn::tests::FacesFixture	file:
readInterestOffset1	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  size_t readInterestOffset1;$/;"	m	struct:ndn::tests::FacesFixture	file:
readInterestOffset2	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  size_t readInterestOffset2;$/;"	m	struct:ndn::tests::FacesFixture	file:
readNonNegativeInteger	ndn-cxx/src/encoding/block-helpers.cpp	/^readNonNegativeInteger(const Block& block)$/;"	f	namespace:ndn::encoding
readNonNegativeInteger	ndn-cxx/src/encoding/tlv.hpp	/^readNonNegativeInteger(size_t size, InputIterator& begin, const InputIterator& end)$/;"	f	namespace:ndn::tlv
readNonNegativeInteger	ndn-cxx/src/encoding/tlv.hpp	/^readNonNegativeInteger<std::istream_iterator<uint8_t> >(size_t size,$/;"	f	namespace:ndn::tlv
readNonNegativeIntegerType	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^readNonNegativeIntegerType(const Block& block,$/;"	f	namespace:nfd::tests
readNonNegativeIntegerType	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^readNonNegativeIntegerType(const Block& block,$/;"	f	namespace:nfd::tests
readString	ndn-cxx/src/encoding/block-helpers.cpp	/^readString(const Block& block)$/;"	f	namespace:ndn::encoding
readType	ndn-cxx/src/encoding/tlv.hpp	/^readType(InputIterator& begin, const InputIterator& end)$/;"	f	namespace:ndn::tlv
readType	ndn-cxx/src/encoding/tlv.hpp	/^readType(InputIterator& begin, const InputIterator& end, uint32_t& type)$/;"	f	namespace:ndn::tlv
readVarNumber	ndn-cxx/src/encoding/tlv.hpp	/^readVarNumber(InputIterator& begin, const InputIterator& end)$/;"	f	namespace:ndn::tlv
readVarNumber	ndn-cxx/src/encoding/tlv.hpp	/^readVarNumber(InputIterator& begin, const InputIterator& end, uint64_t& number)$/;"	f	namespace:ndn::tlv
readVarNumber	ndn-cxx/src/encoding/tlv.hpp	/^readVarNumber<std::istream_iterator<uint8_t>>(std::istream_iterator<uint8_t>& begin,$/;"	f	namespace:ndn::tlv
read_all	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    size_t read_all(char const * buf, size_t len) {        $/;"	f	class:websocketpp::transport::debug::connection
read_all	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    size_t read_all(char const * buf, size_t len) {$/;"	f	class:websocketpp::transport::iostream::connection
read_buf	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^        boost::asio::streambuf read_buf;$/;"	m	struct:websocketpp::transport::asio::connection::proxy_data
read_frame	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::read_frame() {$/;"	f	class:websocketpp::connection
read_handler	NFD/websocketpp/websocketpp/connection.hpp	/^typedef lib::function<void(lib::error_code const & ec, size_t bytes_transferred)> read_handler;$/;"	t	namespace:websocketpp
read_handler	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^typedef lib::function<void(lib::error_code const &,size_t)> read_handler;$/;"	t	namespace:websocketpp::transport
read_handshake	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::read_handshake(size_t num_bytes) {$/;"	f	class:websocketpp::connection
read_some	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    size_t read_some(char const * buf, size_t len) {$/;"	f	class:websocketpp::transport::iostream::connection
read_some_impl	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    size_t read_some_impl(char const * buf, size_t len) {$/;"	f	class:websocketpp::transport::debug::connection
read_some_impl	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    size_t read_some_impl(char const * buf, size_t len) {$/;"	f	class:websocketpp::transport::iostream::connection
readsome	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    size_t readsome(char const * buf, size_t len) {$/;"	f	class:websocketpp::transport::iostream::connection
ready	NFD/websocketpp/websocketpp/http/request.hpp	/^    bool ready() const {$/;"	f	class:websocketpp::http::parser::request
ready	NFD/websocketpp/websocketpp/http/response.hpp	/^    bool ready() const {$/;"	f	class:websocketpp::http::parser::response
ready	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    bool ready() const {$/;"	f	class:websocketpp::processor::hybi00
ready	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    bool ready() const {$/;"	f	class:websocketpp::processor::hybi13
reason_requires_code	NFD/websocketpp/websocketpp/processors/base.hpp	/^    reason_requires_code,$/;"	e	enum:websocketpp::processor::error::processor_errors
reassemble	NFD/daemon/face/ndnlp-partial-message-store.cpp	/^PartialMessage::reassemble()$/;"	f	class:nfd::ndnlp::PartialMessage
reassembleSingle	NFD/daemon/face/ndnlp-partial-message-store.cpp	/^PartialMessage::reassembleSingle(const NdnlpData& fragment)$/;"	f	class:nfd::ndnlp::PartialMessage
receive	NFD/daemon/face/ndnlp-partial-message-store.cpp	/^PartialMessageStore::receive(const NdnlpData& pkt)$/;"	f	class:nfd::ndnlp::PartialMessageStore
receive	ndn-cxx/src/transport/transport.hpp	/^Transport::receive(const Block& wire)$/;"	f	class:ndn::Transport
receive	ndn-cxx/src/util/dummy-client-face.cpp	/^  receive(const Block& block)$/;"	f	class:ndn::util::DummyClientFace::Transport
receive	ndn-cxx/src/util/dummy-client-face.cpp	/^DummyClientFace::receive(const Packet& packet)$/;"	f	class:ndn::util::DummyClientFace
receiveCommandInterest	NFD/tests/rib/rib-manager.t.cpp	/^  receiveCommandInterest(const Name& name, ControlParameters& parameters)$/;"	f	class:nfd::rib::tests::RibManagerFixture
receiveData	NFD/tests/daemon/face/dummy-face.hpp	/^  receiveData(const Data& data)$/;"	f	class:nfd::tests::DummyFaceImpl
receiveDatagram	NFD/daemon/face/datagram-face.hpp	/^DatagramFace<T, U>::receiveDatagram(const uint8_t* buffer,$/;"	f	class:nfd::DatagramFace
receiveFromNetDevice	model/ndn-net-device-face.cpp	/^NetDeviceFace::receiveFromNetDevice(Ptr<NetDevice> device, Ptr<const Packet> p, uint16_t protocol,$/;"	f	class:ns3::ndn::NetDeviceFace
receiveInterest	NFD/tests/daemon/face/dummy-face.hpp	/^  receiveInterest(const Interest& interest)$/;"	f	class:nfd::tests::DummyFaceImpl
receiveNdnlpData	NFD/tests/daemon/face/ndnlp.t.cpp	/^  receiveNdnlpData(const Block& block)$/;"	f	class:nfd::ndnlp::tests::ReassembleFixture
received	NFD/tests/daemon/face/ndnlp.t.cpp	/^  std::vector<Block> received;$/;"	m	class:nfd::ndnlp::tests::ReassembleFixture	file:
received	NFD/websocketpp/examples/sip_client/sip_client.cpp	/^bool received;$/;"	v
receivedData	NFD/tests/daemon/face/face-history.hpp	/^  std::vector<Data> receivedData;$/;"	m	class:nfd::tests::FaceHistory
receivedDatas	NFD/tests/daemon/face/tcp.t.cpp	/^  std::vector<Data> receivedDatas;$/;"	m	class:nfd::tests::SimpleEndToEndFixture	file:
receivedDatas	NFD/tests/daemon/face/unix-stream.t.cpp	/^  std::vector<Data> receivedDatas;$/;"	m	class:nfd::tests::SimpleEndToEndFixture	file:
receivedDatasets	tests/unit-tests/model/ndn-l3-protocol.t.cpp	/^  std::set<Name> receivedDatasets;$/;"	m	class:ns3::ndn::ManagerCheckFixture	file:
receivedInterests	NFD/tests/daemon/face/face-history.hpp	/^  std::vector<Interest> receivedInterests;$/;"	m	class:nfd::tests::FaceHistory
receivedInterests	NFD/tests/daemon/face/tcp.t.cpp	/^  std::vector<Interest> receivedInterests;$/;"	m	class:nfd::tests::SimpleEndToEndFixture	file:
receivedInterests	NFD/tests/daemon/face/unix-stream.t.cpp	/^  std::vector<Interest> receivedInterests;$/;"	m	class:nfd::tests::SimpleEndToEndFixture	file:
record_sent_message	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    void record_sent_message(std::string message) {$/;"	f	class:connection_metadata
record_sent_message	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    void record_sent_message(std::string message) {$/;"	f	class:connection_metadata
recover	NFD/tests/daemon/fw/topology-tester.hpp	/^  recover()$/;"	f	class:nfd::fw::tests::TopologyLinkBase
recursiveMatch	ndn-cxx/src/util/regex/regex-matcher.hpp	/^RegexMatcher::recursiveMatch(size_t matcherNo, const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexMatcher
recursiveMatch	ndn-cxx/src/util/regex/regex-repeat-matcher.hpp	/^RegexRepeatMatcher::recursiveMatch(size_t repeat, const Name& name, size_t offset, size_t len)$/;"	f	class:ndn::RegexRepeatMatcher
recursive_iterator	utils/trie/trie.hpp	/^  typedef trie_iterator<trie, trie> recursive_iterator;$/;"	t	class:ns3::ndn::ndnSIM::trie
recycle	NFD/websocketpp/test/message_buffer/alloc.cpp	/^    bool recycle() {$/;"	f	struct:stub
recycle	NFD/websocketpp/test/message_buffer/message.cpp	/^    bool recycle(message *) {$/;"	f	struct:stub
recycle	NFD/websocketpp/websocketpp/message_buffer/alloc.hpp	/^    bool recycle(message *) {$/;"	f	class:websocketpp::message_buffer::alloc::con_msg_manager
recycle	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    bool recycle() {$/;"	f	class:websocketpp::message_buffer::message
recycle	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    bool recycle() {$/;"	f	class:websocketpp::message_buffer::message
recycle	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    bool recycle(message * msg) {$/;"	f	class:websocketpp::message_buffer::alloc::con_msg_manager
recycled	NFD/websocketpp/test/message_buffer/message.cpp	/^    bool recycled;$/;"	m	struct:stub	file:
redoRegistration	NFD/rib/remote-registrator.cpp	/^RemoteRegistrator::redoRegistration()$/;"	f	class:nfd::rib::RemoteRegistrator
reference	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef ns3::Ptr<ns3::ndn::GlobalRouter> reference;$/;"	t	struct:boost::property_traits
reference	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef std::tuple<std::shared_ptr<nfd::Face>, uint16_t, double> reference;$/;"	t	struct:boost::property_traits
reference	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef std::tuple<std::shared_ptr<nfd::Face>, uint32_t, double> reference;$/;"	t	struct:boost::property_traits
reference	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef uint32_t reference;$/;"	t	struct:boost::property_traits
reference	ndn-cxx/src/name.hpp	/^  typedef Component&              reference;$/;"	t	class:ndn::Name
refresh	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::DynamicTrustAnchorContainer::refresh()$/;"	f	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
refreshAnchors	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::refreshAnchors()$/;"	f	class:ndn::ValidatorConfig
refreshDefaultCertificate	ndn-cxx/src/security/key-chain.hpp	/^  refreshDefaultCertificate()$/;"	f	class:ndn::security::KeyChain
refreshDefaultCertificate	ndn-cxx/src/security/sec-public-info.cpp	/^SecPublicInfo::refreshDefaultCertificate()$/;"	f	class:ndn::SecPublicInfo
refreshNonce	ndn-cxx/src/interest.cpp	/^Interest::refreshNonce()$/;"	f	class:ndn::Interest
regPrefixId	ndn-cxx/tests/integrated/face.cpp	/^  const RegisteredPrefixId* regPrefixId;$/;"	m	class:ndn::tests::FacesFixture	file:
regPrefixId2	ndn-cxx/tests/integrated/face.cpp	/^  const RegisteredPrefixId* regPrefixId2;$/;"	m	class:ndn::tests::FacesFixture	file:
registerEntry	NFD/rib/rib-manager.cpp	/^RibManager::registerEntry(const shared_ptr<const Interest>& request,$/;"	f	class:nfd::rib::RibManager
registerHubDiscoveryPrefix	NFD/tools/ndn-autoconfig/multicast-discovery.cpp	/^MulticastDiscovery::registerHubDiscoveryPrefix(const ConstBufferPtr& buffer)$/;"	f	class:ndn::tools::autoconfig::MulticastDiscovery
registerPib	ndn-cxx/src/security/key-chain.hpp	/^KeyChain::registerPib(std::initializer_list<std::string> aliases)$/;"	f	class:ndn::security::KeyChain
registerPibImpl	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::registerPibImpl(const std::string& canonicalName,$/;"	f	class:ndn::security::KeyChain
registerPrefix	NFD/rib/remote-registrator.cpp	/^RemoteRegistrator::registerPrefix(const Name& prefix)$/;"	f	class:nfd::rib::RemoteRegistrator
registerPrefix	NFD/tests/daemon/fw/topology-tester.hpp	/^  registerPrefix(TopologyNode i, shared_ptr<F> face, const Name& prefix, uint64_t cost = 0)$/;"	f	class:nfd::fw::tests::TopologyTester
registerPrefix	NFD/tools/ndn-autoconfig/base.cpp	/^Base::registerPrefix(const Name& prefix, uint64_t faceId)$/;"	f	class:ndn::tools::autoconfig::Base
registerPrefix	ndn-cxx/src/detail/face-impl.hpp	/^  registerPrefix(const Name& prefix,$/;"	f	class:ndn::Face::Impl
registerPrefix	ndn-cxx/src/face.cpp	/^Face::registerPrefix(const Name& prefix,$/;"	f	class:ndn::Face
registerPrefixId	ndn-cxx/src/mgmt/dispatcher.hpp	/^    const ndn::RegisteredPrefixId* registerPrefixId;$/;"	m	struct:ndn::mgmt::Dispatcher::TopPrefixEntry
registerPrefixesForFace	NFD/tools/nfd-autoreg.cpp	/^  registerPrefixesForFace(uint64_t faceId,$/;"	f	class:ndn::nfd_autoreg::AutoregServer
registerPrefixesIfNeeded	NFD/tools/nfd-autoreg.cpp	/^  registerPrefixesIfNeeded(uint64_t faceId, const FaceUri& uri, FacePersistency facePersistency)$/;"	f	class:ndn::nfd_autoreg::AutoregServer
registerStrategy	NFD/daemon/fw/strategy-registry.hpp	/^registerStrategy()$/;"	f	namespace:nfd::fw
registerStrategyImpl	NFD/daemon/fw/strategy-registry.cpp	/^registerStrategyImpl(const Name& strategyName, const StrategyCreateFunc& createFunc)$/;"	f	namespace:nfd::fw
registerTpm	ndn-cxx/src/security/key-chain.hpp	/^KeyChain::registerTpm(std::initializer_list<std::string> aliases)$/;"	f	class:ndn::security::KeyChain
registerTpmImpl	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::registerTpmImpl(const std::string& canonicalName,$/;"	f	class:ndn::security::KeyChain
registerWithNfd	NFD/rib/rib-manager.cpp	/^RibManager::registerWithNfd()$/;"	f	class:nfd::rib::RibManager
register_ostream	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    void register_ostream(std::ostream * o) {$/;"	f	class:websocketpp::transport::iostream::connection
register_ostream	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    void register_ostream(std::ostream * o) {$/;"	f	class:websocketpp::transport::iostream::endpoint
reject	ndn-cxx/src/mgmt/status-dataset-context.cpp	/^StatusDatasetContext::reject(const ControlResponse& resp \/*= a ControlResponse with 400*\/)$/;"	f	class:ndn::mgmt::StatusDatasetContext
rejectPendingInterest	NFD/daemon/fw/strategy.hpp	/^Strategy::rejectPendingInterest(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::fw::Strategy
rejectPendingInterest	NFD/tests/daemon/fw/strategy-tester.hpp	/^StrategyTester<S>::rejectPendingInterest(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::fw::tests::StrategyTester
rejected	NFD/websocketpp/websocketpp/error.hpp	/^    rejected,$/;"	e	enum:websocketpp::error::value
release	NFD/core/scheduler.cpp	/^ScopedEventId::release()$/;"	f	class:nfd::scheduler::ScopedEventId
release	ndn-cxx/src/security/sec-tpm-osx.cpp	/^  void release()$/;"	f	class:ndn::CFReleaser
release	ndn-cxx/src/util/in-memory-storage-entry.cpp	/^InMemoryStorageEntry::release()$/;"	f	class:ndn::util::InMemoryStorageEntry
release	ndn-cxx/src/util/scheduler-scoped-event-id.cpp	/^ScopedEventId::release()$/;"	f	class:ndn::util::scheduler::ScopedEventId
release	ndn-cxx/src/util/signal-scoped-connection.cpp	/^ScopedConnection::release()$/;"	f	class:ndn::util::signal::ScopedConnection
reload	NFD/daemon/main.cpp	/^  reload(const boost::system::error_code& error, int signalNo)$/;"	f	class:nfd::NfdRunner
reloadConfigFile	NFD/daemon/nfd.cpp	/^Nfd::reloadConfigFile()$/;"	f	class:nfd::Nfd
reloadConfigFileFaceSection	NFD/daemon/nfd.cpp	/^Nfd::reloadConfigFileFaceSection()$/;"	f	class:nfd::Nfd
remoteRegistrator	NFD/tests/rib/remote-registrator.t.cpp	/^  shared_ptr<RemoteRegistrator> remoteRegistrator;$/;"	m	class:nfd::rib::tests::RemoteRegistratorFixture	file:
remove	NFD/daemon/fw/face-table.cpp	/^FaceTable::remove(shared_ptr<Face> face, const std::string& reason)$/;"	f	class:nfd::FaceTable
remove	ndn-cxx/src/encoding/block.cpp	/^Block::remove(uint32_t type)$/;"	f	class:ndn::Block
remove	ndn-cxx/src/lp/packet.hpp	/^  remove(size_t index = 0)$/;"	f	class:ndn::lp::Packet
remove	ndn-cxx/src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::remove(const Name& certificateName)$/;"	f	class:ndn::CertificateCacheTtl
removeAll	ndn-cxx/src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::removeAll()$/;"	f	class:ndn::CertificateCacheTtl
removeAppMetaInfo	ndn-cxx/src/meta-info.cpp	/^MetaInfo::removeAppMetaInfo(uint32_t tlvType)$/;"	f	class:ndn::MetaInfo
removeCertificate	ndn-cxx/src/security/key.cpp	/^Key::removeCertificate(const Name& certName)$/;"	f	class:ndn::security::Key
removeCertificate	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::removeCertificate(const Name& certName)$/;"	f	class:ndn::security::PibMemory
removeCertificate	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::removeCertificate(const Name& certName)$/;"	f	class:ndn::security::PibSqlite3
removeChild	NFD/rib/rib-entry.cpp	/^RibEntry::removeChild(shared_ptr<RibEntry> child)$/;"	f	class:nfd::rib::RibEntry
removeDelegation	ndn-cxx/src/link.cpp	/^Link::removeDelegation(const Name& name)$/;"	f	class:ndn::Link
removeDelegationNoEncode	ndn-cxx/src/link.cpp	/^Link::removeDelegationNoEncode(const Name& name)$/;"	f	class:ndn::Link
removeFaceInfo	NFD/daemon/fw/access-strategy.cpp	/^AccessStrategy::removeFaceInfo(shared_ptr<Face> face)$/;"	f	class:nfd::fw::AccessStrategy
removeIdentity	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::removeIdentity(const Name& identity)$/;"	f	class:ndn::security::PibMemory
removeIdentity	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::removeIdentity(const Name& identity)$/;"	f	class:ndn::security::PibSqlite3
removeIdentity	ndn-cxx/src/security/pib.cpp	/^Pib::removeIdentity(const Name& identity)$/;"	f	class:ndn::security::Pib
removeInheritedRoute	NFD/rib/fib-updater.cpp	/^FibUpdater::removeInheritedRoute(const Name& name, const Route& route)$/;"	f	class:nfd::rib::FibUpdater
removeInheritedRoute	NFD/rib/rib-entry.cpp	/^RibEntry::removeInheritedRoute(const Route& route)$/;"	f	class:nfd::rib::RibEntry
removeInheritedRoutes	NFD/rib/fib-updater.cpp	/^FibUpdater::removeInheritedRoutes(const RibEntry& entry, const Rib::Rib::RouteSet& routesToRemove)$/;"	f	class:nfd::rib::FibUpdater
removeInvalidFaces	NFD/rib/rib-manager.cpp	/^RibManager::removeInvalidFaces(shared_ptr<ndn::OBufferStream> buffer)$/;"	f	class:nfd::rib::RibManager
removeKey	ndn-cxx/src/security/identity.cpp	/^Identity::removeKey(const name::Component& keyId)$/;"	f	class:ndn::security::Identity
removeKey	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::removeKey(const Name& identity, const name::Component& keyId)$/;"	f	class:ndn::security::PibMemory
removeKey	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::removeKey(const Name& identity, const name::Component& keyId)$/;"	f	class:ndn::security::PibSqlite3
removeNextHop	NFD/daemon/mgmt/fib-manager.cpp	/^FibManager::removeNextHop(ControlParameters& parameters,$/;"	f	class:nfd::FibManager
removeNextHop	NFD/daemon/table/fib-entry.cpp	/^Entry::removeNextHop(shared_ptr<Face> face)$/;"	f	class:nfd::fib::Entry
removeNextHopFromAllEntries	NFD/daemon/table/fib.cpp	/^Fib::removeNextHopFromAllEntries(shared_ptr<Face> face)$/;"	f	class:nfd::Fib
removePendingInterest	ndn-cxx/src/face.cpp	/^Face::removePendingInterest(const PendingInterestId* pendingInterestId)$/;"	f	class:ndn::Face
removeTag	ndn-cxx/src/tag-host.hpp	/^TagHost::removeTag() const$/;"	f	class:ndn::TagHost
removeTopPrefix	ndn-cxx/src/mgmt/dispatcher.cpp	/^Dispatcher::removeTopPrefix(const Name& prefix)$/;"	f	class:ndn::mgmt::Dispatcher
remove_header	NFD/websocketpp/websocketpp/http/impl/parser.hpp	/^inline void parser::remove_header(std::string const & key) {$/;"	f	class:websocketpp::http::parser::parser
remove_header	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::remove_header(std::string const & key)$/;"	f	class:websocketpp::connection
remove_if	ndn-cxx/src/detail/container-with-on-empty-signal.hpp	/^  void remove_if(Predicate p)$/;"	f	class:ndn::ContainerWithOnEmptySignal
removedFaces	NFD/tests/daemon/fw/strategy.t.cpp	/^  std::vector<FaceId> removedFaces;$/;"	m	class:nfd::fw::tests::FaceTableAccessTestStrategy	file:
removedNextHopWithCost	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^removedNextHopWithCost(const Fib& fib, const Name& prefix, size_t oldSize, uint32_t cost)$/;"	f	namespace:nfd::tests
rend	ndn-cxx/src/exclude.hpp	/^Exclude::rend() const$/;"	f	class:ndn::Exclude
rend	ndn-cxx/src/name.hpp	/^  rend() const$/;"	f	class:ndn::Name
rep	NFD/daemon/face/face-counters.hpp	/^  typedef uint64_t rep;$/;"	t	class:nfd::ByteCounter
rep	NFD/daemon/face/face-counters.hpp	/^  typedef uint64_t rep;$/;"	t	class:nfd::PacketCounter
rep	ndn-cxx/src/util/time.hpp	/^  typedef duration::rep                    rep;$/;"	t	class:ndn::time::system_clock
rep	ndn-cxx/src/util/time.hpp	/^  typedef duration::rep    rep;$/;"	t	class:ndn::time::steady_clock
replace_header	NFD/websocketpp/websocketpp/http/impl/parser.hpp	/^inline void parser::replace_header(std::string const & key, std::string const &$/;"	f	class:websocketpp::http::parser::parser
replace_header	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::replace_header(std::string const & key,$/;"	f	class:websocketpp::connection
req	NFD/websocketpp/test/processors/hybi00.cpp	/^    stub_config::request_type req;$/;"	m	struct:processor_setup	file:
req	NFD/websocketpp/test/processors/hybi13.cpp	/^    stub_config::request_type req;$/;"	m	struct:processor_setup	file:
req	NFD/websocketpp/test/processors/hybi13.cpp	/^    stub_config::request_type req;$/;"	m	struct:processor_setup_ext	file:
req	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^        request_type req;$/;"	m	struct:websocketpp::transport::asio::connection::proxy_data
req_pong	NFD/websocketpp/test/transport/integration.cpp	/^void req_pong(std::string expected_payload, websocketpp::connection_hdl,$/;"	f
req_pong_timeout	NFD/websocketpp/test/transport/integration.cpp	/^void req_pong_timeout(T * c, std::string expected_payload,$/;"	f
request	NFD/websocketpp/websocketpp/http/request.hpp	/^    request()$/;"	f	class:websocketpp::http::parser::request
request	NFD/websocketpp/websocketpp/http/request.hpp	/^class request : public parser {$/;"	c	namespace:websocketpp::http::parser
requestHubData	NFD/tools/ndn-autoconfig/multicast-discovery.cpp	/^MulticastDiscovery::requestHubData()$/;"	f	class:ndn::tools::autoconfig::MulticastDiscovery
request_entity_too_large	NFD/websocketpp/websocketpp/http/constants.hpp	/^            request_entity_too_large = 413,$/;"	e	enum:websocketpp::http::status_code::value
request_header_fields_too_large	NFD/websocketpp/websocketpp/http/constants.hpp	/^            request_header_fields_too_large = 431,$/;"	e	enum:websocketpp::http::status_code::value
request_ptr	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    typedef typename request_type::ptr request_ptr;$/;"	t	class:websocketpp::transport::asio::connection
request_range_not_satisfiable	NFD/websocketpp/websocketpp/http/constants.hpp	/^            request_range_not_satisfiable = 416,$/;"	e	enum:websocketpp::http::status_code::value
request_timeout	NFD/websocketpp/websocketpp/http/constants.hpp	/^            request_timeout = 408,$/;"	e	enum:websocketpp::http::status_code::value
request_type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^        typedef type::request_type request_type;$/;"	t	struct:debug_custom::transport_config	file:
request_type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^    typedef base::request_type request_type;$/;"	t	struct:debug_custom	file:
request_type	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    typedef core::request_type request_type;$/;"	t	struct:custom_config	file:
request_type	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^        typedef core::request_type request_type;$/;"	t	struct:testee_config::transport_config	file:
request_type	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^    typedef core::request_type request_type;$/;"	t	struct:testee_config	file:
request_type	NFD/websocketpp/test/connection/connection.cpp	/^        typedef type::request_type request_type;$/;"	t	struct:debug_config_client::transport_config	file:
request_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::request_type request_type;$/;"	t	struct:debug_config_client	file:
request_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::request_type request_type;$/;"	t	struct:stub_config	file:
request_type	NFD/websocketpp/test/endpoint/endpoint.cpp	/^    typedef core::request_type request_type;$/;"	t	struct:stub_config	file:
request_type	NFD/websocketpp/test/processors/extension_permessage_compress.cpp	/^    typedef websocketpp::http::parser::request request_type;$/;"	t	struct:config	file:
request_type	NFD/websocketpp/test/processors/hybi00.cpp	/^    typedef websocketpp::http::parser::request request_type;$/;"	t	struct:stub_config	file:
request_type	NFD/websocketpp/test/processors/hybi07.cpp	/^        typedef stub_config::request_type request_type;$/;"	t	struct:stub_config::permessage_deflate_config	file:
request_type	NFD/websocketpp/test/processors/hybi07.cpp	/^    typedef websocketpp::http::parser::request request_type;$/;"	t	struct:stub_config	file:
request_type	NFD/websocketpp/test/processors/hybi08.cpp	/^        typedef stub_config::request_type request_type;$/;"	t	struct:stub_config::permessage_deflate_config	file:
request_type	NFD/websocketpp/test/processors/hybi08.cpp	/^    typedef websocketpp::http::parser::request request_type;$/;"	t	struct:stub_config	file:
request_type	NFD/websocketpp/test/processors/hybi13.cpp	/^        typedef stub_config::request_type request_type;$/;"	t	struct:stub_config::permessage_deflate_config	file:
request_type	NFD/websocketpp/test/processors/hybi13.cpp	/^        typedef stub_config_ext::request_type request_type;$/;"	t	struct:stub_config_ext::permessage_deflate_config	file:
request_type	NFD/websocketpp/test/processors/hybi13.cpp	/^    typedef websocketpp::http::parser::request request_type;$/;"	t	struct:stub_config	file:
request_type	NFD/websocketpp/test/processors/hybi13.cpp	/^    typedef websocketpp::http::parser::request request_type;$/;"	t	struct:stub_config_ext	file:
request_type	NFD/websocketpp/test/roles/client.cpp	/^    typedef core::request_type request_type;$/;"	t	struct:stub_config	file:
request_type	NFD/websocketpp/test/transport/asio/timers.cpp	/^    typedef websocketpp::http::parser::request request_type;$/;"	t	struct:config	file:
request_type	NFD/websocketpp/test/transport/integration.cpp	/^        typedef type::request_type request_type;$/;"	t	struct:config::transport_config	file:
request_type	NFD/websocketpp/test/transport/integration.cpp	/^        typedef type::request_type request_type;$/;"	t	struct:config_tls::transport_config	file:
request_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::request_type request_type;$/;"	t	struct:config	file:
request_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::request_type request_type;$/;"	t	struct:config_tls	file:
request_type	NFD/websocketpp/websocketpp/config/asio.hpp	/^        typedef type::request_type request_type;$/;"	t	struct:websocketpp::config::asio_tls::transport_config
request_type	NFD/websocketpp/websocketpp/config/asio.hpp	/^    typedef base::request_type request_type;$/;"	t	struct:websocketpp::config::asio_tls
request_type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^        typedef type::request_type request_type;$/;"	t	struct:websocketpp::config::asio_tls_client::transport_config
request_type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^    typedef base::request_type request_type;$/;"	t	struct:websocketpp::config::asio_tls_client
request_type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^        typedef type::request_type request_type;$/;"	t	struct:websocketpp::config::asio::transport_config
request_type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^    typedef base::request_type request_type;$/;"	t	struct:websocketpp::config::asio
request_type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^        typedef type::request_type request_type;$/;"	t	struct:websocketpp::config::asio_client::transport_config
request_type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^    typedef base::request_type request_type;$/;"	t	struct:websocketpp::config::asio_client
request_type	NFD/websocketpp/websocketpp/config/core.hpp	/^        typedef core::request_type request_type;$/;"	t	struct:websocketpp::config::core::permessage_deflate_config
request_type	NFD/websocketpp/websocketpp/config/core.hpp	/^        typedef type::request_type request_type;$/;"	t	struct:websocketpp::config::core::transport_config
request_type	NFD/websocketpp/websocketpp/config/core.hpp	/^    typedef http::parser::request request_type;$/;"	t	struct:websocketpp::config::core
request_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        typedef core_client::request_type request_type;$/;"	t	struct:websocketpp::config::core_client::permessage_deflate_config
request_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        typedef type::request_type request_type;$/;"	t	struct:websocketpp::config::core_client::transport_config
request_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    typedef http::parser::request request_type;$/;"	t	struct:websocketpp::config::core_client
request_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^        typedef type::request_type request_type;$/;"	t	struct:websocketpp::config::debug_core::permessage_deflate_config
request_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^        typedef type::request_type request_type;$/;"	t	struct:websocketpp::config::debug_core::transport_config
request_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^    typedef http::parser::request request_type;$/;"	t	struct:websocketpp::config::debug_core
request_type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^        typedef type::request_type request_type;$/;"	t	struct:websocketpp::config::debug_asio_tls::transport_config
request_type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^    typedef base::request_type request_type;$/;"	t	struct:websocketpp::config::debug_asio_tls
request_type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^        typedef type::request_type request_type;$/;"	t	struct:websocketpp::config::debug_asio::transport_config
request_type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^    typedef base::request_type request_type;$/;"	t	struct:websocketpp::config::debug_asio
request_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        typedef core::request_type request_type;$/;"	t	struct:websocketpp::config::minimal_server::permessage_deflate_config
request_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        typedef type::request_type request_type;$/;"	t	struct:websocketpp::config::minimal_server::transport_config
request_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    typedef http::parser::request request_type;$/;"	t	struct:websocketpp::config::minimal_server
request_type	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef typename config::request_type request_type;$/;"	t	class:websocketpp::connection
request_type	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    typedef typename config::request_type request_type;$/;"	t	class:websocketpp::processor::hybi00
request_type	NFD/websocketpp/websocketpp/processors/hybi07.hpp	/^    typedef typename config::request_type request_type;$/;"	t	class:websocketpp::processor::hybi07
request_type	NFD/websocketpp/websocketpp/processors/hybi08.hpp	/^    typedef typename config::request_type request_type;$/;"	t	class:websocketpp::processor::hybi08
request_type	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    typedef typename config::request_type request_type;$/;"	t	class:websocketpp::processor::hybi13
request_type	NFD/websocketpp/websocketpp/processors/processor.hpp	/^    typedef typename config::request_type request_type;$/;"	t	class:websocketpp::processor::processor
request_type	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    typedef typename config::request_type request_type;$/;"	t	class:websocketpp::transport::asio::connection
request_uri_too_long	NFD/websocketpp/websocketpp/http/constants.hpp	/^            request_uri_too_long = 414,$/;"	e	enum:websocketpp::http::status_code::value
requestedDatasets	tests/unit-tests/model/ndn-l3-protocol.t.cpp	/^  std::set<Name> requestedDatasets;$/;"	m	class:ns3::ndn::ManagerCheckFixture	file:
required	ndn-cxx/src/management/nfd-control-command.hpp	/^    required(ControlParameterField field)$/;"	f	class:ndn::nfd::ControlCommand::FieldValidator
requires_64bit	NFD/websocketpp/websocketpp/processors/base.hpp	/^    requires_64bit,$/;"	e	enum:websocketpp::processor::error::processor_errors
rerror	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const rerror = 0x10;$/;"	m	struct:websocketpp::log::elevel
res	NFD/websocketpp/test/processors/hybi00.cpp	/^    stub_config::response_type res;$/;"	m	struct:processor_setup	file:
res	NFD/websocketpp/test/processors/hybi13.cpp	/^    stub_config::response_type res;$/;"	m	struct:processor_setup	file:
res	NFD/websocketpp/test/processors/hybi13.cpp	/^    stub_config::response_type res;$/;"	m	struct:processor_setup_ext	file:
res	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^        response_type res;$/;"	m	struct:websocketpp::transport::asio::connection::proxy_data
reschedule	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^  reschedule()$/;"	f	class:ndn::util::scheduler::tests::SelfRescheduleFixture
reschedule2	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^  reschedule2()$/;"	f	class:ndn::util::scheduler::tests::SelfRescheduleFixture
reschedule3	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^  reschedule3()$/;"	f	class:ndn::util::scheduler::tests::SelfRescheduleFixture
reserve	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::reserve(size_t size, bool addInFront)$/;"	f	class:ndn::encoding::Encoder
reserveBack	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::reserveBack(size_t size)$/;"	f	class:ndn::encoding::Encoder
reserveFront	ndn-cxx/src/encoding/encoder.cpp	/^Encoder::reserveFront(size_t size)$/;"	f	class:ndn::encoding::Encoder
reserved	NFD/websocketpp/websocketpp/close.hpp	/^    inline bool reserved(value code) {$/;"	f	namespace:websocketpp::close::status
reserved	NFD/websocketpp/websocketpp/frame.hpp	/^    inline bool reserved(value v) {$/;"	f	namespace:websocketpp::frame::opcode
reserved_close_code	NFD/websocketpp/websocketpp/error.hpp	/^    reserved_close_code,$/;"	e	enum:websocketpp::error::value
reserved_close_code	NFD/websocketpp/websocketpp/processors/base.hpp	/^    reserved_close_code,$/;"	e	enum:websocketpp::processor::error::processor_errors
reset	NFD/daemon/table/cs-entry.cpp	/^Entry::reset()$/;"	f	class:nfd::cs::Entry
reset	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  reset()$/;"	f	class:nfd::tests::TestFaceTable
reset	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void reset() {$/;"	f	class:websocketpp::transport::asio::endpoint
reset	NFD/websocketpp/websocketpp/utf8_validator.hpp	/^    void reset() {$/;"	f	class:websocketpp::utf8_validator::validator
reset	ndn-cxx/src/encoding/block.cpp	/^Block::reset()$/;"	f	class:ndn::Block
reset	ndn-cxx/src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::reset()$/;"	f	class:ndn::CertificateCacheTtl
reset	ndn-cxx/src/security/validator-config.cpp	/^ValidatorConfig::reset()$/;"	f	class:ndn::ValidatorConfig
reset	ndn-cxx/src/util/command-interest-validator.hpp	/^CommandInterestValidator::reset()$/;"	f	class:ndn::CommandInterestValidator
reset	ndn-cxx/src/util/digest.cpp	/^Digest<Hash>::reset()$/;"	f	class:ndn::util::Digest
reset	ndn-cxx/src/util/scheduler.cpp	/^  reset(const Scheduler::EventQueue::iterator& newIterator)$/;"	f	struct:ndn::util::scheduler::EventIdImpl
resetCallbackFired	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  resetCallbackFired()$/;"	f	class:nfd::tests::TestFaceManagerCommon
resetCallbackFired	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  resetCallbackFired()$/;"	f	class:nfd::tests::FibManagerFixture
resetCallbackFired	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  resetCallbackFired()$/;"	f	class:nfd::tests::StrategyChoiceManagerFixture
resetFaceTable	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  resetFaceTable()$/;"	f	class:nfd::tests::FaceManagerFixture
resetGlobalIoService	NFD/core/global-io.hpp	/^resetGlobalIoService()$/;"	f	namespace:nfd
resetGlobalRng	NFD/core/random.cpp	/^resetGlobalRng()$/;"	f	namespace:nfd
resetMatchResult	ndn-cxx/src/util/regex/regex-pseudo-matcher.hpp	/^RegexPseudoMatcher::resetMatchResult()$/;"	f	class:ndn::RegexPseudoMatcher
resetNoOnInterestFired	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^  resetNoOnInterestFired()$/;"	f	class:nfd::tests::InternalFaceFixture
resetOnInterestFired	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^  resetOnInterestFired()$/;"	f	class:nfd::tests::InternalFaceFixture
resetRecentUsage	NFD/daemon/face/datagram-face.hpp	/^DatagramFace<T, U>::resetRecentUsage()$/;"	f	class:nfd::DatagramFace
resetTpmPassword	ndn-cxx/src/security/key-chain.hpp	/^  resetTpmPassword()$/;"	f	class:ndn::security::KeyChain
resetTpmPassword	ndn-cxx/src/security/sec-tpm-file.hpp	/^  resetTpmPassword()$/;"	f	class:ndn::SecTpmFile
resetTpmPassword	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::resetTpmPassword()$/;"	f	class:ndn::SecTpmOsx
resetTpmPassword	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::resetTpmPassword()$/;"	f	class:ndn::security::DummyTpm
resetTpmPassword	utils/dummy-keychain.cpp	/^DummyTpm::resetTpmPassword()$/;"	f	class:ndn::security::DummyTpm
resetValidation	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  resetValidation()$/;"	f	class:nfd::tests::CommandValidatorTester
resetWire	ndn-cxx/src/encoding/block.cpp	/^Block::resetWire()$/;"	f	class:ndn::Block
reset_content	NFD/websocketpp/websocketpp/http/constants.hpp	/^            reset_content = 205,$/;"	e	enum:websocketpp::http::status_code::value
reset_headers	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    void reset_headers() {$/;"	f	class:websocketpp::processor::hybi13
resize	NFD/daemon/table/name-tree.cpp	/^NameTree::resize(size_t newNBuckets)$/;"	f	class:nfd::NameTree
resolveHandler	ndn-cxx/src/transport/stream-transport.hpp	/^  resolveHandler(const boost::system::error_code& error,$/;"	f	class:ndn::StreamTransportWithResolverImpl
resolver_ptr	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    typedef lib::shared_ptr<boost::asio::ip::tcp::resolver> resolver_ptr;$/;"	t	class:websocketpp::transport::asio::endpoint
resource	NFD/websocketpp/websocketpp/http/parser.hpp	/^        resource,$/;"	e	enum:websocketpp::http::parser::state::value
respondToAnyInterest	examples/ndn-cxx-simple/real-app.hpp	/^  respondToAnyInterest(const ndn::Interest& interest)$/;"	f	class:app::RealApp
response	NFD/websocketpp/websocketpp/http/response.hpp	/^    response()$/;"	f	class:websocketpp::http::parser::response
response	NFD/websocketpp/websocketpp/http/response.hpp	/^class response : public parser {$/;"	c	namespace:websocketpp::http::parser
response_ptr	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    typedef typename response_type::ptr response_ptr;$/;"	t	class:websocketpp::transport::asio::connection
response_type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^        typedef type::response_type response_type;$/;"	t	struct:debug_custom::transport_config	file:
response_type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^    typedef base::response_type response_type;$/;"	t	struct:debug_custom	file:
response_type	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    typedef core::response_type response_type;$/;"	t	struct:custom_config	file:
response_type	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^        typedef core::response_type response_type;$/;"	t	struct:testee_config::transport_config	file:
response_type	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^    typedef core::response_type response_type;$/;"	t	struct:testee_config	file:
response_type	NFD/websocketpp/test/connection/connection.cpp	/^        typedef type::response_type response_type;$/;"	t	struct:debug_config_client::transport_config	file:
response_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::response_type response_type;$/;"	t	struct:debug_config_client	file:
response_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::response_type response_type;$/;"	t	struct:stub_config	file:
response_type	NFD/websocketpp/test/endpoint/endpoint.cpp	/^    typedef core::response_type response_type;$/;"	t	struct:stub_config	file:
response_type	NFD/websocketpp/test/processors/hybi00.cpp	/^    typedef websocketpp::http::parser::response response_type;$/;"	t	struct:stub_config	file:
response_type	NFD/websocketpp/test/processors/hybi07.cpp	/^    typedef websocketpp::http::parser::response response_type;$/;"	t	struct:stub_config	file:
response_type	NFD/websocketpp/test/processors/hybi08.cpp	/^    typedef websocketpp::http::parser::response response_type;$/;"	t	struct:stub_config	file:
response_type	NFD/websocketpp/test/processors/hybi13.cpp	/^    typedef websocketpp::http::parser::response response_type;$/;"	t	struct:stub_config	file:
response_type	NFD/websocketpp/test/processors/hybi13.cpp	/^    typedef websocketpp::http::parser::response response_type;$/;"	t	struct:stub_config_ext	file:
response_type	NFD/websocketpp/test/roles/client.cpp	/^    typedef core::response_type response_type;$/;"	t	struct:stub_config	file:
response_type	NFD/websocketpp/test/transport/asio/timers.cpp	/^    typedef websocketpp::http::parser::response response_type;$/;"	t	struct:config	file:
response_type	NFD/websocketpp/test/transport/integration.cpp	/^        typedef type::response_type response_type;$/;"	t	struct:config::transport_config	file:
response_type	NFD/websocketpp/test/transport/integration.cpp	/^        typedef type::response_type response_type;$/;"	t	struct:config_tls::transport_config	file:
response_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::response_type response_type;$/;"	t	struct:config	file:
response_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::response_type response_type;$/;"	t	struct:config_tls	file:
response_type	NFD/websocketpp/websocketpp/config/asio.hpp	/^        typedef type::response_type response_type;$/;"	t	struct:websocketpp::config::asio_tls::transport_config
response_type	NFD/websocketpp/websocketpp/config/asio.hpp	/^    typedef base::response_type response_type;$/;"	t	struct:websocketpp::config::asio_tls
response_type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^        typedef type::response_type response_type;$/;"	t	struct:websocketpp::config::asio_tls_client::transport_config
response_type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^    typedef base::response_type response_type;$/;"	t	struct:websocketpp::config::asio_tls_client
response_type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^        typedef type::response_type response_type;$/;"	t	struct:websocketpp::config::asio::transport_config
response_type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^    typedef base::response_type response_type;$/;"	t	struct:websocketpp::config::asio
response_type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^        typedef type::response_type response_type;$/;"	t	struct:websocketpp::config::asio_client::transport_config
response_type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^    typedef base::response_type response_type;$/;"	t	struct:websocketpp::config::asio_client
response_type	NFD/websocketpp/websocketpp/config/core.hpp	/^        typedef type::response_type response_type;$/;"	t	struct:websocketpp::config::core::transport_config
response_type	NFD/websocketpp/websocketpp/config/core.hpp	/^    typedef http::parser::response response_type;$/;"	t	struct:websocketpp::config::core
response_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        typedef type::response_type response_type;$/;"	t	struct:websocketpp::config::core_client::transport_config
response_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    typedef http::parser::response response_type;$/;"	t	struct:websocketpp::config::core_client
response_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^        typedef type::response_type response_type;$/;"	t	struct:websocketpp::config::debug_core::transport_config
response_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^    typedef http::parser::response response_type;$/;"	t	struct:websocketpp::config::debug_core
response_type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^        typedef type::response_type response_type;$/;"	t	struct:websocketpp::config::debug_asio_tls::transport_config
response_type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^    typedef base::response_type response_type;$/;"	t	struct:websocketpp::config::debug_asio_tls
response_type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^        typedef type::response_type response_type;$/;"	t	struct:websocketpp::config::debug_asio::transport_config
response_type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^    typedef base::response_type response_type;$/;"	t	struct:websocketpp::config::debug_asio
response_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        typedef type::response_type response_type;$/;"	t	struct:websocketpp::config::minimal_server::transport_config
response_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    typedef http::parser::response response_type;$/;"	t	struct:websocketpp::config::minimal_server
response_type	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef typename config::response_type response_type;$/;"	t	class:websocketpp::connection
response_type	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    typedef typename config::response_type response_type;$/;"	t	class:websocketpp::processor::hybi00
response_type	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    typedef typename config::response_type response_type;$/;"	t	class:websocketpp::processor::hybi13
response_type	NFD/websocketpp/websocketpp/processors/processor.hpp	/^    typedef typename config::response_type response_type;$/;"	t	class:websocketpp::processor::processor
response_type	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    typedef typename config::response_type response_type;$/;"	t	class:websocketpp::transport::asio::connection
result_type	NFD/daemon/table/cs.hpp	/^    typedef const Entry& result_type;$/;"	t	struct:nfd::cs::Cs::EntryFromEntryImpl
result_type	ndn-cxx/src/lp/detail/field-info.cpp	/^  typedef void result_type;$/;"	t	struct:ndn::lp::detail::ExtractFieldInfo	file:
resume	ndn-cxx/src/transport/stream-transport.hpp	/^  resume()$/;"	f	class:ndn::StreamTransportImpl
resume	ndn-cxx/src/transport/tcp-transport.cpp	/^TcpTransport::resume()$/;"	f	class:ndn::TcpTransport
resume	ndn-cxx/src/transport/unix-transport.cpp	/^UnixTransport::resume()$/;"	f	class:ndn::UnixTransport
resume	ndn-cxx/src/util/dummy-client-face.cpp	/^  resume()$/;"	f	class:ndn::util::DummyClientFace::Transport
resume_reading	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^lib::error_code connection<config>::resume_reading() {$/;"	f	class:websocketpp::connection
resume_reading	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^void endpoint<connection,config>::resume_reading(connection_hdl hdl) {$/;"	f	class:websocketpp::endpoint
resume_reading	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^void endpoint<connection,config>::resume_reading(connection_hdl hdl, lib::error_code & ec)$/;"	f	class:websocketpp::endpoint
retain	ndn-cxx/src/security/sec-tpm-osx.cpp	/^  retain(const T& typeRef)$/;"	f	class:ndn::CFReleaser
return_type	utils/trie/trie.hpp	/^  typedef Payload& return_type;$/;"	t	struct:ns3::ndn::ndnSIM::non_pointer_traits
return_type	utils/trie/trie.hpp	/^  typedef Payload* return_type;             \/\/ what is returned on access$/;"	t	struct:ns3::ndn::ndnSIM::pointer_payload_traits
return_type	utils/trie/trie.hpp	/^  typedef ns3::Ptr<Payload> return_type;$/;"	t	struct:ns3::ndn::ndnSIM::smart_pointer_payload_traits
retx	utils/ndn-rtt-estimator.hpp	/^  bool retx;            \/\/ True if this has been retransmitted$/;"	m	class:ns3::ndn::RttHistory
reverse_iterator	ndn-cxx/src/exclude.hpp	/^  typedef exclude_type::reverse_iterator reverse_iterator;$/;"	t	class:ndn::Exclude
reverse_iterator	ndn-cxx/src/name.hpp	/^  typedef boost::reverse_iterator<iterator>       reverse_iterator;$/;"	t	class:ndn::Name
revokeIdentity	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::revokeIdentity()$/;"	f	class:ndn::SecPublicInfoSqlite3
revokeIdentity	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::revokeIdentity()$/;"	f	class:ndn::security::DummyPublicInfo
revokeIdentity	utils/dummy-keychain.cpp	/^DummyPublicInfo::revokeIdentity()$/;"	f	class:ndn::security::DummyPublicInfo
rhs	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    endpoint& operator= (const endpoint & rhs) = delete;$/;"	m	class:websocketpp::transport::asio::endpoint
rib	NFD/rib/fib-update.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/rib/fib-update.hpp	/^namespace rib {$/;"	n	namespace:nfd
rib	NFD/rib/fib-updater.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/rib/fib-updater.hpp	/^namespace rib {$/;"	n	namespace:nfd
rib	NFD/rib/nrd.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/rib/nrd.hpp	/^namespace rib {$/;"	n	namespace:nfd
rib	NFD/rib/remote-registrator.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/rib/remote-registrator.hpp	/^namespace rib {$/;"	n	namespace:nfd
rib	NFD/rib/rib-entry.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/rib/rib-entry.hpp	/^namespace rib {$/;"	n	namespace:nfd
rib	NFD/rib/rib-manager.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/rib/rib-manager.hpp	/^namespace rib {$/;"	n	namespace:nfd
rib	NFD/rib/rib-status-publisher.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/rib/rib-status-publisher.hpp	/^namespace rib {$/;"	n	namespace:nfd
rib	NFD/rib/rib-update-batch.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/rib/rib-update-batch.hpp	/^namespace rib {$/;"	n	namespace:nfd
rib	NFD/rib/rib-update.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/rib/rib-update.hpp	/^namespace rib {$/;"	n	namespace:nfd
rib	NFD/rib/rib.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/rib/rib.hpp	/^namespace rib {$/;"	n	namespace:nfd
rib	NFD/rib/route.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/rib/route.hpp	/^namespace rib {$/;"	n	namespace:nfd
rib	NFD/tests/rib/fib-updates-common.hpp	/^  rib::Rib rib;$/;"	m	class:nfd::rib::tests::FibUpdatesFixture
rib	NFD/tests/rib/fib-updates-common.hpp	/^namespace rib {$/;"	n	namespace:nfd
rib	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/tests/rib/fib-updates-new-face.t.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/tests/rib/fib-updates-new-namespace.t.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/tests/rib/fib-updates-update-face.t.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/tests/rib/remote-registrator.t.cpp	/^  Rib rib;$/;"	m	class:nfd::rib::tests::RemoteRegistratorFixture	file:
rib	NFD/tests/rib/remote-registrator.t.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/tests/rib/rib-manager.t.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/tests/rib/rib-status-publisher-common.hpp	/^namespace rib {$/;"	n	namespace:nfd
rib	NFD/tests/rib/rib-status-publisher.t.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/tests/rib/rib-test-common.hpp	/^namespace rib {$/;"	n	namespace:nfd
rib	NFD/tests/rib/rib-update.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
rib	NFD/tests/rib/rib.t.cpp	/^namespace rib {$/;"	n	namespace:nfd	file:
ribRegisterPrefix	NFD/tools/nfdc.cpp	/^Nfdc::ribRegisterPrefix()$/;"	f	class:nfdc::Nfdc
ribUnregisterPrefix	NFD/tools/nfdc.cpp	/^Nfdc::ribUnregisterPrefix()$/;"	f	class:nfdc::Nfdc
rng	NFD/websocketpp/test/connection/connection.cpp	/^    stub_config::rng_type rng;$/;"	m	struct:connection_setup	file:
rng	NFD/websocketpp/test/processors/hybi13.cpp	/^    stub_config::rng_type rng;$/;"	m	struct:processor_setup	file:
rng	NFD/websocketpp/test/processors/hybi13.cpp	/^    stub_config::rng_type rng;$/;"	m	struct:processor_setup_ext	file:
rng_	ndn-cxx/tests/unit-tests/data.t.cpp	/^  CryptoPP::AutoSeededRandomPool rng_;$/;"	m	class:ndn::tests::TestDataFixture	file:
rng_type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^    typedef base::rng_type rng_type;$/;"	t	struct:debug_custom	file:
rng_type	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    typedef core::rng_type rng_type;$/;"	t	struct:custom_config	file:
rng_type	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^    typedef core::rng_type rng_type;$/;"	t	struct:testee_config	file:
rng_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::rng_type rng_type;$/;"	t	struct:stub_config	file:
rng_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef websocketpp::random::none::int_generator<uint32_t> rng_type;$/;"	t	struct:debug_config_client	file:
rng_type	NFD/websocketpp/test/endpoint/endpoint.cpp	/^    typedef core::rng_type rng_type;$/;"	t	struct:stub_config	file:
rng_type	NFD/websocketpp/test/processors/hybi07.cpp	/^    typedef websocketpp::random::none::int_generator<uint32_t> rng_type;$/;"	t	struct:stub_config	file:
rng_type	NFD/websocketpp/test/processors/hybi08.cpp	/^    typedef websocketpp::random::none::int_generator<uint32_t> rng_type;$/;"	t	struct:stub_config	file:
rng_type	NFD/websocketpp/test/processors/hybi13.cpp	/^    typedef websocketpp::random::none::int_generator<uint32_t> rng_type;$/;"	t	struct:stub_config	file:
rng_type	NFD/websocketpp/test/processors/hybi13.cpp	/^    typedef websocketpp::random::none::int_generator<uint32_t> rng_type;$/;"	t	struct:stub_config_ext	file:
rng_type	NFD/websocketpp/test/roles/client.cpp	/^    typedef websocketpp::random::random_device::int_generator<uint32_t,concurrency_type> rng_type;$/;"	t	struct:stub_config	file:
rng_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::rng_type rng_type;$/;"	t	struct:config	file:
rng_type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef base::rng_type rng_type;$/;"	t	struct:config_tls	file:
rng_type	NFD/websocketpp/websocketpp/config/asio.hpp	/^    typedef base::rng_type rng_type;$/;"	t	struct:websocketpp::config::asio_tls
rng_type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^    typedef base::rng_type rng_type;$/;"	t	struct:websocketpp::config::asio_tls_client
rng_type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^    typedef base::rng_type rng_type;$/;"	t	struct:websocketpp::config::asio
rng_type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^    typedef base::rng_type rng_type;$/;"	t	struct:websocketpp::config::asio_client
rng_type	NFD/websocketpp/websocketpp/config/core.hpp	/^    typedef websocketpp::random::none::int_generator<uint32_t> rng_type;$/;"	t	struct:websocketpp::config::core
rng_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        concurrency_type> rng_type;$/;"	t	struct:websocketpp::config::core_client
rng_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^    typedef websocketpp::random::none::int_generator<uint32_t> rng_type;$/;"	t	struct:websocketpp::config::debug_core
rng_type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^    typedef base::rng_type rng_type;$/;"	t	struct:websocketpp::config::debug_asio_tls
rng_type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^    typedef base::rng_type rng_type;$/;"	t	struct:websocketpp::config::debug_asio
rng_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    typedef websocketpp::random::none::int_generator<uint32_t> rng_type;$/;"	t	struct:websocketpp::config::minimal_server
rng_type	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef typename config::rng_type rng_type;$/;"	t	class:websocketpp::connection
rng_type	NFD/websocketpp/websocketpp/endpoint.hpp	/^    typedef typename config::rng_type rng_type;$/;"	t	class:websocketpp::endpoint
rng_type	NFD/websocketpp/websocketpp/processors/hybi07.hpp	/^    typedef typename config::rng_type rng_type;$/;"	t	class:websocketpp::processor::hybi07
rng_type	NFD/websocketpp/websocketpp/processors/hybi08.hpp	/^    typedef typename config::rng_type rng_type;$/;"	t	class:websocketpp::processor::hybi08
rng_type	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    typedef typename config::rng_type rng_type;$/;"	t	class:websocketpp::processor::hybi13
rol	NFD/websocketpp/websocketpp/sha1/sha1.hpp	/^inline unsigned int rol(unsigned int value, unsigned int steps) {$/;"	f	namespace:websocketpp::sha1::__anon14
router	NFD/tests/daemon/fw/access-strategy.t.cpp	/^  TopologyNode router;$/;"	m	class:nfd::fw::tests::TwoLaptopsFixture	file:
rsaSigInfo	ndn-cxx/tests/unit-tests/security/validator.t.cpp	/^const uint8_t rsaSigInfo[] = {$/;"	m	namespace:ndn::tests	file:
rsaSigValue	ndn-cxx/tests/unit-tests/security/validator.t.cpp	/^const uint8_t rsaSigValue[] = {$/;"	m	namespace:ndn::tests	file:
rsv3	NFD/websocketpp/websocketpp/frame.hpp	/^        rsv3 = 0x3,$/;"	e	enum:websocketpp::frame::opcode::value
rsv4	NFD/websocketpp/websocketpp/frame.hpp	/^        rsv4 = 0x4,$/;"	e	enum:websocketpp::frame::opcode::value
rsv5	NFD/websocketpp/websocketpp/frame.hpp	/^        rsv5 = 0x5,$/;"	e	enum:websocketpp::frame::opcode::value
rsv6	NFD/websocketpp/websocketpp/frame.hpp	/^        rsv6 = 0x6,$/;"	e	enum:websocketpp::frame::opcode::value
rsv7	NFD/websocketpp/websocketpp/frame.hpp	/^        rsv7 = 0x7,$/;"	e	enum:websocketpp::frame::opcode::value
rsv_end	NFD/websocketpp/websocketpp/close.hpp	/^    static value const rsv_end = 2999;$/;"	m	namespace:websocketpp::close::status
rsv_start	NFD/websocketpp/websocketpp/close.hpp	/^    static value const rsv_start = 1016;$/;"	m	namespace:websocketpp::close::status
rtoTimer	NFD/daemon/fw/access-strategy.hpp	/^    scheduler::ScopedEventId rtoTimer;$/;"	m	class:nfd::fw::AccessStrategy::PitInfo
rtt	NFD/daemon/fw/access-strategy.hpp	/^    RttEstimator rtt;$/;"	m	class:nfd::fw::AccessStrategy::FaceInfo
rtt	NFD/daemon/fw/access-strategy.hpp	/^    RttEstimator rtt;$/;"	m	class:nfd::fw::AccessStrategy::MtInfo
run	NFD/daemon/main.cpp	/^  run()$/;"	f	class:nfd::NfdRunner
run	NFD/tests/limited-io.cpp	/^LimitedIo::run(int nOpsLimit, const time::nanoseconds& timeLimit, const time::nanoseconds& tick)$/;"	f	class:nfd::tests::LimitedIo
run	NFD/tools/ndn-autoconfig-server.cpp	/^  run()$/;"	f	class:ndn::NdnAutoconfigServer
run	NFD/tools/ndn-autoconfig/main.cpp	/^  run()$/;"	f	class:ndn::tools::NdnAutoconfig
run	NFD/tools/ndn-tlv-peek.cpp	/^  run()$/;"	f	class:ndntlvpeek::NdnTlvPeek
run	NFD/tools/ndn-tlv-poke.cpp	/^  run()$/;"	f	class:ndntlvpoke::NdnTlvPoke
run	NFD/websocketpp/docs/simple_broadcast_server.cpp	/^    void run(uint16_t port) {$/;"	f	class:broadcast_server
run	NFD/websocketpp/docs/simple_count_server_thread.cpp	/^    void run(uint16_t port) {$/;"	f	class:count_server
run	NFD/websocketpp/examples/associative_storage/associative_storage.cpp	/^    void run(uint16_t port) {$/;"	f	class:print_server
run	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    void run(uint16_t port) {$/;"	f	class:broadcast_server
run	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    void run(uint16_t port) {$/;"	f	class:print_server
run	NFD/websocketpp/examples/simple_broadcast_server/simple_broadcast_server.cpp	/^    void run(uint16_t port) {$/;"	f	class:broadcast_server
run	NFD/websocketpp/examples/telemetry_client/telemetry_client.cpp	/^    void run(const std::string & uri) {$/;"	f	class:telemetry_client
run	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^    void run(std::string docroot, uint16_t port) {$/;"	f	class:telemetry_server
run	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    std::size_t run() {$/;"	f	class:websocketpp::transport::asio::endpoint
run	examples/ndn-cxx-simple/real-app.hpp	/^  run()$/;"	f	class:app::RealApp
run	ndn-cxx/examples/consumer-with-timer.cpp	/^  run()$/;"	f	class:ndn::examples::ConsumerWithTimer
run	ndn-cxx/examples/consumer.cpp	/^  run()$/;"	f	class:ndn::examples::Consumer
run	ndn-cxx/examples/producer.cpp	/^  run()$/;"	f	class:ndn::examples::Producer
run	ndn-cxx/tools/ndncatchunks3.cpp	/^Consumer::run()$/;"	f	class:ndn::Consumer
run	ndn-cxx/tools/ndnputchunks3.cpp	/^  run()$/;"	f	class:ndn::Producer
run	tests/other/ndn-test.cpp	/^Tester::run(int argc, char* argv[])$/;"	f	class:ns3::Tester
runConfig	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^  runConfig(const std::string& CONFIG, bool isDryRun)$/;"	f	class:nfd::tests::TablesConfigSectionFixture
runElevated	NFD/core/privilege-helper.cpp	/^PrivilegeHelper::runElevated(function<void()> f)$/;"	f	class:nfd::PrivilegeHelper
runNextStep	NFD/tools/nfd-status.cpp	/^  runNextStep()$/;"	f	class:ndn::NfdStatus	file:
runTests	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^  runTests()$/;"	f	class:ndn::util::tests::CanonizeFixture
run_client	NFD/websocketpp/test/transport/integration.cpp	/^void run_client(client & c, std::string uri, bool log = false) {$/;"	f
run_client_and_mark	NFD/websocketpp/test/transport/integration.cpp	/^void run_client_and_mark(client * c, bool * flag, websocketpp::lib::mutex * mutex) {$/;"	f
run_dummy_client	NFD/websocketpp/test/transport/integration.cpp	/^void run_dummy_client(std::string port) {$/;"	f
run_dummy_server	NFD/websocketpp/test/transport/asio/timers.cpp	/^void run_dummy_server(int port) {$/;"	f
run_dummy_server	NFD/websocketpp/test/transport/integration.cpp	/^void run_dummy_server(int port) {$/;"	f
run_one	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    std::size_t run_one() {$/;"	f	class:websocketpp::transport::asio::endpoint
run_server	NFD/websocketpp/test/transport/integration.cpp	/^void run_server(server * s, int port, bool log = false) {$/;"	f
run_server_test	NFD/websocketpp/test/connection/connection_tu2.cpp	/^std::string run_server_test(server & s, std::string input, bool log) {$/;"	f
run_server_test	NFD/websocketpp/test/connection/connection_tu2.cpp	/^std::string run_server_test(std::string input, bool log) {$/;"	f
run_server_test	NFD/websocketpp/test/roles/server.cpp	/^std::string run_server_test(server& s, std::string input) {$/;"	f
run_test_timer	NFD/websocketpp/test/transport/asio/timers.cpp	/^void run_test_timer(long value) {$/;"	f
run_test_timer	NFD/websocketpp/test/transport/integration.cpp	/^void run_test_timer(long value) {$/;"	f
run_time_limited_client	NFD/websocketpp/test/transport/integration.cpp	/^void run_time_limited_client(client & c, std::string uri, long timeout,$/;"	f
s_certificate	NFD/tests/daemon/mgmt/validation-common.cpp	/^shared_ptr<ndn::IdentityCertificate> CommandIdentityGlobalFixture::s_certificate;$/;"	m	class:nfd::tests::CommandIdentityGlobalFixture	file:
s_certificate	NFD/tests/daemon/mgmt/validation-common.hpp	/^  static shared_ptr<ndn::IdentityCertificate> s_certificate;$/;"	m	class:nfd::tests::CommandIdentityGlobalFixture
s_copyCount	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^  static int s_copyCount;$/;"	m	class:ndn::util::signal::tests::RefObject	file:
s_copyCount	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^int RefObject::s_copyCount = 0;$/;"	m	class:ndn::util::signal::tests::RefObject	file:
s_debugNetworkInterfaces	NFD/core/network-interface.cpp	/^static shared_ptr<std::vector<NetworkInterfaceInfo>> s_debugNetworkInterfaces = nullptr;$/;"	m	namespace:nfd	file:
s_emptyEntry	NFD/daemon/table/fib.cpp	/^const shared_ptr<fib::Entry> Fib::s_emptyEntry = make_shared<fib::Entry>(Name());$/;"	m	class:nfd::Fib	file:
s_emptyEntry	NFD/daemon/table/fib.hpp	/^  static const shared_ptr<fib::Entry> s_emptyEntry;$/;"	m	class:nfd::Fib
s_identityName	NFD/tests/daemon/mgmt/validation-common.hpp	/^  static const Name s_identityName;$/;"	m	class:nfd::tests::CommandIdentityGlobalFixture
s_iterator_to	utils/trie/trie-with-policy.hpp	/^  s_iterator_to(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
s_normalGid	NFD/core/privilege-helper.cpp	/^gid_t PrivilegeHelper::s_normalGid = ::getegid();$/;"	m	class:nfd::PrivilegeHelper	file:
s_normalGid	NFD/core/privilege-helper.hpp	/^  static gid_t s_normalGid;$/;"	m	class:nfd::PrivilegeHelper
s_normalUid	NFD/core/privilege-helper.cpp	/^uid_t PrivilegeHelper::s_normalUid = ::geteuid();$/;"	m	class:nfd::PrivilegeHelper	file:
s_normalUid	NFD/core/privilege-helper.hpp	/^  static uid_t s_normalUid;$/;"	m	class:nfd::PrivilegeHelper
s_privilegedGid	NFD/core/privilege-helper.cpp	/^gid_t PrivilegeHelper::s_privilegedGid = ::getegid();$/;"	m	class:nfd::PrivilegeHelper	file:
s_privilegedGid	NFD/core/privilege-helper.hpp	/^  static gid_t s_privilegedGid;$/;"	m	class:nfd::PrivilegeHelper
s_privilegedUid	NFD/core/privilege-helper.cpp	/^uid_t PrivilegeHelper::s_privilegedUid = ::geteuid();$/;"	m	class:nfd::PrivilegeHelper	file:
s_privilegedUid	NFD/core/privilege-helper.hpp	/^  static uid_t s_privilegedUid;$/;"	m	class:nfd::PrivilegeHelper
satisfy	ndn-cxx/src/security/sec-rule-relative.cpp	/^SecRuleRelative::satisfy(const Data& data)$/;"	f	class:ndn::SecRuleRelative
satisfy	ndn-cxx/src/security/sec-rule-relative.cpp	/^SecRuleRelative::satisfy(const Name& dataName, const Name& signerName)$/;"	f	class:ndn::SecRuleRelative
satisfy	ndn-cxx/src/security/sec-rule-specific.cpp	/^SecRuleSpecific::satisfy(const Data& data)$/;"	f	class:ndn::SecRuleSpecific
satisfy	ndn-cxx/src/security/sec-rule-specific.cpp	/^SecRuleSpecific::satisfy(const Name& dataName, const Name& signerName)$/;"	f	class:ndn::SecRuleSpecific
satisfyPendingInterests	ndn-cxx/src/detail/face-impl.hpp	/^  satisfyPendingInterests(const Data& data)$/;"	f	class:ndn::Face::Impl
save	ndn-cxx/src/util/io.hpp	/^save(const T& object, const std::string& file, IoEncoding encoding = BASE_64)$/;"	f	namespace:ndn::io
save	ndn-cxx/src/util/io.hpp	/^save(const T& object, std::ostream& os, IoEncoding encoding = BASE_64)$/;"	f	namespace:ndn::io
saveIdentityToFile	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  saveIdentityToFile(const char* filename)$/;"	f	class:nfd::tests::CommandValidatorTester
schedule	NFD/core/scheduler.cpp	/^schedule(const time::nanoseconds& after, const std::function<void()>& event)$/;"	f	namespace:nfd::scheduler
scheduleActiveFaceFetch	NFD/rib/rib-manager.cpp	/^RibManager::scheduleActiveFaceFetch(const time::seconds& timeToWait)$/;"	f	class:nfd::rib::RibManager
scheduleCfLoop	ndn-cxx/src/util/network-monitor.cpp	/^  scheduleCfLoop()$/;"	f	class:ndn::util::NetworkMonitor::Impl
scheduleCleanup	NFD/daemon/face/ndnlp-partial-message-store.cpp	/^PartialMessageStore::scheduleCleanup(uint64_t messageIdentifier,$/;"	f	class:nfd::ndnlp::PartialMessageStore
scheduleEvent	ndn-cxx/src/util/scheduler.cpp	/^Scheduler::scheduleEvent(const time::nanoseconds& after,$/;"	f	class:ndn::util::scheduler::Scheduler
scheduler	NFD/core/scheduler.cpp	/^namespace scheduler {$/;"	n	namespace:nfd	file:
scheduler	NFD/core/scheduler.hpp	/^namespace scheduler {$/;"	n	namespace:nfd
scheduler	NFD/tests/core/scheduler.t.cpp	/^namespace scheduler {$/;"	n	namespace:nfd	file:
scheduler	ndn-cxx/src/util/network-monitor.cpp	/^  Scheduler scheduler;$/;"	m	class:ndn::util::NetworkMonitor::Impl	file:
scheduler	ndn-cxx/src/util/scheduler-scoped-event-id.cpp	/^namespace scheduler {$/;"	n	namespace:ndn::util	file:
scheduler	ndn-cxx/src/util/scheduler-scoped-event-id.hpp	/^namespace scheduler {$/;"	n	namespace:ndn::util
scheduler	ndn-cxx/src/util/scheduler.cpp	/^namespace scheduler {$/;"	n	namespace:ndn::util	file:
scheduler	ndn-cxx/src/util/scheduler.hpp	/^namespace scheduler {$/;"	n	namespace:ndn::util
scheduler	ndn-cxx/tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^  Scheduler scheduler;$/;"	m	class:ndn::tests::CertificateCacheFixture	file:
scheduler	ndn-cxx/tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^  Scheduler scheduler;$/;"	m	class:ndn::tests::SignatureSha256EcdsaTimeFixture	file:
scheduler	ndn-cxx/tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^  Scheduler scheduler;$/;"	m	class:ndn::tests::SignatureSha256RsaTimeFixture	file:
scheduler	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^  Scheduler scheduler;$/;"	m	class:ndn::util::scheduler::tests::ScopedEventFixture	file:
scheduler	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^  Scheduler scheduler;$/;"	m	class:ndn::util::scheduler::tests::SelfRescheduleFixture	file:
scheduler	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^  Scheduler scheduler;$/;"	m	struct:ndn::util::scheduler::tests::CancelAllFixture	file:
scheduler	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^namespace scheduler {$/;"	n	namespace:ndn::util	file:
scoped_lock	NFD/websocketpp/examples/telemetry_client/telemetry_client.cpp	/^    typedef websocketpp::lib::lock_guard<websocketpp::lib::mutex> scoped_lock;$/;"	t	class:telemetry_client	file:
scoped_lock	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^    typedef websocketpp::lib::lock_guard<websocketpp::lib::mutex> scoped_lock;$/;"	t	class:telemetry_server	file:
scoped_lock_type	NFD/websocketpp/websocketpp/concurrency/basic.hpp	/^    typedef lib::lock_guard<mutex_type> scoped_lock_type;$/;"	t	class:websocketpp::concurrency::basic
scoped_lock_type	NFD/websocketpp/websocketpp/concurrency/none.hpp	/^    typedef none_impl::fake_lock_guard scoped_lock_type;$/;"	t	class:websocketpp::concurrency::none
scoped_lock_type	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef typename concurrency_type::scoped_lock_type scoped_lock_type;$/;"	t	class:websocketpp::connection
scoped_lock_type	NFD/websocketpp/websocketpp/endpoint.hpp	/^    typedef typename concurrency_type::scoped_lock_type scoped_lock_type;$/;"	t	class:websocketpp::endpoint
scoped_lock_type	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    typedef typename concurrency::scoped_lock_type scoped_lock_type;$/;"	t	class:websocketpp::log::basic
scoped_lock_type	NFD/websocketpp/websocketpp/logger/syslog.hpp	/^    typedef typename base::scoped_lock_type scoped_lock_type;$/;"	t	class:websocketpp::log::syslog
scoped_lock_type	NFD/websocketpp/websocketpp/random/random_device.hpp	/^        typedef typename concurrency::scoped_lock_type scoped_lock_type;$/;"	t	class:websocketpp::random::random_device::int_generator
scoped_lock_type	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    typedef typename concurrency_type::scoped_lock_type scoped_lock_type;$/;"	t	class:websocketpp::transport::debug::connection
scoped_lock_type	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    typedef typename concurrency_type::scoped_lock_type scoped_lock_type;$/;"	t	class:websocketpp::transport::iostream::connection
scoped_lock_type	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    typedef typename concurrency_type::scoped_lock_type scoped_lock_type;$/;"	t	class:websocketpp::transport::stub::connection
scoped_timer	NFD/websocketpp/test/http/parser_perf.cpp	/^    scoped_timer(std::string i) : m_id(i),m_start(std::chrono::steady_clock::now()) {$/;"	f	class:scoped_timer
scoped_timer	NFD/websocketpp/test/http/parser_perf.cpp	/^class scoped_timer {$/;"	c	file:
sd_handler	NFD/websocketpp/test/transport/iostream/connection.cpp	/^websocketpp::lib::error_code sd_handler(websocketpp::connection_hdl) {$/;"	f
secondCert	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  shared_ptr<IdentityCertificate> secondCert;$/;"	m	struct:ndn::tests::DirTestFixture	file:
secondCertPath	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  boost::filesystem::path secondCertPath;$/;"	m	struct:ndn::tests::DirTestFixture	file:
secondIdentity	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  Name secondIdentity;$/;"	m	struct:ndn::tests::DirTestFixture	file:
security	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^        security = 1,$/;"	e	enum:websocketpp::transport::asio::socket::error::value
security	ndn-cxx/src/encoding/tlv-security.hpp	/^namespace security {$/;"	n	namespace:ndn::tlv
security	ndn-cxx/src/face.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/additional-description.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/src/security/additional-description.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/certificate-container.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/src/security/certificate-container.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/conf/checker.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/conf/common.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/conf/filter.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/conf/rule.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/identity-container.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/src/security/identity-container.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/identity.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/src/security/identity.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/key-chain.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/src/security/key-chain.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/key-container.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/src/security/key-container.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/key.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/src/security/key.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/pib-impl.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/pib-memory.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/src/security/pib-memory.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/pib-sqlite3.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/src/security/pib-sqlite3.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/pib.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/src/security/pib.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/signing-helpers.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/src/security/signing-helpers.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/signing-info.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/src/security/signing-info.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/src/security/validity-period.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/src/security/validity-period.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/tests/identity-management-fixture.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/identity-management-fixture.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/tests/unit-tests/identity-management-time-fixture.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/identity-management-time-fixture.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/tests/unit-tests/security/additional-info.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/certificate-container.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/dummy-keychain.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/tests/unit-tests/security/identity-container.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/identity-fixture.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/identity-management-fixture.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/identity.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/key-chain.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/key-container.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/key.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/pib-data-fixture.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/pib-data-fixture.hpp	/^namespace security {$/;"	n	namespace:ndn
security	ndn-cxx/tests/unit-tests/security/pib-impl.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/pib-memory.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/pib-sqlite3.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/pib.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/sec-rule-relative.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/sec-rule-specific.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/signing-helpers.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/signing-info.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	ndn-cxx/tests/unit-tests/security/validity-period.t.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	utils/dummy-keychain.cpp	/^namespace security {$/;"	n	namespace:ndn	file:
security	utils/dummy-keychain.hpp	/^namespace security {$/;"	n	namespace:ndn
see_other	NFD/websocketpp/websocketpp/http/constants.hpp	/^            see_other = 303,$/;"	e	enum:websocketpp::http::status_code::value
selectChild	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::selectChild(const Interest& interest,$/;"	f	class:ndn::util::InMemoryStorage
select_subprotocol	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::select_subprotocol(std::string const & value) {$/;"	f	class:websocketpp::connection
select_subprotocol	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::select_subprotocol(std::string const & value,$/;"	f	class:websocketpp::connection
selfEventId	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^  EventId selfEventId;$/;"	m	class:ndn::util::scheduler::tests::SelfRescheduleFixture	file:
selfSign	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::selfSign(IdentityCertificate& cert)$/;"	f	class:ndn::security::KeyChain
selfSign	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::selfSign(const Name& keyName)$/;"	f	class:ndn::security::KeyChain
self_type	utils/trie/trie.hpp	/^  typedef trie self_type;$/;"	t	class:ns3::ndn::ndnSIM::trie
send	NFD/daemon/face/stream-face.hpp	/^  send(StreamFace<Protocol, FaceBase>& face, const Packet& packet)$/;"	f	struct:nfd::StreamFaceSenderImpl
send	NFD/daemon/face/stream-face.hpp	/^  send(StreamFace<Protocol, LocalFace>& face, const Packet& packet)$/;"	f	struct:nfd::StreamFaceSenderImpl
send	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    void send(int id, std::string message) {$/;"	f	class:websocket_endpoint
send	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    void send(int id, std::string message) {$/;"	f	class:websocket_endpoint
send	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^lib::error_code connection<config>::send(std::string const & payload,$/;"	f	class:websocketpp::connection
send	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^lib::error_code connection<config>::send(typename config::message_type::ptr msg)$/;"	f	class:websocketpp::connection
send	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^lib::error_code connection<config>::send(void const * payload, size_t len,$/;"	f	class:websocketpp::connection
send	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^void endpoint<connection,config>::send(connection_hdl hdl, message_ptr msg) {$/;"	f	class:websocketpp::endpoint
send	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^void endpoint<connection,config>::send(connection_hdl hdl, message_ptr msg,$/;"	f	class:websocketpp::endpoint
send	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^void endpoint<connection,config>::send(connection_hdl hdl, std::string const & payload,$/;"	f	class:websocketpp::endpoint
send	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^void endpoint<connection,config>::send(connection_hdl hdl, void const * payload,$/;"	f	class:websocketpp::endpoint
send	model/ndn-net-device-face.cpp	/^NetDeviceFace::send(Ptr<Packet> packet)$/;"	f	class:ns3::ndn::NetDeviceFace
send	ndn-cxx/src/transport/stream-transport.hpp	/^  send(const Block& header, const Block& payload)$/;"	f	class:ndn::StreamTransportImpl
send	ndn-cxx/src/transport/stream-transport.hpp	/^  send(const Block& wire)$/;"	f	class:ndn::StreamTransportImpl
send	ndn-cxx/src/transport/tcp-transport.cpp	/^TcpTransport::send(const Block& header, const Block& payload)$/;"	f	class:ndn::TcpTransport
send	ndn-cxx/src/transport/tcp-transport.cpp	/^TcpTransport::send(const Block& wire)$/;"	f	class:ndn::TcpTransport
send	ndn-cxx/src/transport/unix-transport.cpp	/^UnixTransport::send(const Block& header, const Block& payload)$/;"	f	class:ndn::UnixTransport
send	ndn-cxx/src/transport/unix-transport.cpp	/^UnixTransport::send(const Block& wire)$/;"	f	class:ndn::UnixTransport
send	ndn-cxx/src/util/dummy-client-face.cpp	/^  send(const Block& header, const Block& payload)$/;"	f	class:ndn::util::DummyClientFace::Transport
send	ndn-cxx/src/util/dummy-client-face.cpp	/^  send(const Block& wire)$/;"	f	class:ndn::util::DummyClientFace::Transport
sendAddNextHopUpdate	NFD/rib/fib-updater.cpp	/^FibUpdater::sendAddNextHopUpdate(const FibUpdate& update,$/;"	f	class:nfd::rib::FibUpdater
sendBatchFromQueue	NFD/rib/rib.cpp	/^Rib::sendBatchFromQueue()$/;"	f	class:nfd::rib::Rib
sendBlock	NFD/daemon/face/multicast-udp-face.cpp	/^MulticastUdpFace::sendBlock(const Block& block)$/;"	f	class:nfd::MulticastUdpFace
sendCommand	helper/ndn-strategy-choice-helper.cpp	/^StrategyChoiceHelper::sendCommand(const ControlParameters& parameters, Ptr<Node> node)$/;"	f	class:ns3::ndn::StrategyChoiceHelper
sendControlResponse	ndn-cxx/src/mgmt/dispatcher.cpp	/^Dispatcher::sendControlResponse(const ControlResponse& resp, const Interest& interest,$/;"	f	class:ndn::mgmt::Dispatcher
sendData	NFD/daemon/face/datagram-face.hpp	/^DatagramFace<T, U>::sendData(const Data& data)$/;"	f	class:nfd::DatagramFace
sendData	NFD/daemon/face/ethernet-face.cpp	/^EthernetFace::sendData(const Data& data)$/;"	f	class:nfd::EthernetFace
sendData	NFD/daemon/face/multicast-udp-face.cpp	/^MulticastUdpFace::sendData(const Data& data)$/;"	f	class:nfd::MulticastUdpFace
sendData	NFD/daemon/face/null-face.cpp	/^NullFace::sendData(const Data& data)$/;"	f	class:nfd::NullFace
sendData	NFD/daemon/face/stream-face.hpp	/^StreamFace<T, U>::sendData(const Data& data)$/;"	f	class:nfd::StreamFace
sendData	NFD/daemon/face/websocket-face.cpp	/^WebSocketFace::sendData(const Data& data)$/;"	f	class:nfd::WebSocketFace
sendData	NFD/daemon/mgmt/internal-face.cpp	/^InternalFace::sendData(const Data& data)$/;"	f	class:nfd::InternalFace
sendData	model/ndn-app-face.cpp	/^AppFace::sendData(const Data& data)$/;"	f	class:ns3::ndn::AppFace
sendData	model/ndn-net-device-face.cpp	/^NetDeviceFace::sendData(const Data& data)$/;"	f	class:ns3::ndn::NetDeviceFace
sendData	ndn-cxx/src/detail/face-impl.hpp	/^    sendData(const Data& data)$/;"	f	class:ndn::Face::Impl::NfdFace
sendData	ndn-cxx/src/mgmt/dispatcher.cpp	/^Dispatcher::sendData(const Name& dataName, const Block& content,$/;"	f	class:ndn::mgmt::Dispatcher
sendData	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^  sendData(const Name& dataName, const Block& content, const MetaInfo& info)$/;"	f	class:ndn::mgmt::tests::StatusDatasetContextFixture
sendErrorResponse	NFD/rib/rib-manager.cpp	/^RibManager::sendErrorResponse(uint32_t code, const std::string& error,$/;"	f	class:nfd::rib::RibManager
sendFromQueue	NFD/daemon/face/stream-face.hpp	/^StreamFace<T, U>::sendFromQueue()$/;"	f	class:nfd::StreamFace
sendInitialInterest	ndn-cxx/src/util/notification-subscriber.hpp	/^  sendInitialInterest()$/;"	f	class:ndn::util::NotificationSubscriber
sendInterest	NFD/daemon/face/datagram-face.hpp	/^DatagramFace<T, U>::sendInterest(const Interest& interest)$/;"	f	class:nfd::DatagramFace
sendInterest	NFD/daemon/face/ethernet-face.cpp	/^EthernetFace::sendInterest(const Interest& interest)$/;"	f	class:nfd::EthernetFace
sendInterest	NFD/daemon/face/multicast-udp-face.cpp	/^MulticastUdpFace::sendInterest(const Interest& interest)$/;"	f	class:nfd::MulticastUdpFace
sendInterest	NFD/daemon/face/null-face.cpp	/^NullFace::sendInterest(const Interest& interest)$/;"	f	class:nfd::NullFace
sendInterest	NFD/daemon/face/stream-face.hpp	/^StreamFace<T, U>::sendInterest(const Interest& interest)$/;"	f	class:nfd::StreamFace
sendInterest	NFD/daemon/face/websocket-face.cpp	/^WebSocketFace::sendInterest(const Interest& interest)$/;"	f	class:nfd::WebSocketFace
sendInterest	NFD/daemon/fw/strategy.hpp	/^Strategy::sendInterest(shared_ptr<pit::Entry> pitEntry,$/;"	f	class:nfd::fw::Strategy
sendInterest	NFD/daemon/mgmt/internal-face.cpp	/^InternalFace::sendInterest(const Interest& interest)$/;"	f	class:nfd::InternalFace
sendInterest	NFD/tests/daemon/fw/strategy-tester.hpp	/^StrategyTester<S>::sendInterest(shared_ptr<pit::Entry> pitEntry,$/;"	f	class:nfd::fw::tests::StrategyTester
sendInterest	model/ndn-app-face.cpp	/^AppFace::sendInterest(const Interest& interest)$/;"	f	class:ns3::ndn::AppFace
sendInterest	model/ndn-net-device-face.cpp	/^NetDeviceFace::sendInterest(const Interest& interest)$/;"	f	class:ns3::ndn::NetDeviceFace
sendInterest	ndn-cxx/src/detail/face-impl.hpp	/^    sendInterest(const Interest& interest)$/;"	f	class:ndn::Face::Impl::NfdFace
sendNack	NFD/daemon/mgmt/manager-base.cpp	/^ManagerBase::sendNack(const Name& name)$/;"	f	class:nfd::ManagerBase
sendNextInterest	ndn-cxx/src/util/notification-subscriber.hpp	/^  sendNextInterest()$/;"	f	class:ndn::util::NotificationSubscriber
sendPacket	NFD/daemon/face/ethernet-face.cpp	/^EthernetFace::sendPacket(const ndn::Block& block)$/;"	f	class:nfd::EthernetFace
sendPing	NFD/daemon/face/websocket-channel.cpp	/^WebSocketChannel::sendPing(websocketpp::connection_hdl hdl)$/;"	f	class:nfd::WebSocketChannel
sendRemoveNextHopUpdate	NFD/rib/fib-updater.cpp	/^FibUpdater::sendRemoveNextHopUpdate(const FibUpdate& update,$/;"	f	class:nfd::rib::FibUpdater
sendResponse	NFD/daemon/mgmt/manager-base.cpp	/^ManagerBase::sendResponse(const Name& name,$/;"	f	class:nfd::ManagerBase
sendResponse	NFD/rib/rib-manager.cpp	/^RibManager::sendResponse(const Name& name,$/;"	f	class:nfd::rib::RibManager
sendSuccessResponse	NFD/rib/rib-manager.cpp	/^RibManager::sendSuccessResponse(const shared_ptr<const Interest>& request,$/;"	f	class:nfd::rib::RibManager
sendToLastNexthop	NFD/daemon/fw/access-strategy.cpp	/^AccessStrategy::sendToLastNexthop(const Face& inFace, shared_ptr<pit::Entry> pitEntry, MtInfo& mi,$/;"	f	class:nfd::fw::AccessStrategy
sendUpdates	NFD/rib/fib-updater.cpp	/^FibUpdater::sendUpdates(const FibUpdateList& updates,$/;"	f	class:nfd::rib::FibUpdater
sendUpdatesForBatchFaceId	NFD/rib/fib-updater.cpp	/^FibUpdater::sendUpdatesForBatchFaceId(const FibUpdateSuccessCallback& onSuccess,$/;"	f	class:nfd::rib::FibUpdater
sendUpdatesForNonBatchFaceId	NFD/rib/fib-updater.cpp	/^FibUpdater::sendUpdatesForNonBatchFaceId(const FibUpdateSuccessCallback& onSuccess,$/;"	f	class:nfd::rib::FibUpdater
send_close_ack	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^lib::error_code connection<config>::send_close_ack(close::status::value code,$/;"	f	class:websocketpp::connection
send_close_frame	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^lib::error_code connection<config>::send_close_frame(close::status::value code,$/;"	f	class:websocketpp::connection
send_http_request	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::send_http_request() {$/;"	f	class:websocketpp::connection
send_http_response	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::send_http_response(lib::error_code const & ec) {$/;"	f	class:websocketpp::connection
send_http_response_error	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::send_http_response_error(lib::error_code const & ec) {$/;"	f	class:websocketpp::connection
send_queue_full	NFD/websocketpp/websocketpp/error.hpp	/^    send_queue_full,$/;"	e	enum:websocketpp::error::value
sentData	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^  std::vector<Data> sentData;$/;"	m	class:ndn::mgmt::tests::StatusDatasetContextFixture	file:
sentDatas	ndn-cxx/src/util/dummy-client-face.hpp	/^  std::vector<Data> sentDatas;$/;"	m	class:ndn::util::DummyClientFace
sentInterests	ndn-cxx/src/util/dummy-client-face.hpp	/^  std::vector<Interest> sentInterests;$/;"	m	class:ndn::util::DummyClientFace
seq	NFD/daemon/face/ndnlp-data.hpp	/^  uint64_t seq;$/;"	m	class:nfd::ndnlp::NdnlpData
seq	apps/ndn-consumer.hpp	/^    uint32_t seq;$/;"	m	struct:ns3::ndn::Consumer::SeqTimeout
seq	utils/ndn-rtt-estimator.hpp	/^  SequenceNumber32 seq; \/\/ First sequence number in packet sent$/;"	m	class:ns3::ndn::RttHistory
server	NFD/websocketpp/docs/simple_broadcast_server.cpp	/^typedef websocketpp::server<websocketpp::config::asio> server;$/;"	t	file:
server	NFD/websocketpp/docs/simple_count_server_thread.cpp	/^typedef websocketpp::server<websocketpp::config::asio> server;$/;"	t	file:
server	NFD/websocketpp/examples/associative_storage/associative_storage.cpp	/^typedef websocketpp::server<websocketpp::config::asio> server;$/;"	t	file:
server	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^typedef websocketpp::server<websocketpp::config::asio> server;$/;"	t	file:
server	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^typedef websocketpp::server<debug_custom> server;$/;"	t	file:
server	NFD/websocketpp/examples/dev/main.cpp	/^typedef websocketpp::server<websocketpp::config::core> server;$/;"	t	file:
server	NFD/websocketpp/examples/echo_server/echo_server.cpp	/^typedef websocketpp::server<websocketpp::config::asio> server;$/;"	t	file:
server	NFD/websocketpp/examples/echo_server_tls/echo_server_tls.cpp	/^typedef websocketpp::server<websocketpp::config::asio_tls> server;$/;"	t	file:
server	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^typedef websocketpp::server<custom_config> server;$/;"	t	file:
server	NFD/websocketpp/examples/handler_switch/handler_switch.cpp	/^typedef websocketpp::server<websocketpp::config::asio> server;$/;"	t	file:
server	NFD/websocketpp/examples/iostream_server/iostream_server.cpp	/^typedef websocketpp::server<websocketpp::config::core> server;$/;"	t	file:
server	NFD/websocketpp/examples/print_server/print_server.cpp	/^typedef websocketpp::server<websocketpp::config::asio> server;$/;"	t	file:
server	NFD/websocketpp/examples/simple_broadcast_server/simple_broadcast_server.cpp	/^typedef websocketpp::server<websocketpp::config::asio> server;$/;"	t	file:
server	NFD/websocketpp/examples/subprotocol_server/subprotocol_server.cpp	/^typedef websocketpp::server<websocketpp::config::asio> server;$/;"	t	file:
server	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^    typedef websocketpp::server<websocketpp::config::asio> server;$/;"	t	class:telemetry_server	file:
server	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^typedef websocketpp::server<testee_config> server;$/;"	t	file:
server	NFD/websocketpp/test/connection/connection_tu2.hpp	/^typedef websocketpp::server<websocketpp::config::core> server;$/;"	t
server	NFD/websocketpp/test/roles/server.cpp	/^typedef websocketpp::server<websocketpp::config::core> server;$/;"	t	file:
server	NFD/websocketpp/test/transport/integration.cpp	/^typedef websocketpp::server<config> server;$/;"	t	file:
server	NFD/websocketpp/websocketpp/roles/server_endpoint.hpp	/^    explicit server() : endpoint_type(true)$/;"	f	class:websocketpp::server
server	NFD/websocketpp/websocketpp/roles/server_endpoint.hpp	/^class server : public endpoint<connection<config>,config> {$/;"	c	namespace:websocketpp
server_only	NFD/websocketpp/websocketpp/error.hpp	/^    server_only,$/;"	e	enum:websocketpp::error::value
server_plain	NFD/websocketpp/examples/echo_server_both/echo_server_both.cpp	/^typedef websocketpp::server<websocketpp::config::asio> server_plain;$/;"	t	file:
server_tls	NFD/websocketpp/examples/echo_server_both/echo_server_both.cpp	/^typedef websocketpp::server<websocketpp::config::asio_tls> server_tls;$/;"	t	file:
server_tls	NFD/websocketpp/test/transport/integration.cpp	/^typedef websocketpp::server<config_tls> server_tls;$/;"	t	file:
service_restart	NFD/websocketpp/websocketpp/close.hpp	/^    static value const service_restart = 1012;$/;"	m	namespace:websocketpp::close::status
service_unavailable	NFD/websocketpp/websocketpp/http/constants.hpp	/^            service_unavailable = 503,$/;"	e	enum:websocketpp::http::status_code::value
session	NFD/websocketpp/websocketpp/connection.hpp	/^namespace session {$/;"	n	namespace:websocketpp
sessionid	NFD/websocketpp/examples/associative_storage/associative_storage.cpp	/^    int sessionid;$/;"	m	struct:connection_data	file:
sessionid	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    int sessionid;$/;"	m	struct:connection_data	file:
set	NFD/daemon/face/face-counters.hpp	/^  set(rep value)$/;"	f	class:nfd::ByteCounter
set	NFD/daemon/face/face-counters.hpp	/^  set(rep value)$/;"	f	class:nfd::PacketCounter
set	ndn-cxx/src/destination-flag.cpp	/^DestinationFlag::set()$/;"	f	class:ndn::DestinationFlag
set	ndn-cxx/src/lp/packet.hpp	/^  set(const typename FIELD::ValueType& value)$/;"	f	class:ndn::lp::Packet
set	ndn-cxx/src/name.cpp	/^Name::set(const char* uri)$/;"	f	class:ndn::Name
set	ndn-cxx/src/name.cpp	/^Name::set(const std::string& uri)$/;"	f	class:ndn::Name
set	ndn-cxx/src/security/additional-description.cpp	/^AdditionalDescription::set(const std::string& key, const std::string& value)$/;"	f	class:ndn::security::AdditionalDescription
set	ndn-cxx/src/security/public-key.hpp	/^  set(const uint8_t* keyDerBuf, size_t keyDerSize)$/;"	f	class:ndn::PublicKey
setAction	NFD/rib/rib-update.hpp	/^RibUpdate::setAction(Action action)$/;"	f	class:nfd::rib::RibUpdate
setAppMetaInfo	ndn-cxx/src/meta-info.cpp	/^MetaInfo::setAppMetaInfo(const std::list<Block>& info)$/;"	f	class:ndn::MetaInfo
setBody	ndn-cxx/src/mgmt/control-response.hpp	/^ControlResponse::setBody(const Block& body)$/;"	f	class:ndn::mgmt::ControlResponse
setCachingPolicy	ndn-cxx/src/data.cpp	/^Data::setCachingPolicy(nfd::LocalControlHeader::CachingPolicy cachingPolicy)$/;"	f	class:ndn::Data
setCachingPolicy	ndn-cxx/src/management/nfd-local-control-header.hpp	/^  setCachingPolicy(CachingPolicy cachingPolicy)$/;"	f	class:ndn::nfd::LocalControlHeader
setCapacity	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::setCapacity(size_t capacity)$/;"	f	class:ndn::util::InMemoryStorage
setChildSelector	ndn-cxx/src/interest.hpp	/^  setChildSelector(int childSelector)$/;"	f	class:ndn::Interest
setChildSelector	ndn-cxx/src/selectors.cpp	/^Selectors::setChildSelector(int childSelector)$/;"	f	class:ndn::Selectors
setCode	ndn-cxx/src/mgmt/control-response.hpp	/^ControlResponse::setCode(uint32_t code)$/;"	f	class:ndn::mgmt::ControlResponse
setConfigFile	NFD/daemon/mgmt/command-validator.cpp	/^CommandValidator::setConfigFile(ConfigFile& configFile)$/;"	f	class:nfd::CommandValidator
setConfigFile	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::setConfigFile(ConfigFile& configFile)$/;"	f	class:nfd::FaceManager
setConfigFile	NFD/daemon/mgmt/general-config-section.cpp	/^setConfigFile(ConfigFile& configFile)$/;"	f	namespace:nfd::general
setConfigFile	NFD/daemon/mgmt/tables-config-section.cpp	/^TablesConfigSection::setConfigFile(ConfigFile& configFile)$/;"	f	class:nfd::TablesConfigSection
setConfigFile	NFD/rib/rib-manager.cpp	/^RibManager::setConfigFile(ConfigFile& configFile)$/;"	f	class:nfd::rib::RibManager
setContent	ndn-cxx/src/data.cpp	/^Data::setContent(const Block& content)$/;"	f	class:ndn::Data
setContent	ndn-cxx/src/data.cpp	/^Data::setContent(const ConstBufferPtr& contentValue)$/;"	f	class:ndn::Data
setContent	ndn-cxx/src/data.cpp	/^Data::setContent(const uint8_t* content, size_t contentLength)$/;"	f	class:ndn::Data
setContentType	ndn-cxx/src/data.cpp	/^Data::setContentType(uint32_t type)$/;"	f	class:ndn::Data
setCost	NFD/daemon/table/fib-nexthop.cpp	/^NextHop::setCost(uint64_t cost)$/;"	f	class:nfd::fib::NextHop
setCost	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  setCost(uint64_t cost)$/;"	f	class:ndn::nfd::ControlParameters
setCost	ndn-cxx/src/management/nfd-fib-entry.cpp	/^NextHopRecord::setCost(uint64_t cost)$/;"	f	class:ndn::nfd::NextHopRecord
setCost	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  setCost(uint64_t cost)$/;"	f	class:ndn::nfd::Route
setCounters	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^  setCounters(PacketCounter::rep nInInterests,$/;"	f	class:nfd::tests::TestCountersFace
setCs	NFD/daemon/table/cs-policy.hpp	/^Policy::setCs(Cs *cs)$/;"	f	class:nfd::cs::Policy
setCsFromNdnSim	NFD/daemon/fw/forwarder.hpp	/^Forwarder::setCsFromNdnSim(ns3::Ptr<ns3::ndn::ContentStore> cs)$/;"	f	class:nfd::Forwarder
setCsSize	helper/ndn-stack-helper.cpp	/^StackHelper::setCsSize(size_t maxSize)$/;"	f	class:ns3::ndn::StackHelper
setCurrentTimestamp	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setCurrentTimestamp(const time::system_clock::TimePoint& currentTimestamp)$/;"	f	class:ndn::nfd::ForwarderStatus
setCustomClocks	ndn-cxx/src/util/time.cpp	/^setCustomClocks(shared_ptr<CustomSteadyClock> steadyClock,$/;"	f	namespace:ndn::time
setCustomNdnCxxClocks	helper/ndn-stack-helper.cpp	/^StackHelper::setCustomNdnCxxClocks()$/;"	f	class:ns3::ndn::StackHelper
setData	NFD/daemon/table/cs-entry.cpp	/^Entry::setData(shared_ptr<const Data> data, bool isUnsolicited)$/;"	f	class:nfd::cs::Entry
setData	NFD/daemon/table/cs-entry.hpp	/^  setData(const Data& data, bool isUnsolicited)$/;"	f	class:nfd::cs::Entry
setData	ndn-cxx/src/util/in-memory-storage-entry.cpp	/^InMemoryStorageEntry::setData(const Data& data)$/;"	f	class:ndn::util::InMemoryStorageEntry
setDebugNetworkInterfaces	NFD/core/network-interface.cpp	/^setDebugNetworkInterfaces(shared_ptr<std::vector<NetworkInterfaceInfo>> interfaces)$/;"	f	namespace:nfd
setDefaultCertificate	ndn-cxx/src/security/key.cpp	/^Key::setDefaultCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::security::Key
setDefaultCertificate	ndn-cxx/src/security/key.cpp	/^Key::setDefaultCertificate(const Name& certName)$/;"	f	class:ndn::security::Key
setDefaultCertificateInternal	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::setDefaultCertificateInternal()$/;"	f	class:ndn::security::KeyChain
setDefaultCertificateNameForKey	ndn-cxx/src/security/key-chain.hpp	/^  setDefaultCertificateNameForKey(const Name& certificateName)$/;"	f	class:ndn::security::KeyChain
setDefaultCertificateNameForKey	ndn-cxx/src/security/sec-public-info.cpp	/^SecPublicInfo::setDefaultCertificateNameForKey(const Name& certificateName)$/;"	f	class:ndn::SecPublicInfo
setDefaultCertificateNameForKeyInternal	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::setDefaultCertificateNameForKeyInternal(const Name& certificateName)$/;"	f	class:ndn::SecPublicInfoSqlite3
setDefaultCertificateNameForKeyInternal	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::setDefaultCertificateNameForKeyInternal(const Name& certificateName)$/;"	f	class:ndn::security::DummyPublicInfo
setDefaultCertificateNameForKeyInternal	utils/dummy-keychain.cpp	/^DummyPublicInfo::setDefaultCertificateNameForKeyInternal(const Name& certificateName)$/;"	f	class:ndn::security::DummyPublicInfo
setDefaultCertificateOfKey	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::setDefaultCertificateOfKey(const Name& identity, const name::Component& keyId, const Name& certName)$/;"	f	class:ndn::security::PibMemory
setDefaultCertificateOfKey	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::setDefaultCertificateOfKey(const Name& identity, const name::Component& keyId,$/;"	f	class:ndn::security::PibSqlite3
setDefaultIdentity	ndn-cxx/src/security/key-chain.hpp	/^  setDefaultIdentity(const Name& identityName)$/;"	f	class:ndn::security::KeyChain
setDefaultIdentity	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::setDefaultIdentity(const Name& identityName)$/;"	f	class:ndn::security::PibMemory
setDefaultIdentity	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::setDefaultIdentity(const Name& identityName)$/;"	f	class:ndn::security::PibSqlite3
setDefaultIdentity	ndn-cxx/src/security/pib.cpp	/^Pib::setDefaultIdentity(const Name& identityName)$/;"	f	class:ndn::security::Pib
setDefaultIdentity	ndn-cxx/src/security/sec-public-info.cpp	/^SecPublicInfo::setDefaultIdentity(const Name& identityName)$/;"	f	class:ndn::SecPublicInfo
setDefaultIdentityInternal	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::setDefaultIdentityInternal(const Name& identityName)$/;"	f	class:ndn::SecPublicInfoSqlite3
setDefaultIdentityInternal	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::setDefaultIdentityInternal(const Name& identityName)$/;"	f	class:ndn::security::DummyPublicInfo
setDefaultIdentityInternal	utils/dummy-keychain.cpp	/^DummyPublicInfo::setDefaultIdentityInternal(const Name& identityName)$/;"	f	class:ndn::security::DummyPublicInfo
setDefaultKey	ndn-cxx/src/security/identity.cpp	/^Identity::setDefaultKey(const PublicKey& publicKey, const name::Component& keyId)$/;"	f	class:ndn::security::Identity
setDefaultKey	ndn-cxx/src/security/identity.cpp	/^Identity::setDefaultKey(const name::Component& keyId)$/;"	f	class:ndn::security::Identity
setDefaultKeyNameForIdentity	ndn-cxx/src/security/key-chain.hpp	/^  setDefaultKeyNameForIdentity(const Name& keyName)$/;"	f	class:ndn::security::KeyChain
setDefaultKeyNameForIdentity	ndn-cxx/src/security/sec-public-info.cpp	/^SecPublicInfo::setDefaultKeyNameForIdentity(const Name& keyName)$/;"	f	class:ndn::SecPublicInfo
setDefaultKeyNameForIdentityInternal	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::setDefaultKeyNameForIdentityInternal(const Name& keyName)$/;"	f	class:ndn::SecPublicInfoSqlite3
setDefaultKeyNameForIdentityInternal	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::setDefaultKeyNameForIdentityInternal(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
setDefaultKeyNameForIdentityInternal	utils/dummy-keychain.cpp	/^DummyPublicInfo::setDefaultKeyNameForIdentityInternal(const Name& keyName)$/;"	f	class:ndn::security::DummyPublicInfo
setDefaultKeyOfIdentity	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::setDefaultKeyOfIdentity(const Name& identity, const name::Component& keyId)$/;"	f	class:ndn::security::PibMemory
setDefaultKeyOfIdentity	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::setDefaultKeyOfIdentity(const Name& identity, const name::Component& keyId)$/;"	f	class:ndn::security::PibSqlite3
setDefaultStrategy	NFD/daemon/table/strategy-choice.cpp	/^StrategyChoice::setDefaultStrategy(shared_ptr<Strategy> strategy)$/;"	f	class:nfd::StrategyChoice
setDefaultValue	ndn-cxx/tools/ndnsec/util.hpp	/^  setDefaultValue(const T& t)$/;"	f	class:AccumulatorType
setDeleter	ndn-cxx/src/detail/pending-interest.hpp	/^  setDeleter(const std::function<void()>& deleter)$/;"	f	class:ndn::PendingInterest
setDescription	NFD/daemon/face/face.hpp	/^Face::setDescription(const std::string& description)$/;"	f	class:nfd::Face
setDestinationFlag	NFD/daemon/table/pit-entry.cpp	/^Entry::setDestinationFlag()$/;"	f	class:nfd::pit::Entry
setDestinationFlag	ndn-cxx/src/interest.hpp	/^  setDestinationFlag()$/;"	f	class:ndn::Interest
setDigestAlgorithm	ndn-cxx/src/security/signing-info.hpp	/^  setDigestAlgorithm(const DigestAlgorithm& algorithm)$/;"	f	class:ndn::security::SigningInfo
setErrorRate	helper/ndn-link-control-helper.cpp	/^LinkControlHelper::setErrorRate(Ptr<Node> node1, Ptr<Node> node2, double errorRate)$/;"	f	class:ns3::ndn::LinkControlHelper
setExclude	ndn-cxx/src/interest.hpp	/^  setExclude(const Exclude& exclude)$/;"	f	class:ndn::Interest
setExclude	ndn-cxx/src/selectors.cpp	/^Selectors::setExclude(const Exclude& exclude)$/;"	f	class:ndn::Selectors
setExpirationEvent	NFD/rib/route.hpp	/^  setExpirationEvent(const scheduler::EventId eid)$/;"	f	class:nfd::rib::Route
setExpirationPeriod	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  setExpirationPeriod(const time::milliseconds& expirationPeriod)$/;"	f	class:ndn::nfd::ControlParameters
setExpirationPeriod	ndn-cxx/src/management/nfd-face-status.cpp	/^FaceStatus::setExpirationPeriod(const time::milliseconds& expirationPeriod)$/;"	f	class:ndn::nfd::FaceStatus
setExpirationPeriod	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  setExpirationPeriod(const time::milliseconds& expirationPeriod)$/;"	f	class:ndn::nfd::Route
setExpiry	ndn-cxx/src/mgmt/status-dataset-context.cpp	/^StatusDatasetContext::setExpiry(const time::milliseconds& expiry)$/;"	f	class:ndn::mgmt::StatusDatasetContext
setFaceId	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  setFaceId(uint64_t faceId)$/;"	f	class:ndn::nfd::ControlParameters
setFaceId	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setFaceId(uint64_t faceId)$/;"	f	class:ndn::nfd::FaceQueryFilter
setFaceId	ndn-cxx/src/management/nfd-face-traits.hpp	/^  setFaceId(uint64_t faceId)$/;"	f	class:ndn::nfd::FaceTraits
setFaceId	ndn-cxx/src/management/nfd-fib-entry.cpp	/^NextHopRecord::setFaceId(uint64_t faceId)$/;"	f	class:ndn::nfd::NextHopRecord
setFaceId	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  setFaceId(uint64_t faceId)$/;"	f	class:ndn::nfd::Route
setFacePersistency	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setFacePersistency(FacePersistency facePersistency)$/;"	f	class:ndn::nfd::FaceQueryFilter
setFacePersistency	ndn-cxx/src/management/nfd-face-traits.hpp	/^  setFacePersistency(FacePersistency facePersistency)$/;"	f	class:ndn::nfd::FaceTraits
setFaceScope	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setFaceScope(FaceScope faceScope)$/;"	f	class:ndn::nfd::FaceQueryFilter
setFaceScope	ndn-cxx/src/management/nfd-face-traits.hpp	/^  setFaceScope(FaceScope faceScope)$/;"	f	class:ndn::nfd::FaceTraits
setFibEntry	NFD/daemon/table/name-tree-entry.cpp	/^Entry::setFibEntry(shared_ptr<fib::Entry> fibEntry)$/;"	f	class:nfd::name_tree::Entry
setFibUpdater	NFD/rib/rib.cpp	/^Rib::setFibUpdater(FibUpdater* updater)$/;"	f	class:nfd::rib::Rib
setFinalBlockId	ndn-cxx/src/data.cpp	/^Data::setFinalBlockId(const name::Component& finalBlockId)$/;"	f	class:ndn::Data
setFinalBlockId	ndn-cxx/src/meta-info.cpp	/^MetaInfo::setFinalBlockId(const name::Component& finalBlockId)$/;"	f	class:ndn::MetaInfo
setFlags	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  setFlags(uint64_t flags)$/;"	f	class:ndn::nfd::ControlParameters
setFlags	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  setFlags(uint64_t flags)$/;"	f	class:ndn::nfd::Route
setForceData	NFD/tools/ndn-tlv-poke.cpp	/^  setForceData()$/;"	f	class:ndntlvpoke::NdnTlvPoke
setFreshnessPeriod	NFD/tools/ndn-tlv-poke.cpp	/^  setFreshnessPeriod(int freshnessPeriod)$/;"	f	class:ndntlvpoke::NdnTlvPoke
setFreshnessPeriod	ndn-cxx/src/data.cpp	/^Data::setFreshnessPeriod(const time::milliseconds& freshnessPeriod)$/;"	f	class:ndn::Data
setFreshnessPeriod	ndn-cxx/src/meta-info.cpp	/^MetaInfo::setFreshnessPeriod(const time::milliseconds& freshnessPeriod)$/;"	f	class:ndn::MetaInfo
setHash	NFD/daemon/table/name-tree-entry.hpp	/^Entry::setHash(size_t hash)$/;"	f	class:nfd::name_tree::Entry
setHeader	ndn-cxx/src/lp/nack.hpp	/^  setHeader(NackHeader&& header)$/;"	f	class:ndn::lp::Nack
setHeader	ndn-cxx/src/lp/nack.hpp	/^  setHeader(const NackHeader& header)$/;"	f	class:ndn::lp::Nack
setId	NFD/daemon/face/face.hpp	/^Face::setId(FaceId faceId)$/;"	f	class:nfd::Face
setIdentityName	NFD/tools/ndn-tlv-poke.cpp	/^  setIdentityName(char* identityName)$/;"	f	class:ndntlvpoke::NdnTlvPoke
setInTerminal	ndn-cxx/src/security/key-chain.hpp	/^  setInTerminal(bool inTerminal)$/;"	f	class:ndn::security::KeyChain
setInTerminal	ndn-cxx/src/security/sec-tpm-file.hpp	/^  setInTerminal(bool inTerminal)$/;"	f	class:ndn::SecTpmFile
setInTerminal	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::setInTerminal(bool inTerminal)$/;"	f	class:ndn::SecTpmOsx
setInTerminal	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::setInTerminal(bool inTerminal)$/;"	f	class:ndn::security::DummyTpm
setInTerminal	utils/dummy-keychain.cpp	/^DummyTpm::setInTerminal(bool inTerminal)$/;"	f	class:ndn::security::DummyTpm
setIncomingFaceId	ndn-cxx/src/data.cpp	/^Data::setIncomingFaceId(uint64_t incomingFaceId)$/;"	f	class:ndn::Data
setIncomingFaceId	ndn-cxx/src/interest.hpp	/^  setIncomingFaceId(uint64_t incomingFaceId)$/;"	f	class:ndn::Interest
setIncomingFaceId	ndn-cxx/src/management/nfd-local-control-header.hpp	/^  setIncomingFaceId(uint64_t incomingFaceId)$/;"	f	class:ndn::nfd::LocalControlHeader
setInfo	ndn-cxx/src/signature.cpp	/^Signature::setInfo(const Block& info)$/;"	f	class:ndn::Signature
setInfo	ndn-cxx/src/signature.hpp	/^  setInfo(const SignatureInfo& info)$/;"	f	class:ndn::Signature
setIntegerList	ndn-cxx/src/encoding/oid.hpp	/^  setIntegerList(const std::vector<int>& value)$/;"	f	class:ndn::OID
setInterestFilter	NFD/daemon/mgmt/internal-face.cpp	/^InternalFace::setInterestFilter(const Name& filter,$/;"	f	class:nfd::InternalFace
setInterestFilter	ndn-cxx/src/face.cpp	/^Face::setInterestFilter(const InterestFilter& interestFilter,$/;"	f	class:ndn::Face
setInterestLifetime	NFD/tools/ndn-tlv-peek.cpp	/^  setInterestLifetime(int interestLifetime)$/;"	f	class:ndntlvpeek::NdnTlvPeek
setInterestLifetime	ndn-cxx/src/interest.hpp	/^  setInterestLifetime(const time::milliseconds& interestLifetime)$/;"	f	class:ndn::Interest
setInterval	ndn-cxx/tools/ndnsec/util.hpp	/^  setInterval(const T& t) {$/;"	f	class:AccumulatorType
setKeyDigest	ndn-cxx/src/key-locator.cpp	/^KeyLocator::setKeyDigest(const Block& keyDigest)$/;"	f	class:ndn::KeyLocator
setKeyDigest	ndn-cxx/src/key-locator.cpp	/^KeyLocator::setKeyDigest(const ConstBufferPtr& keyDigest)$/;"	f	class:ndn::KeyLocator
setKeyLocator	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::setKeyLocator(const KeyLocator& keyLocator)$/;"	f	class:ndn::SignatureInfo
setKeyLocator	ndn-cxx/src/signature.hpp	/^  setKeyLocator(const KeyLocator& keyLocator)$/;"	f	class:ndn::Signature
setKeySize	ndn-cxx/src/security/key-params.hpp	/^  setKeySize(uint32_t size)$/;"	f	class:ndn::SimplePublicKeyParams
setKeySize	ndn-cxx/src/security/key-params.hpp	/^  setKeySize(uint32_t size)$/;"	f	class:ndn::SimpleSymmetricKeyParams
setKind	ndn-cxx/src/management/nfd-face-event-notification.cpp	/^FaceEventNotification::setKind(FaceEventKind kind)$/;"	f	class:ndn::nfd::FaceEventNotification
setLastAsFinalBlockId	NFD/tools/ndn-tlv-poke.cpp	/^  setLastAsFinalBlockId()$/;"	f	class:ndntlvpoke::NdnTlvPoke
setLastRefresh	ndn-cxx/src/security/validator-config.hpp	/^    setLastRefresh(const time::system_clock::TimePoint& lastRefresh)$/;"	f	class:ndn::ValidatorConfig::DynamicTrustAnchorContainer
setLimit	NFD/daemon/table/cs-policy.cpp	/^Policy::setLimit(size_t nMaxEntries)$/;"	f	class:nfd::cs::Policy
setLimit	NFD/daemon/table/cs.cpp	/^Cs::setLimit(size_t nMaxPackets)$/;"	f	class:nfd::cs::Cs
setLink	ndn-cxx/src/interest.cpp	/^Interest::setLink(const Block& link)$/;"	f	class:ndn::Interest
setLinkType	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setLinkType(LinkType linkType)$/;"	f	class:ndn::nfd::FaceQueryFilter
setLinkType	ndn-cxx/src/management/nfd-face-traits.hpp	/^  setLinkType(LinkType linkType)$/;"	f	class:ndn::nfd::FaceTraits
setLocalControlFeature	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  setLocalControlFeature(LocalControlFeature localControlFeature)$/;"	f	class:ndn::nfd::ControlParameters
setLocalControlHeaderFeature	NFD/daemon/face/local-face.hpp	/^LocalFace::setLocalControlHeaderFeature(LocalControlFeature feature, bool enabled\/* = true*\/)$/;"	f	class:nfd::LocalFace
setLocalUri	ndn-cxx/src/management/nfd-channel-status.cpp	/^ChannelStatus::setLocalUri(const std::string localUri)$/;"	f	class:ndn::nfd::ChannelStatus
setLocalUri	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setLocalUri(const std::string& localUri)$/;"	f	class:ndn::nfd::FaceQueryFilter
setLocalUri	ndn-cxx/src/management/nfd-face-traits.hpp	/^  setLocalUri(const std::string& localUri)$/;"	f	class:ndn::nfd::FaceTraits
setMatchResult	ndn-cxx/src/util/regex/regex-pseudo-matcher.hpp	/^RegexPseudoMatcher::setMatchResult(const std::string& str)$/;"	f	class:ndn::RegexPseudoMatcher
setMaxSuffixComponents	NFD/tools/ndn-tlv-peek.cpp	/^  setMaxSuffixComponents(int maxSuffixComponents)$/;"	f	class:ndntlvpeek::NdnTlvPeek
setMaxSuffixComponents	ndn-cxx/src/interest.hpp	/^  setMaxSuffixComponents(int maxSuffixComponents)$/;"	f	class:ndn::Interest
setMaxSuffixComponents	ndn-cxx/src/selectors.cpp	/^Selectors::setMaxSuffixComponents(int maxSuffixComponents)$/;"	f	class:ndn::Selectors
setMeasurementsEntry	NFD/daemon/table/name-tree-entry.cpp	/^Entry::setMeasurementsEntry(shared_ptr<measurements::Entry> measurementsEntry)$/;"	f	class:nfd::name_tree::Entry
setMessage	NFD/tests/core/simple-notification.hpp	/^  setMessage(const std::string& message)$/;"	f	class:nfd::tests::SimpleNotification
setMessage	ndn-cxx/tests/unit-tests/util/simple-notification.hpp	/^  setMessage(const std::string& message)$/;"	f	class:ndn::util::tests::SimpleNotification
setMetaInfo	ndn-cxx/src/data.cpp	/^Data::setMetaInfo(const MetaInfo& metaInfo)$/;"	f	class:ndn::Data
setMetric	NFD/daemon/face/face.hpp	/^Face::setMetric(uint64_t metric)$/;"	f	class:nfd::Face
setMinSuffixComponents	NFD/tools/ndn-tlv-peek.cpp	/^  setMinSuffixComponents(int minSuffixComponents)$/;"	f	class:ndntlvpeek::NdnTlvPeek
setMinSuffixComponents	ndn-cxx/src/interest.hpp	/^  setMinSuffixComponents(int minSuffixComponents)$/;"	f	class:ndn::Interest
setMinSuffixComponents	ndn-cxx/src/selectors.cpp	/^Selectors::setMinSuffixComponents(int minSuffixComponents)$/;"	f	class:ndn::Selectors
setMustBeFresh	NFD/tools/ndn-tlv-peek.cpp	/^  setMustBeFresh()$/;"	f	class:ndntlvpeek::NdnTlvPeek
setMustBeFresh	ndn-cxx/src/interest.hpp	/^  setMustBeFresh(bool mustBeFresh)$/;"	f	class:ndn::Interest
setMustBeFresh	ndn-cxx/src/selectors.cpp	/^Selectors::setMustBeFresh(bool mustBeFresh)$/;"	f	class:ndn::Selectors
setNCsEntries	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNCsEntries(size_t nCsEntries)$/;"	f	class:ndn::nfd::ForwarderStatus
setNFibEntries	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNFibEntries(size_t nFibEntries)$/;"	f	class:ndn::nfd::ForwarderStatus
setNInBytes	ndn-cxx/src/management/nfd-face-status.cpp	/^FaceStatus::setNInBytes(uint64_t nInBytes)$/;"	f	class:ndn::nfd::FaceStatus
setNInDatas	ndn-cxx/src/management/nfd-face-status.cpp	/^FaceStatus::setNInDatas(uint64_t nInDatas)$/;"	f	class:ndn::nfd::FaceStatus
setNInDatas	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNInDatas(uint64_t nInDatas)$/;"	f	class:ndn::nfd::ForwarderStatus
setNInInterests	ndn-cxx/src/management/nfd-face-status.cpp	/^FaceStatus::setNInInterests(uint64_t nInInterests)$/;"	f	class:ndn::nfd::FaceStatus
setNInInterests	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNInInterests(uint64_t nInInterests)$/;"	f	class:ndn::nfd::ForwarderStatus
setNMeasurementsEntries	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNMeasurementsEntries(size_t nMeasurementsEntries)$/;"	f	class:ndn::nfd::ForwarderStatus
setNNameTreeEntries	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNNameTreeEntries(size_t nNameTreeEntries)$/;"	f	class:ndn::nfd::ForwarderStatus
setNOutBytes	ndn-cxx/src/management/nfd-face-status.cpp	/^FaceStatus::setNOutBytes(uint64_t nOutBytes)$/;"	f	class:ndn::nfd::FaceStatus
setNOutDatas	ndn-cxx/src/management/nfd-face-status.cpp	/^FaceStatus::setNOutDatas(uint64_t nOutDatas)$/;"	f	class:ndn::nfd::FaceStatus
setNOutDatas	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNOutDatas(uint64_t nOutDatas)$/;"	f	class:ndn::nfd::ForwarderStatus
setNOutInterests	ndn-cxx/src/management/nfd-face-status.cpp	/^FaceStatus::setNOutInterests(uint64_t nOutInterests)$/;"	f	class:ndn::nfd::FaceStatus
setNOutInterests	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNOutInterests(uint64_t nOutInterests)$/;"	f	class:ndn::nfd::ForwarderStatus
setNPitEntries	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNPitEntries(size_t nPitEntries)$/;"	f	class:ndn::nfd::ForwarderStatus
setName	NFD/rib/rib-entry.hpp	/^RibEntry::setName(const Name& prefix)$/;"	f	class:nfd::rib::RibEntry
setName	NFD/rib/rib-update.hpp	/^RibUpdate::setName(const Name& name)$/;"	f	class:nfd::rib::RibUpdate
setName	ndn-cxx/src/data.cpp	/^Data::setName(const Name& name)$/;"	f	class:ndn::Data
setName	ndn-cxx/src/interest.hpp	/^  setName(const Name& name)$/;"	f	class:ndn::Interest
setName	ndn-cxx/src/key-locator.cpp	/^KeyLocator::setName(const Name& name)$/;"	f	class:ndn::KeyLocator
setName	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  setName(const Name& name)$/;"	f	class:ndn::nfd::ControlParameters
setName	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  setName(const Name& prefix)$/;"	f	class:ndn::nfd::RibEntry
setName	ndn-cxx/src/management/nfd-strategy-choice.cpp	/^StrategyChoice::setName(const Name& name)$/;"	f	class:ndn::nfd::StrategyChoice
setName	ndn-cxx/src/security/identity-certificate.cpp	/^IdentityCertificate::setName(const Name& name)$/;"	f	class:ndn::IdentityCertificate
setNextHopFaceId	ndn-cxx/src/interest.hpp	/^  setNextHopFaceId(uint64_t nextHopFaceId)$/;"	f	class:ndn::Interest
setNextHopFaceId	ndn-cxx/src/management/nfd-local-control-header.hpp	/^  setNextHopFaceId(uint64_t nextHopFaceId)$/;"	f	class:ndn::nfd::LocalControlHeader
setNextHopRecords	ndn-cxx/src/management/nfd-fib-entry.hpp	/^  setNextHopRecords(const T& begin, const T& end)$/;"	f	class:ndn::nfd::FibEntry
setNfdVersion	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setNfdVersion(const std::string& nfdVersion)$/;"	f	class:ndn::nfd::ForwarderStatus
setNonce	ndn-cxx/src/interest.cpp	/^Interest::setNonce(uint32_t nonce)$/;"	f	class:ndn::Interest
setNotAfter	ndn-cxx/src/security/certificate.hpp	/^  setNotAfter(const time::system_clock::TimePoint& notAfter)$/;"	f	class:ndn::Certificate
setNotBefore	ndn-cxx/src/security/certificate.hpp	/^  setNotBefore(const time::system_clock::TimePoint& notBefore)$/;"	f	class:ndn::Certificate
setNow	ndn-cxx/src/util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::setNow(const nanoseconds& timeSinceEpoch)$/;"	f	class:ndn::time::UnitTestClock
setOrigin	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  setOrigin(uint64_t origin)$/;"	f	class:ndn::nfd::ControlParameters
setOrigin	ndn-cxx/src/management/nfd-rib-entry.hpp	/^  setOrigin(uint64_t origin)$/;"	f	class:ndn::nfd::Route
setPacketFilter	NFD/daemon/face/ethernet-face.cpp	/^EthernetFace::setPacketFilter(const char* filterString)$/;"	f	class:nfd::EthernetFace
setParent	NFD/daemon/table/name-tree-entry.hpp	/^Entry::setParent(shared_ptr<Entry> parent)$/;"	f	class:nfd::name_tree::Entry
setParent	NFD/rib/rib-entry.hpp	/^RibEntry::setParent(shared_ptr<RibEntry> parent)$/;"	f	class:nfd::rib::RibEntry
setPayloadOnly	NFD/tools/ndn-tlv-peek.cpp	/^  setPayloadOnly()$/;"	f	class:ndntlvpeek::NdnTlvPeek
setPeriod	ndn-cxx/src/security/validity-period.cpp	/^ValidityPeriod::setPeriod(const time::system_clock::TimePoint& notBefore,$/;"	f	class:ndn::security::ValidityPeriod
setPersistency	NFD/daemon/face/face.hpp	/^Face::setPersistency(ndn::nfd::FacePersistency persistency)$/;"	f	class:nfd::Face
setPingEventId	NFD/daemon/face/websocket-face.hpp	/^  setPingEventId(scheduler::EventId& id)$/;"	f	class:nfd::WebSocketFace
setPingInterval	NFD/daemon/face/websocket-channel.cpp	/^WebSocketChannel::setPingInterval(time::milliseconds interval)$/;"	f	class:nfd::WebSocketChannel
setPolicy	NFD/daemon/table/cs.cpp	/^Cs::setPolicy(unique_ptr<Policy> policy)$/;"	f	class:nfd::cs::Cs
setPolicy	ndn-cxx/src/lp/cache-policy.cpp	/^CachePolicy::setPolicy(CachePolicyType policy)$/;"	f	class:ndn::lp::CachePolicy
setPolicyImpl	NFD/daemon/table/cs.cpp	/^Cs::setPolicyImpl(unique_ptr<Policy>& policy)$/;"	f	class:nfd::cs::Cs
setPongTimeout	NFD/daemon/face/websocket-channel.cpp	/^WebSocketChannel::setPongTimeout(time::milliseconds timeout)$/;"	f	class:nfd::WebSocketChannel
setPrefix	ndn-cxx/src/management/nfd-command-options.cpp	/^CommandOptions::setPrefix(const Name& prefix)$/;"	f	class:ndn::nfd::CommandOptions
setPrefix	ndn-cxx/src/management/nfd-fib-entry.cpp	/^FibEntry::setPrefix(const Name& prefix)$/;"	f	class:ndn::nfd::FibEntry
setPrefix	ndn-cxx/src/mgmt/status-dataset-context.cpp	/^StatusDatasetContext::setPrefix(const Name& prefix)$/;"	f	class:ndn::mgmt::StatusDatasetContext
setPrefixName	NFD/tools/ndn-tlv-peek.cpp	/^  setPrefixName(char* prefixName)$/;"	f	class:ndntlvpeek::NdnTlvPeek
setPrefixName	NFD/tools/ndn-tlv-poke.cpp	/^  setPrefixName(char* prefixName)$/;"	f	class:ndntlvpoke::NdnTlvPoke
setPublicKeyInfo	ndn-cxx/src/security/certificate.hpp	/^  setPublicKeyInfo(const PublicKey& key)$/;"	f	class:ndn::Certificate
setPublicKeyName	ndn-cxx/src/security/identity-certificate.cpp	/^IdentityCertificate::setPublicKeyName()$/;"	f	class:ndn::IdentityCertificate
setPublisherPublicKeyLocator	ndn-cxx/src/interest.hpp	/^  setPublisherPublicKeyLocator(const KeyLocator& keyLocator)$/;"	f	class:ndn::Interest
setPublisherPublicKeyLocator	ndn-cxx/src/selectors.cpp	/^Selectors::setPublisherPublicKeyLocator(const KeyLocator& keyLocator)$/;"	f	class:ndn::Selectors
setRate	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^  setRate(size_t nNoncesPerLifetime)$/;"	f	class:nfd::tests::PeriodicalInsertionFixture
setReason	ndn-cxx/src/lp/nack-header.cpp	/^NackHeader::setReason(NackReason reason)$/;"	f	class:ndn::lp::NackHeader
setReason	ndn-cxx/src/lp/nack.hpp	/^  setReason(NackReason reason)$/;"	f	class:ndn::lp::Nack
setRemoteUri	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setRemoteUri(const std::string& remoteUri)$/;"	f	class:ndn::nfd::FaceQueryFilter
setRemoteUri	ndn-cxx/src/management/nfd-face-traits.hpp	/^  setRemoteUri(const std::string& remoteUri)$/;"	f	class:ndn::nfd::FaceTraits
setResponse	NFD/daemon/mgmt/manager-base.hpp	/^ManagerBase::setResponse(ControlResponse& response,$/;"	f	class:nfd::ManagerBase
setRightmostChildSelector	NFD/tools/ndn-tlv-peek.cpp	/^  setRightmostChildSelector()$/;"	f	class:ndntlvpeek::NdnTlvPeek
setRoute	NFD/rib/rib-update.hpp	/^RibUpdate::setRoute(const Route& route)$/;"	f	class:nfd::rib::RibUpdate
setSelectedDelegation	ndn-cxx/src/interest.cpp	/^Interest::setSelectedDelegation(const Name& delegationName)$/;"	f	class:ndn::Interest
setSelectedDelegation	ndn-cxx/src/interest.cpp	/^Interest::setSelectedDelegation(size_t delegationIndex)$/;"	f	class:ndn::Interest
setSelectors	ndn-cxx/src/interest.hpp	/^  setSelectors(const Selectors& selectors)$/;"	f	class:ndn::Interest
setSha256Signing	ndn-cxx/src/security/signing-info.cpp	/^SigningInfo::setSha256Signing()$/;"	f	class:ndn::security::SigningInfo
setSignature	ndn-cxx/src/data.cpp	/^Data::setSignature(const Signature& signature)$/;"	f	class:ndn::Data
setSignatureInfo	ndn-cxx/src/security/signing-info.cpp	/^SigningInfo::setSignatureInfo(const SignatureInfo& signatureInfo)$/;"	f	class:ndn::security::SigningInfo
setSignatureType	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::setSignatureType(tlv::SignatureTypeValue type)$/;"	f	class:ndn::SignatureInfo
setSignatureValue	ndn-cxx/src/data.cpp	/^Data::setSignatureValue(const Block& value)$/;"	f	class:ndn::Data
setSigningCertName	ndn-cxx/src/security/signing-info.cpp	/^SigningInfo::setSigningCertName(const Name& certificateName)$/;"	f	class:ndn::security::SigningInfo
setSigningCertificate	ndn-cxx/src/management/nfd-command-options.cpp	/^CommandOptions::setSigningCertificate(const IdentityCertificate& certificate)$/;"	f	class:ndn::nfd::CommandOptions
setSigningCertificate	ndn-cxx/src/management/nfd-command-options.cpp	/^CommandOptions::setSigningCertificate(const Name& certificateName)$/;"	f	class:ndn::nfd::CommandOptions
setSigningDefault	ndn-cxx/src/management/nfd-command-options.cpp	/^CommandOptions::setSigningDefault()$/;"	f	class:ndn::nfd::CommandOptions
setSigningIdentity	ndn-cxx/src/management/nfd-command-options.cpp	/^CommandOptions::setSigningIdentity(const Name& identityName)$/;"	f	class:ndn::nfd::CommandOptions
setSigningIdentity	ndn-cxx/src/security/signing-info.cpp	/^SigningInfo::setSigningIdentity(const Name& identity)$/;"	f	class:ndn::security::SigningInfo
setSigningInfo	ndn-cxx/src/management/nfd-command-options.cpp	/^CommandOptions::setSigningInfo(const security::SigningInfo& signingInfo)$/;"	f	class:ndn::nfd::CommandOptions
setSigningKeyName	ndn-cxx/src/security/signing-info.cpp	/^SigningInfo::setSigningKeyName(const Name& keyName)$/;"	f	class:ndn::security::SigningInfo
setStartTimestamp	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::setStartTimestamp(const time::system_clock::TimePoint& startTimestamp)$/;"	f	class:ndn::nfd::ForwarderStatus
setStragglerTimer	NFD/daemon/fw/forwarder.cpp	/^Forwarder::setStragglerTimer(shared_ptr<pit::Entry> pitEntry, bool isSatisfied,$/;"	f	class:nfd::Forwarder
setStrategy	NFD/daemon/mgmt/strategy-choice-manager.cpp	/^StrategyChoiceManager::setStrategy(ControlParameters& parameters,$/;"	f	class:nfd::StrategyChoiceManager
setStrategy	NFD/daemon/table/strategy-choice-entry.hpp	/^Entry::setStrategy(fw::Strategy& strategy)$/;"	f	class:nfd::strategy_choice::Entry
setStrategy	NFD/tests/daemon/fw/topology-tester.hpp	/^  setStrategy(TopologyNode i, Name prefix = Name("ndn:\/"))$/;"	f	class:nfd::fw::tests::TopologyTester
setStrategy	NFD/tools/ndn-autoconfig/multicast-discovery.cpp	/^MulticastDiscovery::setStrategy()$/;"	f	class:ndn::tools::autoconfig::MulticastDiscovery
setStrategy	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  setStrategy(const Name& strategy)$/;"	f	class:ndn::nfd::ControlParameters
setStrategy	ndn-cxx/src/management/nfd-strategy-choice.cpp	/^StrategyChoice::setStrategy(const Name& strategy)$/;"	f	class:ndn::nfd::StrategyChoice
setStrategyChoiceEntry	NFD/daemon/table/name-tree-entry.cpp	/^Entry::setStrategyChoiceEntry(shared_ptr<strategy_choice::Entry> strategyChoiceEntry)$/;"	f	class:nfd::name_tree::Entry
setStrategyInfo	NFD/daemon/table/strategy-info-host.hpp	/^StrategyInfoHost::setStrategyInfo(shared_ptr<T> item)$/;"	f	class:nfd::StrategyInfoHost
setTag	ndn-cxx/src/tag-host.hpp	/^TagHost::setTag(shared_ptr<T> tag) const$/;"	f	class:ndn::TagHost
setText	ndn-cxx/src/mgmt/control-response.hpp	/^ControlResponse::setText(const std::string& text)$/;"	f	class:ndn::mgmt::ControlResponse
setTimeout	NFD/tools/ndn-tlv-peek.cpp	/^  setTimeout(int timeout)$/;"	f	class:ndntlvpeek::NdnTlvPeek
setTimeout	NFD/tools/ndn-tlv-poke.cpp	/^  setTimeout(int timeout)$/;"	f	class:ndntlvpoke::NdnTlvPoke
setTimeout	ndn-cxx/src/management/nfd-command-options.cpp	/^CommandOptions::setTimeout(const time::milliseconds& timeout)$/;"	f	class:ndn::nfd::CommandOptions
setTpmLocator	ndn-cxx/src/security/pib-memory.cpp	/^PibMemory::setTpmLocator(const std::string& tpmLocator)$/;"	f	class:ndn::security::PibMemory
setTpmLocator	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::setTpmLocator(const std::string& tpmLocator)$/;"	f	class:ndn::security::PibSqlite3
setTpmLocator	ndn-cxx/src/security/pib.cpp	/^Pib::setTpmLocator(const std::string& tpmLocator)$/;"	f	class:ndn::security::Pib
setTpmLocator	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::setTpmLocator(const string& tpmLocator)$/;"	f	class:ndn::SecPublicInfoSqlite3
setTpmLocator	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyPublicInfo::setTpmLocator(const std::string& tpmLocator)$/;"	f	class:ndn::security::DummyPublicInfo
setTpmLocator	utils/dummy-keychain.cpp	/^DummyPublicInfo::setTpmLocator(const std::string& tpmLocator)$/;"	f	class:ndn::security::DummyPublicInfo
setTpmLocatorInternal	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::setTpmLocatorInternal(const string& tpmLocator, bool needReset)$/;"	f	class:ndn::SecPublicInfoSqlite3
setTpmPassword	ndn-cxx/src/security/key-chain.hpp	/^  setTpmPassword(const uint8_t* password, size_t passwordLength)$/;"	f	class:ndn::security::KeyChain
setTpmPassword	ndn-cxx/src/security/sec-tpm-file.hpp	/^  setTpmPassword(const uint8_t* password, size_t passwordLength)$/;"	f	class:ndn::SecTpmFile
setTpmPassword	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::setTpmPassword(const uint8_t* password, size_t passwordLength)$/;"	f	class:ndn::SecTpmOsx
setTpmPassword	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::setTpmPassword(const uint8_t* password, size_t passwordLength)$/;"	f	class:ndn::security::DummyTpm
setTpmPassword	utils/dummy-keychain.cpp	/^DummyTpm::setTpmPassword(const uint8_t* password, size_t passwordLength)$/;"	f	class:ndn::security::DummyTpm
setType	ndn-cxx/src/meta-info.cpp	/^MetaInfo::setType(uint32_t type)$/;"	f	class:ndn::MetaInfo
setUnsatisfyTimer	NFD/daemon/fw/forwarder.cpp	/^Forwarder::setUnsatisfyTimer(shared_ptr<pit::Entry> pitEntry)$/;"	f	class:nfd::Forwarder
setUri	NFD/daemon/face/channel.cpp	/^Channel::setUri(const FaceUri& uri)$/;"	f	class:nfd::Channel
setUri	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  setUri(const std::string& uri)$/;"	f	class:ndn::nfd::ControlParameters
setUriScheme	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::setUriScheme(const std::string& uriScheme)$/;"	f	class:ndn::nfd::FaceQueryFilter
setUseDigestSha256	NFD/tools/ndn-tlv-poke.cpp	/^  setUseDigestSha256()$/;"	f	class:ndntlvpoke::NdnTlvPoke
setValidityPeriod	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::setValidityPeriod(const security::ValidityPeriod& validityPeriod)$/;"	f	class:ndn::SignatureInfo
setValue	ndn-cxx/src/signature.cpp	/^Signature::setValue(const Block& value)$/;"	f	class:ndn::Signature
set_access_channels	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_access_channels(log::level channels) {$/;"	f	class:websocketpp::endpoint
set_body	NFD/websocketpp/websocketpp/http/impl/parser.hpp	/^inline void parser::set_body(std::string const & value) {$/;"	f	class:websocketpp::http::parser::parser
set_body	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::set_body(std::string const & value) {$/;"	f	class:websocketpp::connection
set_c2s_max_window_bits	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    lib::error_code set_c2s_max_window_bits(uint8_t bits, mode::value mode) {$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
set_channels	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    void set_channels(level channels) {$/;"	f	class:websocketpp::log::basic
set_channels	NFD/websocketpp/websocketpp/logger/stub.hpp	/^    void set_channels(level) {}$/;"	f	class:websocketpp::log::stub
set_close_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    void set_close_handler(close_handler h) {$/;"	f	class:websocketpp::connection
set_close_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_close_handler(close_handler h) {$/;"	f	class:websocketpp::endpoint
set_close_handshake_timeout	NFD/websocketpp/websocketpp/connection.hpp	/^    void set_close_handshake_timeout(long dur) {$/;"	f	class:websocketpp::connection
set_close_handshake_timeout	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_close_handshake_timeout(long dur) {$/;"	f	class:websocketpp::endpoint
set_compressed	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    void set_compressed(bool value) {$/;"	f	class:websocketpp::message_buffer::message
set_error_channels	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_error_channels(log::level channels) {$/;"	f	class:websocketpp::endpoint
set_fail_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    void set_fail_handler(fail_handler h) {$/;"	f	class:websocketpp::connection
set_fail_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_fail_handler(fail_handler h) {$/;"	f	class:websocketpp::endpoint
set_fin	NFD/websocketpp/websocketpp/frame.hpp	/^inline void set_fin(basic_header & h, bool value) {$/;"	f	namespace:websocketpp::frame
set_fin	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    void set_fin(bool value) {$/;"	f	class:websocketpp::message_buffer::message
set_handle	NFD/websocketpp/websocketpp/connection.hpp	/^    void set_handle(connection_hdl hdl) {$/;"	f	class:websocketpp::connection
set_handle	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void set_handle(connection_hdl hdl) {$/;"	f	class:websocketpp::transport::asio::connection
set_handle	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    void set_handle(connection_hdl hdl) {$/;"	f	class:websocketpp::transport::asio::basic_socket::connection
set_handle	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    void set_handle(connection_hdl hdl) {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
set_handle	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    void set_handle(connection_hdl) {}$/;"	f	class:websocketpp::transport::debug::connection
set_handle	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    void set_handle(connection_hdl hdl) {$/;"	f	class:websocketpp::transport::iostream::connection
set_handle	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    void set_handle(connection_hdl hdl) {}$/;"	f	class:websocketpp::transport::stub::connection
set_header	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    void set_header(std::string const & header) {$/;"	f	class:websocketpp::message_buffer::message
set_http_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    void set_http_handler(http_handler h) {$/;"	f	class:websocketpp::connection
set_http_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_http_handler(http_handler h) {$/;"	f	class:websocketpp::endpoint
set_interrupt_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    void set_interrupt_handler(interrupt_handler h) {$/;"	f	class:websocketpp::connection
set_interrupt_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_interrupt_handler(interrupt_handler h) {$/;"	f	class:websocketpp::endpoint
set_iterator	utils/trie/trie.hpp	/^                                   typename Trie::unordered_set::const_iterator>::type set_iterator;$/;"	t	class:ns3::ndn::ndnSIM::trie_iterator
set_iterator	utils/trie/trie.hpp	/^                                   typename Trie::unordered_set::iterator>::type set_iterator;$/;"	t	class:ns3::ndn::ndnSIM::trie_point_iterator
set_listen_backlog	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void set_listen_backlog(int backlog) {$/;"	f	class:websocketpp::transport::asio::endpoint
set_masked	NFD/websocketpp/websocketpp/frame.hpp	/^inline void set_masked(basic_header & h, bool value) {$/;"	f	namespace:websocketpp::frame
set_max_body_size	NFD/websocketpp/websocketpp/http/parser.hpp	/^    void set_max_body_size(size_t value) {$/;"	f	class:websocketpp::http::parser::parser
set_max_http_body_size	NFD/websocketpp/websocketpp/connection.hpp	/^    void set_max_http_body_size(size_t new_value) {$/;"	f	class:websocketpp::connection
set_max_http_body_size	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_max_http_body_size(size_t new_value) {$/;"	f	class:websocketpp::endpoint
set_max_message_size	NFD/websocketpp/websocketpp/connection.hpp	/^    void set_max_message_size(size_t new_value) {$/;"	f	class:websocketpp::connection
set_max_message_size	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_max_message_size(size_t new_value) {$/;"	f	class:websocketpp::endpoint
set_max_message_size	NFD/websocketpp/websocketpp/processors/processor.hpp	/^    void set_max_message_size(size_t new_value) {$/;"	f	class:websocketpp::processor::processor
set_max_size	model/cs/custom-policies/freshness-policy.hpp	/^      set_max_size(size_t max_size)$/;"	f	class:ns3::ndn::ndnSIM::freshness_policy_traits::policy::type
set_max_size	model/cs/custom-policies/lifetime-stats-policy.hpp	/^      set_max_size(size_t max_size)$/;"	f	class:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy::type
set_max_size	model/cs/custom-policies/probability-policy.hpp	/^      set_max_size(size_t max_size)$/;"	f	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
set_max_size	utils/trie/aggregate-stats-policy.hpp	/^      inline void set_max_size(uint32_t)$/;"	f	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
set_max_size	utils/trie/fifo-policy.hpp	/^      set_max_size(size_t max_size)$/;"	f	class:ns3::ndn::ndnSIM::fifo_policy_traits::policy::type
set_max_size	utils/trie/lfu-policy.hpp	/^      set_max_size(size_t max_size)$/;"	f	class:ns3::ndn::ndnSIM::lfu_policy_traits::policy::type
set_max_size	utils/trie/lru-policy.hpp	/^      set_max_size(size_t max_size)$/;"	f	class:ns3::ndn::ndnSIM::lru_policy_traits::policy::type
set_max_size	utils/trie/multi-policy.hpp	/^      set_max_size(size_t max_size)$/;"	f	class:ns3::ndn::ndnSIM::multi_policy_traits::policy::type
set_max_size	utils/trie/payload-policy.hpp	/^      set_max_size(size_t max_size)$/;"	f	class:ns3::ndn::ndnSIM::payload_policy_traits::policy::type
set_max_size	utils/trie/persistent-policy.hpp	/^      set_max_size(size_t max_size)$/;"	f	class:ns3::ndn::ndnSIM::persistent_policy_traits::policy::type
set_max_size	utils/trie/random-policy.hpp	/^      set_max_size(size_t max_size)$/;"	f	class:ns3::ndn::ndnSIM::random_policy_traits::policy::type
set_message_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    void set_message_handler(message_handler h) {$/;"	f	class:websocketpp::connection
set_message_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_message_handler(message_handler h) {$/;"	f	class:websocketpp::endpoint
set_method	NFD/websocketpp/websocketpp/http/impl/request.hpp	/^inline void request::set_method(std::string const & method) {$/;"	f	class:websocketpp::http::parser::request
set_opcode	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    void set_opcode(frame::opcode::value op) {$/;"	f	class:websocketpp::message_buffer::message
set_open_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    void set_open_handler(open_handler h) {$/;"	f	class:websocketpp::connection
set_open_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_open_handler(open_handler h) {$/;"	f	class:websocketpp::endpoint
set_open_handshake_timeout	NFD/websocketpp/websocketpp/connection.hpp	/^    void set_open_handshake_timeout(long dur) {$/;"	f	class:websocketpp::connection
set_open_handshake_timeout	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_open_handshake_timeout(long dur) {$/;"	f	class:websocketpp::endpoint
set_ostream	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    void set_ostream(std::ostream * out = &std::cout) {$/;"	f	class:websocketpp::log::basic
set_payload	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    void set_payload(std::string const & payload) {$/;"	f	class:websocketpp::message_buffer::message
set_payload	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    void set_payload(void const * payload, size_t len) {$/;"	f	class:websocketpp::message_buffer::message
set_payload	utils/trie/trie.hpp	/^  set_payload(typename PayloadTraits::insert_type payload)$/;"	f	class:ns3::ndn::ndnSIM::trie
set_ping_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    void set_ping_handler(ping_handler h) {$/;"	f	class:websocketpp::connection
set_ping_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_ping_handler(ping_handler h) {$/;"	f	class:websocketpp::endpoint
set_pong_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    void set_pong_handler(pong_handler h) {$/;"	f	class:websocketpp::connection
set_pong_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_pong_handler(pong_handler h) {$/;"	f	class:websocketpp::endpoint
set_pong_timeout	NFD/websocketpp/websocketpp/connection.hpp	/^    void set_pong_timeout(long dur) {$/;"	f	class:websocketpp::connection
set_pong_timeout	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_pong_timeout(long dur) {$/;"	f	class:websocketpp::endpoint
set_pong_timeout_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    void set_pong_timeout_handler(pong_timeout_handler h) {$/;"	f	class:websocketpp::connection
set_pong_timeout_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_pong_timeout_handler(pong_timeout_handler h) {$/;"	f	class:websocketpp::endpoint
set_prepared	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    void set_prepared(bool value) {$/;"	f	class:websocketpp::message_buffer::message
set_probability	model/cs/custom-policies/probability-policy.hpp	/^      set_probability(double probability)$/;"	f	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
set_proxy	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void set_proxy(std::string const & uri) {$/;"	f	class:websocketpp::transport::asio::connection
set_proxy	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void set_proxy(std::string const & uri, lib::error_code & ec) {$/;"	f	class:websocketpp::transport::asio::connection
set_proxy_basic_auth	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void set_proxy_basic_auth(std::string const & username, std::string const &$/;"	f	class:websocketpp::transport::asio::connection
set_proxy_timeout	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void set_proxy_timeout(long duration) {$/;"	f	class:websocketpp::transport::asio::connection
set_proxy_timeout	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void set_proxy_timeout(long duration, lib::error_code & ec) {$/;"	f	class:websocketpp::transport::asio::connection
set_remote_endpoint	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    void set_remote_endpoint(std::string) {}$/;"	f	class:websocketpp::transport::debug::connection
set_remote_endpoint	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    void set_remote_endpoint(std::string value) {$/;"	f	class:websocketpp::transport::iostream::connection
set_remote_endpoint	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    void set_remote_endpoint(std::string value) {}$/;"	f	class:websocketpp::transport::stub::connection
set_reuse_addr	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void set_reuse_addr(bool value) {$/;"	f	class:websocketpp::transport::asio::endpoint
set_rsv1	NFD/websocketpp/websocketpp/frame.hpp	/^inline void set_rsv1(basic_header &h, bool value) {$/;"	f	namespace:websocketpp::frame
set_rsv2	NFD/websocketpp/websocketpp/frame.hpp	/^inline void set_rsv2(basic_header &h, bool value) {$/;"	f	namespace:websocketpp::frame
set_rsv3	NFD/websocketpp/websocketpp/frame.hpp	/^inline void set_rsv3(basic_header &h, bool value) {$/;"	f	namespace:websocketpp::frame
set_s2c_max_window_bits	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    lib::error_code set_s2c_max_window_bits(uint8_t bits, mode::value mode) {$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
set_secure	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    void set_secure(bool) {}$/;"	f	class:websocketpp::transport::debug::connection
set_secure	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^    void set_secure(bool) {}$/;"	f	class:websocketpp::transport::debug::endpoint
set_secure	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    void set_secure(bool value) {$/;"	f	class:websocketpp::transport::iostream::connection
set_secure	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    void set_secure(bool value) {$/;"	f	class:websocketpp::transport::iostream::endpoint
set_secure	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    void set_secure(bool value) {}$/;"	f	class:websocketpp::transport::stub::connection
set_secure	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^    void set_secure(bool value) {}$/;"	f	class:websocketpp::transport::stub::endpoint
set_shutdown_handler	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    void set_shutdown_handler(shutdown_handler h) {$/;"	f	class:websocketpp::transport::iostream::connection
set_shutdown_handler	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    void set_shutdown_handler(shutdown_handler h) {$/;"	f	class:websocketpp::transport::iostream::endpoint
set_socket_init_handler	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    void set_socket_init_handler(socket_init_handler h) {$/;"	f	class:websocketpp::transport::asio::basic_socket::connection
set_socket_init_handler	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    void set_socket_init_handler(socket_init_handler h) {$/;"	f	class:websocketpp::transport::asio::basic_socket::endpoint
set_socket_init_handler	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    void set_socket_init_handler(socket_init_handler h) {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
set_socket_init_handler	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    void set_socket_init_handler(socket_init_handler h) {$/;"	f	class:websocketpp::transport::asio::tls_socket::endpoint
set_status	NFD/websocketpp/websocketpp/http/impl/response.hpp	/^inline void response::set_status(status_code::value code) {$/;"	f	class:websocketpp::http::parser::response
set_status	NFD/websocketpp/websocketpp/http/impl/response.hpp	/^inline void response::set_status(status_code::value code, std::string const &$/;"	f	class:websocketpp::http::parser::response
set_status	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::set_status(http::status_code::value code)$/;"	f	class:websocketpp::connection
set_status	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::set_status(http::status_code::value code,$/;"	f	class:websocketpp::connection
set_tcp_init_handler	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void set_tcp_init_handler(tcp_init_handler h) {$/;"	f	class:websocketpp::transport::asio::connection
set_tcp_init_handler	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void set_tcp_init_handler(tcp_init_handler h) {$/;"	f	class:websocketpp::transport::asio::endpoint
set_tcp_post_init_handler	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void set_tcp_post_init_handler(tcp_init_handler h) {$/;"	f	class:websocketpp::transport::asio::connection
set_tcp_post_init_handler	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void set_tcp_post_init_handler(tcp_init_handler h) {$/;"	f	class:websocketpp::transport::asio::endpoint
set_tcp_pre_init_handler	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    void set_tcp_pre_init_handler(tcp_init_handler h) {$/;"	f	class:websocketpp::transport::asio::connection
set_tcp_pre_init_handler	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void set_tcp_pre_init_handler(tcp_init_handler h) {$/;"	f	class:websocketpp::transport::asio::endpoint
set_terminal	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^    void set_terminal(bool value) {$/;"	f	class:websocketpp::message_buffer::message
set_termination_handler	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::set_termination_handler($/;"	f	class:websocketpp::connection
set_timer	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^    void set_timer() {$/;"	f	class:telemetry_server
set_timer	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    timer_ptr set_timer(long duration, timer_handler callback) {$/;"	f	class:websocketpp::transport::asio::connection
set_timer	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    timer_ptr set_timer(long duration, timer_handler callback) {$/;"	f	class:websocketpp::transport::asio::endpoint
set_timer	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    timer_ptr set_timer(long, timer_handler handler) {$/;"	f	class:websocketpp::transport::debug::connection
set_timer	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    timer_ptr set_timer(long, timer_handler) {$/;"	f	class:websocketpp::transport::iostream::connection
set_timer	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    timer_ptr set_timer(long duration, timer_handler handler) {$/;"	f	class:websocketpp::transport::stub::connection
set_tls_init_handler	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    void set_tls_init_handler(tls_init_handler h) {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
set_tls_init_handler	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    void set_tls_init_handler(tls_init_handler h) {$/;"	f	class:websocketpp::transport::asio::tls_socket::endpoint
set_traced_callback	model/cs/custom-policies/lifetime-stats-policy.hpp	/^      set_traced_callback($/;"	f	class:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy::type
set_uri	NFD/websocketpp/websocketpp/http/impl/request.hpp	/^inline void request::set_uri(std::string const & uri) {$/;"	f	class:websocketpp::http::parser::request
set_uri	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::set_uri(uri_ptr uri) {$/;"	f	class:websocketpp::connection
set_user_agent	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_user_agent(std::string const & ua) {$/;"	f	class:websocketpp::endpoint
set_validate_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    void set_validate_handler(validate_handler h) {$/;"	f	class:websocketpp::connection
set_validate_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    void set_validate_handler(validate_handler h) {$/;"	f	class:websocketpp::endpoint
set_version	NFD/websocketpp/websocketpp/http/impl/parser.hpp	/^inline void parser::set_version(std::string const & version) {$/;"	f	class:websocketpp::http::parser::parser
set_write_handler	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    void set_write_handler(write_handler h) {$/;"	f	class:websocketpp::transport::iostream::connection
set_write_handler	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    void set_write_handler(write_handler h) {$/;"	f	class:websocketpp::transport::iostream::endpoint
setupAndRun	tests/unit-tests/model/ndn-l3-protocol.t.cpp	/^  setupAndRun()$/;"	f	class:ns3::ndn::ManagerCheckFixture
sha1	NFD/websocketpp/websocketpp/sha1/sha1.hpp	/^namespace sha1 {$/;"	n	namespace:websocketpp
sha1_library	NFD/websocketpp/websocketpp/processors/base.hpp	/^    sha1_library,$/;"	e	enum:websocketpp::processor::error::processor_errors
sha1macro	NFD/websocketpp/websocketpp/sha1/sha1.hpp	109;"	d
sha1macro	NFD/websocketpp/websocketpp/sha1/sha1.hpp	69;"	d
sha256	ndn-cxx/src/util/crypto.cpp	/^sha256(const uint8_t* data, size_t dataLength)$/;"	f	namespace:ndn::crypto
short_key3	NFD/websocketpp/websocketpp/processors/base.hpp	/^    short_key3$/;"	e	enum:websocketpp::processor::error::processor_errors
shouldStop	ndn-cxx/src/util/notification-subscriber.hpp	/^  shouldStop()$/;"	f	class:ndn::util::NotificationSubscriber
shutdown	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    void shutdown() {$/;"	f	struct:stub_con
shutdown	ndn-cxx/src/face.cpp	/^Face::shutdown()$/;"	f	class:ndn::Face
shutdownSocket	NFD/daemon/face/stream-face.hpp	/^StreamFace<T, U>::shutdownSocket()$/;"	f	class:nfd::StreamFace
shutdown_handler	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^typedef lib::function<void(lib::error_code const &)> shutdown_handler;$/;"	t	namespace:websocketpp::transport
shutdown_handler	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^typedef lib::function<lib::error_code(connection_hdl)> shutdown_handler;$/;"	t	namespace:websocketpp::transport::iostream
sig	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^  Signal<SignalOwner0> sig;$/;"	m	class:ndn::util::signal::tests::SignalOwner0	file:
sig	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^  Signal<SignalOwner1, int> sig;$/;"	m	class:ndn::util::signal::tests::SignalOwner1	file:
sigInfo	ndn-cxx/tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^const uint8_t sigInfo[] = {$/;"	m	namespace:ndn::tests	file:
sigInfo	ndn-cxx/tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^const uint8_t sigInfo[] = {$/;"	m	namespace:ndn::tests	file:
sigInfoRsa	ndn-cxx/tests/unit-tests/signature-info.t.cpp	/^const uint8_t sigInfoRsa[] = {$/;"	m	namespace:ndn::tests	file:
sigValue	ndn-cxx/tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^const uint8_t sigValue[] = {$/;"	m	namespace:ndn::tests	file:
sigValue	ndn-cxx/tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^const uint8_t sigValue[] = {$/;"	m	namespace:ndn::tests	file:
sign	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::sign(Data& data, const SigningInfo& params)$/;"	f	class:ndn::security::KeyChain
sign	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::sign(Interest& interest, const SigningInfo& params)$/;"	f	class:ndn::security::KeyChain
sign	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::sign(const uint8_t* buffer, size_t bufferLength, const Name& certificateName)$/;"	f	class:ndn::security::KeyChain
sign	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::sign(const uint8_t* buffer, size_t bufferLength, const SigningInfo& params)$/;"	f	class:ndn::security::KeyChain
sign	ndn-cxx/src/security/key-chain.hpp	/^KeyChain::sign(T& packet, const Name& certificateName)$/;"	f	class:ndn::security::KeyChain
signByIdentity	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::signByIdentity(const uint8_t* buffer, size_t bufferLength, const Name& identityName)$/;"	f	class:ndn::security::KeyChain
signByIdentity	ndn-cxx/src/security/key-chain.hpp	/^KeyChain::signByIdentity(T& packet, const Name& identityName)$/;"	f	class:ndn::security::KeyChain
signData	NFD/tests/test-common.hpp	/^signData(const shared_ptr<Data>& data)$/;"	f	namespace:nfd::tests
signData	ndn-cxx/tests/unit-tests/make-interest-data.hpp	/^signData(const shared_ptr<Data>& data)$/;"	f	namespace:ndn::util
signImpl	ndn-cxx/src/security/key-chain.hpp	/^KeyChain::signImpl(T& packet, const SigningInfo& params)$/;"	f	class:ndn::security::KeyChain
signInTpm	ndn-cxx/src/security/key-chain.hpp	/^  signInTpm(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::security::KeyChain
signInTpm	ndn-cxx/src/security/sec-tpm-file.cpp	/^SecTpmFile::signInTpm(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::SecTpmFile
signInTpm	ndn-cxx/src/security/sec-tpm-osx.hpp	/^  signInTpm(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::SecTpmOsx
signInTpm	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::signInTpm(const uint8_t* data, size_t dataLength, const Name& keyName,$/;"	f	class:ndn::security::DummyTpm
signInTpm	utils/dummy-keychain.cpp	/^DummyTpm::signInTpm(const uint8_t* data, size_t dataLength, const Name& keyName,$/;"	f	class:ndn::security::DummyTpm
signInTpmInternal	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::signInTpmInternal(const uint8_t* data, size_t dataLength,$/;"	f	class:ndn::SecTpmOsx
signPacketWrapper	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::signPacketWrapper(Data& data, const Signature& signature,$/;"	f	class:ndn::security::KeyChain
signPacketWrapper	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::signPacketWrapper(Interest& interest, const Signature& signature,$/;"	f	class:ndn::security::KeyChain
signWithSha256	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::signWithSha256(Data& data)$/;"	f	class:ndn::security::KeyChain
signWithSha256	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::signWithSha256(Interest& interest)$/;"	f	class:ndn::security::KeyChain
signal	ndn-cxx/src/util/signal-connection.cpp	/^namespace signal {$/;"	n	namespace:ndn::util	file:
signal	ndn-cxx/src/util/signal-connection.hpp	/^namespace signal {$/;"	n	namespace:ndn::util
signal	ndn-cxx/src/util/signal-emit.hpp	/^namespace signal {$/;"	n	namespace:ndn::util
signal	ndn-cxx/src/util/signal-scoped-connection.cpp	/^namespace signal {$/;"	n	namespace:ndn::util	file:
signal	ndn-cxx/src/util/signal-scoped-connection.hpp	/^namespace signal {$/;"	n	namespace:ndn::util
signal	ndn-cxx/src/util/signal-signal.hpp	/^namespace signal {$/;"	n	namespace:ndn::util
signal	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^namespace signal {$/;"	n	namespace:ndn::util	file:
signalHandler	NFD/tools/nfd-autoreg.cpp	/^  signalHandler()$/;"	f	class:ndn::nfd_autoreg::AutoregServer
signed_interest	ndn-cxx/src/security/security-common.hpp	/^namespace signed_interest{$/;"	n	namespace:ndn
signingByCertificate	ndn-cxx/src/security/signing-helpers.cpp	/^signingByCertificate(const Name& certName)$/;"	f	namespace:ndn::security
signingByIdentity	ndn-cxx/src/security/signing-helpers.cpp	/^signingByIdentity(const Name& identity)$/;"	f	namespace:ndn::security
signingByKey	ndn-cxx/src/security/signing-helpers.cpp	/^signingByKey(const Name& keyName)$/;"	f	namespace:ndn::security
signingWithSha256	ndn-cxx/src/security/signing-helpers.cpp	/^signingWithSha256()$/;"	f	namespace:ndn::security
silent_close	NFD/websocketpp/websocketpp/config/core.hpp	/^    static const bool silent_close = false;$/;"	m	struct:websocketpp::config::core
silent_close	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    static const bool silent_close = false;$/;"	m	struct:websocketpp::config::core_client
silent_close	NFD/websocketpp/websocketpp/config/debug.hpp	/^    static const bool silent_close = false;$/;"	m	struct:websocketpp::config::debug_core
silent_close	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    static const bool silent_close = false;$/;"	m	struct:websocketpp::config::minimal_server
simulateSuccessfulResponse	NFD/tests/rib/fib-updates-common.hpp	/^  simulateSuccessfulResponse(const RibUpdate& update)$/;"	f	class:nfd::rib::tests::FibUpdatesFixture
since	ndn-cxx/src/util/time.cpp	/^clock_string<ndn::time::steady_clock, CharT>::since()$/;"	f	class:boost::chrono::clock_string
since	ndn-cxx/src/util/time.cpp	/^clock_string<ndn::time::system_clock, CharT>::since()$/;"	f	class:boost::chrono::clock_string
sip_client	NFD/websocketpp/examples/sip_client/sip_client.cpp	/^client sip_client;$/;"	v
size	NFD/daemon/face/tcp-channel.cpp	/^TcpChannel::size() const$/;"	f	class:nfd::TcpChannel
size	NFD/daemon/face/udp-channel.cpp	/^UdpChannel::size() const$/;"	f	class:nfd::UdpChannel
size	NFD/daemon/face/websocket-channel.cpp	/^WebSocketChannel::size() const$/;"	f	class:nfd::WebSocketChannel
size	NFD/daemon/fw/face-table.cpp	/^FaceTable::size() const$/;"	f	class:nfd::FaceTable
size	NFD/daemon/table/cs.hpp	/^  size() const$/;"	f	class:nfd::cs::Cs
size	NFD/daemon/table/dead-nonce-list.cpp	/^DeadNonceList::size() const$/;"	f	class:nfd::DeadNonceList
size	NFD/daemon/table/fib.hpp	/^Fib::size() const$/;"	f	class:nfd::Fib
size	NFD/daemon/table/measurements.hpp	/^Measurements::size() const$/;"	f	class:nfd::Measurements
size	NFD/daemon/table/name-tree.hpp	/^NameTree::size() const$/;"	f	class:nfd::NameTree
size	NFD/daemon/table/pit.hpp	/^Pit::size() const$/;"	f	class:nfd::Pit
size	NFD/daemon/table/strategy-choice.hpp	/^StrategyChoice::size() const$/;"	f	class:nfd::StrategyChoice
size	NFD/rib/rib-update-batch.cpp	/^RibUpdateBatch::size() const$/;"	f	class:nfd::rib::RibUpdateBatch
size	NFD/rib/rib.hpp	/^Rib::size() const$/;"	f	class:nfd::rib::Rib
size	ndn-cxx/src/detail/container-with-on-empty-signal.hpp	/^  size()$/;"	f	class:ndn::ContainerWithOnEmptySignal
size	ndn-cxx/src/encoding/block.cpp	/^Block::size() const$/;"	f	class:ndn::Block
size	ndn-cxx/src/encoding/encoder.hpp	/^Encoder::size() const$/;"	f	class:ndn::encoding::Encoder
size	ndn-cxx/src/exclude.hpp	/^Exclude::size() const$/;"	f	class:ndn::Exclude
size	ndn-cxx/src/name.hpp	/^  size() const$/;"	f	class:ndn::Name
size	ndn-cxx/src/security/additional-description.hpp	/^  size() const$/;"	f	class:ndn::security::AdditionalDescription
size	ndn-cxx/src/security/certificate-container.cpp	/^CertificateContainer::size() const$/;"	f	class:ndn::security::CertificateContainer
size	ndn-cxx/src/security/identity-container.cpp	/^IdentityContainer::size() const$/;"	f	class:ndn::security::IdentityContainer
size	ndn-cxx/src/security/key-container.cpp	/^KeyContainer::size() const$/;"	f	class:ndn::security::KeyContainer
size	ndn-cxx/src/util/in-memory-storage.hpp	/^  size() const$/;"	f	class:ndn::util::InMemoryStorage
size	ndn-cxx/src/util/regex/regex-backref-manager.hpp	/^RegexBackrefManager::size()$/;"	f	class:ndn::RegexBackrefManager
size	utils/trie/detail/multi-policy-container.hpp	/^  size() const$/;"	f	struct:ns3::ndn::ndnSIM::detail::multi_policy_container
sizeOfNonNegativeInteger	ndn-cxx/src/encoding/tlv.hpp	/^sizeOfNonNegativeInteger(uint64_t varNumber)$/;"	f	namespace:ndn::tlv
sizeOfVarNumber	ndn-cxx/src/encoding/tlv.hpp	/^sizeOfVarNumber(uint64_t varNumber)$/;"	f	namespace:ndn::tlv
size_type	ndn-cxx/src/name.hpp	/^  typedef component_container::size_type       size_type;$/;"	t	class:ndn::Name
slice	NFD/daemon/face/ndnlp-slicer.cpp	/^Slicer::slice(const Block& block)$/;"	f	class:nfd::ndnlp::Slicer
slicer	NFD/tests/daemon/face/ndnlp.t.cpp	/^  ndnlp::Slicer slicer;$/;"	m	class:nfd::ndnlp::tests::ReassembleFixture	file:
smallest	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    smallest$/;"	e	enum:websocketpp::extensions::permessage_deflate::mode::value
smart_pointer_payload_traits	utils/trie/trie.hpp	/^struct smart_pointer_payload_traits {$/;"	s	namespace:ns3::ndn::ndnSIM
socket	NFD/tests/daemon/face/dummy-stream-sender.hpp	/^  Socket socket;$/;"	m	class:nfd::tests::DummyStreamSender
socket	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^        socket,$/;"	e	enum:websocketpp::transport::asio::socket::error::value
socket	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^namespace socket {$/;"	n	namespace:websocketpp::transport::asio
socket_category	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^class socket_category : public lib::error_category {$/;"	c	namespace:websocketpp::transport::asio::socket
socket_con_ptr	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    typedef typename socket_con_type::ptr socket_con_ptr;$/;"	t	class:websocketpp::transport::asio::connection
socket_con_ptr	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    typedef typename socket_con_type::ptr socket_con_ptr;$/;"	t	class:websocketpp::transport::asio::endpoint
socket_con_ptr	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    typedef socket_con_type::ptr socket_con_ptr;$/;"	t	class:websocketpp::transport::asio::basic_socket::endpoint
socket_con_ptr	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    typedef socket_con_type::ptr socket_con_ptr;$/;"	t	class:websocketpp::transport::asio::tls_socket::endpoint
socket_con_type	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    typedef typename config::socket_type::socket_con_type socket_con_type;$/;"	t	class:websocketpp::transport::asio::connection
socket_con_type	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    typedef typename socket_type::socket_con_type socket_con_type;$/;"	t	class:websocketpp::transport::asio::endpoint
socket_con_type	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    typedef connection socket_con_type;$/;"	t	class:websocketpp::transport::asio::basic_socket::endpoint
socket_con_type	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    typedef connection socket_con_type;$/;"	t	class:websocketpp::transport::asio::tls_socket::endpoint
socket_init_handler	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    socket_init_handler;$/;"	t	namespace:websocketpp::transport::asio::basic_socket
socket_init_handler	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    boost::asio::ip::tcp::socket>&)> socket_init_handler;$/;"	t	namespace:websocketpp::transport::asio::tls_socket
socket_ptr	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    typedef lib::shared_ptr<socket_type> socket_ptr;$/;"	t	class:websocketpp::transport::asio::basic_socket::connection
socket_ptr	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    typedef lib::shared_ptr<socket_type> socket_ptr;$/;"	t	class:websocketpp::transport::asio::tls_socket::connection
socket_shutdown_handler	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^    socket_shutdown_handler;$/;"	t	namespace:websocketpp::transport::asio
socket_type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^            socket_type;$/;"	t	struct:debug_custom::transport_config	file:
socket_type	NFD/websocketpp/test/transport/asio/timers.cpp	/^    typedef websocketpp::transport::asio::tls_socket::endpoint socket_type;$/;"	t	struct:config	file:
socket_type	NFD/websocketpp/test/transport/integration.cpp	/^            socket_type;$/;"	t	struct:config::transport_config	file:
socket_type	NFD/websocketpp/test/transport/integration.cpp	/^            socket_type;$/;"	t	struct:config_tls::transport_config	file:
socket_type	NFD/websocketpp/websocketpp/config/asio.hpp	/^        typedef websocketpp::transport::asio::tls_socket::endpoint socket_type;$/;"	t	struct:websocketpp::config::asio_tls::transport_config
socket_type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^        typedef websocketpp::transport::asio::tls_socket::endpoint socket_type;$/;"	t	struct:websocketpp::config::asio_tls_client::transport_config
socket_type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^            socket_type;$/;"	t	struct:websocketpp::config::asio::transport_config
socket_type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^            socket_type;$/;"	t	struct:websocketpp::config::asio_client::transport_config
socket_type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^        typedef websocketpp::transport::asio::tls_socket::endpoint socket_type;$/;"	t	struct:websocketpp::config::debug_asio_tls::transport_config
socket_type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^            socket_type;$/;"	t	struct:websocketpp::config::debug_asio::transport_config
socket_type	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    typedef typename config::socket_type socket_type;$/;"	t	class:websocketpp::transport::asio::endpoint
socket_type	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    typedef boost::asio::ip::tcp::socket socket_type;$/;"	t	class:websocketpp::transport::asio::basic_socket::connection
socket_type	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> socket_type;$/;"	t	class:websocketpp::transport::asio::tls_socket::connection
sortNextHops	NFD/daemon/table/fib-entry.cpp	/^Entry::sortNextHops()$/;"	f	class:nfd::fib::Entry
sortRoutes	NFD/rib/rib.cpp	/^sortRoutes(const Route& lhs, const Route& rhs)$/;"	f	namespace:nfd::rib
source	helper/boost-graph-ndn-global-routing-helper.hpp	/^source(graph_traits<NdnGlobalRouterGraph>::edge_descriptor e, const NdnGlobalRouterGraph& g)$/;"	f	namespace:boost
sqlite3_bind_string	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^sqlite3_bind_string(sqlite3_stmt* statement,$/;"	f	namespace:ndn
sqlite3_column_string	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^sqlite3_column_string(sqlite3_stmt* statement, int column)$/;"	f	namespace:ndn
src	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    endpoint(const endpoint& src) = delete;$/;"	m	class:websocketpp::transport::asio::endpoint
start	NFD/tests/daemon/face/dummy-stream-sender.hpp	/^  start(const Endpoint& endpoint)$/;"	f	class:nfd::tests::DummyStreamSender
start	NFD/tools/ndn-autoconfig/guess-from-identity-name.cpp	/^GuessFromIdentityName::start()$/;"	f	class:ndn::tools::autoconfig::GuessFromIdentityName
start	NFD/tools/ndn-autoconfig/guess-from-search-domains.cpp	/^GuessFromSearchDomains::start()$/;"	f	class:ndn::tools::autoconfig::GuessFromSearchDomains
start	NFD/tools/ndn-autoconfig/multicast-discovery.cpp	/^MulticastDiscovery::start()$/;"	f	class:ndn::tools::autoconfig::MulticastDiscovery
start	NFD/tools/nfdc.cpp	/^Nfdc::FaceIdFetcher::start(ndn::Face& face,$/;"	f	class:nfdc::Nfdc::FaceIdFetcher
start	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    void start(std::string uri) {$/;"	f	class:perftest
start	NFD/websocketpp/test/transport/asio/timers.cpp	/^    void start() {$/;"	f	struct:mock_con
start	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::start() {$/;"	f	class:websocketpp::connection
start	helper/ndn-scenario-helper.hpp	/^    std::string start;$/;"	m	struct:ns3::ndn::ScenarioHelper::AppInfo
start	ndn-cxx/src/management/nfd-controller.hpp	/^  start(const ControlParameters& parameters,$/;"	f	class:ndn::nfd::Controller
start	ndn-cxx/src/util/notification-subscriber.hpp	/^  start()$/;"	f	class:ndn::util::NotificationSubscriber
startCommand	ndn-cxx/src/management/nfd-controller.cpp	/^Controller::startCommand(const shared_ptr<ControlCommand>& command,$/;"	f	class:ndn::nfd::Controller
startFaceCreate	NFD/tools/nfdc.cpp	/^Nfdc::FaceIdFetcher::startFaceCreate(const ndn::util::FaceUri& canonicalUri)$/;"	f	class:nfdc::Nfdc::FaceIdFetcher
startFaceCreate	NFD/tools/nfdc.cpp	/^Nfdc::startFaceCreate(const ndn::util::FaceUri& canonicalUri)$/;"	f	class:nfdc::Nfdc
startFetchingFaceStatusDataset	NFD/tools/nfd-autoreg.cpp	/^  startFetchingFaceStatusDataset()$/;"	f	class:ndn::nfd_autoreg::AutoregServer
startGetFaceId	NFD/tools/nfdc.cpp	/^Nfdc::FaceIdFetcher::startGetFaceId(const ndn::util::FaceUri& faceUri)$/;"	f	class:nfdc::Nfdc::FaceIdFetcher
startInterest	NFD/tests/daemon/table/cs.t.cpp	/^  startInterest(const Name& name)$/;"	f	class:nfd::cs::tests::FindFixture
startInterest	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^  startInterest(const Name& name)$/;"	f	class:ndn::util::FindFixture
startListening	NFD/rib/rib-manager.cpp	/^RibManager::startListening(const Name& commandPrefix, const ndn::OnInterest& onRequest)$/;"	f	class:nfd::rib::RibManager
startProcessing	NFD/tools/nfd-autoreg.cpp	/^  startProcessing()$/;"	f	class:ndn::nfd_autoreg::AutoregServer
startRegistration	NFD/rib/remote-registrator.cpp	/^RemoteRegistrator::startRegistration(const ControlParameters& parameters,$/;"	f	class:nfd::rib::RemoteRegistrator
startStages	NFD/tools/ndn-autoconfig/main.cpp	/^  startStages()$/;"	f	class:ndn::tools::NdnAutoconfig	file:
startUnregistration	NFD/rib/remote-registrator.cpp	/^RemoteRegistrator::startUnregistration(const ControlParameters& parameters,$/;"	f	class:nfd::rib::RemoteRegistrator
start_accept	NFD/websocketpp/websocketpp/roles/server_endpoint.hpp	/^    void start_accept() {$/;"	f	class:websocketpp::server
start_accept	NFD/websocketpp/websocketpp/roles/server_endpoint.hpp	/^    void start_accept(lib::error_code & ec) {$/;"	f	class:websocketpp::server
start_perpetual	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void start_perpetual() {$/;"	f	class:websocketpp::transport::asio::endpoint
state	NFD/websocketpp/websocketpp/connection.hpp	/^namespace state {$/;"	n	namespace:websocketpp::session
state	NFD/websocketpp/websocketpp/http/parser.hpp	/^namespace state {$/;"	n	namespace:websocketpp::http::parser
state	NFD/websocketpp/websocketpp/http/response.hpp	/^    enum state {$/;"	g	class:websocketpp::http::parser::response
state	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    enum state {$/;"	g	class:websocketpp::processor::hybi00
state	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    enum state {$/;"	g	class:websocketpp::processor::hybi13
state	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    enum state {$/;"	g	class:websocketpp::transport::asio::endpoint
state	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    enum state {$/;"	g	class:websocketpp::transport::asio::basic_socket::connection
static_test	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    _WEBSOCKETPP_CONSTEXPR_TOKEN_ bool static_test(level channel) const {$/;"	f	class:websocketpp::log::basic
static_test	NFD/websocketpp/websocketpp/logger/stub.hpp	/^    _WEBSOCKETPP_CONSTEXPR_TOKEN_ bool static_test(level) const {$/;"	f	class:websocketpp::log::stub
status	NFD/websocketpp/websocketpp/close.hpp	/^namespace status {$/;"	n	namespace:websocketpp::close
status	NFD/websocketpp/websocketpp/connection.hpp	/^namespace status {$/;"	n	namespace:websocketpp::session::fail
status_code	NFD/websocketpp/websocketpp/http/constants.hpp	/^    namespace status_code {$/;"	n	namespace:websocketpp::http
std	NFD/common.hpp	/^namespace std {$/;"	n
std	helper/boost-graph-ndn-global-routing-helper.hpp	/^namespace std {$/;"	n
std	ndn-cxx/src/name.cpp	/^namespace std {$/;"	n	file:
std	ndn-cxx/src/name.hpp	/^namespace std {$/;"	n
std	ndn-cxx/src/util/ethernet.hpp	/^namespace std {$/;"	n
steadyClock	NFD/tests/test-common.hpp	/^  shared_ptr<time::UnitTestSteadyClock> steadyClock;$/;"	m	class:nfd::tests::UnitTestTimeFixture
steadyClock	ndn-cxx/tests/unit-tests/unit-test-time-fixture.hpp	/^  shared_ptr<time::UnitTestSteadyClock> steadyClock;$/;"	m	class:ndn::tests::UnitTestTimeFixture
steadyClock	ndn-cxx/tests/unit-tests/util/time-unit-test-clock.t.cpp	/^  shared_ptr<time::UnitTestSteadyClock> steadyClock;$/;"	m	class:ndn::tests::UnitTestTimeFixture	file:
steady_clock	ndn-cxx/src/util/time.hpp	/^class steady_clock$/;"	c	namespace:ndn::time
step	ndn-cxx/src/util/sqlite3-statement.cpp	/^Sqlite3Statement::step()$/;"	f	class:ndn::util::Sqlite3Statement
stop	NFD/tests/daemon/face/dummy-stream-sender.hpp	/^  stop()$/;"	f	class:nfd::tests::DummyStreamSender
stop	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void stop() {$/;"	f	class:websocketpp::transport::asio::endpoint
stop	ndn-cxx/src/util/notification-subscriber.hpp	/^  stop()$/;"	f	class:ndn::util::NotificationSubscriber
stop_listening	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void stop_listening() {$/;"	f	class:websocketpp::transport::asio::endpoint
stop_listening	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void stop_listening(lib::error_code & ec) {$/;"	f	class:websocketpp::transport::asio::endpoint
stop_on_close	NFD/websocketpp/test/transport/integration.cpp	/^void stop_on_close(server * s, websocketpp::connection_hdl hdl) {$/;"	f
stop_perpetual	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    void stop_perpetual() {$/;"	f	class:websocketpp::transport::asio::endpoint
stopped	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    bool stopped() const {$/;"	f	class:websocketpp::transport::asio::endpoint
storage_	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^  boost::aligned_storage<1024> storage_;$/;"	m	class:websocketpp::transport::asio::handler_allocator
storage_type	utils/trie/trie.hpp	/^  typedef Payload storage_type;$/;"	t	struct:ns3::ndn::ndnSIM::non_pointer_traits
storage_type	utils/trie/trie.hpp	/^  typedef Payload* storage_type; \/\/ how the payload is actually stored$/;"	t	struct:ns3::ndn::ndnSIM::pointer_payload_traits
storage_type	utils/trie/trie.hpp	/^  typedef ns3::Ptr<Payload> storage_type;$/;"	t	struct:ns3::ndn::ndnSIM::smart_pointer_payload_traits
str	NFD/websocketpp/websocketpp/uri.hpp	/^    std::string str() const {$/;"	f	class:websocketpp::uri
strand_ptr	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    typedef lib::shared_ptr<boost::asio::io_service::strand> strand_ptr;$/;"	t	class:websocketpp::transport::asio::connection
strand_ptr	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    typedef lib::shared_ptr<boost::asio::io_service::strand> strand_ptr;$/;"	t	class:websocketpp::transport::asio::basic_socket::connection
strand_ptr	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    typedef lib::shared_ptr<boost::asio::io_service::strand> strand_ptr;$/;"	t	class:websocketpp::transport::asio::tls_socket::connection
strategy1	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^  shared_ptr<MeasurementsAccessorTestStrategy> strategy1;$/;"	m	class:nfd::tests::MeasurementsAccessorFixture	file:
strategy2	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^  shared_ptr<MeasurementsAccessorTestStrategy> strategy2;$/;"	m	class:nfd::tests::MeasurementsAccessorFixture	file:
strategyChoiceSet	NFD/tools/nfdc.cpp	/^Nfdc::strategyChoiceSet()$/;"	f	class:nfdc::Nfdc
strategyChoiceUnset	NFD/tools/nfdc.cpp	/^Nfdc::strategyChoiceUnset()$/;"	f	class:nfdc::Nfdc
strategy_choice	NFD/daemon/table/strategy-choice-entry.cpp	/^namespace strategy_choice {$/;"	n	namespace:nfd	file:
strategy_choice	NFD/daemon/table/strategy-choice-entry.hpp	/^namespace strategy_choice {$/;"	n	namespace:nfd
streamPrefix	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  Name streamPrefix;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
string_replace_all	NFD/websocketpp/websocketpp/impl/utilities_impl.hpp	/^inline std::string string_replace_all(std::string subject, std::string const &$/;"	f	namespace:websocketpp::utility
strip_lws	NFD/websocketpp/websocketpp/http/parser.hpp	/^inline std::string strip_lws(std::string const & input) {$/;"	f	namespace:websocketpp::http::parser
stub	NFD/websocketpp/test/message_buffer/alloc.cpp	/^    stub(con_msg_man_ptr manager, websocketpp::frame::opcode::value op, size_t size = 128)$/;"	f	struct:stub
stub	NFD/websocketpp/test/message_buffer/alloc.cpp	/^struct stub {$/;"	s	file:
stub	NFD/websocketpp/test/message_buffer/message.cpp	/^    stub() : recycled(false) {}$/;"	f	struct:stub
stub	NFD/websocketpp/test/message_buffer/message.cpp	/^struct stub {$/;"	s	file:
stub	NFD/websocketpp/websocketpp/logger/stub.hpp	/^    _WEBSOCKETPP_CONSTEXPR_TOKEN_ stub() {}$/;"	f	class:websocketpp::log::stub
stub	NFD/websocketpp/websocketpp/logger/stub.hpp	/^    explicit stub(channel_type_hint::value) {}$/;"	f	class:websocketpp::log::stub
stub	NFD/websocketpp/websocketpp/logger/stub.hpp	/^    stub(level, channel_type_hint::value) {}$/;"	f	class:websocketpp::log::stub
stub	NFD/websocketpp/websocketpp/logger/stub.hpp	/^class stub {$/;"	c	namespace:websocketpp::log
stub	NFD/websocketpp/websocketpp/transport/stub/base.hpp	/^namespace stub {$/;"	n	namespace:websocketpp::transport
stub	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^namespace stub {$/;"	n	namespace:websocketpp::transport
stub	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^namespace stub {$/;"	n	namespace:websocketpp::transport
stub_con	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    stub_con(bool is_server, config::alog_type & a, config::elog_type & e)$/;"	f	struct:stub_con
stub_con	NFD/websocketpp/test/transport/iostream/connection.cpp	/^struct stub_con : public iostream_con {$/;"	s	file:
stub_config	NFD/websocketpp/test/connection/connection.cpp	/^struct stub_config : public websocketpp::config::core {$/;"	s	file:
stub_config	NFD/websocketpp/test/endpoint/endpoint.cpp	/^struct stub_config : public websocketpp::config::core {$/;"	s	file:
stub_config	NFD/websocketpp/test/processors/hybi00.cpp	/^struct stub_config {$/;"	s	file:
stub_config	NFD/websocketpp/test/processors/hybi07.cpp	/^struct stub_config {$/;"	s	file:
stub_config	NFD/websocketpp/test/processors/hybi08.cpp	/^struct stub_config {$/;"	s	file:
stub_config	NFD/websocketpp/test/processors/hybi13.cpp	/^struct stub_config {$/;"	s	file:
stub_config	NFD/websocketpp/test/roles/client.cpp	/^struct stub_config : public websocketpp::config::core {$/;"	s	file:
stub_config_ext	NFD/websocketpp/test/processors/hybi13.cpp	/^struct stub_config_ext {$/;"	s	file:
subprotocol_error	NFD/websocketpp/websocketpp/close.hpp	/^    static value const subprotocol_error = 3000;$/;"	m	namespace:websocketpp::close::status
subprotocol_parse_error	NFD/websocketpp/websocketpp/processors/base.hpp	/^    subprotocol_parse_error,$/;"	e	enum:websocketpp::processor::error::processor_errors
subscriber	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  util::NotificationSubscriber<SimpleNotification> subscriber;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
subscriberFace	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^  shared_ptr<DummyClientFace> subscriberFace;$/;"	m	class:ndn::util::tests::EndToEndFixture	file:
subtract	ndn-cxx/src/util/monotonic_deadline_timer.hpp	/^  subtract(const time_type& timeLhs, const time_type& timeRhs)$/;"	f	struct:boost::asio::time_traits
succeed	NFD/tools/nfdc.cpp	/^Nfdc::FaceIdFetcher::succeed(uint32_t faceId)$/;"	f	class:nfdc::Nfdc::FaceIdFetcher
super	model/cs/content-store-impl.hpp	/^                     Policy> super;$/;"	t	class:ns3::ndn::cs::ContentStoreImpl
super	model/cs/content-store-with-freshness.hpp	/^    super;$/;"	t	class:ns3::ndn::cs::ContentStoreWithFreshness
super	model/cs/content-store-with-probability.hpp	/^                                                                 Policy>>> super;$/;"	t	class:ns3::ndn::cs::ContentStoreWithProbability
super	model/cs/content-store-with-stats.hpp	/^    super;$/;"	t	class:ns3::ndn::cs::ContentStoreWithStats
super	utils/trie/detail/multi-policy-container.hpp	/^                           policy_wrap<Base, boost::mpl::_2> \/*element in vector*\/>>::type super;$/;"	t	struct:ns3::ndn::ndnSIM::detail::multi_policy_container
suppressionInterval	NFD/daemon/fw/retx-suppression-exponential.cpp	/^  Duration suppressionInterval;$/;"	m	class:nfd::fw::RetxSuppressionExponential::PitInfo	file:
switching_protocols	NFD/websocketpp/websocketpp/http/constants.hpp	/^            switching_protocols = 101,$/;"	e	enum:websocketpp::http::status_code::value
sync	ndn-cxx/src/util/indented-stream.cpp	/^IndentedStream::StreamBuf::sync()$/;"	f	class:ndn::util::IndentedStream::StreamBuf
syncResolve	ndn-cxx/src/util/dns.cpp	/^  syncResolve(BoostResolver::query query)$/;"	f	class:ndn::dns::Resolver
syncResolve	ndn-cxx/src/util/dns.cpp	/^syncResolve(const std::string& host, boost::asio::io_service& ioService,$/;"	f	namespace:ndn::dns
syslog	NFD/websocketpp/websocketpp/logger/syslog.hpp	/^    syslog<concurrency,names>(channel_type_hint::value hint =$/;"	f	class:websocketpp::log::syslog
syslog	NFD/websocketpp/websocketpp/logger/syslog.hpp	/^    syslog<concurrency,names>(level channels, channel_type_hint::value hint =$/;"	f	class:websocketpp::log::syslog
syslog	NFD/websocketpp/websocketpp/logger/syslog.hpp	/^class syslog : public basic<concurrency, names> {$/;"	c	namespace:websocketpp::log
syslog_priority	NFD/websocketpp/websocketpp/logger/syslog.hpp	/^    int syslog_priority(level channel) const {$/;"	f	class:websocketpp::log::syslog
syslog_priority_access	NFD/websocketpp/websocketpp/logger/syslog.hpp	/^    _WEBSOCKETPP_CONSTEXPR_TOKEN_ int syslog_priority_access(level) const {$/;"	f	class:websocketpp::log::syslog
syslog_priority_error	NFD/websocketpp/websocketpp/logger/syslog.hpp	/^    int syslog_priority_error(level channel) const {$/;"	f	class:websocketpp::log::syslog
systemClock	NFD/tests/test-common.hpp	/^  shared_ptr<time::UnitTestSystemClock> systemClock;$/;"	m	class:nfd::tests::UnitTestTimeFixture
systemClock	ndn-cxx/tests/unit-tests/unit-test-time-fixture.hpp	/^  shared_ptr<time::UnitTestSystemClock> systemClock;$/;"	m	class:ndn::tests::UnitTestTimeFixture
systemClock	ndn-cxx/tests/unit-tests/util/time-unit-test-clock.t.cpp	/^  shared_ptr<time::UnitTestSystemClock> systemClock;$/;"	m	class:ndn::tests::UnitTestTimeFixture	file:
system_clock	ndn-cxx/src/util/time.hpp	/^class system_clock$/;"	c	namespace:ndn::time
target	helper/boost-graph-ndn-global-routing-helper.hpp	/^target(graph_traits<NdnGlobalRouterGraph>::edge_descriptor e, const NdnGlobalRouterGraph& g)$/;"	f	namespace:boost
tcp	NFD/daemon/face/tcp-channel.hpp	/^namespace tcp {$/;"	n	namespace:nfd
tcp_init_handler	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^typedef lib::function<void(connection_hdl)> tcp_init_handler;$/;"	t	namespace:websocketpp::transport::asio
telemetry_client	NFD/websocketpp/examples/telemetry_client/telemetry_client.cpp	/^    telemetry_client() : m_open(false),m_done(false) {$/;"	f	class:telemetry_client
telemetry_client	NFD/websocketpp/examples/telemetry_client/telemetry_client.cpp	/^class telemetry_client {$/;"	c	file:
telemetry_loop	NFD/websocketpp/examples/telemetry_client/telemetry_client.cpp	/^    void telemetry_loop() {$/;"	f	class:telemetry_client
telemetry_server	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^    telemetry_server() : m_count(0) {$/;"	f	class:telemetry_server
telemetry_server	NFD/websocketpp/examples/telemetry_server/telemetry_server.cpp	/^class telemetry_server {$/;"	c	file:
temporary_redirect	NFD/websocketpp/websocketpp/http/constants.hpp	/^            temporary_redirect = 307,$/;"	e	enum:websocketpp::http::status_code::value
terminal	NFD/websocketpp/websocketpp/close.hpp	/^    inline bool terminal(value code) {$/;"	f	namespace:websocketpp::close::status
terminate	NFD/daemon/main.cpp	/^  terminate(const boost::system::error_code& error, int signalNo)$/;"	f	class:nfd::NfdRunner
terminate	NFD/tools/ndn-autoconfig/main.cpp	/^  terminate(const boost::system::error_code& error, int signalNo)$/;"	f	class:ndn::tools::NdnAutoconfig
terminate	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::terminate(lib::error_code const & ec) {$/;"	f	class:websocketpp::connection
terminate	ndn-cxx/tests/integrated/face.cpp	/^  terminate(Face& face)$/;"	f	class:ndn::tests::FacesFixture
terminate_status	NFD/websocketpp/websocketpp/connection.hpp	/^    enum terminate_status {$/;"	g	class:websocketpp::connection
termination_handler	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef lib::function<void(ptr)> termination_handler;$/;"	t	class:websocketpp::connection
termination_handler	NFD/websocketpp/websocketpp/endpoint.hpp	/^    typedef typename connection_type::termination_handler termination_handler;$/;"	t	class:websocketpp::endpoint
test	NFD/websocketpp/websocketpp/error.hpp	/^    test,$/;"	e	enum:websocketpp::error::value
test	ndn-cxx/tests/unit-tests/security/validity-period.t.cpp	/^namespace test {$/;"	n	namespace:ndn::security	file:
test	ndn-cxx/tests/unit-tests/util/digest.t.cpp	/^namespace test {$/;"	n	namespace:ndn::util	file:
test	ndn-cxx/tests/unit-tests/util/string-helper.t.cpp	/^namespace test {$/;"	n	namespace:ndn::util	file:
testModuleBPrint	NFD/tests/core/logger.t.cpp	/^testModuleBPrint()$/;"	f	namespace:nfd::tests
testRemoveNextHop	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^testRemoveNextHop(CommandFixture<FibManagerFixture>* fixture,$/;"	f	namespace:nfd::tests
testSendResponse	NFD/tests/daemon/mgmt/manager-base.t.cpp	/^  testSendResponse(const Name& name,$/;"	f	class:nfd::tests::ManagerBaseTest
testSetResponse	NFD/tests/daemon/mgmt/manager-base.t.cpp	/^  testSetResponse(ControlResponse& response,$/;"	f	class:nfd::tests::ManagerBaseTest
testee_config	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^struct testee_config : public websocketpp::config::asio {$/;"	s	file:
tests	NFD/tests/core/algorithm.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/core/config-file.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/core/global-io.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/core/logger.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/core/ndebug.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/core/network-interface.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/core/network.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/core/notification-stream.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/core/privilege-helper.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/core/random.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/core/scheduler.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/core/segment-publisher.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/core/simple-notification.hpp	/^namespace tests {$/;"	n	namespace:nfd
tests	NFD/tests/core/version.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/face/dummy-face.hpp	/^namespace tests {$/;"	n	namespace:nfd
tests	NFD/tests/daemon/face/dummy-stream-sender.hpp	/^namespace tests {$/;"	n	namespace:nfd
tests	NFD/tests/daemon/face/ethernet.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/face/face-counters.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/face/face-history.hpp	/^namespace tests {$/;"	n	namespace:nfd
tests	NFD/tests/daemon/face/face.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/face/ndnlp.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::ndnlp	file:
tests	NFD/tests/daemon/face/null-face.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/face/packet-datasets.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/face/packet-datasets.hpp	/^namespace tests {$/;"	n	namespace:nfd
tests	NFD/tests/daemon/face/tcp.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/face/udp.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/face/unix-stream.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/face/websocket.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/fw/access-strategy.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::fw	file:
tests	NFD/tests/daemon/fw/best-route-strategy2.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::fw	file:
tests	NFD/tests/daemon/fw/broadcast-strategy.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::fw	file:
tests	NFD/tests/daemon/fw/client-control-strategy.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::fw	file:
tests	NFD/tests/daemon/fw/dummy-strategy.hpp	/^namespace tests {$/;"	n	namespace:nfd
tests	NFD/tests/daemon/fw/face-table.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/fw/forwarder.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/fw/multicast-strategy.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::fw	file:
tests	NFD/tests/daemon/fw/ncc-strategy.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::fw	file:
tests	NFD/tests/daemon/fw/retx-suppression.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::fw	file:
tests	NFD/tests/daemon/fw/rtt-estimator.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/fw/strategy-tester.hpp	/^namespace tests {$/;"	n	namespace:nfd::fw
tests	NFD/tests/daemon/fw/strategy.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::fw	file:
tests	NFD/tests/daemon/fw/topology-tester.hpp	/^namespace tests {$/;"	n	namespace:nfd::fw
tests	NFD/tests/daemon/mgmt/channel-status-common.hpp	/^namespace tests {$/;"	n	namespace:nfd
tests	NFD/tests/daemon/mgmt/channel-status-publisher.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^namespace tests {$/;"	n	namespace:nfd
tests	NFD/tests/daemon/mgmt/face-query-status-publisher.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^namespace tests {$/;"	n	namespace:nfd
tests	NFD/tests/daemon/mgmt/face-status-publisher.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^namespace tests {$/;"	n	namespace:nfd
tests	NFD/tests/daemon/mgmt/fib-enumeration-publisher.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/mgmt/general-config-section.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::general	file:
tests	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/mgmt/manager-base.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/mgmt/status-server.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/mgmt/validation-common.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/mgmt/validation-common.hpp	/^namespace tests {$/;"	n	namespace:nfd
tests	NFD/tests/daemon/table/cs-policy-lru.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::cs	file:
tests	NFD/tests/daemon/table/cs-policy-priority-fifo.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::cs	file:
tests	NFD/tests/daemon/table/cs.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::cs	file:
tests	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/table/fib.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/table/measurements.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/table/name-tree.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/table/pit.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::pit	file:
tests	NFD/tests/daemon/table/strategy-choice.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/daemon/table/strategy-info-host.t.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/global-configuration.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/identity-management-fixture.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/identity-management-fixture.hpp	/^namespace tests {$/;"	n	namespace:nfd
tests	NFD/tests/limited-io.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/limited-io.hpp	/^namespace tests {$/;"	n	namespace:nfd
tests	NFD/tests/other/cs-benchmark.cpp	/^namespace tests {$/;"	n	namespace:nfd	file:
tests	NFD/tests/rib/fib-updates-common.hpp	/^namespace tests {$/;"	n	namespace:nfd::rib
tests	NFD/tests/rib/fib-updates-erase-face.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::rib	file:
tests	NFD/tests/rib/fib-updates-new-face.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::rib	file:
tests	NFD/tests/rib/fib-updates-new-namespace.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::rib	file:
tests	NFD/tests/rib/fib-updates-update-face.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::rib	file:
tests	NFD/tests/rib/remote-registrator.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::rib	file:
tests	NFD/tests/rib/rib-manager.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::rib	file:
tests	NFD/tests/rib/rib-status-publisher-common.hpp	/^namespace tests {$/;"	n	namespace:nfd::rib
tests	NFD/tests/rib/rib-status-publisher.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::rib	file:
tests	NFD/tests/rib/rib-test-common.hpp	/^namespace tests {$/;"	n	namespace:nfd::rib
tests	NFD/tests/rib/rib-update.cpp	/^namespace tests {$/;"	n	namespace:nfd::rib	file:
tests	NFD/tests/rib/rib.t.cpp	/^namespace tests {$/;"	n	namespace:nfd::rib	file:
tests	NFD/tests/test-common.hpp	/^namespace tests {$/;"	n	namespace:nfd
tests	ndn-cxx/tests/integrated/face.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/data.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/encoding/block-helpers.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::encoding	file:
tests	ndn-cxx/tests/unit-tests/encoding/block.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/encoding/encoder.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::encoding	file:
tests	ndn-cxx/tests/unit-tests/encoding/estimator.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::encoding	file:
tests	ndn-cxx/tests/unit-tests/encoding/tlv.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::tlv	file:
tests	ndn-cxx/tests/unit-tests/exclude.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/face.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/interest.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/key-locator.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/link.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/lp/cache-policy.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::lp	file:
tests	ndn-cxx/tests/unit-tests/lp/nack-header.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::lp	file:
tests	ndn-cxx/tests/unit-tests/lp/nack.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::lp	file:
tests	ndn-cxx/tests/unit-tests/lp/packet.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::lp	file:
tests	ndn-cxx/tests/unit-tests/management/nfd-channel-status.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	ndn-cxx/tests/unit-tests/management/nfd-command-options.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	ndn-cxx/tests/unit-tests/management/nfd-control-command.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	ndn-cxx/tests/unit-tests/management/nfd-control-parameters.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	ndn-cxx/tests/unit-tests/management/nfd-control-response.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	ndn-cxx/tests/unit-tests/management/nfd-controller.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	ndn-cxx/tests/unit-tests/management/nfd-face-event-notification.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	ndn-cxx/tests/unit-tests/management/nfd-face-query-filter.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	ndn-cxx/tests/unit-tests/management/nfd-face-status.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	ndn-cxx/tests/unit-tests/management/nfd-fib-entry.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	ndn-cxx/tests/unit-tests/management/nfd-forwarder-status.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	ndn-cxx/tests/unit-tests/management/nfd-rib-entry.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	ndn-cxx/tests/unit-tests/management/nfd-strategy-choice.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::nfd	file:
tests	ndn-cxx/tests/unit-tests/meta-info.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/mgmt/dispatcher.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::mgmt	file:
tests	ndn-cxx/tests/unit-tests/mgmt/status-dataset-context.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::mgmt	file:
tests	ndn-cxx/tests/unit-tests/name.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/ndebug.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/network-configuration-detector.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/network-configuration-detector.hpp	/^namespace tests {$/;"	n	namespace:ndn
tests	ndn-cxx/tests/unit-tests/security/additional-info.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	ndn-cxx/tests/unit-tests/security/certificate-cache-ttl.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/security/certificate-container.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	ndn-cxx/tests/unit-tests/security/conf/checker.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security::conf	file:
tests	ndn-cxx/tests/unit-tests/security/digest-sha256.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/security/identity-container.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	ndn-cxx/tests/unit-tests/security/identity-management-fixture.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	ndn-cxx/tests/unit-tests/security/identity.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	ndn-cxx/tests/unit-tests/security/key-chain.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	ndn-cxx/tests/unit-tests/security/key-container.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	ndn-cxx/tests/unit-tests/security/key-params.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/security/key.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	ndn-cxx/tests/unit-tests/security/pib-impl.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	ndn-cxx/tests/unit-tests/security/pib-memory.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	ndn-cxx/tests/unit-tests/security/pib-sqlite3.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	ndn-cxx/tests/unit-tests/security/pib.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	ndn-cxx/tests/unit-tests/security/public-key.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/security/sec-rule-relative.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	ndn-cxx/tests/unit-tests/security/sec-rule-specific.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	ndn-cxx/tests/unit-tests/security/sec-tpm-file.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/security/sec-tpm-osx.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/security/signature-sha256-with-ecdsa.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/security/signature-sha256-with-rsa.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/security/signing-helpers.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	ndn-cxx/tests/unit-tests/security/signing-info.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::security	file:
tests	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/security/validator.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/signature-info.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/tag-host.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/transport/tcp-transport.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/transport/unix-transport.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/unit-test-time-fixture.hpp	/^namespace tests {$/;"	n	namespace:ndn
tests	ndn-cxx/tests/unit-tests/util/concepts.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/util/config-file.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/util/dns.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	ndn-cxx/tests/unit-tests/util/ethernet.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	ndn-cxx/tests/unit-tests/util/in-memory-storage-fifo.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	ndn-cxx/tests/unit-tests/util/in-memory-storage-lfu.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	ndn-cxx/tests/unit-tests/util/in-memory-storage-lru.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	ndn-cxx/tests/unit-tests/util/in-memory-storage-persistent.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	ndn-cxx/tests/unit-tests/util/indented-stream.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	ndn-cxx/tests/unit-tests/util/io.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/util/notification-stream.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	ndn-cxx/tests/unit-tests/util/random.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/util/regex.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util::scheduler	file:
tests	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util::signal	file:
tests	ndn-cxx/tests/unit-tests/util/simple-notification.hpp	/^namespace tests {$/;"	n	namespace:ndn::util
tests	ndn-cxx/tests/unit-tests/util/sqlite3-statement.t.cpp	/^namespace tests {$/;"	n	namespace:ndn::util	file:
tests	ndn-cxx/tests/unit-tests/util/time-unit-test-clock.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/util/time.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
tests	ndn-cxx/tests/unit-tests/version.t.cpp	/^namespace tests {$/;"	n	namespace:ndn	file:
text	NFD/websocketpp/websocketpp/frame.hpp	/^        text = 0x1,$/;"	e	enum:websocketpp::frame::opcode::value
text	ndn-cxx/tests/unit-tests/security/additional-info.t.cpp	/^static const std::string text = "((key1:val1), (key2:val2))";$/;"	m	namespace:ndn::security::tests	file:
throwErrorOnUnknownSection	NFD/core/config-file.cpp	/^ConfigFile::throwErrorOnUnknownSection(const std::string& filename,$/;"	f	class:nfd::ConfigFile
time	apps/ndn-consumer.hpp	/^    Time time;$/;"	m	struct:ns3::ndn::Consumer::SeqTimeout
time	model/ndn-common.hpp	/^namespace time {$/;"	n	namespace:ns3::ndn
time	ndn-cxx/src/util/time-custom-clock.hpp	/^namespace time {$/;"	n	namespace:ndn
time	ndn-cxx/src/util/time-unit-test-clock.cpp	/^namespace time {$/;"	n	namespace:ndn	file:
time	ndn-cxx/src/util/time-unit-test-clock.hpp	/^namespace time {$/;"	n	namespace:ndn
time	ndn-cxx/src/util/time.cpp	/^namespace time {$/;"	n	namespace:ndn	file:
time	ndn-cxx/src/util/time.hpp	/^namespace time {$/;"	n	namespace:ndn
time	utils/ndn-rtt-estimator.hpp	/^  Time time;            \/\/ Time this one was sent$/;"	m	class:ns3::ndn::RttHistory
time	utils/ndn-time.cpp	/^namespace time {$/;"	n	namespace:ns3::ndn	file:
time	utils/ndn-time.hpp	/^namespace time {$/;"	n	namespace:ns3::ndn
timeUnit	NFD/tests/daemon/table/dead-nonce-list.t.cpp	/^  time::nanoseconds timeUnit;$/;"	m	class:nfd::tests::PeriodicalInsertionFixture	file:
timeWhenAdded	model/cs/custom-policies/lifetime-stats-policy.hpp	/^    Time timeWhenAdded;$/;"	m	struct:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy_hook_type
timeWhenShouldExpire	model/cs/custom-policies/freshness-policy.hpp	/^    Time timeWhenShouldExpire;$/;"	m	struct:ns3::ndn::ndnSIM::freshness_policy_traits::policy_hook_type
time_point	ndn-cxx/src/util/time.hpp	/^  typedef boost::chrono::time_point<steady_clock> time_point;$/;"	t	class:ndn::time::steady_clock
time_point	ndn-cxx/src/util/time.hpp	/^  typedef boost::chrono::time_point<system_clock> time_point;$/;"	t	class:ndn::time::system_clock
time_traits	ndn-cxx/src/util/monotonic_deadline_timer.hpp	/^struct time_traits<ndn::time::steady_clock>$/;"	s	namespace:boost::asio
time_type	ndn-cxx/src/util/monotonic_deadline_timer.hpp	/^  typedef ndn::time::steady_clock::TimePoint time_type;$/;"	t	struct:boost::asio::time_traits
timedRun	NFD/tests/other/cs-benchmark.cpp	/^  timedRun(std::function<void()> f)$/;"	f	class:nfd::tests::CsBenchmarkFixture
timeout	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    timeout,$/;"	e	enum:websocketpp::transport::error::value
timeoutOnBestFace	NFD/daemon/fw/ncc-strategy.cpp	/^NccStrategy::timeoutOnBestFace(weak_ptr<pit::Entry> pitEntryWeak)$/;"	f	class:nfd::fw::NccStrategy
timeout_close_handshake	NFD/websocketpp/test/transport/integration.cpp	/^    static const long timeout_close_handshake = 500;$/;"	m	struct:config	file:
timeout_close_handshake	NFD/websocketpp/test/transport/integration.cpp	/^    static const long timeout_close_handshake = 500;$/;"	m	struct:config_tls	file:
timeout_close_handshake	NFD/websocketpp/websocketpp/config/core.hpp	/^    static const long timeout_close_handshake = 5000;$/;"	m	struct:websocketpp::config::core
timeout_close_handshake	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    static const long timeout_close_handshake = 5000;$/;"	m	struct:websocketpp::config::core_client
timeout_close_handshake	NFD/websocketpp/websocketpp/config/debug.hpp	/^    static const long timeout_close_handshake = 5000;$/;"	m	struct:websocketpp::config::debug_core
timeout_close_handshake	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    static const long timeout_close_handshake = 5000;$/;"	m	struct:websocketpp::config::minimal_server
timeout_connect	NFD/websocketpp/test/connection/connection.cpp	/^        static const long timeout_connect = 5000;$/;"	m	struct:debug_config_client::transport_config	file:
timeout_connect	NFD/websocketpp/test/transport/asio/timers.cpp	/^    static const long timeout_connect = 1000;$/;"	m	struct:config	file:
timeout_connect	NFD/websocketpp/websocketpp/config/core.hpp	/^        static const long timeout_connect = 5000;$/;"	m	struct:websocketpp::config::core::transport_config
timeout_connect	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        static const long timeout_connect = 5000;$/;"	m	struct:websocketpp::config::core_client::transport_config
timeout_connect	NFD/websocketpp/websocketpp/config/debug.hpp	/^        static const long timeout_connect = 5000;$/;"	m	struct:websocketpp::config::debug_core::transport_config
timeout_connect	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        static const long timeout_connect = 5000;$/;"	m	struct:websocketpp::config::minimal_server::transport_config
timeout_dns_resolve	NFD/websocketpp/test/transport/asio/timers.cpp	/^    static const long timeout_dns_resolve = 1000;$/;"	m	struct:config	file:
timeout_dns_resolve	NFD/websocketpp/websocketpp/config/core.hpp	/^        static const long timeout_dns_resolve = 5000;$/;"	m	struct:websocketpp::config::core::transport_config
timeout_dns_resolve	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        static const long timeout_dns_resolve = 5000;$/;"	m	struct:websocketpp::config::core_client::transport_config
timeout_dns_resolve	NFD/websocketpp/websocketpp/config/debug.hpp	/^        static const long timeout_dns_resolve = 5000;$/;"	m	struct:websocketpp::config::debug_core::transport_config
timeout_dns_resolve	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        static const long timeout_dns_resolve = 5000;$/;"	m	struct:websocketpp::config::minimal_server::transport_config
timeout_open_handshake	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^    static const long timeout_open_handshake = 0;$/;"	m	struct:debug_custom	file:
timeout_open_handshake	NFD/websocketpp/test/transport/integration.cpp	/^    static const long timeout_open_handshake = 500;$/;"	m	struct:config	file:
timeout_open_handshake	NFD/websocketpp/test/transport/integration.cpp	/^    static const long timeout_open_handshake = 500;$/;"	m	struct:config_tls	file:
timeout_open_handshake	NFD/websocketpp/websocketpp/config/core.hpp	/^    static const long timeout_open_handshake = 5000;$/;"	m	struct:websocketpp::config::core
timeout_open_handshake	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    static const long timeout_open_handshake = 5000;$/;"	m	struct:websocketpp::config::core_client
timeout_open_handshake	NFD/websocketpp/websocketpp/config/debug.hpp	/^    static const long timeout_open_handshake = 5000;$/;"	m	struct:websocketpp::config::debug_core
timeout_open_handshake	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    static const long timeout_open_handshake = 5000;$/;"	m	struct:websocketpp::config::minimal_server
timeout_pong	NFD/websocketpp/test/transport/integration.cpp	/^    static const long timeout_pong = 500;$/;"	m	struct:config	file:
timeout_pong	NFD/websocketpp/test/transport/integration.cpp	/^    static const long timeout_pong = 500;$/;"	m	struct:config_tls	file:
timeout_pong	NFD/websocketpp/websocketpp/config/core.hpp	/^    static const long timeout_pong = 5000;$/;"	m	struct:websocketpp::config::core
timeout_pong	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    static const long timeout_pong = 5000;$/;"	m	struct:websocketpp::config::core_client
timeout_pong	NFD/websocketpp/websocketpp/config/debug.hpp	/^    static const long timeout_pong = 5000;$/;"	m	struct:websocketpp::config::debug_core
timeout_pong	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    static const long timeout_pong = 5000;$/;"	m	struct:websocketpp::config::minimal_server
timeout_proxy	NFD/websocketpp/test/connection/connection.cpp	/^        static const long timeout_proxy = 5000;$/;"	m	struct:debug_config_client::transport_config	file:
timeout_proxy	NFD/websocketpp/test/transport/asio/timers.cpp	/^    static const long timeout_proxy = 1000;$/;"	m	struct:config	file:
timeout_proxy	NFD/websocketpp/websocketpp/config/core.hpp	/^        static const long timeout_proxy = 5000;$/;"	m	struct:websocketpp::config::core::transport_config
timeout_proxy	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        static const long timeout_proxy = 5000;$/;"	m	struct:websocketpp::config::core_client::transport_config
timeout_proxy	NFD/websocketpp/websocketpp/config/debug.hpp	/^        static const long timeout_proxy = 5000;$/;"	m	struct:websocketpp::config::debug_core::transport_config
timeout_proxy	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        static const long timeout_proxy = 5000;$/;"	m	struct:websocketpp::config::minimal_server::transport_config
timeout_proxy	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^        long timeout_proxy;$/;"	m	struct:websocketpp::transport::asio::connection::proxy_data
timeout_socket_post_init	NFD/websocketpp/test/connection/connection.cpp	/^        static const long timeout_socket_post_init = 5000;$/;"	m	struct:debug_config_client::transport_config	file:
timeout_socket_post_init	NFD/websocketpp/test/transport/asio/timers.cpp	/^    static const long timeout_socket_post_init = 1000;$/;"	m	struct:config	file:
timeout_socket_post_init	NFD/websocketpp/websocketpp/config/core.hpp	/^        static const long timeout_socket_post_init = 5000;$/;"	m	struct:websocketpp::config::core::transport_config
timeout_socket_post_init	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        static const long timeout_socket_post_init = 5000;$/;"	m	struct:websocketpp::config::core_client::transport_config
timeout_socket_post_init	NFD/websocketpp/websocketpp/config/debug.hpp	/^        static const long timeout_socket_post_init = 5000;$/;"	m	struct:websocketpp::config::debug_core::transport_config
timeout_socket_post_init	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        static const long timeout_socket_post_init = 5000;$/;"	m	struct:websocketpp::config::minimal_server::transport_config
timeout_socket_pre_init	NFD/websocketpp/test/connection/connection.cpp	/^        static const long timeout_socket_pre_init = 5000;$/;"	m	struct:debug_config_client::transport_config	file:
timeout_socket_pre_init	NFD/websocketpp/test/transport/asio/timers.cpp	/^    static const long timeout_socket_pre_init = 1000;$/;"	m	struct:config	file:
timeout_socket_pre_init	NFD/websocketpp/websocketpp/config/core.hpp	/^        static const long timeout_socket_pre_init = 5000;$/;"	m	struct:websocketpp::config::core::transport_config
timeout_socket_pre_init	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        static const long timeout_socket_pre_init = 5000;$/;"	m	struct:websocketpp::config::core_client::transport_config
timeout_socket_pre_init	NFD/websocketpp/websocketpp/config/debug.hpp	/^        static const long timeout_socket_pre_init = 5000;$/;"	m	struct:websocketpp::config::debug_core::transport_config
timeout_socket_pre_init	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        static const long timeout_socket_pre_init = 5000;$/;"	m	struct:websocketpp::config::minimal_server::transport_config
timeout_socket_shutdown	NFD/websocketpp/test/connection/connection.cpp	/^        static const long timeout_socket_shutdown = 5000;$/;"	m	struct:debug_config_client::transport_config	file:
timeout_socket_shutdown	NFD/websocketpp/test/transport/asio/timers.cpp	/^    static const long timeout_socket_shutdown = 1000;$/;"	m	struct:config	file:
timeout_socket_shutdown	NFD/websocketpp/websocketpp/config/core.hpp	/^        static const long timeout_socket_shutdown = 5000;$/;"	m	struct:websocketpp::config::core::transport_config
timeout_socket_shutdown	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        static const long timeout_socket_shutdown = 5000;$/;"	m	struct:websocketpp::config::core_client::transport_config
timeout_socket_shutdown	NFD/websocketpp/websocketpp/config/debug.hpp	/^        static const long timeout_socket_shutdown = 5000;$/;"	m	struct:websocketpp::config::debug_core::transport_config
timeout_socket_shutdown	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        static const long timeout_socket_shutdown = 5000;$/;"	m	struct:websocketpp::config::minimal_server::transport_config
timer	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^        timer_ptr timer;$/;"	m	struct:websocketpp::transport::asio::connection::proxy_data
timer	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^struct timer {$/;"	s	namespace:websocketpp::transport::debug
timer	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^struct timer {$/;"	s	namespace:websocketpp::transport::iostream
timer	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^struct timer {$/;"	s	namespace:websocketpp::transport::stub
timer_callback_stub	NFD/websocketpp/test/transport/iostream/connection.cpp	/^void timer_callback_stub(websocketpp::lib::error_code const &) {}$/;"	f
timer_handler	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^typedef lib::function<void(lib::error_code const &)> timer_handler;$/;"	t	namespace:websocketpp::transport
timer_ptr	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    typedef iostream_con::timer_ptr timer_ptr;$/;"	t	struct:stub_con	file:
timer_ptr	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef typename transport_con_type::timer_ptr timer_ptr;$/;"	t	class:websocketpp::connection
timer_ptr	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    typedef lib::shared_ptr<boost::asio::deadline_timer> timer_ptr;$/;"	t	class:websocketpp::transport::asio::connection
timer_ptr	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    typedef lib::shared_ptr<boost::asio::deadline_timer> timer_ptr;$/;"	t	class:websocketpp::transport::asio::endpoint
timer_ptr	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    typedef lib::shared_ptr<timer> timer_ptr;$/;"	t	class:websocketpp::transport::debug::connection
timer_ptr	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    typedef lib::shared_ptr<timer> timer_ptr;$/;"	t	class:websocketpp::transport::iostream::connection
timer_ptr	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    typedef lib::shared_ptr<timer> timer_ptr;$/;"	t	class:websocketpp::transport::stub::connection
timestamp	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    static std::ostream & timestamp(std::ostream & os) {$/;"	f	class:websocketpp::log::basic
tls_error	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    tls_error$/;"	e	enum:websocketpp::transport::error::value
tls_handshake	NFD/websocketpp/websocketpp/close.hpp	/^    static value const tls_handshake = 1015;$/;"	m	namespace:websocketpp::close::status
tls_handshake_failed	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^        tls_handshake_failed$/;"	e	enum:websocketpp::transport::asio::socket::error::value
tls_handshake_timeout	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^        tls_handshake_timeout,$/;"	e	enum:websocketpp::transport::asio::socket::error::value
tls_init_handler	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    tls_init_handler;$/;"	t	namespace:websocketpp::transport::asio::tls_socket
tls_short_read	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    tls_short_read,$/;"	e	enum:websocketpp::transport::error::value
tls_socket	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^namespace tls_socket {$/;"	n	namespace:websocketpp::transport::asio
tlv	NFD/common.hpp	/^namespace tlv {$/;"	n	namespace:nfd
tlv	NFD/daemon/face/ndnlp-tlv.hpp	/^namespace tlv {$/;"	n	namespace:nfd
tlv	ndn-cxx/src/encoding/tlv-nfd.hpp	/^namespace tlv {$/;"	n	namespace:ndn
tlv	ndn-cxx/src/encoding/tlv-security.hpp	/^namespace tlv {$/;"	n	namespace:ndn
tlv	ndn-cxx/src/encoding/tlv.hpp	/^namespace tlv {$/;"	n	namespace:ndn
tlv	ndn-cxx/src/lp/tlv.hpp	/^namespace tlv {$/;"	n	namespace:ndn::lp
tlv	ndn-cxx/tests/unit-tests/encoding/tlv.t.cpp	/^namespace tlv {$/;"	n	namespace:ndn	file:
tlvType	ndn-cxx/src/lp/detail/field-info.hpp	/^  uint64_t tlvType;$/;"	m	class:ndn::lp::detail::FieldInfo
tmpPath	ndn-cxx/tests/unit-tests/security/pib-impl.t.cpp	/^  boost::filesystem::path tmpPath;$/;"	m	class:ndn::security::tests::PibSqlite3Wrapper	file:
tmpPath	ndn-cxx/tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^  boost::filesystem::path tmpPath;$/;"	m	class:ndn::tests::PibTmpPathFixture	file:
toEscapedString	ndn-cxx/src/name-component.hpp	/^  toEscapedString() const)$/;"	f	class:ndn::name::Component
toHex	ndn-cxx/src/util/string-helper.cpp	/^toHex(const Buffer& buffer, bool isUpperCase\/* = true*\/)$/;"	f	namespace:ndn
toHex	ndn-cxx/src/util/string-helper.cpp	/^toHex(const uint8_t* buffer, size_t length, bool isUpperCase\/* = true*\/)$/;"	f	namespace:ndn
toInternalKeyName	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::Impl::toInternalKeyName(const Name& keyName, KeyClass keyClass)$/;"	f	class:ndn::SecTpmOsx::Impl
toIsoString	ndn-cxx/src/util/time.cpp	/^toIsoString(const system_clock::TimePoint& timePoint)$/;"	f	namespace:ndn::time
toNumber	ndn-cxx/src/name-component.cpp	/^Component::toNumber() const$/;"	f	class:ndn::name::Component
toNumberWithMarker	ndn-cxx/src/name-component.cpp	/^Component::toNumberWithMarker(uint8_t marker) const$/;"	f	class:ndn::name::Component
toPosixDuration	ndn-cxx/src/util/time-unit-test-clock.cpp	/^UnitTestClock<BaseClock>::toPosixDuration(const typename BaseClock::duration& duration) const$/;"	f	class:ndn::time::UnitTestClock
toPosixDuration	utils/ndn-time.cpp	/^CustomSteadyClock::toPosixDuration(const steady_clock::duration& duration) const$/;"	f	class:ns3::ndn::time::CustomSteadyClock
toPosixDuration	utils/ndn-time.cpp	/^CustomSystemClock::toPosixDuration(const system_clock::duration& duration) const$/;"	f	class:ns3::ndn::time::CustomSystemClock
toSegment	ndn-cxx/src/name-component.cpp	/^Component::toSegment() const$/;"	f	class:ndn::name::Component
toSegmentOffset	ndn-cxx/src/name-component.cpp	/^Component::toSegmentOffset() const$/;"	f	class:ndn::name::Component
toSequenceNumber	ndn-cxx/src/name-component.cpp	/^Component::toSequenceNumber() const$/;"	f	class:ndn::name::Component
toString	ndn-cxx/src/encoding/oid.cpp	/^OID::toString() const$/;"	f	class:ndn::OID
toString	ndn-cxx/src/util/digest.cpp	/^Digest<Hash>::toString()$/;"	f	class:ndn::util::Digest
toString	ndn-cxx/src/util/ethernet.cpp	/^Address::toString(char sep) const$/;"	f	class:ndn::util::ethernet::Address
toString	ndn-cxx/src/util/face-uri.cpp	/^FaceUri::toString() const$/;"	f	class:ndn::util::FaceUri
toString	ndn-cxx/src/util/time.cpp	/^toString(const system_clock::TimePoint& timePoint,$/;"	f	namespace:ndn::time
toTimestamp	ndn-cxx/src/name-component.cpp	/^Component::toTimestamp() const$/;"	f	class:ndn::name::Component
toUnixTimestamp	ndn-cxx/src/util/time.cpp	/^toUnixTimestamp(const system_clock::TimePoint& point)$/;"	f	namespace:ndn::time
toUri	ndn-cxx/src/exclude.cpp	/^Exclude::toUri() const$/;"	f	class:ndn::Exclude
toUri	ndn-cxx/src/interest.hpp	/^Interest::toUri() const$/;"	f	class:ndn::Interest
toUri	ndn-cxx/src/name-component.cpp	/^Component::toUri() const$/;"	f	class:ndn::name::Component
toUri	ndn-cxx/src/name-component.cpp	/^Component::toUri(std::ostream& result) const$/;"	f	class:ndn::name::Component
toUri	ndn-cxx/src/name.cpp	/^Name::toUri() const$/;"	f	class:ndn::Name
toVersion	ndn-cxx/src/name-component.cpp	/^Component::toVersion() const$/;"	f	class:ndn::name::Component
to_hex	NFD/websocketpp/websocketpp/impl/utilities_impl.hpp	/^inline std::string to_hex(const char* input,size_t length) {$/;"	f	namespace:websocketpp::utility
to_hex	NFD/websocketpp/websocketpp/impl/utilities_impl.hpp	/^inline std::string to_hex(std::string const & input) {$/;"	f	namespace:websocketpp::utility
to_hex	NFD/websocketpp/websocketpp/impl/utilities_impl.hpp	/^inline std::string to_hex(uint8_t const * input, size_t length) {$/;"	f	namespace:websocketpp::utility
to_hook_ptr	utils/trie/detail/functor-hook.hpp	/^  to_hook_ptr(const value_type& value)$/;"	f	struct:ns3::ndn::ndnSIM::detail::FunctorHook
to_hook_ptr	utils/trie/detail/functor-hook.hpp	/^  to_hook_ptr(value_type& value)$/;"	f	struct:ns3::ndn::ndnSIM::detail::FunctorHook
to_iterator	model/cs/content-store-impl.hpp	/^  to_iterator() const$/;"	f	class:ns3::ndn::cs::EntryImpl
to_iterator	model/cs/content-store-impl.hpp	/^  to_iterator()$/;"	f	class:ns3::ndn::cs::EntryImpl
to_lower	NFD/websocketpp/websocketpp/impl/utilities_impl.hpp	/^inline std::string to_lower(std::string const & in) {$/;"	f	namespace:websocketpp::utility
to_posix_duration	ndn-cxx/src/util/monotonic_deadline_timer.hpp	/^  to_posix_duration(const duration_type& duration)$/;"	f	struct:boost::asio::time_traits
to_posix_duration	ndn-cxx/src/util/time.cpp	/^steady_clock::to_posix_duration(const duration& duration)$/;"	f	class:ndn::time::steady_clock
to_string	NFD/common.hpp	/^to_string(const V& v)$/;"	f	namespace:std
to_value_ptr	utils/trie/detail/functor-hook.hpp	/^  to_value_ptr(const_hook_ptr n)$/;"	f	struct:ns3::ndn::ndnSIM::detail::FunctorHook
to_value_ptr	utils/trie/detail/functor-hook.hpp	/^  to_value_ptr(hook_ptr n)$/;"	f	struct:ns3::ndn::ndnSIM::detail::FunctorHook
to_ws	NFD/websocketpp/websocketpp/processors/base.hpp	/^inline close::status::value to_ws(lib::error_code ec) {$/;"	f	namespace:websocketpp::processor::error
too_many_requests	NFD/websocketpp/websocketpp/http/constants.hpp	/^            too_many_requests = 429,$/;"	e	enum:websocketpp::http::status_code::value
tools	NFD/tools/ndn-autoconfig/base-dns.cpp	/^namespace tools {$/;"	n	namespace:ndn	file:
tools	NFD/tools/ndn-autoconfig/base-dns.hpp	/^namespace tools {$/;"	n	namespace:ndn
tools	NFD/tools/ndn-autoconfig/base.cpp	/^namespace tools {$/;"	n	namespace:ndn	file:
tools	NFD/tools/ndn-autoconfig/base.hpp	/^namespace tools {$/;"	n	namespace:ndn
tools	NFD/tools/ndn-autoconfig/guess-from-identity-name.cpp	/^namespace tools {$/;"	n	namespace:ndn	file:
tools	NFD/tools/ndn-autoconfig/guess-from-identity-name.hpp	/^namespace tools {$/;"	n	namespace:ndn
tools	NFD/tools/ndn-autoconfig/guess-from-search-domains.cpp	/^namespace tools {$/;"	n	namespace:ndn	file:
tools	NFD/tools/ndn-autoconfig/guess-from-search-domains.hpp	/^namespace tools {$/;"	n	namespace:ndn
tools	NFD/tools/ndn-autoconfig/main.cpp	/^namespace tools {$/;"	n	namespace:ndn	file:
tools	NFD/tools/ndn-autoconfig/multicast-discovery.cpp	/^namespace tools {$/;"	n	namespace:ndn	file:
tools	NFD/tools/ndn-autoconfig/multicast-discovery.hpp	/^namespace tools {$/;"	n	namespace:ndn
topPrefix	ndn-cxx/src/mgmt/dispatcher.hpp	/^    Name topPrefix;$/;"	m	struct:ndn::mgmt::Dispatcher::TopPrefixEntry
topo	NFD/tests/daemon/fw/access-strategy.t.cpp	/^  TopologyTester topo;$/;"	m	class:nfd::fw::tests::TwoLaptopsFixture	file:
transformName	ndn-cxx/src/security/sec-tpm-file.cpp	/^  transformName(const string& keyName, const string& extension)$/;"	f	class:ndn::SecTpmFile::Impl
translate_ec	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    lib::error_code translate_ec(boost::system::error_code) {$/;"	f	class:websocketpp::transport::asio::basic_socket::connection
translate_ec	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    lib::error_code translate_ec(boost::system::error_code ec) {$/;"	f	class:websocketpp::transport::asio::tls_socket::connection
transmitData	NFD/tests/daemon/fw/topology-tester.hpp	/^  transmitData(TopologyNode i, const Data& data)$/;"	f	class:nfd::fw::tests::TopologyLink
transmitInterest	NFD/tests/daemon/fw/topology-tester.hpp	/^  transmitInterest(TopologyNode i, const Interest& interest)$/;"	f	class:nfd::fw::tests::TopologyLink
transport	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport	NFD/websocketpp/websocketpp/transport/base/endpoint.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport	NFD/websocketpp/websocketpp/transport/debug/base.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport	NFD/websocketpp/websocketpp/transport/stub/base.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^namespace transport {$/;"	n	namespace:websocketpp
transport_con_ptr	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef typename transport_con_type::ptr transport_con_ptr;$/;"	t	class:websocketpp::connection
transport_con_ptr	NFD/websocketpp/websocketpp/endpoint.hpp	/^    typedef typename transport_con_type::ptr transport_con_ptr;$/;"	t	class:websocketpp::endpoint
transport_con_ptr	NFD/websocketpp/websocketpp/roles/client_endpoint.hpp	/^    typedef typename transport_con_type::ptr transport_con_ptr;$/;"	t	class:websocketpp::client
transport_con_ptr	NFD/websocketpp/websocketpp/roles/server_endpoint.hpp	/^    typedef typename transport_con_type::ptr transport_con_ptr;$/;"	t	class:websocketpp::server
transport_con_ptr	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    typedef typename transport_con_type::ptr transport_con_ptr;$/;"	t	class:websocketpp::transport::asio::endpoint
transport_con_ptr	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^    typedef typename transport_con_type::ptr transport_con_ptr;$/;"	t	class:websocketpp::transport::debug::endpoint
transport_con_ptr	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    typedef typename transport_con_type::ptr transport_con_ptr;$/;"	t	class:websocketpp::transport::iostream::endpoint
transport_con_ptr	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^    typedef typename transport_con_type::ptr transport_con_ptr;$/;"	t	class:websocketpp::transport::stub::endpoint
transport_con_type	NFD/websocketpp/websocketpp/connection.hpp	/^        transport_con_type;$/;"	t	class:websocketpp::connection
transport_con_type	NFD/websocketpp/websocketpp/endpoint.hpp	/^    typedef typename transport_type::transport_con_type transport_con_type;$/;"	t	class:websocketpp::endpoint
transport_con_type	NFD/websocketpp/websocketpp/roles/client_endpoint.hpp	/^    typedef typename transport_type::transport_con_type transport_con_type;$/;"	t	class:websocketpp::client
transport_con_type	NFD/websocketpp/websocketpp/roles/server_endpoint.hpp	/^    typedef typename transport_type::transport_con_type transport_con_type;$/;"	t	class:websocketpp::server
transport_con_type	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    typedef asio::connection<config> transport_con_type;$/;"	t	class:websocketpp::transport::asio::endpoint
transport_con_type	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^    typedef debug::connection<config> transport_con_type;$/;"	t	class:websocketpp::transport::debug::endpoint
transport_con_type	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    typedef iostream::connection<config> transport_con_type;$/;"	t	class:websocketpp::transport::iostream::endpoint
transport_con_type	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^    typedef stub::connection<config> transport_con_type;$/;"	t	class:websocketpp::transport::stub::endpoint
transport_config	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^    struct transport_config : public base::transport_config {$/;"	s	struct:debug_custom	file:
transport_config	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^    struct transport_config : public core::transport_config {$/;"	s	struct:testee_config	file:
transport_config	NFD/websocketpp/test/connection/connection.cpp	/^    struct transport_config {$/;"	s	struct:debug_config_client	file:
transport_config	NFD/websocketpp/test/transport/integration.cpp	/^    struct transport_config : public base::transport_config {$/;"	s	struct:config	file:
transport_config	NFD/websocketpp/test/transport/integration.cpp	/^    struct transport_config : public base::transport_config {$/;"	s	struct:config_tls	file:
transport_config	NFD/websocketpp/websocketpp/config/asio.hpp	/^    struct transport_config : public base::transport_config {$/;"	s	struct:websocketpp::config::asio_tls
transport_config	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^    struct transport_config : public base::transport_config {$/;"	s	struct:websocketpp::config::asio_tls_client
transport_config	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^    struct transport_config : public base::transport_config {$/;"	s	struct:websocketpp::config::asio
transport_config	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^    struct transport_config : public base::transport_config {$/;"	s	struct:websocketpp::config::asio_client
transport_config	NFD/websocketpp/websocketpp/config/core.hpp	/^    struct transport_config {$/;"	s	struct:websocketpp::config::core
transport_config	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    struct transport_config {$/;"	s	struct:websocketpp::config::core_client
transport_config	NFD/websocketpp/websocketpp/config/debug.hpp	/^    struct transport_config {$/;"	s	struct:websocketpp::config::debug_core
transport_config	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^    struct transport_config : public base::transport_config {$/;"	s	struct:websocketpp::config::debug_asio_tls
transport_config	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^    struct transport_config : public base::transport_config {$/;"	s	struct:websocketpp::config::debug_asio
transport_config	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    struct transport_config {$/;"	s	struct:websocketpp::config::minimal_server
transport_type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^        transport_type;$/;"	t	struct:debug_custom	file:
transport_type	NFD/websocketpp/examples/enriched_storage/enriched_storage.cpp	/^    typedef core::transport_type transport_type;$/;"	t	struct:custom_config	file:
transport_type	NFD/websocketpp/examples/testee_server/testee_server.cpp	/^        transport_type;$/;"	t	struct:testee_config	file:
transport_type	NFD/websocketpp/test/connection/connection.cpp	/^        transport_type;$/;"	t	struct:debug_config_client	file:
transport_type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef core::transport_type transport_type;$/;"	t	struct:stub_config	file:
transport_type	NFD/websocketpp/test/endpoint/endpoint.cpp	/^    typedef core::transport_type transport_type;$/;"	t	struct:stub_config	file:
transport_type	NFD/websocketpp/test/roles/client.cpp	/^    typedef core::transport_type transport_type;$/;"	t	struct:stub_config	file:
transport_type	NFD/websocketpp/test/transport/integration.cpp	/^        transport_type;$/;"	t	struct:config	file:
transport_type	NFD/websocketpp/test/transport/integration.cpp	/^        transport_type;$/;"	t	struct:config_tls	file:
transport_type	NFD/websocketpp/websocketpp/config/asio.hpp	/^        transport_type;$/;"	t	struct:websocketpp::config::asio_tls
transport_type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^        transport_type;$/;"	t	struct:websocketpp::config::asio_tls_client
transport_type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^        transport_type;$/;"	t	struct:websocketpp::config::asio
transport_type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^        transport_type;$/;"	t	struct:websocketpp::config::asio_client
transport_type	NFD/websocketpp/websocketpp/config/core.hpp	/^        transport_type;$/;"	t	struct:websocketpp::config::core
transport_type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^        transport_type;$/;"	t	struct:websocketpp::config::core_client
transport_type	NFD/websocketpp/websocketpp/config/debug.hpp	/^        transport_type;$/;"	t	struct:websocketpp::config::debug_core
transport_type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^        transport_type;$/;"	t	struct:websocketpp::config::debug_asio_tls
transport_type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^        transport_type;$/;"	t	struct:websocketpp::config::debug_asio
transport_type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^        transport_type;$/;"	t	struct:websocketpp::config::minimal_server
transport_type	NFD/websocketpp/websocketpp/endpoint.hpp	/^    typedef typename config::transport_type transport_type;$/;"	t	class:websocketpp::endpoint
transport_type	NFD/websocketpp/websocketpp/roles/client_endpoint.hpp	/^    typedef typename config::transport_type transport_type;$/;"	t	class:websocketpp::client
transport_type	NFD/websocketpp/websocketpp/roles/server_endpoint.hpp	/^    typedef typename config::transport_type transport_type;$/;"	t	class:websocketpp::server
traversal_category	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef ndn_global_router_graph_category traversal_category;$/;"	t	struct:boost::graph_traits
traverseSubTree	NFD/rib/fib-updater.cpp	/^FibUpdater::traverseSubTree(const RibEntry& entry, Rib::Rib::RouteSet routesToAdd,$/;"	f	class:nfd::rib::FibUpdater
trie	utils/trie/trie.hpp	/^  inline trie(const Key& key, size_t bucketSize = 1, size_t bucketIncrement = 1)$/;"	f	class:ns3::ndn::ndnSIM::trie
trie	utils/trie/trie.hpp	/^class trie {$/;"	c	namespace:ns3::ndn::ndnSIM
trie_	utils/trie/trie-with-policy.hpp	/^  parent_trie trie_;$/;"	m	class:ns3::ndn::ndnSIM::trie_with_policy
trie_	utils/trie/trie.hpp	/^  Trie* trie_;$/;"	m	class:ns3::ndn::ndnSIM::trie_iterator
trie_	utils/trie/trie.hpp	/^  Trie* trie_;$/;"	m	class:ns3::ndn::ndnSIM::trie_point_iterator
trie_delete_disposer	utils/trie/trie.hpp	/^  struct trie_delete_disposer {$/;"	s	class:ns3::ndn::ndnSIM::trie
trie_iterator	utils/trie/trie.hpp	/^  trie_iterator()$/;"	f	class:ns3::ndn::ndnSIM::trie_iterator
trie_iterator	utils/trie/trie.hpp	/^  trie_iterator(Trie& item)$/;"	f	class:ns3::ndn::ndnSIM::trie_iterator
trie_iterator	utils/trie/trie.hpp	/^  trie_iterator(typename Trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::trie_iterator
trie_iterator	utils/trie/trie.hpp	/^class trie_iterator {$/;"	c	namespace:ns3::ndn::ndnSIM
trie_point_iterator	utils/trie/trie.hpp	/^  trie_point_iterator()$/;"	f	class:ns3::ndn::ndnSIM::trie_point_iterator
trie_point_iterator	utils/trie/trie.hpp	/^  trie_point_iterator(Trie& item)$/;"	f	class:ns3::ndn::ndnSIM::trie_point_iterator
trie_point_iterator	utils/trie/trie.hpp	/^  trie_point_iterator(typename Trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::trie_point_iterator
trie_point_iterator	utils/trie/trie.hpp	/^class trie_point_iterator {$/;"	c	namespace:ns3::ndn::ndnSIM
trie_with_policy	utils/trie/trie-with-policy.hpp	/^  inline trie_with_policy(size_t bucketSize = 1, size_t bucketIncrement = 1)$/;"	f	class:ns3::ndn::ndnSIM::trie_with_policy
trie_with_policy	utils/trie/trie-with-policy.hpp	/^class trie_with_policy {$/;"	c	namespace:ns3::ndn::ndnSIM
trim	ndn-cxx/src/util/string-helper.cpp	/^trim(std::string& str)$/;"	f	namespace:ndn
trimLeft	ndn-cxx/src/util/string-helper.cpp	/^trimLeft(std::string& str)$/;"	f	namespace:ndn
trimRight	ndn-cxx/src/util/string-helper.cpp	/^trimRight(std::string& str)$/;"	f	namespace:ndn
try_again_later	NFD/websocketpp/websocketpp/close.hpp	/^    static value const try_again_later = 1013;$/;"	m	namespace:websocketpp::close::status
type	NFD/websocketpp/examples/broadcast_server/broadcast_server.cpp	/^    action_type type;$/;"	m	struct:action	file:
type	NFD/websocketpp/examples/debug_client/debug_client.cpp	/^    typedef perftest type;$/;"	t	class:perftest	file:
type	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^    typedef debug_custom type;$/;"	t	struct:debug_custom	file:
type	NFD/websocketpp/test/connection/connection.cpp	/^    typedef debug_config_client type;$/;"	t	struct:debug_config_client	file:
type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef config type;$/;"	t	struct:config	file:
type	NFD/websocketpp/test/transport/integration.cpp	/^    typedef config type;$/;"	t	struct:config_tls	file:
type	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    typedef stub_con type;$/;"	t	struct:stub_con	file:
type	NFD/websocketpp/websocketpp/config/asio.hpp	/^    typedef asio_tls type;$/;"	t	struct:websocketpp::config::asio_tls
type	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^    typedef asio_tls_client type;$/;"	t	struct:websocketpp::config::asio_tls_client
type	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^    typedef asio type;$/;"	t	struct:websocketpp::config::asio
type	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^    typedef asio_client type;$/;"	t	struct:websocketpp::config::asio_client
type	NFD/websocketpp/websocketpp/config/core.hpp	/^    typedef core type;$/;"	t	struct:websocketpp::config::core
type	NFD/websocketpp/websocketpp/config/core_client.hpp	/^    typedef core_client type;$/;"	t	struct:websocketpp::config::core_client
type	NFD/websocketpp/websocketpp/config/debug.hpp	/^    typedef debug_core type;$/;"	t	struct:websocketpp::config::debug_core
type	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^    typedef debug_asio_tls type;$/;"	t	struct:websocketpp::config::debug_asio_tls
type	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^    typedef debug_asio type;$/;"	t	struct:websocketpp::config::debug_asio
type	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^    typedef minimal_server type;$/;"	t	struct:websocketpp::config::minimal_server
type	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef connection<config> type;$/;"	t	class:websocketpp::connection
type	NFD/websocketpp/websocketpp/endpoint.hpp	/^    typedef endpoint<connection,config> type;$/;"	t	class:websocketpp::endpoint
type	NFD/websocketpp/websocketpp/http/request.hpp	/^    typedef request type;$/;"	t	class:websocketpp::http::parser::request
type	NFD/websocketpp/websocketpp/http/response.hpp	/^    typedef response type;$/;"	t	class:websocketpp::http::parser::response
type	NFD/websocketpp/websocketpp/message_buffer/alloc.hpp	/^    typedef con_msg_manager<message> type;$/;"	t	class:websocketpp::message_buffer::alloc::con_msg_manager
type	NFD/websocketpp/websocketpp/processors/hybi08.hpp	/^    typedef hybi08<config> type;$/;"	t	class:websocketpp::processor::hybi08
type	NFD/websocketpp/websocketpp/processors/processor.hpp	/^    typedef processor<config> type;$/;"	t	class:websocketpp::processor::processor
type	NFD/websocketpp/websocketpp/roles/client_endpoint.hpp	/^    typedef client<config> type;$/;"	t	class:websocketpp::client
type	NFD/websocketpp/websocketpp/roles/server_endpoint.hpp	/^    typedef server<config> type;$/;"	t	class:websocketpp::server
type	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^    typedef connection<config> type;$/;"	t	class:websocketpp::transport::asio::connection
type	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    typedef endpoint<config> type;$/;"	t	class:websocketpp::transport::asio::endpoint
type	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    typedef connection type;$/;"	t	class:websocketpp::transport::asio::basic_socket::connection
type	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^    typedef endpoint type;$/;"	t	class:websocketpp::transport::asio::basic_socket::endpoint
type	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    typedef connection type;$/;"	t	class:websocketpp::transport::asio::tls_socket::connection
type	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^    typedef endpoint type;$/;"	t	class:websocketpp::transport::asio::tls_socket::endpoint
type	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^    typedef connection<config> type;$/;"	t	class:websocketpp::transport::debug::connection
type	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^    typedef endpoint type;$/;"	t	class:websocketpp::transport::debug::endpoint
type	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^    typedef connection<config> type;$/;"	t	class:websocketpp::transport::iostream::connection
type	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^    typedef endpoint type;$/;"	t	class:websocketpp::transport::iostream::endpoint
type	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^    typedef connection<config> type;$/;"	t	class:websocketpp::transport::stub::connection
type	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^    typedef endpoint type;$/;"	t	class:websocketpp::transport::stub::endpoint
type	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef EdgeWeights type;$/;"	t	struct:boost::property_map
type	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef VertexIds type;$/;"	t	struct:boost::property_map
type	model/cs/custom-policies/freshness-policy.hpp	/^      type()$/;"	f	class:ns3::ndn::ndnSIM::freshness_policy_traits::policy::type
type	model/cs/custom-policies/freshness-policy.hpp	/^      type(Base& base)$/;"	f	class:ns3::ndn::ndnSIM::freshness_policy_traits::policy::type
type	model/cs/custom-policies/freshness-policy.hpp	/^      type;$/;"	t	struct:ns3::ndn::ndnSIM::freshness_policy_traits::container_hook
type	model/cs/custom-policies/freshness-policy.hpp	/^    class type : public policy_container {$/;"	c	struct:ns3::ndn::ndnSIM::freshness_policy_traits::policy
type	model/cs/custom-policies/lifetime-stats-policy.hpp	/^      type()$/;"	f	class:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy::type
type	model/cs/custom-policies/lifetime-stats-policy.hpp	/^      type(Base& base)$/;"	f	class:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy::type
type	model/cs/custom-policies/lifetime-stats-policy.hpp	/^      type;$/;"	t	struct:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::container_hook
type	model/cs/custom-policies/lifetime-stats-policy.hpp	/^    class type : public policy_container {$/;"	c	struct:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy
type	model/cs/custom-policies/probability-policy.hpp	/^      type()$/;"	f	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
type	model/cs/custom-policies/probability-policy.hpp	/^      type(Base& base)$/;"	f	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
type	model/cs/custom-policies/probability-policy.hpp	/^      type;$/;"	t	struct:ns3::ndn::ndnSIM::probability_policy_traits::container_hook
type	model/cs/custom-policies/probability-policy.hpp	/^    class type : public policy_container {$/;"	c	struct:ns3::ndn::ndnSIM::probability_policy_traits::policy
type	ndn-cxx/src/encoding/block.hpp	/^Block::type() const$/;"	f	class:ndn::Block
type	utils/trie/aggregate-stats-policy.hpp	/^      type()$/;"	f	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
type	utils/trie/aggregate-stats-policy.hpp	/^      type(Base& base)$/;"	f	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
type	utils/trie/aggregate-stats-policy.hpp	/^    class type {$/;"	c	struct:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy
type	utils/trie/aggregate-stats-policy.hpp	/^    struct type {$/;"	s	struct:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::container_hook
type	utils/trie/counting-policy.hpp	/^      type()$/;"	f	class:ns3::ndn::ndnSIM::counting_policy_traits::policy::type
type	utils/trie/counting-policy.hpp	/^      type(Base& base)$/;"	f	class:ns3::ndn::ndnSIM::counting_policy_traits::policy::type
type	utils/trie/counting-policy.hpp	/^      type;$/;"	t	struct:ns3::ndn::ndnSIM::counting_policy_traits::container_hook
type	utils/trie/counting-policy.hpp	/^    class type : public policy_container {$/;"	c	struct:ns3::ndn::ndnSIM::counting_policy_traits::policy
type	utils/trie/detail/multi-policy-container.hpp	/^    typedef typename boost::mpl::at_c<Vector, N>::type type;$/;"	t	struct:ns3::ndn::ndnSIM::detail::multi_policy_container::index
type	utils/trie/detail/multi-type-container.hpp	/^    typedef typename boost::mpl::at_c<Vector, N>::type type;$/;"	t	struct:ns3::ndn::ndnSIM::detail::multi_type_container::index
type	utils/trie/empty-policy.hpp	/^      inline type(Base& base)$/;"	f	struct:ns3::ndn::ndnSIM::empty_policy_traits::policy::type
type	utils/trie/empty-policy.hpp	/^    struct type {$/;"	s	struct:ns3::ndn::ndnSIM::empty_policy_traits::policy
type	utils/trie/empty-policy.hpp	/^    typedef void* type;$/;"	t	struct:ns3::ndn::ndnSIM::empty_policy_traits::container_hook
type	utils/trie/fifo-policy.hpp	/^      type()$/;"	f	class:ns3::ndn::ndnSIM::fifo_policy_traits::policy::type
type	utils/trie/fifo-policy.hpp	/^      type(Base& base)$/;"	f	class:ns3::ndn::ndnSIM::fifo_policy_traits::policy::type
type	utils/trie/fifo-policy.hpp	/^      type;$/;"	t	struct:ns3::ndn::ndnSIM::fifo_policy_traits::container_hook
type	utils/trie/fifo-policy.hpp	/^    class type : public policy_container {$/;"	c	struct:ns3::ndn::ndnSIM::fifo_policy_traits::policy
type	utils/trie/lfu-policy.hpp	/^      type()$/;"	f	class:ns3::ndn::ndnSIM::lfu_policy_traits::policy::type
type	utils/trie/lfu-policy.hpp	/^      type(Base& base)$/;"	f	class:ns3::ndn::ndnSIM::lfu_policy_traits::policy::type
type	utils/trie/lfu-policy.hpp	/^      type;$/;"	t	struct:ns3::ndn::ndnSIM::lfu_policy_traits::container_hook
type	utils/trie/lfu-policy.hpp	/^    class type : public policy_container {$/;"	c	struct:ns3::ndn::ndnSIM::lfu_policy_traits::policy
type	utils/trie/lru-policy.hpp	/^      type()$/;"	f	class:ns3::ndn::ndnSIM::lru_policy_traits::policy::type
type	utils/trie/lru-policy.hpp	/^      type(Base& base)$/;"	f	class:ns3::ndn::ndnSIM::lru_policy_traits::policy::type
type	utils/trie/lru-policy.hpp	/^      type;$/;"	t	struct:ns3::ndn::ndnSIM::lru_policy_traits::container_hook
type	utils/trie/lru-policy.hpp	/^    class type : public policy_container {$/;"	c	struct:ns3::ndn::ndnSIM::lru_policy_traits::policy
type	utils/trie/multi-policy.hpp	/^            type;$/;"	t	struct:ns3::ndn::ndnSIM::multi_policy_traits::policy::getPolicy::apply
type	utils/trie/multi-policy.hpp	/^      type(Base& base)$/;"	f	class:ns3::ndn::ndnSIM::multi_policy_traits::policy::type
type	utils/trie/multi-policy.hpp	/^      typedef typename Item::policy_hook_type type;$/;"	t	struct:ns3::ndn::ndnSIM::multi_policy_traits::getHook::apply
type	utils/trie/multi-policy.hpp	/^    class type : public policy_container {$/;"	c	struct:ns3::ndn::ndnSIM::multi_policy_traits::policy
type	utils/trie/multi-policy.hpp	/^    typedef policy_hook_type type;$/;"	t	struct:ns3::ndn::ndnSIM::multi_policy_traits::container_hook
type	utils/trie/payload-policy.hpp	/^      type()$/;"	f	class:ns3::ndn::ndnSIM::payload_policy_traits::policy::type
type	utils/trie/payload-policy.hpp	/^      type(Base& base)$/;"	f	class:ns3::ndn::ndnSIM::payload_policy_traits::policy::type
type	utils/trie/payload-policy.hpp	/^      type;$/;"	t	struct:ns3::ndn::ndnSIM::payload_policy_traits::container_hook
type	utils/trie/payload-policy.hpp	/^    class type : public policy_container {$/;"	c	struct:ns3::ndn::ndnSIM::payload_policy_traits::policy
type	utils/trie/persistent-policy.hpp	/^      type(Base& base)$/;"	f	class:ns3::ndn::ndnSIM::persistent_policy_traits::policy::type
type	utils/trie/persistent-policy.hpp	/^      type;$/;"	t	struct:ns3::ndn::ndnSIM::persistent_policy_traits::container_hook
type	utils/trie/persistent-policy.hpp	/^    class type : public policy_container {$/;"	c	struct:ns3::ndn::ndnSIM::persistent_policy_traits::policy
type	utils/trie/random-policy.hpp	/^      type()$/;"	f	class:ns3::ndn::ndnSIM::random_policy_traits::policy::type
type	utils/trie/random-policy.hpp	/^      type(Base& base)$/;"	f	class:ns3::ndn::ndnSIM::random_policy_traits::policy::type
type	utils/trie/random-policy.hpp	/^      type;$/;"	t	struct:ns3::ndn::ndnSIM::random_policy_traits::container_hook
type	utils/trie/random-policy.hpp	/^    class type : public policy_container {$/;"	c	struct:ns3::ndn::ndnSIM::random_policy_traits::policy
u_rand	utils/trie/random-policy.hpp	/^      Ptr<UniformRandomVariable> u_rand;$/;"	m	class:ns3::ndn::ndnSIM::random_policy_traits::policy::type
udp	NFD/daemon/face/udp-channel.hpp	/^namespace udp {$/;"	n	namespace:nfd
uint128	NFD/core/city-hash.hpp	/^typedef std::pair<uint64, uint64> uint128;$/;"	t
uint16_converter	NFD/websocketpp/websocketpp/frame.hpp	/^union uint16_converter {$/;"	u	namespace:websocketpp::frame
uint32	NFD/core/city-hash.hpp	/^typedef uint32_t uint32;$/;"	t
uint32_converter	NFD/websocketpp/websocketpp/frame.hpp	/^union uint32_converter {$/;"	u	namespace:websocketpp::frame
uint32_in_expected_order	NFD/core/city-hash.cpp	90;"	d	file:
uint32_in_expected_order	NFD/core/city-hash.cpp	93;"	d	file:
uint64	NFD/core/city-hash.hpp	/^typedef uint64_t uint64;$/;"	t
uint64_converter	NFD/websocketpp/websocketpp/frame.hpp	/^union uint64_converter {$/;"	u	namespace:websocketpp::frame
uint64_in_expected_order	NFD/core/city-hash.cpp	91;"	d	file:
uint64_in_expected_order	NFD/core/city-hash.cpp	94;"	d	file:
uint8	NFD/core/city-hash.hpp	/^typedef uint8_t uint8;$/;"	t
unauthorized	NFD/websocketpp/websocketpp/http/constants.hpp	/^            unauthorized = 401,$/;"	e	enum:websocketpp::http::status_code::value
unescape	ndn-cxx/src/util/string-helper.cpp	/^unescape(const std::string& str)$/;"	f	namespace:ndn
uninitialized	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    uninitialized,$/;"	e	enum:websocketpp::extensions::permessage_deflate::error::value
uninitialized	NFD/websocketpp/websocketpp/http/constants.hpp	/^            uninitialized = 0,$/;"	e	enum:websocketpp::http::status_code::value
unique_ptr_uchar_array	NFD/websocketpp/websocketpp/common/memory.hpp	/^    typedef std::unique_ptr<unsigned char[]> unique_ptr_uchar_array;$/;"	t	namespace:websocketpp::lib
unix_stream	NFD/daemon/face/unix-stream-channel.hpp	/^namespace unix_stream {$/;"	n	namespace:nfd
unknown	NFD/websocketpp/websocketpp/connection.hpp	/^        unknown$/;"	e	enum:websocketpp::connection::terminate_status
unknown	NFD/websocketpp/websocketpp/http/parser.hpp	/^        unknown,$/;"	e	enum:websocketpp::http::parser::body_encoding::value
unlockTpm	ndn-cxx/src/security/key-chain.hpp	/^  unlockTpm(const char* password, size_t passwordLength, bool usePassword)$/;"	f	class:ndn::security::KeyChain
unlockTpm	ndn-cxx/src/security/sec-tpm-file.hpp	/^  unlockTpm(const char* password, size_t passwordLength, bool usePassword)$/;"	f	class:ndn::SecTpmFile
unlockTpm	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::unlockTpm(const char* password, size_t passwordLength, bool usePassword)$/;"	f	class:ndn::SecTpmOsx
unlockTpm	ndn-cxx/tests/unit-tests/security/dummy-keychain.cpp	/^DummyTpm::unlockTpm(const char* password, size_t passwordLength, bool usePassword)$/;"	f	class:ndn::security::DummyTpm
unlockTpm	utils/dummy-keychain.cpp	/^DummyTpm::unlockTpm(const char* password, size_t passwordLength, bool usePassword)$/;"	f	class:ndn::security::DummyTpm
unordered_set	utils/trie/trie.hpp	/^  typedef boost::intrusive::unordered_set<trie, member_hook> unordered_set;$/;"	t	class:ns3::ndn::ndnSIM::trie
unordered_set_member_hook_	utils/trie/trie.hpp	/^  boost::intrusive::unordered_set_member_hook<> unordered_set_member_hook_;$/;"	m	class:ns3::ndn::ndnSIM::trie
unregisterEntry	NFD/rib/rib-manager.cpp	/^RibManager::unregisterEntry(const shared_ptr<const Interest>& request,$/;"	f	class:nfd::rib::RibManager
unregisterPrefix	NFD/rib/remote-registrator.cpp	/^RemoteRegistrator::unregisterPrefix(const Name& prefix)$/;"	f	class:nfd::rib::RemoteRegistrator
unregisterPrefix	ndn-cxx/src/face.cpp	/^Face::unregisterPrefix(const RegisteredPrefixId* registeredPrefixId,$/;"	f	class:ndn::Face
unrequested_subprotocol	NFD/websocketpp/websocketpp/error.hpp	/^    unrequested_subprotocol,$/;"	e	enum:websocketpp::error::value
unsetCost	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  unsetCost()$/;"	f	class:ndn::nfd::ControlParameters
unsetExpirationPeriod	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  unsetExpirationPeriod()$/;"	f	class:ndn::nfd::ControlParameters
unsetFaceId	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  unsetFaceId()$/;"	f	class:ndn::nfd::ControlParameters
unsetFaceId	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetFaceId()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetFacePersistency	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetFacePersistency()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetFaceScope	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetFaceScope()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetFlags	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  unsetFlags()$/;"	f	class:ndn::nfd::ControlParameters
unsetInterestFilter	ndn-cxx/src/face.cpp	/^Face::unsetInterestFilter(const InterestFilterId* interestFilterId)$/;"	f	class:ndn::Face
unsetInterestFilter	ndn-cxx/src/face.cpp	/^Face::unsetInterestFilter(const RegisteredPrefixId* registeredPrefixId)$/;"	f	class:ndn::Face
unsetKeyLocator	ndn-cxx/src/security/signature-sha256-with-ecdsa.cpp	/^SignatureSha256WithEcdsa::unsetKeyLocator()$/;"	f	class:ndn::SignatureSha256WithEcdsa
unsetKeyLocator	ndn-cxx/src/security/signature-sha256-with-rsa.cpp	/^SignatureSha256WithRsa::unsetKeyLocator()$/;"	f	class:ndn::SignatureSha256WithRsa
unsetKeyLocator	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::unsetKeyLocator()$/;"	f	class:ndn::SignatureInfo
unsetKeyLocator	ndn-cxx/src/signature.hpp	/^  unsetKeyLocator()$/;"	f	class:ndn::Signature
unsetLink	ndn-cxx/src/interest.cpp	/^Interest::unsetLink()$/;"	f	class:ndn::Interest
unsetLinkType	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetLinkType()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetLocalControlFeature	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  unsetLocalControlFeature()$/;"	f	class:ndn::nfd::ControlParameters
unsetLocalUri	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetLocalUri()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetName	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  unsetName()$/;"	f	class:ndn::nfd::ControlParameters
unsetOrigin	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  unsetOrigin()$/;"	f	class:ndn::nfd::ControlParameters
unsetRemoteUri	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetRemoteUri()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetSelectedDelegation	ndn-cxx/src/interest.cpp	/^Interest::unsetSelectedDelegation()$/;"	f	class:ndn::Interest
unsetStrategy	NFD/daemon/mgmt/strategy-choice-manager.cpp	/^StrategyChoiceManager::unsetStrategy(ControlParameters& parameters,$/;"	f	class:nfd::StrategyChoiceManager
unsetStrategy	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  unsetStrategy()$/;"	f	class:ndn::nfd::ControlParameters
unsetUnsolicited	NFD/daemon/table/cs-entry-impl.cpp	/^EntryImpl::unsetUnsolicited()$/;"	f	class:nfd::cs::EntryImpl
unsetUri	ndn-cxx/src/management/nfd-control-parameters.hpp	/^  unsetUri()$/;"	f	class:ndn::nfd::ControlParameters
unsetUriScheme	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::unsetUriScheme()$/;"	f	class:ndn::nfd::FaceQueryFilter
unsetValidityPeriod	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::unsetValidityPeriod()$/;"	f	class:ndn::SignatureInfo
unsupported_attributes	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    unsupported_attributes,$/;"	e	enum:websocketpp::extensions::permessage_deflate::error::value
unsupported_data	NFD/websocketpp/websocketpp/close.hpp	/^    static value const unsupported_data = 1003;$/;"	m	namespace:websocketpp::close::status
unsupported_media_type	NFD/websocketpp/websocketpp/http/constants.hpp	/^            unsupported_media_type = 415,$/;"	e	enum:websocketpp::http::status_code::value
unsupported_version	NFD/websocketpp/websocketpp/error.hpp	/^    unsupported_version,$/;"	e	enum:websocketpp::error::value
update	NFD/daemon/table/pit-face-record.cpp	/^FaceRecord::update(const Interest& interest)$/;"	f	class:nfd::pit::FaceRecord
update	NFD/daemon/table/pit-in-record.cpp	/^InRecord::update(const Interest& interest)$/;"	f	class:nfd::pit::InRecord
update	model/cs/custom-policies/freshness-policy.hpp	/^      update(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::freshness_policy_traits::policy::type
update	model/cs/custom-policies/lifetime-stats-policy.hpp	/^      update(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::lifetime_stats_policy_traits::policy::type
update	model/cs/custom-policies/probability-policy.hpp	/^      update(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::probability_policy_traits::policy::type
update	ndn-cxx/src/util/digest.cpp	/^Digest<Hash>::update(const uint8_t* buffer, size_t size)$/;"	f	class:ndn::util::Digest
update	utils/trie/aggregate-stats-policy.hpp	/^      update(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::aggregate_stats_policy_traits::policy::type
update	utils/trie/counting-policy.hpp	/^      update(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::counting_policy_traits::policy::type
update	utils/trie/detail/multi-policy-container.hpp	/^  update(typename Base::iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::detail::empty_policy_wrap
update	utils/trie/detail/multi-policy-container.hpp	/^  update(typename Base::iterator item)$/;"	f	struct:ns3::ndn::ndnSIM::detail::inherit_with_base
update	utils/trie/empty-policy.hpp	/^      inline void update(typename Container::iterator)$/;"	f	struct:ns3::ndn::ndnSIM::empty_policy_traits::policy::type
update	utils/trie/fifo-policy.hpp	/^      update(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::fifo_policy_traits::policy::type
update	utils/trie/lfu-policy.hpp	/^      update(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::lfu_policy_traits::policy::type
update	utils/trie/lru-policy.hpp	/^      update(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::lru_policy_traits::policy::type
update	utils/trie/multi-policy.hpp	/^      update(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::multi_policy_traits::policy::type
update	utils/trie/payload-policy.hpp	/^      update(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::payload_policy_traits::policy::type
update	utils/trie/persistent-policy.hpp	/^      update(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::persistent_policy_traits::policy::type
update	utils/trie/random-policy.hpp	/^      update(typename parent_trie::iterator item)$/;"	f	class:ns3::ndn::ndnSIM::random_policy_traits::policy::type
updateBestFace	NFD/daemon/fw/ncc-strategy.cpp	/^NccStrategy::MeasurementsEntryInfo::updateBestFace(const Face& face) {$/;"	f	class:nfd::fw::NccStrategy::MeasurementsEntryInfo
updateMeasurements	NFD/daemon/fw/access-strategy.cpp	/^AccessStrategy::updateMeasurements(const Face& inFace, const Data& data,$/;"	f	class:nfd::fw::AccessStrategy
updateStaleTime	NFD/daemon/table/cs-entry.cpp	/^Entry::updateStaleTime()$/;"	f	class:nfd::cs::Entry
upgrade_required	NFD/websocketpp/websocketpp/error.hpp	/^    upgrade_required,$/;"	e	enum:websocketpp::error::value
upgrade_required	NFD/websocketpp/websocketpp/http/constants.hpp	/^            upgrade_required = 426,$/;"	e	enum:websocketpp::http::status_code::value
upgrade_token	NFD/websocketpp/websocketpp/processors/base.hpp	/^static char const upgrade_token[] = "websocket";$/;"	m	namespace:websocketpp::processor::constants
uri	NFD/websocketpp/websocketpp/uri.hpp	/^    explicit uri(std::string const & uri_string) : m_valid(false) {$/;"	f	class:websocketpp::uri
uri	NFD/websocketpp/websocketpp/uri.hpp	/^    uri(bool secure, std::string const & host, std::string const & port,$/;"	f	class:websocketpp::uri
uri	NFD/websocketpp/websocketpp/uri.hpp	/^    uri(bool secure, std::string const & host, std::string const & resource)$/;"	f	class:websocketpp::uri
uri	NFD/websocketpp/websocketpp/uri.hpp	/^    uri(bool secure, std::string const & host, uint16_t port,$/;"	f	class:websocketpp::uri
uri	NFD/websocketpp/websocketpp/uri.hpp	/^    uri(std::string const & scheme, std::string const & host, uint16_t port,$/;"	f	class:websocketpp::uri
uri	NFD/websocketpp/websocketpp/uri.hpp	/^    uri(std::string const & scheme, std::string const & host,$/;"	f	class:websocketpp::uri
uri	NFD/websocketpp/websocketpp/uri.hpp	/^    uri(std::string scheme, std::string const & host, std::string const & resource)$/;"	f	class:websocketpp::uri
uri	NFD/websocketpp/websocketpp/uri.hpp	/^class uri {$/;"	c	namespace:websocketpp
uri_default_port	NFD/websocketpp/websocketpp/uri.hpp	/^static uint16_t const uri_default_port = 80;$/;"	m	namespace:websocketpp
uri_default_secure_port	NFD/websocketpp/websocketpp/uri.hpp	/^static uint16_t const uri_default_secure_port = 443;$/;"	m	namespace:websocketpp
uri_ptr	NFD/websocketpp/websocketpp/uri.hpp	/^typedef lib::shared_ptr<uri> uri_ptr;$/;"	t	namespace:websocketpp
usage	NFD/tools/ndn-autoconfig-server.cpp	/^usage(const char* programName)$/;"	f	namespace:ndn
usage	NFD/tools/ndn-autoconfig/main.cpp	/^  usage(const char* programName)$/;"	f	class:ndn::tools::NdnAutoconfig
usage	NFD/tools/ndn-tlv-peek.cpp	/^  usage()$/;"	f	class:ndntlvpeek::NdnTlvPeek
usage	NFD/tools/ndn-tlv-poke.cpp	/^  usage()$/;"	f	class:ndntlvpoke::NdnTlvPoke
usage	NFD/tools/nfd-autoreg.cpp	/^  usage(std::ostream& os,$/;"	f	class:ndn::nfd_autoreg::AutoregServer
usage	NFD/tools/nfd-status.cpp	/^  usage()$/;"	f	class:ndn::NfdStatus
usage	NFD/tools/nfdc.cpp	/^usage(const char* programName)$/;"	f
usage	ndn-cxx/tools/ndncatchunks3.cpp	/^usage(const std::string &filename)$/;"	f	namespace:ndn
use_proxy	NFD/websocketpp/websocketpp/http/constants.hpp	/^            use_proxy = 305,$/;"	e	enum:websocketpp::http::status_code::value
user_agent	NFD/websocketpp/websocketpp/version.hpp	/^static char const user_agent[] = "WebSocket++\/0.5.1";$/;"	m	namespace:websocketpp
utf8_accept	NFD/websocketpp/websocketpp/utf8_validator.hpp	/^static unsigned int const utf8_accept = 0;$/;"	m	namespace:websocketpp::utf8_validator
utf8_reject	NFD/websocketpp/websocketpp/utf8_validator.hpp	/^static unsigned int const utf8_reject = 1;$/;"	m	namespace:websocketpp::utf8_validator
utf8_validator	NFD/websocketpp/websocketpp/utf8_validator.hpp	/^namespace utf8_validator {$/;"	n	namespace:websocketpp
utf8d	NFD/websocketpp/websocketpp/utf8_validator.hpp	/^static uint8_t const utf8d[] = {$/;"	m	namespace:websocketpp::utf8_validator
util	ndn-cxx/src/util/digest.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/digest.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/dummy-client-face.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/dummy-client-face.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/ethernet.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/ethernet.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/event-emitter.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/face-uri.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/face-uri.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/in-memory-storage-entry.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/in-memory-storage-entry.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/in-memory-storage-fifo.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/in-memory-storage-fifo.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/in-memory-storage-lfu.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/in-memory-storage-lfu.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/in-memory-storage-lru.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/in-memory-storage-lru.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/in-memory-storage-persistent.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/in-memory-storage-persistent.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/in-memory-storage.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/in-memory-storage.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/indented-stream.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/indented-stream.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/network-monitor.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/network-monitor.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/notification-stream.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/notification-subscriber.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/scheduler-scoped-event-id.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/scheduler-scoped-event-id.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/scheduler.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/scheduler.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/segment-fetcher.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/segment-fetcher.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/signal-connection.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/signal-connection.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/signal-emit.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/signal-scoped-connection.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/signal-scoped-connection.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/signal-signal.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/src/util/sqlite3-statement.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/src/util/sqlite3-statement.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/tests/integrated/network-monitor.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/make-interest-data.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/tests/unit-tests/util/digest.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/dns.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/ethernet.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/event-emitter.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/face-uri.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/in-memory-storage-fifo.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/in-memory-storage-lfu.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/in-memory-storage-lru.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/in-memory-storage-persistent.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/indented-stream.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/notification-stream.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/notification-subscriber.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/scheduler.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/segment-fetcher.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/signal.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/simple-notification.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/tests/unit-tests/util/sqlite3-statement.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/string-helper.t.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
util	ndn-cxx/tests/unit-tests/util/test-home-environment-fixture.hpp	/^namespace util {$/;"	n	namespace:ndn
util	ndn-cxx/tests/unit-tests/util/test-in-memory-storage-common.cpp	/^namespace util {$/;"	n	namespace:ndn	file:
utility	NFD/websocketpp/websocketpp/impl/utilities_impl.hpp	/^namespace utility {$/;"	n	namespace:websocketpp
utility	NFD/websocketpp/websocketpp/utilities.hpp	/^namespace utility {$/;"	n	namespace:websocketpp
validate	NFD/daemon/mgmt/command-validator.hpp	/^CommandValidator::validate(const Interest& interest,$/;"	f	class:nfd::CommandValidator
validate	NFD/daemon/mgmt/manager-base.hpp	/^ManagerBase::validate(const Interest& interest,$/;"	f	class:nfd::ManagerBase
validate	NFD/tests/core/segment-publisher.t.cpp	/^  validate(const Data& data)$/;"	f	class:nfd::tests::SegmentPublisherFixture
validate	NFD/websocketpp/examples/debug_server/debug_server.cpp	/^bool validate(server *, websocketpp::connection_hdl) {$/;"	f
validate	NFD/websocketpp/examples/subprotocol_server/subprotocol_server.cpp	/^bool validate(server & s, connection_hdl hdl) {$/;"	f
validate	NFD/websocketpp/websocketpp/utf8_validator.hpp	/^inline bool validate(std::string const & s) {$/;"	f	namespace:websocketpp::utf8_validator
validate	ndn-cxx/src/management/nfd-control-command.cpp	/^ControlCommand::FieldValidator::validate(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::ControlCommand::FieldValidator
validate	ndn-cxx/src/security/validator.cpp	/^Validator::validate(const Data& data,$/;"	f	class:ndn::Validator
validate	ndn-cxx/src/security/validator.cpp	/^Validator::validate(const Interest& interest,$/;"	f	class:ndn::Validator
validate	ndn-cxx/src/security/validator.hpp	/^  validate(const Data& data,$/;"	f	class:ndn::Validator
validate	ndn-cxx/src/security/validator.hpp	/^  validate(const Interest& interest,$/;"	f	class:ndn::Validator
validateControlResponse	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  validateControlResponse(const Data& response,$/;"	f	class:nfd::tests::TestFaceManagerCommon
validateControlResponse	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  validateControlResponse(const Data& response,$/;"	f	class:nfd::tests::FibManagerFixture
validateControlResponse	NFD/tests/daemon/mgmt/manager-base.t.cpp	/^  validateControlResponse(const Data& response,$/;"	f	class:nfd::tests::ManagerBaseTest
validateControlResponse	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  validateControlResponse(const Data& response,$/;"	f	class:nfd::tests::StrategyChoiceManagerFixture
validateControlResponseCommon	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  validateControlResponseCommon(const Data& response,$/;"	f	class:nfd::tests::TestFaceManagerCommon
validateControlResponseCommon	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  validateControlResponseCommon(const Data& response,$/;"	f	class:nfd::tests::FibManagerFixture
validateControlResponseCommon	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  validateControlResponseCommon(const Data& response,$/;"	f	class:nfd::tests::StrategyChoiceManagerFixture
validateErase	NFD/tests/daemon/table/fib.t.cpp	/^validateErase(Fib& fib, const Name& target)$/;"	f	namespace:nfd::tests
validateErrorMessage	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^validateErrorMessage(const std::string& expectedMessage, const ConfigFile::Error& error)$/;"	f	namespace:nfd::tests
validateException	NFD/tests/daemon/mgmt/tables-config-section.t.cpp	/^  validateException(const std::runtime_error& exception, const std::string& expectedMsg)$/;"	f	class:nfd::tests::TablesConfigSectionFixture
validateFaceEvent	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  validateFaceEvent(const Block& wire,$/;"	f	class:nfd::tests::FaceFixture
validateFaceStatus	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  validateFaceStatus(const Block& statusBlock, const shared_ptr<Face>& reference)$/;"	f	class:nfd::tests::FaceQueryStatusPublisherFixture
validateFaceStatus	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^  validateFaceStatus(const Block& statusBlock, const shared_ptr<Face>& reference)$/;"	f	class:nfd::tests::FaceStatusPublisherFixture
validateFibEntry	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^  validateFibEntry(const Block& entry)$/;"	f	class:nfd::tests::FibEnumerationPublisherFixture
validateFindExactMatch	NFD/tests/daemon/table/fib.t.cpp	/^validateFindExactMatch(const Fib& fib, const Name& target)$/;"	f	namespace:nfd::tests
validateList	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  validateList(const Data& data, const ndn::nfd::StrategyChoice& expectedChoice)$/;"	f	class:nfd::tests::StrategyChoiceManagerFixture
validateNoExactMatch	NFD/tests/daemon/table/fib.t.cpp	/^validateNoExactMatch(const Fib& fib, const Name& target)$/;"	f	namespace:nfd::tests
validateNoOnInterestCallback	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^  validateNoOnInterestCallback(const Name& name, const Interest& interest)$/;"	f	class:nfd::tests::InternalFaceFixture
validateOnInterestCallback	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^  validateOnInterestCallback(const Name& name, const Interest& interest)$/;"	f	class:nfd::tests::InternalFaceFixture
validateParameters	NFD/daemon/mgmt/manager-base.cpp	/^ManagerBase::validateParameters(const ControlCommand& command,$/;"	f	class:nfd::ManagerBase
validateParameters	NFD/rib/rib-manager.cpp	/^RibManager::validateParameters(const ControlCommand& command,$/;"	f	class:nfd::rib::RibManager
validatePublish	NFD/tests/daemon/mgmt/channel-status-publisher.t.cpp	/^  validatePublish(const Data& data)$/;"	f	class:nfd::tests::ChannelStatusPublisherFixture
validatePublish	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  validatePublish(const Data& data, const ndn::nfd::ChannelStatus& expectedEntry)$/;"	f	class:nfd::tests::ChannelStatusFixture
validatePublish	NFD/tests/daemon/mgmt/strategy-choice-publisher.t.cpp	/^  validatePublish(const Data& data)$/;"	f	class:nfd::tests::StrategyChoicePublisherFixture
validatePutData	NFD/tests/daemon/mgmt/internal-face.t.cpp	/^validatePutData(bool& called, const Name& expectedName, const Data& data)$/;"	f	namespace:nfd::tests
validateRequest	ndn-cxx/src/management/nfd-control-command.cpp	/^ControlCommand::validateRequest(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::ControlCommand
validateRequest	ndn-cxx/src/management/nfd-control-command.cpp	/^FaceDestroyCommand::validateRequest(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceDestroyCommand
validateRequest	ndn-cxx/src/management/nfd-control-command.cpp	/^FaceLocalControlCommand::validateRequest(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceLocalControlCommand
validateRequest	ndn-cxx/src/management/nfd-control-command.cpp	/^StrategyChoiceUnsetCommand::validateRequest(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::StrategyChoiceUnsetCommand
validateResponse	ndn-cxx/src/management/nfd-control-command.cpp	/^ControlCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::ControlCommand
validateResponse	ndn-cxx/src/management/nfd-control-command.cpp	/^FaceCreateCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceCreateCommand
validateResponse	ndn-cxx/src/management/nfd-control-command.cpp	/^FaceDestroyCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceDestroyCommand
validateResponse	ndn-cxx/src/management/nfd-control-command.cpp	/^FaceLocalControlCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FaceLocalControlCommand
validateResponse	ndn-cxx/src/management/nfd-control-command.cpp	/^FibAddNextHopCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FibAddNextHopCommand
validateResponse	ndn-cxx/src/management/nfd-control-command.cpp	/^FibRemoveNextHopCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::FibRemoveNextHopCommand
validateResponse	ndn-cxx/src/management/nfd-control-command.cpp	/^RibRegisterCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::RibRegisterCommand
validateResponse	ndn-cxx/src/management/nfd-control-command.cpp	/^RibUnregisterCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::RibUnregisterCommand
validateResponse	ndn-cxx/src/management/nfd-control-command.cpp	/^StrategyChoiceUnsetCommand::validateResponse(const ControlParameters& parameters) const$/;"	f	class:ndn::nfd::StrategyChoiceUnsetCommand
validateRibEntry	NFD/tests/rib/rib-status-publisher-common.hpp	/^  validateRibEntry(const Block& block, const Name& referenceName, const Route& referenceRoute)$/;"	f	class:nfd::rib::tests::RibStatusPublisherFixture
validateSocket	NFD/daemon/face/stream-face.hpp	/^  validateSocket(const typename Protocol::socket& socket)$/;"	f	struct:nfd::StreamFaceValidator
validateSocket	NFD/daemon/face/tcp-face.hpp	/^  validateSocket(const TcpLocalFace::protocol::socket& socket)$/;"	f	struct:nfd::StreamFaceValidator
validate_func	NFD/websocketpp/test/connection/connection.cpp	/^void validate_func(server* s, websocketpp::connection_hdl hdl, message_ptr msg) {$/;"	f
validate_func_subprotocol	NFD/websocketpp/test/roles/server.cpp	/^bool validate_func_subprotocol(server* s, std::string* out, std::string accept,$/;"	f
validate_handler	NFD/websocketpp/websocketpp/connection.hpp	/^typedef lib::function<bool(connection_hdl)> validate_handler;$/;"	t	namespace:websocketpp
validate_handshake	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    lib::error_code validate_handshake(request_type const & r) const {$/;"	f	class:websocketpp::processor::hybi00
validate_handshake	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    lib::error_code validate_handshake(request_type const & r) const {$/;"	f	class:websocketpp::processor::hybi13
validate_incoming_basic_header	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    lib::error_code validate_incoming_basic_header(frame::basic_header const & h,$/;"	f	class:websocketpp::processor::hybi13
validate_incoming_extended_header	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    lib::error_code validate_incoming_extended_header(frame::basic_header h,$/;"	f	class:websocketpp::processor::hybi13
validate_offer	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    lib::error_code validate_offer(http::attribute_list const &) {$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
validate_server_handshake_response	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^    lib::error_code validate_server_handshake_response(request_type const &,$/;"	f	class:websocketpp::processor::hybi00
validate_server_handshake_response	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^    lib::error_code validate_server_handshake_response(request_type const & req,$/;"	f	class:websocketpp::processor::hybi13
validate_set_ua	NFD/websocketpp/test/connection/connection.cpp	/^bool validate_set_ua(server* s, websocketpp::connection_hdl hdl) {$/;"	f
validator	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^        utf8_validator::validator validator; \/\/ utf8 validation state$/;"	m	struct:websocketpp::processor::hybi13::msg_metadata
validator	NFD/websocketpp/websocketpp/utf8_validator.hpp	/^    validator() : m_state(utf8_accept),m_codepoint(0) {}$/;"	f	class:websocketpp::utf8_validator::validator
validator	NFD/websocketpp/websocketpp/utf8_validator.hpp	/^class validator {$/;"	c	namespace:websocketpp::utf8_validator
validator	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  ValidatorConfig validator;$/;"	m	struct:ndn::tests::DirTestFixture	file:
validityCheck	ndn-cxx/src/security/identity.cpp	/^Identity::validityCheck() const$/;"	f	class:ndn::security::Identity
validityCheck	ndn-cxx/src/security/key.cpp	/^Key::validityCheck() const$/;"	f	class:ndn::security::Key
value	NFD/websocketpp/websocketpp/close.hpp	/^    typedef uint16_t value;$/;"	t	namespace:websocketpp::close::status
value	NFD/websocketpp/websocketpp/connection.hpp	/^    enum value {$/;"	g	namespace:websocketpp::session::fail::status
value	NFD/websocketpp/websocketpp/connection.hpp	/^    enum value {$/;"	g	namespace:websocketpp::session::internal_state
value	NFD/websocketpp/websocketpp/connection.hpp	/^    enum value {$/;"	g	namespace:websocketpp::session::state
value	NFD/websocketpp/websocketpp/error.hpp	/^    static bool const value = true;$/;"	m	struct:is_error_code_enum
value	NFD/websocketpp/websocketpp/error.hpp	/^enum value {$/;"	g	namespace:websocketpp::error
value	NFD/websocketpp/websocketpp/extensions/extension.hpp	/^    static const bool value = true;$/;"	m	struct:is_error_code_enum
value	NFD/websocketpp/websocketpp/extensions/extension.hpp	/^enum value {$/;"	g	namespace:websocketpp::extensions::error
value	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    static bool const value = true;$/;"	m	struct:is_error_code_enum
value	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^enum value {$/;"	g	namespace:websocketpp::extensions::permessage_deflate::error
value	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^enum value {$/;"	g	namespace:websocketpp::extensions::permessage_deflate::mode
value	NFD/websocketpp/websocketpp/frame.hpp	/^    enum value {$/;"	g	namespace:websocketpp::frame::opcode
value	NFD/websocketpp/websocketpp/http/constants.hpp	/^        enum value {$/;"	g	namespace:websocketpp::http::status_code
value	NFD/websocketpp/websocketpp/http/parser.hpp	/^    enum value {$/;"	g	namespace:websocketpp::http::parser::body_encoding
value	NFD/websocketpp/websocketpp/http/parser.hpp	/^    enum value {$/;"	g	namespace:websocketpp::http::parser::state
value	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    typedef uint32_t value;$/;"	t	struct:websocketpp::log::channel_type_hint
value	NFD/websocketpp/websocketpp/processors/base.hpp	/^    static bool const value = true;$/;"	m	struct:is_error_code_enum
value	NFD/websocketpp/websocketpp/processors/base.hpp	/^enum value {$/;"	g	namespace:websocketpp::processor::error_cat
value	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^    static bool const value = true;$/;"	m	struct:is_error_code_enum
value	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^enum value {$/;"	g	namespace:websocketpp::transport::asio::error
value	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^    enum value {$/;"	g	namespace:websocketpp::transport::asio::socket::error
value	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^    static bool const value = true;$/;"	m	struct:is_error_code_enum
value	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^enum value {$/;"	g	namespace:websocketpp::transport::error
value	NFD/websocketpp/websocketpp/transport/debug/base.hpp	/^    static bool const value = true;$/;"	m	struct:is_error_code_enum
value	NFD/websocketpp/websocketpp/transport/debug/base.hpp	/^enum value {$/;"	g	namespace:websocketpp::transport::debug::error
value	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^    static bool const value = true;$/;"	m	struct:is_error_code_enum
value	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^enum value {$/;"	g	namespace:websocketpp::transport::iostream::error
value	NFD/websocketpp/websocketpp/transport/stub/base.hpp	/^    static bool const value = true;$/;"	m	struct:is_error_code_enum
value	NFD/websocketpp/websocketpp/transport/stub/base.hpp	/^enum value {$/;"	g	namespace:websocketpp::transport::stub::error
value	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef std::tuple<std::shared_ptr<nfd::Face>, uint32_t, double> value;$/;"	t	class:std::numeric_limits
value	ndn-cxx/src/encoding/block.cpp	/^Block::value() const$/;"	f	class:ndn::Block
value_	utils/trie/detail/multi-policy-container.hpp	/^  Value value_;$/;"	m	struct:ns3::ndn::ndnSIM::detail::policy_wrap
value_	utils/trie/detail/multi-type-container.hpp	/^  T value_;$/;"	m	struct:ns3::ndn::ndnSIM::detail::wrap
value_begin	ndn-cxx/src/encoding/block.hpp	/^Block::value_begin() const$/;"	f	class:ndn::Block
value_end	ndn-cxx/src/encoding/block.hpp	/^Block::value_end() const$/;"	f	class:ndn::Block
value_size	ndn-cxx/src/encoding/block.cpp	/^Block::value_size() const$/;"	f	class:ndn::Block
value_type	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef ns3::Ptr<ns3::ndn::GlobalRouter> value_type;$/;"	t	struct:boost::property_traits
value_type	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef std::tuple<std::shared_ptr<nfd::Face>, uint16_t, double> value_type;$/;"	t	struct:boost::property_traits
value_type	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef std::tuple<std::shared_ptr<nfd::Face>, uint32_t, double> value_type;$/;"	t	struct:boost::property_traits
value_type	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef uint32_t value_type;$/;"	t	struct:boost::property_traits
value_type	ndn-cxx/src/detail/container-with-on-empty-signal.hpp	/^  typedef typename Base::value_type value_type;$/;"	t	class:ndn::ContainerWithOnEmptySignal
value_type	ndn-cxx/src/encoding/encoder.hpp	/^  typedef Buffer::value_type value_type;$/;"	t	class:ndn::encoding::Encoder
value_type	ndn-cxx/src/name.hpp	/^  typedef Component               value_type;$/;"	t	class:ndn::Name
value_type	utils/trie/detail/functor-hook.hpp	/^  typedef ValueType value_type;$/;"	t	struct:ns3::ndn::ndnSIM::detail::FunctorHook
verifySignature	ndn-cxx/src/security/validator.cpp	/^Validator::verifySignature(const Data& data, const PublicKey& key)$/;"	f	class:ndn::Validator
verifySignature	ndn-cxx/src/security/validator.cpp	/^Validator::verifySignature(const Interest& interest, const PublicKey& key)$/;"	f	class:ndn::Validator
verifySignature	ndn-cxx/src/security/validator.cpp	/^Validator::verifySignature(const uint8_t* buf, const size_t size, const DigestSha256& sig)$/;"	f	class:ndn::Validator
verifySignature	ndn-cxx/src/security/validator.cpp	/^Validator::verifySignature(const uint8_t* buf,$/;"	f	class:ndn::Validator
verifySignature	ndn-cxx/src/security/validator.hpp	/^  verifySignature(const Buffer& blob, const DigestSha256& sig)$/;"	f	class:ndn::Validator
verifySignature	ndn-cxx/src/security/validator.hpp	/^  verifySignature(const Buffer& blob, const Signature& sig, const PublicKey& publicKey)$/;"	f	class:ndn::Validator
verifySignature	ndn-cxx/src/security/validator.hpp	/^  verifySignature(const Data& data, const DigestSha256& sig)$/;"	f	class:ndn::Validator
verifySignature	ndn-cxx/src/security/validator.hpp	/^  verifySignature(const Data& data,$/;"	f	class:ndn::Validator
verifySignature	ndn-cxx/src/security/validator.hpp	/^  verifySignature(const Interest& interest, const DigestSha256& sig)$/;"	f	class:ndn::Validator
verifySignature	ndn-cxx/src/security/validator.hpp	/^  verifySignature(const Interest& interest,$/;"	f	class:ndn::Validator
version	NFD/websocketpp/websocketpp/http/parser.hpp	/^        version,$/;"	e	enum:websocketpp::http::parser::state::value
versions_supported	NFD/websocketpp/websocketpp/connection.hpp	/^    static std::vector<int> const versions_supported = {0,7,8,13};$/;"	m	class:websocketpp::std
vertex_descriptor	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef NdnGlobalRouterGraph::Vertice vertex_descriptor;$/;"	t	struct:boost::graph_traits
vertex_iterator	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef std::list<vertex_descriptor>::const_iterator vertex_iterator;$/;"	t	struct:boost::graph_traits
vertex_property_type	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef uint32_t vertex_property_type;$/;"	t	class:boost::NdnGlobalRouterGraph
vertices	helper/boost-graph-ndn-global-routing-helper.hpp	/^vertices(const NdnGlobalRouterGraph& g)$/;"	f	namespace:boost
vertices_size_type	helper/boost-graph-ndn-global-routing-helper.hpp	/^  typedef size_t vertices_size_type;$/;"	t	struct:boost::graph_traits
violatesScope	NFD/daemon/table/pit-entry.cpp	/^Entry::violatesScope(const Face& face) const$/;"	f	class:nfd::pit::Entry
waitForTimeout	NFD/tests/rib/remote-registrator.t.cpp	/^  waitForTimeout()$/;"	f	class:nfd::rib::tests::RemoteRegistratorFixture
wantRegister	ndn-cxx/src/mgmt/dispatcher.hpp	/^    bool wantRegister;$/;"	m	struct:ndn::mgmt::Dispatcher::TopPrefixEntry
warn	NFD/websocketpp/websocketpp/logger/levels.hpp	/^    static level const warn = 0x8;$/;"	m	struct:websocketpp::log::elevel
weak_ptr	NFD/websocketpp/test/message_buffer/message.cpp	/^    typedef websocketpp::lib::weak_ptr<stub> weak_ptr;$/;"	t	struct:stub	file:
weak_ptr	NFD/websocketpp/websocketpp/connection.hpp	/^    typedef lib::weak_ptr<type> weak_ptr;$/;"	t	class:websocketpp::connection
weak_ptr	NFD/websocketpp/websocketpp/message_buffer/alloc.hpp	/^    typedef lib::weak_ptr<con_msg_manager> weak_ptr;$/;"	t	class:websocketpp::message_buffer::alloc::con_msg_manager
weak_ptr	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^    typedef lib::weak_ptr<con_msg_manager> weak_ptr;$/;"	t	class:websocketpp::message_buffer::alloc::con_msg_manager
websocket	NFD/daemon/face/websocket-face.hpp	/^namespace websocket {$/;"	n	namespace:nfd
websocket_endpoint	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    websocket_endpoint () : m_next_id(0) {$/;"	f	class:websocket_endpoint
websocket_endpoint	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^class websocket_endpoint {$/;"	c	file:
websocket_endpoint	NFD/websocketpp/tutorials/utility_client/step3.cpp	/^    websocket_endpoint () {$/;"	f	class:websocket_endpoint
websocket_endpoint	NFD/websocketpp/tutorials/utility_client/step3.cpp	/^class websocket_endpoint {$/;"	c	file:
websocket_endpoint	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^    websocket_endpoint () : m_next_id(0) {$/;"	f	class:websocket_endpoint
websocket_endpoint	NFD/websocketpp/tutorials/utility_client/step4.cpp	/^class websocket_endpoint {$/;"	c	file:
websocket_endpoint	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    websocket_endpoint () : m_next_id(0) {$/;"	f	class:websocket_endpoint
websocket_endpoint	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^class websocket_endpoint {$/;"	c	file:
websocket_endpoint	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    websocket_endpoint () : m_next_id(0) {$/;"	f	class:websocket_endpoint
websocket_endpoint	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^class websocket_endpoint {$/;"	c	file:
websocketpp	NFD/websocketpp/websocketpp/base64/base64.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/close.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/common/chrono.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/common/connection_hdl.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/common/functional.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/common/md5.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/common/memory.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/common/network.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/common/random.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/common/regex.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/common/system_error.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/common/thread.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/common/time.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/concurrency/basic.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/concurrency/none.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/config/asio.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/config/asio_client.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/config/asio_no_tls.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/config/asio_no_tls_client.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/config/core.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/config/core_client.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/config/debug.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/config/debug_asio.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/config/debug_asio_no_tls.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/config/minimal_client.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/config/minimal_server.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/connection.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/connection_base.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/endpoint.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/endpoint_base.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/error.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/extensions/extension.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/extensions/permessage_deflate/disabled.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/frame.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/http/constants.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/http/impl/parser.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/http/impl/request.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/http/impl/response.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/http/parser.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/http/request.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/http/response.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/impl/endpoint_impl.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/impl/utilities_impl.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/logger/basic.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/logger/levels.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/logger/stub.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/logger/syslog.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/message_buffer/alloc.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/message_buffer/message.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/message_buffer/pool.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/processors/base.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/processors/hybi00.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/processors/hybi07.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/processors/hybi08.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/processors/hybi13.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/processors/processor.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/random/none.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/random/random_device.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/roles/client_endpoint.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/roles/server_endpoint.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/sha1/sha1.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/asio/base.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/asio/security/base.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/asio/security/none.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/asio/security/tls.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/base/endpoint.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/debug/base.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/debug/connection.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/debug/endpoint.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/iostream/connection.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/iostream/endpoint.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/stub/base.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/stub/connection.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/transport/stub/endpoint.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/uri.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/utf8_validator.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/utilities.hpp	/^namespace websocketpp {$/;"	n
websocketpp	NFD/websocketpp/websocketpp/version.hpp	/^namespace websocketpp {$/;"	n
what	NFD/core/privilege-helper.hpp	/^    what() const$/;"	f	class:nfd::PrivilegeHelper::Error
what	NFD/websocketpp/websocketpp/error.hpp	/^    virtual char const * what() const throw() {$/;"	f	class:websocketpp::exception
what	NFD/websocketpp/websocketpp/http/constants.hpp	/^        virtual const char* what() const throw() {$/;"	f	class:websocketpp::http::exception
wire	ndn-cxx/src/encoding/block.cpp	/^Block::wire() const$/;"	f	class:ndn::Block
wireDecode	NFD/tests/core/simple-notification.hpp	/^  wireDecode(const Block& block)$/;"	f	class:nfd::tests::SimpleNotification
wireDecode	ndn-cxx/src/data.cpp	/^Data::wireDecode(const Block& wire)$/;"	f	class:ndn::Data
wireDecode	ndn-cxx/src/destination-flag.cpp	/^DestinationFlag::wireDecode(const Block& wire)$/;"	f	class:ndn::DestinationFlag
wireDecode	ndn-cxx/src/exclude.cpp	/^Exclude::wireDecode(const Block& wire)$/;"	f	class:ndn::Exclude
wireDecode	ndn-cxx/src/interest.cpp	/^Interest::wireDecode(const Block& wire)$/;"	f	class:ndn::Interest
wireDecode	ndn-cxx/src/key-locator.cpp	/^KeyLocator::wireDecode(const Block& wire)$/;"	f	class:ndn::KeyLocator
wireDecode	ndn-cxx/src/link.cpp	/^Link::wireDecode(const Block& wire)$/;"	f	class:ndn::Link
wireDecode	ndn-cxx/src/lp/cache-policy.cpp	/^CachePolicy::wireDecode(const Block& wire)$/;"	f	class:ndn::lp::CachePolicy
wireDecode	ndn-cxx/src/lp/nack-header.cpp	/^NackHeader::wireDecode(const Block& wire)$/;"	f	class:ndn::lp::NackHeader
wireDecode	ndn-cxx/src/lp/packet.cpp	/^Packet::wireDecode(const Block& wire)$/;"	f	class:ndn::lp::Packet
wireDecode	ndn-cxx/src/management/nfd-channel-status.cpp	/^ChannelStatus::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::ChannelStatus
wireDecode	ndn-cxx/src/management/nfd-control-parameters.cpp	/^ControlParameters::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::ControlParameters
wireDecode	ndn-cxx/src/management/nfd-face-event-notification.cpp	/^FaceEventNotification::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::FaceEventNotification
wireDecode	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::FaceQueryFilter
wireDecode	ndn-cxx/src/management/nfd-face-status.cpp	/^FaceStatus::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::FaceStatus
wireDecode	ndn-cxx/src/management/nfd-fib-entry.cpp	/^FibEntry::wireDecode(const Block& wire)$/;"	f	class:ndn::nfd::FibEntry
wireDecode	ndn-cxx/src/management/nfd-fib-entry.cpp	/^NextHopRecord::wireDecode(const Block& wire)$/;"	f	class:ndn::nfd::NextHopRecord
wireDecode	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::ForwarderStatus
wireDecode	ndn-cxx/src/management/nfd-local-control-header.hpp	/^LocalControlHeader::wireDecode(const Block& wire, uint8_t encodeMask)$/;"	f	class:ndn::nfd::LocalControlHeader
wireDecode	ndn-cxx/src/management/nfd-rib-entry.cpp	/^RibEntry::wireDecode(const Block& wire)$/;"	f	class:ndn::nfd::RibEntry
wireDecode	ndn-cxx/src/management/nfd-rib-entry.cpp	/^Route::wireDecode(const Block& wire)$/;"	f	class:ndn::nfd::Route
wireDecode	ndn-cxx/src/management/nfd-strategy-choice.cpp	/^StrategyChoice::wireDecode(const Block& block)$/;"	f	class:ndn::nfd::StrategyChoice
wireDecode	ndn-cxx/src/meta-info.cpp	/^MetaInfo::wireDecode(const Block& wire)$/;"	f	class:ndn::MetaInfo
wireDecode	ndn-cxx/src/mgmt/control-response.cpp	/^ControlResponse::wireDecode(const Block& wire)$/;"	f	class:ndn::mgmt::ControlResponse
wireDecode	ndn-cxx/src/name-component.cpp	/^Component::wireDecode(const Block& wire)$/;"	f	class:ndn::name::Component
wireDecode	ndn-cxx/src/name.cpp	/^Name::wireDecode(const Block& wire)$/;"	f	class:ndn::Name
wireDecode	ndn-cxx/src/security/additional-description.cpp	/^AdditionalDescription::wireDecode(const Block& wire)$/;"	f	class:ndn::security::AdditionalDescription
wireDecode	ndn-cxx/src/security/certificate.cpp	/^Certificate::wireDecode(const Block& wire)$/;"	f	class:ndn::Certificate
wireDecode	ndn-cxx/src/security/identity-certificate.cpp	/^IdentityCertificate::wireDecode(const Block& wire)$/;"	f	class:ndn::IdentityCertificate
wireDecode	ndn-cxx/src/security/secured-bag.cpp	/^SecuredBag::wireDecode(const Block& wire)$/;"	f	class:ndn::SecuredBag
wireDecode	ndn-cxx/src/security/validity-period.cpp	/^ValidityPeriod::wireDecode(const Block& wire)$/;"	f	class:ndn::security::ValidityPeriod
wireDecode	ndn-cxx/src/selectors.cpp	/^Selectors::wireDecode(const Block& wire)$/;"	f	class:ndn::Selectors
wireDecode	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::wireDecode(const Block& wire)$/;"	f	class:ndn::SignatureInfo
wireDecode	ndn-cxx/tests/unit-tests/util/simple-notification.hpp	/^  wireDecode(const Block& block)$/;"	f	class:ndn::util::tests::SimpleNotification
wireEncode	NFD/tests/core/simple-notification.hpp	/^  wireEncode() const$/;"	f	class:nfd::tests::SimpleNotification
wireEncode	NFD/tools/ndn-autoconfig-server.cpp	/^  wireEncode() const$/;"	f	class:ndn::PrefixCollection
wireEncode	NFD/tools/ndn-autoconfig-server.cpp	/^  wireEncode(EncodingImpl<T>& encoder) const$/;"	f	class:ndn::PrefixCollection
wireEncode	ndn-cxx/src/data.cpp	/^Data::wireEncode() const$/;"	f	class:ndn::Data
wireEncode	ndn-cxx/src/data.cpp	/^Data::wireEncode(EncodingBuffer& encoder, const Block& signatureValue) const$/;"	f	class:ndn::Data
wireEncode	ndn-cxx/src/data.cpp	/^Data::wireEncode(EncodingImpl<TAG>& encoder, bool unsignedPortion\/* = false*\/) const$/;"	f	class:ndn::Data
wireEncode	ndn-cxx/src/destination-flag.cpp	/^DestinationFlag::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::DestinationFlag
wireEncode	ndn-cxx/src/exclude.cpp	/^Exclude::wireEncode() const$/;"	f	class:ndn::Exclude
wireEncode	ndn-cxx/src/exclude.cpp	/^Exclude::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::Exclude
wireEncode	ndn-cxx/src/interest.cpp	/^Interest::wireEncode() const$/;"	f	class:ndn::Interest
wireEncode	ndn-cxx/src/interest.cpp	/^Interest::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::Interest
wireEncode	ndn-cxx/src/key-locator.cpp	/^KeyLocator::wireEncode() const$/;"	f	class:ndn::KeyLocator
wireEncode	ndn-cxx/src/key-locator.cpp	/^KeyLocator::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::KeyLocator
wireEncode	ndn-cxx/src/lp/cache-policy.cpp	/^CachePolicy::wireEncode() const$/;"	f	class:ndn::lp::CachePolicy
wireEncode	ndn-cxx/src/lp/cache-policy.cpp	/^CachePolicy::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::lp::CachePolicy
wireEncode	ndn-cxx/src/lp/nack-header.cpp	/^NackHeader::wireEncode() const$/;"	f	class:ndn::lp::NackHeader
wireEncode	ndn-cxx/src/lp/nack-header.cpp	/^NackHeader::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::lp::NackHeader
wireEncode	ndn-cxx/src/lp/packet.cpp	/^Packet::wireEncode() const$/;"	f	class:ndn::lp::Packet
wireEncode	ndn-cxx/src/lp/packet.cpp	/^Packet::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::lp::Packet
wireEncode	ndn-cxx/src/management/nfd-channel-status.cpp	/^ChannelStatus::wireEncode() const$/;"	f	class:ndn::nfd::ChannelStatus
wireEncode	ndn-cxx/src/management/nfd-channel-status.cpp	/^ChannelStatus::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::ChannelStatus
wireEncode	ndn-cxx/src/management/nfd-control-parameters.cpp	/^ControlParameters::wireEncode() const$/;"	f	class:ndn::nfd::ControlParameters
wireEncode	ndn-cxx/src/management/nfd-control-parameters.cpp	/^ControlParameters::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::ControlParameters
wireEncode	ndn-cxx/src/management/nfd-face-event-notification.cpp	/^FaceEventNotification::wireEncode() const$/;"	f	class:ndn::nfd::FaceEventNotification
wireEncode	ndn-cxx/src/management/nfd-face-event-notification.cpp	/^FaceEventNotification::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::FaceEventNotification
wireEncode	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::wireEncode() const$/;"	f	class:ndn::nfd::FaceQueryFilter
wireEncode	ndn-cxx/src/management/nfd-face-query-filter.cpp	/^FaceQueryFilter::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::FaceQueryFilter
wireEncode	ndn-cxx/src/management/nfd-face-status.cpp	/^FaceStatus::wireEncode() const$/;"	f	class:ndn::nfd::FaceStatus
wireEncode	ndn-cxx/src/management/nfd-face-status.cpp	/^FaceStatus::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::FaceStatus
wireEncode	ndn-cxx/src/management/nfd-fib-entry.cpp	/^FibEntry::wireEncode() const$/;"	f	class:ndn::nfd::FibEntry
wireEncode	ndn-cxx/src/management/nfd-fib-entry.cpp	/^FibEntry::wireEncode(EncodingImpl<TAG>& block) const$/;"	f	class:ndn::nfd::FibEntry
wireEncode	ndn-cxx/src/management/nfd-fib-entry.cpp	/^NextHopRecord::wireEncode() const$/;"	f	class:ndn::nfd::NextHopRecord
wireEncode	ndn-cxx/src/management/nfd-fib-entry.cpp	/^NextHopRecord::wireEncode(EncodingImpl<TAG>& block) const$/;"	f	class:ndn::nfd::NextHopRecord
wireEncode	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::wireEncode() const$/;"	f	class:ndn::nfd::ForwarderStatus
wireEncode	ndn-cxx/src/management/nfd-forwarder-status.cpp	/^ForwarderStatus::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::ForwarderStatus
wireEncode	ndn-cxx/src/management/nfd-local-control-header.hpp	/^LocalControlHeader::wireEncode(EncodingImpl<TAG>& block, size_t payloadSize,$/;"	f	class:ndn::nfd::LocalControlHeader
wireEncode	ndn-cxx/src/management/nfd-local-control-header.hpp	/^LocalControlHeader::wireEncode(const U& payload, uint8_t encodeMask) const$/;"	f	class:ndn::nfd::LocalControlHeader
wireEncode	ndn-cxx/src/management/nfd-rib-entry.cpp	/^RibEntry::wireEncode() const$/;"	f	class:ndn::nfd::RibEntry
wireEncode	ndn-cxx/src/management/nfd-rib-entry.cpp	/^RibEntry::wireEncode(EncodingImpl<TAG>& block) const$/;"	f	class:ndn::nfd::RibEntry
wireEncode	ndn-cxx/src/management/nfd-rib-entry.cpp	/^Route::wireEncode() const$/;"	f	class:ndn::nfd::Route
wireEncode	ndn-cxx/src/management/nfd-rib-entry.cpp	/^Route::wireEncode(EncodingImpl<TAG>& block) const$/;"	f	class:ndn::nfd::Route
wireEncode	ndn-cxx/src/management/nfd-strategy-choice.cpp	/^StrategyChoice::wireEncode() const$/;"	f	class:ndn::nfd::StrategyChoice
wireEncode	ndn-cxx/src/management/nfd-strategy-choice.cpp	/^StrategyChoice::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::nfd::StrategyChoice
wireEncode	ndn-cxx/src/meta-info.cpp	/^MetaInfo::wireEncode() const$/;"	f	class:ndn::MetaInfo
wireEncode	ndn-cxx/src/meta-info.cpp	/^MetaInfo::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::MetaInfo
wireEncode	ndn-cxx/src/mgmt/control-response.cpp	/^ControlResponse::wireEncode() const$/;"	f	class:ndn::mgmt::ControlResponse
wireEncode	ndn-cxx/src/name-component.cpp	/^Component::wireEncode() const$/;"	f	class:ndn::name::Component
wireEncode	ndn-cxx/src/name-component.cpp	/^Component::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::name::Component
wireEncode	ndn-cxx/src/name.cpp	/^Name::wireEncode() const$/;"	f	class:ndn::Name
wireEncode	ndn-cxx/src/name.cpp	/^Name::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::Name
wireEncode	ndn-cxx/src/security/additional-description.cpp	/^AdditionalDescription::wireEncode() const$/;"	f	class:ndn::security::AdditionalDescription
wireEncode	ndn-cxx/src/security/additional-description.cpp	/^AdditionalDescription::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::security::AdditionalDescription
wireEncode	ndn-cxx/src/security/secured-bag.cpp	/^SecuredBag::wireEncode() const$/;"	f	class:ndn::SecuredBag
wireEncode	ndn-cxx/src/security/validity-period.cpp	/^ValidityPeriod::wireEncode() const$/;"	f	class:ndn::security::ValidityPeriod
wireEncode	ndn-cxx/src/security/validity-period.cpp	/^ValidityPeriod::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::security::ValidityPeriod
wireEncode	ndn-cxx/src/selectors.cpp	/^Selectors::wireEncode() const$/;"	f	class:ndn::Selectors
wireEncode	ndn-cxx/src/selectors.cpp	/^Selectors::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::Selectors
wireEncode	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::wireEncode() const$/;"	f	class:ndn::SignatureInfo
wireEncode	ndn-cxx/src/signature-info.cpp	/^SignatureInfo::wireEncode(EncodingImpl<TAG>& encoder) const$/;"	f	class:ndn::SignatureInfo
wireEncode	ndn-cxx/tests/unit-tests/util/simple-notification.hpp	/^  wireEncode() const$/;"	f	class:ndn::util::tests::SimpleNotification
wireReset	ndn-cxx/src/management/nfd-face-event-notification.cpp	/^FaceEventNotification::wireReset() const$/;"	f	class:ndn::nfd::FaceEventNotification
wireReset	ndn-cxx/src/management/nfd-face-status.cpp	/^FaceStatus::wireReset() const$/;"	f	class:ndn::nfd::FaceStatus
word_mask_circ	NFD/websocketpp/websocketpp/frame.hpp	/^inline size_t word_mask_circ(uint8_t * input, uint8_t * output, size_t length,$/;"	f	namespace:websocketpp::frame
word_mask_circ	NFD/websocketpp/websocketpp/frame.hpp	/^inline size_t word_mask_circ(uint8_t* data, size_t length, size_t prepared_key){$/;"	f	namespace:websocketpp::frame
word_mask_exact	NFD/websocketpp/websocketpp/frame.hpp	/^inline void word_mask_exact(uint8_t* data, size_t length, const$/;"	f	namespace:websocketpp::frame
word_mask_exact	NFD/websocketpp/websocketpp/frame.hpp	/^inline void word_mask_exact(uint8_t* input, uint8_t* output, size_t length,$/;"	f	namespace:websocketpp::frame
work_ptr	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    typedef lib::shared_ptr<boost::asio::io_service::work> work_ptr;$/;"	t	class:websocketpp::transport::asio::endpoint
wrap	utils/trie/detail/multi-type-container.hpp	/^struct wrap {$/;"	s	namespace:ns3::ndn::ndnSIM::detail
write	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    void write(std::string msg) {$/;"	f	struct:stub_con
write	NFD/websocketpp/test/transport/iostream/connection.cpp	/^    void write(std::vector<websocketpp::transport::buffer> & bufs) {$/;"	f	struct:stub_con
write	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    void write(level channel, char const * msg) {$/;"	f	class:websocketpp::log::basic
write	NFD/websocketpp/websocketpp/logger/basic.hpp	/^    void write(level channel, std::string const & msg) {$/;"	f	class:websocketpp::log::basic
write	NFD/websocketpp/websocketpp/logger/stub.hpp	/^    void write(level, char const *) {}$/;"	f	class:websocketpp::log::stub
write	NFD/websocketpp/websocketpp/logger/stub.hpp	/^    void write(level, std::string const &) {}$/;"	f	class:websocketpp::log::stub
write	NFD/websocketpp/websocketpp/logger/syslog.hpp	/^    void write(level channel, char const * msg) {$/;"	f	class:websocketpp::log::syslog
write	NFD/websocketpp/websocketpp/logger/syslog.hpp	/^    void write(level channel, std::string const & msg) {$/;"	f	class:websocketpp::log::syslog
write	ndn-cxx/src/encoding/buffer-stream.hpp	/^  write(const char_type* s, std::streamsize n)$/;"	f	class:ndn::iostreams::buffer_append_device
writeLogs	NFD/tests/core/logger.t.cpp	/^  writeLogs()$/;"	f	class:nfd::tests::InClassLogger
writeLogs	NFD/tests/core/logger.t.cpp	/^  writeLogs()$/;"	f	class:nfd::tests::InClassTemplateLogger
writeNonNegativeInteger	ndn-cxx/src/encoding/tlv.hpp	/^writeNonNegativeInteger(std::ostream& os, uint64_t varNumber)$/;"	f	namespace:ndn::tlv
writeVarNumber	ndn-cxx/src/encoding/tlv.hpp	/^writeVarNumber(std::ostream& os, uint64_t varNumber)$/;"	f	namespace:ndn::tlv
write_buf	NFD/websocketpp/websocketpp/transport/asio/connection.hpp	/^        std::string write_buf;$/;"	m	struct:websocketpp::transport::asio::connection::proxy_data
write_frame	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::write_frame() {$/;"	f	class:websocketpp::connection
write_frame_handler	NFD/websocketpp/websocketpp/connection.hpp	/^typedef lib::function<void(lib::error_code const & ec)> write_frame_handler;$/;"	t	namespace:websocketpp
write_handler	NFD/websocketpp/test/transport/iostream/connection.cpp	/^websocketpp::lib::error_code write_handler(std::string & o, websocketpp::connection_hdl, char const * buf, size_t len) {$/;"	f
write_handler	NFD/websocketpp/websocketpp/transport/base/connection.hpp	/^typedef lib::function<void(lib::error_code const &)> write_handler;$/;"	t	namespace:websocketpp::transport
write_handler	NFD/websocketpp/websocketpp/transport/iostream/base.hpp	/^    write_handler;$/;"	t	namespace:websocketpp::transport::iostream
write_handler_error	NFD/websocketpp/test/transport/iostream/connection.cpp	/^websocketpp::lib::error_code write_handler_error(websocketpp::connection_hdl, char const *, size_t) {$/;"	f
write_pop	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^typename config::message_type::ptr connection<config>::write_pop()$/;"	f	class:websocketpp::connection
write_push	NFD/websocketpp/websocketpp/impl/connection_impl.hpp	/^void connection<config>::write_push(typename config::message_type::ptr msg)$/;"	f	class:websocketpp::connection
zlib_error	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    zlib_error,$/;"	e	enum:websocketpp::extensions::permessage_deflate::error::value
~AccessStrategy	NFD/daemon/fw/access-strategy.cpp	/^AccessStrategy::~AccessStrategy()$/;"	f	class:nfd::fw::AccessStrategy
~AccumulatorType	ndn-cxx/tools/ndnsec/util.hpp	/^  ~AccumulatorType()$/;"	f	class:AccumulatorType
~AddRouteFixture	tests/unit-tests/helper/ndn-fib-helper.t.cpp	/^  ~AddRouteFixture()$/;"	f	class:ns3::ndn::AddRouteFixture
~AllStrategiesFixture	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  ~AllStrategiesFixture()$/;"	f	class:nfd::tests::AllStrategiesFixture
~AnnotatedTopologyReader	utils/topology/annotated-topology-reader.cpp	/^AnnotatedTopologyReader::~AnnotatedTopologyReader()$/;"	f	class:ns3::AnnotatedTopologyReader
~App	apps/ndn-app.cpp	/^App::~App()$/;"	f	class:ns3::ndn::App
~AppDelayTracer	utils/tracers/ndn-app-delay-tracer.cpp	/^AppDelayTracer::~AppDelayTracer(){};$/;"	f	class:ns3::ndn::AppDelayTracer
~AppDelayTracerFixture	tests/unit-tests/utils/tracers/ndn-app-delay-tracer.t.cpp	/^  ~AppDelayTracerFixture()$/;"	f	class:ns3::ndn::AppDelayTracerFixture
~AppFace	NFD/daemon/mgmt/app-face.hpp	/^  ~AppFace() { }$/;"	f	class:nfd::AppFace
~AppFace	model/ndn-app-face.cpp	/^AppFace::~AppFace()$/;"	f	class:ns3::ndn::AppFace
~AuthorizedCommandFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  ~AuthorizedCommandFixture()$/;"	f	class:nfd::tests::AuthorizedCommandFixture
~AuthorizedCommandFixture	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  ~AuthorizedCommandFixture()$/;"	f	class:nfd::tests::AuthorizedCommandFixture
~AuthorizedCommandFixture	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  ~AuthorizedCommandFixture()$/;"	f	class:nfd::tests::AuthorizedCommandFixture
~BaseFixture	NFD/tests/test-common.hpp	/^  ~BaseFixture()$/;"	f	class:nfd::tests::BaseFixture
~BestRouteStrategy	NFD/daemon/fw/best-route-strategy.cpp	/^BestRouteStrategy::~BestRouteStrategy()$/;"	f	class:nfd::fw::BestRouteStrategy
~CFReleaser	ndn-cxx/src/security/sec-tpm-osx.cpp	/^  ~CFReleaser()$/;"	f	class:ndn::CFReleaser
~CanonizeProvider	ndn-cxx/src/util/face-uri.cpp	/^  ~CanonizeProvider()$/;"	f	class:ndn::util::CanonizeProvider
~Certificate	ndn-cxx/src/security/certificate.cpp	/^Certificate::~Certificate()$/;"	f	class:ndn::Certificate
~CertificateCache	ndn-cxx/src/security/certificate-cache.hpp	/^  ~CertificateCache()$/;"	f	class:ndn::CertificateCache
~CertificateCacheTtl	ndn-cxx/src/security/certificate-cache-ttl.cpp	/^CertificateCacheTtl::~CertificateCacheTtl()$/;"	f	class:ndn::CertificateCacheTtl
~CertificateExtension	ndn-cxx/src/security/certificate-extension.hpp	/^  ~CertificateExtension()$/;"	f	class:ndn::CertificateExtension
~Channel	NFD/daemon/face/channel.cpp	/^Channel::~Channel()$/;"	f	class:nfd::Channel
~ChannelStatusPublisher	NFD/daemon/mgmt/channel-status-publisher.cpp	/^ChannelStatusPublisher::~ChannelStatusPublisher()$/;"	f	class:nfd::ChannelStatusPublisher
~ChannelStatusPublisherFixture	NFD/tests/daemon/mgmt/channel-status-publisher.t.cpp	/^  ~ChannelStatusPublisherFixture()$/;"	f	class:nfd::tests::ChannelStatusPublisherFixture
~Checker	ndn-cxx/src/security/conf/checker.hpp	/^  ~Checker()$/;"	f	class:ndn::security::conf::Checker
~CleanupFixture	tests/unit-tests/tests-common.hpp	/^  ~CleanupFixture()$/;"	f	class:ns3::ndn::CleanupFixture
~ClientControlStrategy	NFD/daemon/fw/client-control-strategy.cpp	/^ClientControlStrategy::~ClientControlStrategy()$/;"	f	class:nfd::fw::ClientControlStrategy
~CommandFixture	NFD/tests/daemon/mgmt/validation-common.hpp	/^  ~CommandFixture()$/;"	f	class:nfd::tests::CommandFixture
~CommandIdentityGlobalFixture	NFD/tests/daemon/mgmt/validation-common.cpp	/^CommandIdentityGlobalFixture::~CommandIdentityGlobalFixture()$/;"	f	class:nfd::tests::CommandIdentityGlobalFixture
~CommandInterestGenerator	ndn-cxx/src/util/command-interest-generator.hpp	/^  ~CommandInterestGenerator()$/;"	f	class:ndn::CommandInterestGenerator
~CommandInterestValidator	ndn-cxx/src/util/command-interest-validator.hpp	/^  ~CommandInterestValidator()$/;"	f	class:ndn::CommandInterestValidator
~CommandValidator	NFD/daemon/mgmt/command-validator.cpp	/^CommandValidator::~CommandValidator()$/;"	f	class:nfd::CommandValidator
~CommandValidatorTester	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  ~CommandValidatorTester()$/;"	f	class:nfd::tests::CommandValidatorTester
~ConfigFile	ndn-cxx/src/util/config-file.cpp	/^ConfigFile::~ConfigFile()$/;"	f	class:ndn::ConfigFile
~Consumer	apps/ndn-consumer.hpp	/^  virtual ~Consumer(){};$/;"	f	class:ns3::ndn::Consumer
~ConsumerCbr	apps/ndn-consumer-cbr.cpp	/^ConsumerCbr::~ConsumerCbr()$/;"	f	class:ns3::ndn::ConsumerCbr
~ConsumerZipfMandelbrot	apps/ndn-consumer-zipf-mandelbrot.cpp	/^ConsumerZipfMandelbrot::~ConsumerZipfMandelbrot()$/;"	f	class:ns3::ndn::ConsumerZipfMandelbrot
~ContentStore	model/cs/ndn-content-store.cpp	/^ContentStore::~ContentStore()$/;"	f	class:ns3::ndn::ContentStore
~ContentStoreImpl	model/cs/content-store-impl.hpp	/^  virtual ~ContentStoreImpl(){};$/;"	f	class:ns3::ndn::cs::ContentStoreImpl
~CsTracer	utils/tracers/ndn-cs-tracer.cpp	/^CsTracer::~CsTracer(){};$/;"	f	class:ns3::ndn::CsTracer
~CustomClock	ndn-cxx/src/util/time-custom-clock.hpp	/^  virtual ~CustomClock()$/;"	f	class:ndn::time::CustomClock
~DataIdentityFixture	ndn-cxx/tests/unit-tests/data.t.cpp	/^  ~DataIdentityFixture()$/;"	f	class:ndn::tests::DataIdentityFixture
~DeadNonceList	NFD/daemon/table/dead-nonce-list.cpp	/^DeadNonceList::~DeadNonceList()$/;"	f	class:nfd::DeadNonceList
~DefaultStrategyOnlyFixture	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  ~DefaultStrategyOnlyFixture()$/;"	f	class:nfd::tests::DefaultStrategyOnlyFixture
~DirTestFixture	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  ~DirTestFixture()$/;"	f	struct:ndn::tests::DirTestFixture
~Dispatcher	ndn-cxx/src/mgmt/dispatcher.cpp	/^Dispatcher::~Dispatcher()$/;"	f	class:ndn::mgmt::Dispatcher
~DummyAllSubscriber	NFD/tests/core/config-file.t.cpp	/^  ~DummyAllSubscriber()$/;"	f	class:nfd::tests::DummyAllSubscriber
~DummyChannel	NFD/tests/daemon/mgmt/channel-status-common.hpp	/^  ~DummyChannel()$/;"	f	class:nfd::tests::DummyChannel
~DummyNoSubscriber	NFD/tests/core/config-file.t.cpp	/^  ~DummyNoSubscriber()$/;"	f	class:nfd::tests::DummyNoSubscriber
~DummyOneSubscriber	NFD/tests/core/config-file.t.cpp	/^  ~DummyOneSubscriber()$/;"	f	class:nfd::tests::DummyOneSubscriber
~DummyStrategyInfo	NFD/tests/daemon/table/strategy-info-host.t.cpp	/^  ~DummyStrategyInfo()$/;"	f	class:nfd::tests::DummyStrategyInfo
~DummySubscriber	NFD/tests/core/config-file.t.cpp	/^  ~DummySubscriber()$/;"	f	class:nfd::tests::DummySubscriber
~Entry	NFD/daemon/table/name-tree-entry.cpp	/^Entry::~Entry()$/;"	f	class:nfd::name_tree::Entry
~Face	NFD/daemon/face/face.cpp	/^Face::~Face()$/;"	f	class:nfd::Face
~FaceFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  ~FaceFixture()$/;"	f	class:nfd::tests::FaceFixture
~FaceListFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  ~FaceListFixture()$/;"	f	class:nfd::tests::FaceListFixture
~FaceManager	NFD/daemon/mgmt/face-manager.cpp	/^FaceManager::~FaceManager()$/;"	f	class:nfd::FaceManager
~FaceManagerFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  ~FaceManagerFixture()$/;"	f	class:nfd::tests::FaceManagerFixture
~FaceManagerTestFace	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  ~FaceManagerTestFace()$/;"	f	class:nfd::tests::FaceManagerTestFace
~FaceQueryListFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  ~FaceQueryListFixture()$/;"	f	class:nfd::tests::FaceQueryListFixture
~FaceQueryStatusPublisher	NFD/daemon/mgmt/face-query-status-publisher.cpp	/^FaceQueryStatusPublisher::~FaceQueryStatusPublisher()$/;"	f	class:nfd::FaceQueryStatusPublisher
~FaceQueryStatusPublisherFixture	NFD/tests/daemon/mgmt/face-query-status-publisher-common.hpp	/^  ~FaceQueryStatusPublisherFixture()$/;"	f	class:nfd::tests::FaceQueryStatusPublisherFixture
~FaceStatusPublisher	NFD/daemon/mgmt/face-status-publisher.cpp	/^FaceStatusPublisher::~FaceStatusPublisher()$/;"	f	class:nfd::FaceStatusPublisher
~FaceStatusPublisherFixture	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^  ~FaceStatusPublisherFixture()$/;"	f	class:nfd::tests::FaceStatusPublisherFixture
~FaceTable	NFD/daemon/fw/face-table.cpp	/^FaceTable::~FaceTable()$/;"	f	class:nfd::FaceTable
~FaceTableFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  ~FaceTableFixture()$/;"	f	class:nfd::tests::FaceTableFixture
~FacesFixture	ndn-cxx/tests/unit-tests/security/validator-config.t.cpp	/^  ~FacesFixture()$/;"	f	struct:ndn::tests::FacesFixture
~FakeNetworkInterfaceFixture	NFD/tests/core/network-interface.t.cpp	/^  ~FakeNetworkInterfaceFixture()$/;"	f	class:nfd::tests::FakeNetworkInterfaceFixture
~FakeNetworkInterfaceFixture	NFD/tests/daemon/face/tcp.t.cpp	/^  ~FakeNetworkInterfaceFixture()$/;"	f	class:nfd::tests::FakeNetworkInterfaceFixture
~FakeNetworkInterfaceFixture	NFD/tests/daemon/face/udp.t.cpp	/^  ~FakeNetworkInterfaceFixture()$/;"	f	class:nfd::tests::FakeNetworkInterfaceFixture
~Fib	NFD/daemon/table/fib.cpp	/^Fib::~Fib()$/;"	f	class:nfd::Fib
~FibEnumerationPublisher	NFD/daemon/mgmt/fib-enumeration-publisher.cpp	/^FibEnumerationPublisher::~FibEnumerationPublisher()$/;"	f	class:nfd::FibEnumerationPublisher
~FibEnumerationPublisherFixture	NFD/tests/daemon/mgmt/fib-enumeration-publisher-common.hpp	/^  ~FibEnumerationPublisherFixture()$/;"	f	class:nfd::tests::FibEnumerationPublisherFixture
~FibManager	NFD/daemon/mgmt/fib-manager.cpp	/^FibManager::~FibManager()$/;"	f	class:nfd::FibManager
~FibManagerFixture	NFD/tests/daemon/mgmt/fib-manager.t.cpp	/^  ~FibManagerFixture()$/;"	f	class:nfd::tests::FibManagerFixture
~Filter	ndn-cxx/src/security/conf/filter.hpp	/^  ~Filter()$/;"	f	class:ndn::security::conf::Filter
~Forwarder	NFD/daemon/fw/forwarder.cpp	/^Forwarder::~Forwarder()$/;"	f	class:nfd::Forwarder
~FwHopCountTag	utils/ndn-fw-hop-count-tag.hpp	/^  ~FwHopCountTag()$/;"	f	class:ns3::ndn::FwHopCountTag
~GeneralConfigSectionFixture	NFD/tests/daemon/mgmt/general-config-section.t.cpp	/^  ~GeneralConfigSectionFixture()$/;"	f	class:nfd::general::tests::GeneralConfigSectionFixture
~GlobalRoutingHelperFixture	tests/unit-tests/helper/ndn-global-routing-helper.t.cpp	/^  ~GlobalRoutingHelperFixture()$/;"	f	class:ns3::ndn::GlobalRoutingHelperFixture
~IdentityFixture	ndn-cxx/tests/unit-tests/security/identity-fixture.cpp	/^  ~IdentityFixture()$/;"	f	class:ndn::security::IdentityFixture
~IdentityManagementFixture	NFD/tests/identity-management-fixture.cpp	/^IdentityManagementFixture::~IdentityManagementFixture()$/;"	f	class:nfd::tests::IdentityManagementFixture
~IdentityManagementFixture	ndn-cxx/tests/identity-management-fixture.cpp	/^IdentityManagementFixture::~IdentityManagementFixture()$/;"	f	class:ndn::security::IdentityManagementFixture
~IdentityManagementTimeFixture	ndn-cxx/tests/unit-tests/identity-management-time-fixture.cpp	/^IdentityManagementTimeFixture::~IdentityManagementTimeFixture()$/;"	f	class:ndn::security::IdentityManagementTimeFixture
~InMemoryStorage	ndn-cxx/src/util/in-memory-storage.cpp	/^InMemoryStorage::~InMemoryStorage()$/;"	f	class:ndn::util::InMemoryStorage
~InMemoryStorageFifo	ndn-cxx/src/util/in-memory-storage-fifo.cpp	/^InMemoryStorageFifo::~InMemoryStorageFifo()$/;"	f	class:ndn::util::InMemoryStorageFifo
~InMemoryStorageLfu	ndn-cxx/src/util/in-memory-storage-lfu.cpp	/^InMemoryStorageLfu::~InMemoryStorageLfu()$/;"	f	class:ndn::util::InMemoryStorageLfu
~InMemoryStorageLru	ndn-cxx/src/util/in-memory-storage-lru.cpp	/^InMemoryStorageLru::~InMemoryStorageLru()$/;"	f	class:ndn::util::InMemoryStorageLru
~InMemoryStoragePersistent	ndn-cxx/src/util/in-memory-storage-persistent.cpp	/^InMemoryStoragePersistent::~InMemoryStoragePersistent()$/;"	f	class:ndn::util::InMemoryStoragePersistent
~IndentedStream	ndn-cxx/src/util/indented-stream.cpp	/^IndentedStream::~IndentedStream()$/;"	f	class:ndn::util::IndentedStream
~InternalFace	NFD/daemon/mgmt/internal-face.cpp	/^InternalFace::~InternalFace()$/;"	f	class:nfd::InternalFace
~KeyChain	ndn-cxx/src/security/key-chain.cpp	/^KeyChain::~KeyChain()$/;"	f	class:ndn::security::KeyChain
~KeyLocatorChecker	ndn-cxx/src/security/conf/key-locator-checker.hpp	/^  ~KeyLocatorChecker()$/;"	f	class:ndn::security::conf::KeyLocatorChecker
~KeyParams	ndn-cxx/src/security/key-params.hpp	/^  ~KeyParams()$/;"	f	class:ndn::KeyParams
~L2RateTracer	utils/tracers/l2-rate-tracer.cpp	/^L2RateTracer::~L2RateTracer()$/;"	f	class:ns3::L2RateTracer
~L2Tracer	utils/tracers/l2-tracer.hpp	/^  virtual ~L2Tracer(){};$/;"	f	class:ns3::L2Tracer
~L3Protocol	model/ndn-l3-protocol.cpp	/^L3Protocol::~L3Protocol()$/;"	f	class:ns3::ndn::L3Protocol
~L3RateTracer	utils/tracers/ndn-l3-rate-tracer.cpp	/^L3RateTracer::~L3RateTracer()$/;"	f	class:ns3::ndn::L3RateTracer
~L3Tracer	utils/tracers/ndn-l3-tracer.cpp	/^L3Tracer::~L3Tracer(){};$/;"	f	class:ns3::ndn::L3Tracer
~LoggerFixture	NFD/tests/core/logger.t.cpp	/^  ~LoggerFixture()$/;"	f	class:nfd::tests::LoggerFixture
~ManagerBase	NFD/daemon/mgmt/manager-base.cpp	/^ManagerBase::~ManagerBase()$/;"	f	class:nfd::ManagerBase
~MeasurementsAccessor	NFD/daemon/table/measurements-accessor.cpp	/^MeasurementsAccessor::~MeasurementsAccessor()$/;"	f	class:nfd::MeasurementsAccessor
~MeasurementsAccessorTestStrategy	NFD/tests/daemon/table/measurements-accessor.t.cpp	/^  ~MeasurementsAccessorTestStrategy()$/;"	f	class:nfd::tests::MeasurementsAccessorTestStrategy
~NameTree	NFD/daemon/table/name-tree.cpp	/^NameTree::~NameTree()$/;"	f	class:nfd::NameTree
~NccStrategy	NFD/daemon/fw/ncc-strategy.cpp	/^NccStrategy::~NccStrategy()$/;"	f	class:nfd::fw::NccStrategy
~NetDeviceFace	model/ndn-net-device-face.cpp	/^NetDeviceFace::~NetDeviceFace()$/;"	f	class:ns3::ndn::NetDeviceFace
~NetworkMonitor	ndn-cxx/src/util/network-monitor.cpp	/^NetworkMonitor::~NetworkMonitor()$/;"	f	class:ndn::util::NetworkMonitor
~Nfd	NFD/daemon/nfd.cpp	/^Nfd::~Nfd()$/;"	f	class:nfd::Nfd
~Nfdc	NFD/tools/nfdc.cpp	/^Nfdc::~Nfdc()$/;"	f	class:nfdc::Nfdc
~Nocache	model/cs/content-store-nocache.cpp	/^Nocache::~Nocache()$/;"	f	class:ns3::ndn::cs::Nocache
~Node	NFD/daemon/table/name-tree-entry.cpp	/^Node::~Node()$/;"	f	class:nfd::name_tree::Node
~NotificationStream	NFD/core/notification-stream.hpp	/^  ~NotificationStream()$/;"	f	class:nfd::NotificationStream
~NotificationStream	ndn-cxx/src/util/notification-stream.hpp	/^  ~NotificationStream()$/;"	f	class:ndn::util::NotificationStream
~NotificationSubscriber	ndn-cxx/src/util/notification-subscriber.hpp	/^  ~NotificationSubscriber()$/;"	f	class:ndn::util::NotificationSubscriber
~Nrd	NFD/rib/nrd.cpp	/^Nrd::~Nrd()$/;"	f	class:nfd::rib::Nrd
~OsxKeyChainTestFixture	ndn-cxx/tests/unit-tests/security/sec-tpm-osx.t.cpp	/^  ~OsxKeyChainTestFixture()$/;"	f	class:ndn::tests::OsxKeyChainTestFixture
~Pib	ndn-cxx/src/security/pib.cpp	/^Pib::~Pib()$/;"	f	class:ndn::security::Pib
~PibImpl	ndn-cxx/src/security/pib-impl.hpp	/^  ~PibImpl()$/;"	f	class:ndn::security::PibImpl
~PibSqlite3	ndn-cxx/src/security/pib-sqlite3.cpp	/^PibSqlite3::~PibSqlite3()$/;"	f	class:ndn::security::PibSqlite3
~PibSqlite3TestFixture	ndn-cxx/tests/unit-tests/security/pib-sqlite3.t.cpp	/^  ~PibSqlite3TestFixture()$/;"	f	class:ndn::security::tests::PibSqlite3TestFixture
~PibSqlite3Wrapper	ndn-cxx/tests/unit-tests/security/pib-impl.t.cpp	/^  ~PibSqlite3Wrapper()$/;"	f	class:ndn::security::tests::PibSqlite3Wrapper
~PibTmpPathFixture	ndn-cxx/tests/unit-tests/security/sec-public-info-sqlite3.t.cpp	/^  ~PibTmpPathFixture()$/;"	f	class:ndn::tests::PibTmpPathFixture
~Pit	NFD/daemon/table/pit.cpp	/^Pit::~Pit()$/;"	f	class:nfd::Pit
~PitEntryInfo	NFD/daemon/fw/ncc-strategy.cpp	/^NccStrategy::PitEntryInfo::~PitEntryInfo()$/;"	f	class:nfd::fw::NccStrategy::PitEntryInfo
~Policy	NFD/daemon/table/cs-policy.cpp	/^Policy::~Policy()$/;"	f	class:nfd::cs::Policy
~RandomLoadBalancerStrategy	examples/ndn-load-balancer/random-load-balancer-strategy.cpp	/^RandomLoadBalancerStrategy::~RandomLoadBalancerStrategy()$/;"	f	class:nfd::fw::RandomLoadBalancerStrategy
~RegexBackrefManager	ndn-cxx/src/util/regex/regex-backref-manager.hpp	/^RegexBackrefManager::~RegexBackrefManager()$/;"	f	class:ndn::RegexBackrefManager
~RegexBackrefMatcher	ndn-cxx/src/util/regex/regex-backref-matcher.hpp	/^  ~RegexBackrefMatcher()$/;"	f	class:ndn::RegexBackrefMatcher
~RegexComponentMatcher	ndn-cxx/src/util/regex/regex-component-matcher.hpp	/^  ~RegexComponentMatcher()$/;"	f	class:ndn::RegexComponentMatcher
~RegexComponentSetMatcher	ndn-cxx/src/util/regex/regex-component-set-matcher.hpp	/^RegexComponentSetMatcher::~RegexComponentSetMatcher()$/;"	f	class:ndn::RegexComponentSetMatcher
~RegexMatcher	ndn-cxx/src/util/regex/regex-matcher.hpp	/^RegexMatcher::~RegexMatcher()$/;"	f	class:ndn::RegexMatcher
~RegexNameFilter	ndn-cxx/src/security/conf/filter.hpp	/^  ~RegexNameFilter()$/;"	f	class:ndn::security::conf::RegexNameFilter
~RegexPatternListMatcher	ndn-cxx/src/util/regex/regex-pattern-list-matcher.hpp	/^  ~RegexPatternListMatcher()$/;"	f	class:ndn::RegexPatternListMatcher
~RegexPseudoMatcher	ndn-cxx/src/util/regex/regex-pseudo-matcher.hpp	/^  ~RegexPseudoMatcher()$/;"	f	class:ndn::RegexPseudoMatcher
~RegexRepeatMatcher	ndn-cxx/src/util/regex/regex-repeat-matcher.hpp	/^  ~RegexRepeatMatcher()$/;"	f	class:ndn::RegexRepeatMatcher
~RegexTopMatcher	ndn-cxx/src/util/regex/regex-top-matcher.cpp	/^RegexTopMatcher::~RegexTopMatcher()$/;"	f	class:ndn::RegexTopMatcher
~RelationNameFilter	ndn-cxx/src/security/conf/filter.hpp	/^  ~RelationNameFilter()$/;"	f	class:ndn::security::conf::RelationNameFilter
~RemoteRegistrator	NFD/rib/remote-registrator.cpp	/^RemoteRegistrator::~RemoteRegistrator()$/;"	f	class:nfd::rib::RemoteRegistrator
~Rib	NFD/rib/rib.cpp	/^Rib::~Rib()$/;"	f	class:nfd::rib::Rib
~RibManager	NFD/rib/rib-manager.cpp	/^RibManager::~RibManager()$/;"	f	class:nfd::rib::RibManager
~RibManagerFixture	NFD/tests/rib/rib-manager.t.cpp	/^  ~RibManagerFixture()$/;"	f	class:nfd::rib::tests::RibManagerFixture
~RibStatusPublisher	NFD/rib/rib-status-publisher.cpp	/^RibStatusPublisher::~RibStatusPublisher()$/;"	f	class:nfd::rib::RibStatusPublisher
~RocketfuelMapReader	utils/topology/rocketfuel-map-reader.cpp	/^RocketfuelMapReader::~RocketfuelMapReader()$/;"	f	class:ns3::RocketfuelMapReader
~RocketfuelWeightsReader	utils/topology/rocketfuel-weights-reader.cpp	/^RocketfuelWeightsReader::~RocketfuelWeightsReader()$/;"	f	class:ns3::RocketfuelWeightsReader
~RttEstimator	utils/ndn-rtt-estimator.cpp	/^RttEstimator::~RttEstimator()$/;"	f	class:ns3::ndn::RttEstimator
~Rule	ndn-cxx/src/security/conf/rule.hpp	/^  ~Rule()$/;"	f	class:ndn::security::conf::Rule
~ScopedConnection	ndn-cxx/src/util/signal-scoped-connection.cpp	/^ScopedConnection::~ScopedConnection()$/;"	f	class:ndn::util::signal::ScopedConnection
~ScopedEventId	NFD/core/scheduler.cpp	/^ScopedEventId::~ScopedEventId()$/;"	f	class:nfd::scheduler::ScopedEventId
~ScopedEventId	ndn-cxx/src/util/scheduler-scoped-event-id.cpp	/^ScopedEventId::~ScopedEventId()$/;"	f	class:ndn::util::scheduler::ScopedEventId
~SecPublicInfo	ndn-cxx/src/security/sec-public-info.cpp	/^SecPublicInfo::~SecPublicInfo()$/;"	f	class:ndn::SecPublicInfo
~SecPublicInfoSqlite3	ndn-cxx/src/security/sec-public-info-sqlite3.cpp	/^SecPublicInfoSqlite3::~SecPublicInfoSqlite3()$/;"	f	class:ndn::SecPublicInfoSqlite3
~SecRule	ndn-cxx/src/security/sec-rule.hpp	/^  ~SecRule()$/;"	f	class:ndn::SecRule
~SecRuleRelative	ndn-cxx/src/security/sec-rule-relative.cpp	/^SecRuleRelative::~SecRuleRelative()$/;"	f	class:ndn::SecRuleRelative
~SecRuleSpecific	ndn-cxx/src/security/sec-rule-specific.hpp	/^  ~SecRuleSpecific() {};$/;"	f	class:ndn::SecRuleSpecific
~SecTpm	ndn-cxx/src/security/sec-tpm.cpp	/^SecTpm::~SecTpm()$/;"	f	class:ndn::SecTpm
~SecTpmFile	ndn-cxx/src/security/sec-tpm-file.cpp	/^SecTpmFile::~SecTpmFile()$/;"	f	class:ndn::SecTpmFile
~SecTpmOsx	ndn-cxx/src/security/sec-tpm-osx.cpp	/^SecTpmOsx::~SecTpmOsx()$/;"	f	class:ndn::SecTpmOsx
~SecuredBag	ndn-cxx/src/security/secured-bag.cpp	/^SecuredBag::~SecuredBag()$/;"	f	class:ndn::SecuredBag
~SegmentPublisher	NFD/core/segment-publisher.hpp	/^  ~SegmentPublisher()$/;"	f	class:nfd::SegmentPublisher
~SegmentPublisherTester	NFD/tests/core/segment-publisher.t.cpp	/^  ~SegmentPublisherTester()$/;"	f	class:nfd::tests::SegmentPublisherTester
~Signal	ndn-cxx/src/util/signal-signal.hpp	/^Signal<Owner, TArgs...>::~Signal()$/;"	f	class:ndn::util::signal::Signal
~SimpleNotification	NFD/tests/core/simple-notification.hpp	/^  ~SimpleNotification()$/;"	f	class:nfd::tests::SimpleNotification
~SimpleNotification	ndn-cxx/tests/unit-tests/util/simple-notification.hpp	/^  ~SimpleNotification()$/;"	f	class:ndn::util::tests::SimpleNotification
~Slicer	NFD/daemon/face/ndnlp-slicer.cpp	/^Slicer::~Slicer()$/;"	f	class:nfd::ndnlp::Slicer
~Sqlite3Statement	ndn-cxx/src/util/sqlite3-statement.cpp	/^Sqlite3Statement::~Sqlite3Statement()$/;"	f	class:ndn::util::Sqlite3Statement
~Sqlite3StatementTestFixture	ndn-cxx/tests/unit-tests/util/sqlite3-statement.t.cpp	/^  ~Sqlite3StatementTestFixture()$/;"	f	class:ndn::util::tests::Sqlite3StatementTestFixture
~StackHelper	helper/ndn-stack-helper.cpp	/^StackHelper::~StackHelper()$/;"	f	class:ns3::ndn::StackHelper
~Strategy	NFD/daemon/fw/strategy.cpp	/^Strategy::~Strategy()$/;"	f	class:nfd::fw::Strategy
~StrategyChoiceManager	NFD/daemon/mgmt/strategy-choice-manager.cpp	/^StrategyChoiceManager::~StrategyChoiceManager()$/;"	f	class:nfd::StrategyChoiceManager
~StrategyChoiceManagerFixture	NFD/tests/daemon/mgmt/strategy-choice-manager.t.cpp	/^  ~StrategyChoiceManagerFixture()$/;"	f	class:nfd::tests::StrategyChoiceManagerFixture
~StrategyChoicePublisher	NFD/daemon/mgmt/strategy-choice-publisher.cpp	/^StrategyChoicePublisher::~StrategyChoicePublisher()$/;"	f	class:nfd::StrategyChoicePublisher
~StrategyInfo	NFD/daemon/fw/strategy-info.hpp	/^StrategyInfo::~StrategyInfo()$/;"	f	class:nfd::fw::StrategyInfo
~Tag	ndn-cxx/src/tag.hpp	/^Tag::~Tag()$/;"	f	class:ndn::Tag
~TcpTransport	ndn-cxx/src/transport/tcp-transport.cpp	/^TcpTransport::~TcpTransport()$/;"	f	class:ndn::TcpTransport
~TestCountersFace	NFD/tests/daemon/mgmt/face-status-publisher-common.hpp	/^  ~TestCountersFace()$/;"	f	class:nfd::tests::TestCountersFace
~TestFaceManagerCommon	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  ~TestFaceManagerCommon()$/;"	f	class:nfd::tests::TestFaceManagerCommon
~TestFaceTable	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  ~TestFaceTable()$/;"	f	class:nfd::tests::TestFaceTable
~TestFaceTableFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  ~TestFaceTableFixture()$/;"	f	class:nfd::tests::TestFaceTableFixture
~TestHomeEnvironmentFixture	ndn-cxx/tests/unit-tests/util/test-home-environment-fixture.hpp	/^  ~TestHomeEnvironmentFixture()$/;"	f	class:ndn::util::TestHomeEnvironmentFixture
~Transport	ndn-cxx/src/transport/transport.hpp	/^Transport::~Transport()$/;"	f	class:ndn::Transport
~TwoValidatorFixture	NFD/tests/daemon/mgmt/command-validator.t.cpp	/^  ~TwoValidatorFixture()$/;"	f	class:nfd::tests::TwoValidatorFixture
~UnauthorizedCommandFixture	NFD/tests/daemon/mgmt/validation-common.hpp	/^  ~UnauthorizedCommandFixture()$/;"	f	class:nfd::tests::UnauthorizedCommandFixture
~UnitTestTimeFixture	NFD/tests/test-common.hpp	/^  ~UnitTestTimeFixture()$/;"	f	class:nfd::tests::UnitTestTimeFixture
~UnitTestTimeFixture	ndn-cxx/tests/unit-tests/unit-test-time-fixture.hpp	/^  ~UnitTestTimeFixture()$/;"	f	class:ndn::tests::UnitTestTimeFixture
~UnitTestTimeFixture	ndn-cxx/tests/unit-tests/util/time-unit-test-clock.t.cpp	/^  ~UnitTestTimeFixture()$/;"	f	class:ndn::tests::UnitTestTimeFixture
~UnixStreamChannel	NFD/daemon/face/unix-stream-channel.cpp	/^UnixStreamChannel::~UnixStreamChannel()$/;"	f	class:nfd::UnixStreamChannel
~UnixTransport	ndn-cxx/src/transport/unix-transport.cpp	/^UnixTransport::~UnixTransport()$/;"	f	class:ndn::UnixTransport
~ValidatedFaceRequestFixture	NFD/tests/daemon/mgmt/face-manager.t.cpp	/^  ~ValidatedFaceRequestFixture()$/;"	f	class:nfd::tests::ValidatedFaceRequestFixture
~ValidationRequest	ndn-cxx/src/security/validation-request.hpp	/^  ~ValidationRequest()$/;"	f	class:ndn::ValidationRequest
~ValidatorConfig	ndn-cxx/src/security/validator-config.hpp	/^  ~ValidatorConfig()$/;"	f	class:ndn::ValidatorConfig
~ValidatorNull	ndn-cxx/src/security/validator-null.hpp	/^  ~ValidatorNull()$/;"	f	class:ndn::ValidatorNull
~ValidatorRegex	ndn-cxx/src/security/validator-regex.hpp	/^  ~ValidatorRegex()$/;"	f	class:ndn::ValidatorRegex
~const_iterator	NFD/daemon/table/fib.hpp	/^Fib::const_iterator::~const_iterator()$/;"	f	class:nfd::Fib::const_iterator
~const_iterator	NFD/daemon/table/name-tree.hpp	/^inline NameTree::const_iterator::~const_iterator()$/;"	f	class:nfd::NameTree::const_iterator
~const_iterator	NFD/daemon/table/pit.hpp	/^Pit::const_iterator::~const_iterator()$/;"	f	class:nfd::Pit::const_iterator
~const_iterator	NFD/daemon/table/strategy-choice.hpp	/^StrategyChoice::const_iterator::~const_iterator()$/;"	f	class:nfd::StrategyChoice::const_iterator
~enabled	NFD/websocketpp/websocketpp/extensions/permessage_deflate/enabled.hpp	/^    ~enabled() {$/;"	f	class:websocketpp::extensions::permessage_deflate::enabled
~endpoint	NFD/websocketpp/websocketpp/transport/asio/endpoint.hpp	/^    ~endpoint() {$/;"	f	class:websocketpp::transport::asio::endpoint
~exception	NFD/websocketpp/websocketpp/error.hpp	/^    ~exception() throw() {}$/;"	f	class:websocketpp::exception
~exception	NFD/websocketpp/websocketpp/http/constants.hpp	/^        ~exception() throw() {}$/;"	f	class:websocketpp::http::exception
~fake_lock_guard	NFD/websocketpp/websocketpp/concurrency/none.hpp	/^    ~fake_lock_guard() {}$/;"	f	class:websocketpp::concurrency::none_impl::fake_lock_guard
~fake_mutex	NFD/websocketpp/websocketpp/concurrency/none.hpp	/^    ~fake_mutex() {}$/;"	f	class:websocketpp::concurrency::none_impl::fake_mutex
~processor	NFD/websocketpp/websocketpp/processors/processor.hpp	/^    virtual ~processor() {}$/;"	f	class:websocketpp::processor::processor
~scoped_timer	NFD/websocketpp/test/http/parser_perf.cpp	/^    ~scoped_timer() {$/;"	f	class:scoped_timer
~trie	utils/trie/trie.hpp	/^  inline ~trie()$/;"	f	class:ns3::ndn::ndnSIM::trie
~websocket_endpoint	NFD/websocketpp/examples/utility_client/utility_client.cpp	/^    ~websocket_endpoint() {$/;"	f	class:websocket_endpoint
~websocket_endpoint	NFD/websocketpp/tutorials/utility_client/step5.cpp	/^    ~websocket_endpoint() {$/;"	f	class:websocket_endpoint
~websocket_endpoint	NFD/websocketpp/tutorials/utility_client/step6.cpp	/^    ~websocket_endpoint() {$/;"	f	class:websocket_endpoint
